[
('Why Even Use Java 8 Optional?', "Home Users Groups Submit Article Voxxed Days Get Involved Contact Us Register Log Java Mobile JVM Methodology Cloud Big Data Future Even Use Java 8 Optional 20 390 Views May 18 2015 2 Comments Java Nicolai Parlog 0040Java 8 introduced type Optional used handle potentially missing values wrapping reference might null providing nice methods interact value case present Optional see lots others opinion missing crucial point Optional provides way get rid null Well almost even though caveats say benefits worth dealing Overview post going talk Optional prevent NullPointerExceptions making code reveal intentions clearly original plan even explain type use ususal plenty people done already damn easy decided spent 5 minutes explaining moving juicy part post discuss situations might better solutions using Optional claims Optional beats null also address justified criticism Optional promise later Contents hide Introduction Optional Construction Methods Even Use Optional Null Reveal Intention Fail Fast Effects Guessing Meaning Null Thinking Null Tests Null Reflection Share Follow Introduction Optional Optional wrapper class simple functionality Javadoc puts container object may may contain non-null value value present isPresent return true get return value Additional methods depend presence absence contained value provided orElse return default value value present ifPresent execute block code value present Construction three ways create instance Optional empty 'Optional' Java 8 would simply use null reference Optional String empty Optional empty 'Optional' know contain null parameter 'of' null 'NullPointerException' thrown Optional String full Optional String 'Optional' don't know whether contain null Optional String halfFull Optional ofNullable someOtherString ofNullable seems redundnat would ever call first get chance NPE Well read find Methods basic methods Optional two boolean isPresent returns true guessed value present e constructed empty null reference get returns value present otherwise NoSuchElementException thrown means check isPresent whether even value calling get retrieve Optional provides plenty methods used really nice things Check Javadoc search web posts like one find really really like want use even could check EasyBind makes similar functions available JavaFX ObservableValues Even Use Optional none special nothing wrong checking old way whether reference null magic Optional lies neither static factory methods mundane accessor methods lambda-enabling methods beauty Optional name Plain simple elaborate let spend time discussing null Null Let start end say NullPointerException easy kind fix second evil kind makes step code line line trying answer questions Published Geek Poke CC-BY 3 0 null reference come actually reference instance null legal state variable maybe return value method behaves crazy way reason complicated might lead hour long trip rabbit hole null mean different things say variable initialized unintended well nothing making intentional value code distinction exists head author lines produced null reference might able make distinction poor sap gets exception story likely could might thousands lines executed code away reference first created track find author intent intent known decide deal exception checked null valid signifies missing value something special even exist first place file bug subsystem created way make distinction obvious Reveal Intention Using Optional allows express exactly distinction intent express attribute might present time allow optional parameter method overloading option whatever reason tell caller might return value Optional lets express attributes arguments return values non-optional guarantee user API reader code also non-null Additionally intention automatically checked tools like FindBugs return null Optional get without checking isPresent ideas could checked Open ticket SourceForge post comment Fail Fast Another good reason use Optional helps failing fast express assumptions code verified every time executes two static factory methods ofNullable come reference positive null use wrong actually null ll get exception Hence useofNullable reason whether reference null strict point helps lot catching potential bugs early Effects Imagine code base null ever allowed appear parameter return value private methods local variables Everything else e attributes references going coming protected package public methods must never null would like Guessing Meaning Null killer argument Optional case still end NullPointerException let fool obvious still hunt like already know mere existence bug add null checks every step way find source fix guessing involved turn might get NoSuchElementExceptions RememberOptional get throws value present easy fix Simply check first whether value present Thinking Null Another important point stop wasting brain power whether could even legal null reference read docs look code reason whether would even make sense optional must Tests Null corollary readily sprinkle tests null Whether use assertions Objects requireNonNull never ask whether argument might actually allowed null Reflection post argues strongly favor using Java 8 new type Optional stresses main feature name makes obvious often hidden behind types expressed null references might actually value Finally paints picture code base without null would Got comments Optional Maybe want violently disagree join discussion pingback answer post also distilled answer StackOverflow question mentioned comment well View Parleys com 0 votes average 0 00 5 need registered member rate post Loading Source http blog codefx org techniques intention-revealing-code-java-8-optional Tagged Java 8Java 8 Streams APIjava eeJava SEJCPJDKJSRjvmLambdasOptionaloracleParallel Streamsprogramming languagesStringsThreading author Nicolai Parlog View posts m thirty year old boy narrator would put found passion software development constantly read think write code living well fun I'm long tail contributor several open source projects blog software development CodeFX org Related articles Java January 22 2015 Java JVM built Adopt OpenJDK Answer Java November 20 2014 trackr AngularJS App Java 8 Backend Part Java February 04 2015 Common Maven Problems Pitfalls Java September 09 2014 Gerrit Grunwald Giving JavaFX Little Extra Java April 17 2015 IDE Talking Smarter Refactoring IntelliJ IDEA Java March 09 2015 Sneaky Oracle Mac OS X Add-on Prompts New Ask com Rage 2 Comments Jeremy May 28 2015 surface seems pointless effectively still checking null re adding Object level overhead Maybe desirable Java mostly like using Integer instead int latter really need Reply Nicolai Parlog May 28 2015 right null-check using Optional similar intent checking whether something Optional know exactly clearly expresses optionality intended missing value error Something get regular references Regarding object wrapper similar question blog answered Reply Leave Reply Click cancel reply Connect Leave ReplyYour email address published Required fields marked Name E-mail Comment Java Presentations Presentation Java 8 Anger Presentation Runtime Code Generation JVM Presentation Venkat Subramaniam Reactive Programming Java Developers Presentation Java EE 7 Soup Nuts Presentation Project Valhalla Good Bad Ugly Presentation REST Assured Hypermedia APIs Spring MVC Presentation Ask JDK Architects Part 1 Presentation IntelliJ IDEA 42 Tips Tricks Java Interviews Interview IDE Talking Smarter Refactoring IntelliJ IDEA Interview Genius Help Shape Java Look OpenJDK Adopt JSR Interview Heinz Kabutz Impending Parallel Streams Bottleneck Interview Raoul Urma Programming Language Evolution Learning Interview Makes iOS-JVM Link RoboVM Tick Interview Meet GeekOut UK Organisers Interview Miroslav Kopecky Java Concurrency API vs LegoMindStorm Robots Interview Heather Van Cura Pushing Java Forward Java Courses JavaFX Beginners Concurrency Without Pain Learning Java EE 7 Essentials Intro Java Java EE Java EE 7 Bootstrap 90 minutes Java 8 Lambdas Streams Collectors Advanced Java 8 Java 8 Fundamentals Popular Last 24hrsLast 7 daysAll-time Java 9 Project Jigsaw May Break Code 4 676 views Even Use Java 8 Optional 2 452 views Running Java EE Applications Docker Containers Using Maven 460 views Get Docker Guide Total Newbies 224 views Company Soon-to-Be-Formerly-Known-as-Typesafe Rolls ConductR 1 0 186 views Even Use Java 8 Optional 18 245 views Java 9 Project Jigsaw May Break Code 6 413 views Get Docker Guide Total Newbies 1 082 views Java EE Node js Performance 1 008 views Running Java EE Applications Docker Containers Using Maven 986 views Even Use Java 8 Optional 20 390 views Good Microservices Architectures Spell Death Enterprise Service Bus 12 133 views Father Java Opinionated Guide Modern Java Development Part 1 9 563 views Get Docker Guide Total Newbies 8 795 views Java 9 Project Jigsaw May Break Code 6 413 views Recent Posts Oracle Versus Google Four Things Consider Startup Claims Official Images Docker Hub Riddled Security Holes Microservices DevOps Cost Change Basho Adds Spark Offerings New Data Platform Going Dominate Devoxx UK Java Mobile JVM Methodology Cloud Big Data Future Voxxed knowledge sharing platform DNA Devoxx conferences productive relation Parleys com 4th Floor 27-33 Bethnal Green Road London E16LA - UK 44 0 207 613 4688 info voxxed com Follow us Recent Posts Oracle Versus Google Four Things Consider May 28 2015 Startup Claims Official Images Docker Hub Riddled Security Holes May 28 2015 Microservices DevOps Cost Change May 28 2015 Basho Adds Spark Offerings New Data Platform May 27 2015 Going Dominate Devoxx UK May 27 2015 Tag Cloud big data groovy internet things NoSQL Java 8 Streams API scala Parallel Streams Swift java SQL cloud google linux container Android Java SE Lambdas IoT Docker Java 8 JSR javascript methodology programming languages data JCP java ee Red Hat jvm ios maven Threading microservices paas JavaFX mobile JDK Strings oracle devops Eclipse 2015 Copyright Voxxed Rights reserved Read previous post Taking Ozark Test DriveIn article I'll experimenting Ozark Reference Implementation MVC 1 0 candidate inclusion Close"),
('Great Mercurial (HG) Tutorial!', 'Kiln gives complete version control system based Mercurial Branching merging really works Secure hosting servers Seamlessly integrated code review Try Kiln free Mercurial hosting Joel Software Mercurial Home Hg Init Mercurial tutorial Mercurial modern open source distributed version control system compelling upgrade older systems like Subversion user-friendly six-part tutorial Joel Spolsky teaches key concepts Also Fog Creek offers free monthly webinars go basics Mercurial'),
('The Unreasonable Effectiveness of Character-Level Language Models', "Toggle navigation nbviewer FAQ IPython Jupyter Python 2 Kernel View Gist Download Notebook unreasonable effectiveness Character-level Language Models RNNs still cool Yoav Goldberg RNNs LSTMs Deep Learning rage recent blog post Andrej Karpathy great job explaining models train also provides impressive results capable great post interested natural language machine learning neural networks definitely read Go read come back You're back good Impressive stuff huh could network learn immitate input like Indeed quite impressed well However feels readers post impressed wrong reasons familiar unsmoothed maximum-liklihood character level language models unreasonable effectiveness generating rather convincing natural language outputs follows briefly describe character-level maximum-likelihood langauge models much less magical RNNs LSTMs show produce rather convincing Shakespearean prose also show 30 lines python code take care training model generating output Compared baseline RNNs may seem somehwat less impressive impressed explain Unsmoothed Maximum Likelihood Character Level Language Model name quite long idea simple want model whose job guess next character based previous n letters example seen ello next characer likely either commma space assume end word hello letter w believe middle word mellow Humans quite good course seeing larger history makes things easier see 5 letters instead 4 choice space w would much easier call n number letters need guess based order language model RNNs LSTMs potentially learn infinite-order language model guess next character based state supposedly encode previous history restrict fixed-order language model seeing n letters need guess n 1 th one also given large-ish amount text say Shakespear works use would go solving task Mathematiacally would like learn function P c h c character h n -letters history P c h stands likely see c we've seen h Perhaps simplest approach would count divide k maximum likelihood estimates count number times letter c' appeared h divide total numbers letters appearing h unsmoothed part means see given letter following h give probability zero that's Training Code code training model fname file read characters order history size consult Note pad data leading also learn start 41 collections import def train_char_lm fname order 4 data file fname read lm defaultdict Counter pad order data pad data xrange len data -order history char data order data order lm history char 1 def normalize counter float sum counter values return c cnt c cnt counter iteritems outlm hist normalize chars hist chars lm iteritems return outlm Let's train Andrej's Shakespears's text 42 wget http cs stanford edu people karpathy char-rnn shakespeare_input txt --2015-05-23 02 05 18-- http cs stanford edu people karpathy char-rnn shakespeare_input txt Resolving cs stanford edu cs stanford edu 171 64 64 64 Connecting cs stanford edu cs stanford edu 171 64 64 64 80 connected HTTP request sent awaiting response 200 OK Length 4573338 4 4M text plain Saving shakespeare_input txt shakespeare_input 100 4 36M 935KB 8 8s 2015-05-23 02 05 49 507 KB - shakespeare_input txt saved 4573338 4573338 43 lm train_char_lm shakespeare_input txt order 4 Ok let's queries 44 lm 'ello' 44 ' ' 0 0068143100511073255 ' ' 0 013628620102214651 ' 0 017035775127768313 ' ' 0 027257240204429302 ' ' 0 0068143100511073255 'r' 0 059625212947189095 'u' 0 03747870528109029 'w' 0 817717206132879 'n' 0 0017035775127768314 ' ' 0 005110732538330494 ' ' 0 0068143100511073255 45 lm 'Firs' 45 't' 1 0 46 lm 'rst ' 46 ' 0 0008025682182985554 'A' 0 0056179775280898875 'C' 0 09550561797752809 'B' 0 009630818619582664 'E' 0 0016051364365971107 'D' 0 0032102728731942215 'G' 0 0898876404494382 'F' 0 012038523274478331 'I' 0 009630818619582664 'H' 0 0040128410914927765 'K' 0 008025682182985553 'M' 0 0593900481540931 'L' 0 10674157303370786 'O' 0 018459069020866775 'N' 0 0008025682182985554 'P' 0 014446227929373997 'S' 0 16292134831460675 'R' 0 0008025682182985554 'T' 0 0032102728731942215 'W' 0 033707865168539325 'a' 0 02247191011235955 'c' 0 012841091492776886 'b' 0 024879614767255216 'e' 0 0032102728731942215 'd' 0 015248796147672551 'g' 0 011235955056179775 'f' 0 011235955056179775 'i' 0 016853932584269662 'h' 0 019261637239165328 'k' 0 0040128410914927765 'm' 0 02247191011235955 'l' 0 01043338683788122 'o' 0 030497592295345103 'n' 0 020064205457463884 'q' 0 0016051364365971107 'p' 0 00882825040128411 's' 0 03290529695024077 'r' 0 0072231139646869984 'u' 0 0016051364365971107 't' 0 05377207062600321 'w' 0 024077046548956663 'v' 0 002407704654895666 'y' 0 002407704654895666 ello followed either space punctuation w r u n Firs pretty much deterministic word following ist start pretty much every letter Generating model Generating also simple generate letter take history look last order characteters sample random letter based corresponding distribution 47 random import random def generate_letter lm history order history history -order dist lm history x random c v dist x x - v x 0 return c generate passage k characters seed initial history run letter generation loop updating history turn 48 def generate_text lm order nletters 1000 history order xrange nletters c generate_letter lm history order history history -order c append c return join Generated Shakespeare different order models Let's try generate text based different language-model orders Let's start something silly order 2 35 lm train_char_lm shakespeare_input txt order 2 print generate_text lm 2 Fif thad yourty Fare sid Che al sheace ing Thy thy ove dievest sord wit whand sold iset Commet laund hant KINCESARGANT aboy tur Pome musicell losts blover difte quainge sh usbas ey Chor bacterea mens grou Princeser 'Tis hends ing noth much Lo withiell thicest se nourink gray the's ge fat requand pink menis lat sall favere whathews frevisars FLAVIIIII Whout les MACUS O -- Hie thout nown mis yought Phimne shappy bley sirs --Ha Hart frow mas gen SEY Herfe inese vereat voter'd theave shashall er ist hem thdre mare Lovenat bree shatteed Besat's giverve se FLANY Whis I'll-volover man hitinut thadarthopeatund wing pourisforniners dinguent liked withe brave heiry fore ist Fain Thess kno st witund nothousto yesty art stry son ford bas sood cal love thys th tund great increase order 4 order 4 36 lm train_char_lm shakespeare_input txt order 4 print generate_text lm 4 First devishin son MONTANO 'Tis true full Squellen rest passacre nothink fairs ' done vision actious thy love brings gods THUR comfited flight offend make thy love Brothere oats thes '--why cross shouldestruck one hearina go lives Costag tyrant fill hath trouble KING JOHN Great though gain talk mine Christ right kiss kindness loves Gower stray ever flight wild ebbs fair knowned worship asider thyself-skin ever eat behold speak imposed thy hand Give cours sweet sorrow gone prince see likewis thee hearts kiss come eanly fire prince 'twixt young piece honourish fort 37 lm train_char_lm shakespeare_input txt order 4 print generate_text lm 4 First Office masters part may direct brance would dead Pleaseth profit last awaked Far night I'll courteous Herneath circle SPEED PEDRO preferment DUCHESS QUICKLY Rome other's chamber tears head VIRGILIA O show bowls thouse two hones loved proned speaking shrought upon shall affect onest man Milford's worth boundeserts woman great that's noble upon burth one well surfew-begot thy daughed trib trumpet Sever heave First truth marry Troilus' mouth'd rever hang cond Malvolio EXETER Blists speak morn back would soverdities fatherefore pate rever mirth let thoughts Orsino's heard make methink Oxford name GONZALO reason known Yet care Moor-worm DUCHESS O partles father already quite reasonable reads like English 4 letters history increase 7 order 7 38 lm train_char_lm shakespeare_input txt order 7 print generate_text lm 7 First Citizen One graves Within rich Pisa walls noses snapper-up uncurrent roar'd HOTSPUR Hath call bear admiration young BIRON One word FALSTAFF Ay good Lord sir OCTAVIUS Philarmonus Soothsayer Worthy's thumb-ring green-a box MISTRESS QUICKLY Ay sir CADE would unstate Vexed one royal cheer yon strangers boast God speed CHIRON virtue years prodigious farthing whether deigned already Widow master's pleasure COUNTESS Timon else FALSTAFF Prithee gone CONSTANCE compiled iniquity walked Gentleman Ay Philip Madam Juliet go thou shall forth Silvia Silvia--witness come know heart-string picked must nothing valour put opening Widow Thus met wife' there's Bohemia much bosom stay brav 10 39 lm train_char_lm shakespeare_input txt order 10 print generate_text lm 10 First Citizen Nay speaks service since youth circumstance spoken uncle one Baptista's daughter SEBASTIAN stand till break BIRON Hide thy head VENTIDIUS purposeth Athens whither vow made handle FALSTAFF good knave MALVOLIO Sad lady could forgiven you're welcome Give ear sir doublet hose leave present death Second Gentleman may confess lord enraged forestalled ere come man Drown thyself APEMANTUS Ho ho laugh see beard BOYET Madam great extremes passion discovers PAROLLES white head wit Values sepulchre ' lord business let's away First Keeper Forbear murder wilt thou say lies lies let devil would said sir speed Hath balm heal woes B works pretty well order 4 already get quite reasonable results Increasing order 7 word half history 10 two short words history already gets us quite passable Shakepearan text I'd say par examples Andrej's post simple un-mystical model impressed RNNs Generating English character time -- impressive view RNN needs learn previous n letters rather small n that's However code-generation example impressive context awareness Note posted examples code well indented braces brackets correctly nested even comments start end correctly something achieved simply looking previous n letters examples cherry-picked output generally nice LSTM learn something trivial fun let's see simple language model linux-kernel code 49 wget http cs stanford edu people karpathy char-rnn linux_input txt --2015-05-23 02 07 59-- http cs stanford edu people karpathy char-rnn linux_input txt Resolving cs stanford edu cs stanford edu 171 64 64 64 Connecting cs stanford edu cs stanford edu 171 64 64 64 80 connected HTTP request sent awaiting response 200 OK Length 6206996 5 9M text plain Saving linux_input txt linux_input txt 100 5 92M 1 10MB 9 3s 2015-05-23 02 08 09 654 KB - linux_input txt saved 6206996 6206996 50 lm train_char_lm linux_input txt order 10 print generate_text lm 10 linux kernel time c Please report hardware void irq_mark_irq unsigned long old_entries eval Divide 1000 ns 2 - us 2 conversion values don't overflow seq_puts m ttramp pS void class- contending_point likely t- flags WQ_UNBOUND Update inode information slowpath sleep time abs rel rmtp remaining either due consume state ring buffer size header_size - size bytes chain BUG_ON error cgrp old kdb_continue_catastrophic endif deadlock n return 0 endif info- hdr return diag sharing problem roundup collection better readable 0 rp- maxactive max_t u64 delay 10000LL __hrtimer_get_res - get timer timer hrtimer sched_clock_data my_rdp bool oneshot tick_oneshot_mask GFP_KERNEL free_cpumask_v 51 lm train_char_lm linux_input txt order 15 print generate_text lm 15 linux kernel power snapshot c file licensed terms GNU General Public License detailed information memory ordering guarantees cgroups bigger numbers newer smaller numbers Also csses always appended parent put ref cgroup freed let's make sure every task struct event- ctx- task could possibly point remains valid condition satisfied called perf_event_init_context child ctxn ret pr_err Module len lu truncated n info- len return -ENOMEM env- prog prog grab mutex protect coming going jump_label table static const struct user_regset find_regset const struct cpumask cpu_map int diag 0 kdb_printf go must execute entry cpu please use cpu d execute go n kdb_initial_cpu Used single threaded 52 lm train_char_lm linux_input txt order 20 print generate_text lm 20 linux kernel irq spurious c Copyright C 2004 Nadia Yvette Chambers include linux irq h include linux mutex h include linux capability h include linux suspend h include linux shm h include asm uaccess h include linux interrupt h include kdb_private h Table kdb_breakpoints kdb_bp_t kdb_breakpoints KDB_MAXBPT static void kdb_setsinglestep struct pt_regs regs struct swevent_htable swhash per_cpu swevent_htable cpu mutex_lock swhash- hlist_mutex swhash- online true swhash- hlist_refcount swevent_hlist_release swhash mutex_unlock show_mutex return 0 Unshare file descriptor table shared static int unshare_fs unsigned long unshare_flags struct cred new_cred struct cred cred current_cred retval -EPERM rgid gid_t -1 gid_eq old- gid kegid gid_eq old- sgid kegid gid_eq old- sgid kegid gid_eq old- egid 53 print generate_text lm 20 linux kernel irq chip c Copyright 2003-2004 Red Hat Inc Durham North Carolina Rights Reserved Copyright c 2009 Wind River Systems Inc Copyright C 2008 Thomas Gleixner tglx timesys com code based David Mills's reference nanokernel implementation mostly rewritten keeps idea void __hardpps const struct timespec tp ktime_get_real_ts tp return 0 Walks iomem resources calls func matching resource ranges walks whole tree first level children memory ranges overlap start end also match flags name valid candidates name name resource flags resource flags start start addr end end addr int walk_iomem_res char name unsigned long val static int alloc_snapshot struct trace_array tr struct dentry d_tracer d_tracer tracing_init_dentry void struct trace_array tr wakeup_t 55 print generate_text lm 20 nletters 5000 linux kernel irq resend c Copyright C 2008 Steven Rostedt srostedt redhat com Copyright C 2002 Khalid Aziz khalid_aziz hp com Copyright C 2002 Richard Henderson Copyright C 2001 Rusty Russell 2002 2010 Rusty Russell IBM program distributed hope useful WITHOUT WARRANTY without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE See GNU General Public License published Free Software Foundation Inc 51 Franklin St - Fifth Floor Boston MA 02110-1301 USA include linux cpuset h include linux sched deadline h include linux ioport h include linux fs h include linux export h include linux mm h include linux ptrace h include linux profile h include linux smp h include linux proc_fs h include linux interrupt h include kdb_private h Table kdb_breakpoints kdb_bp_t kdb_breakpoints KDB_MAXBPT static void kdb_setsinglestep struct pt_regs regs static int uretprobe_dispatcher struct uprobe_consumer con int ret -ENOENT spin_lock hash_lock tree- goner spin_unlock hash_lock fsnotify_put_mark parent- mark static void cpu_cgroup_css_offline fork cpu_cgroup_fork can_attach cpu_cgroup_can_attach struct cgroup_subsys_state last last pos - prev isn't RCU safe walk - next till end pos NULL css_for_each_child pos css struct freezer parent parent_freezer freezer mutex_lock freezer_mutex rcu_read_lock list_for_each_entry_safe owatch nextw parent- watches wlist audit_compare_dname_path const char dname const char path int parentlen int dlen pathlen const char p dlen strlen dname pathlen strlen path pathlen dlen return 1 parentlen parentlen AUDIT_NAME_FULL parent_len path parentlen pathlen - parentlen dlen return 1 p path parentlen return strncmp p dname dlen static int audit_log_pid_context context context- target_pid context- target_sessionid context- target_auid context- target_uid context- target_sessionid context- target_sid context- target_comm t- comm TASK_COMM_LEN return 0 spin_lock_mutex lock- wait_lock flags schedule raw_spin_lock_init rq- lock rq- nr_running 0 rq- calc_load_active nr_active return delta a1 a0 e 1 - e e 1 - e a0 e 2 1 - e 1 - e n 1 - e a0 e 2 1 - e 1 e e n-1 1 a0 e n 1 - e 1 e e 2 a0 e n 1 - e 1 e e n-1 1 a0 e n 1 - e 1 e a3 a2 e 1 - e a2 a1 e 1 - e a0 e 2 1 - e 1 - e n 1 - e a0 e 2 1 - e 1 e e 2 a0 e n 1 - e n 1 application geometric series '0' '1' n static void l_start struct seq_file file void v loff_t offset unsigned long flags spin_lock_irqsave timekeeper_lock flags global_trace stop_count tracing_is_enabled - Show global_trace disabled Shows global trace enabled uses mirror flag buffer_disabled used fast paths irqsoff tracer may inaccurate due races need know accurate state use tracing_is_on little slower accurate int tracing_is_enabled tracer_enabled 0 unregister_wakeup_function tr graph 0 ret tracing_is_enabled return local_irq_save flags gdbstub_msg_write count local_irq_restore flags -ENOENT try_to_grab_pending work is_dwork flags someone else already canceling wait finish flush_work doesn't work PREEMPT_NONE may get scheduled work's completion canceling task resuming clearing CANCELING - flush_work return false immediately work longer busy try_to_grab_pending struct work_struct work unsigned long data atomic_long_read rsp- expedited_done ULONG_CMP_GE jiffies rdp- rsp- gp_start 2 jiffies return 0 Grace period old enough barrier local_read cpu_buffer_a- committing goto out_dec local_read cpu_buffer- overrun local_sub BUF_PAGE_SIZE cpu_buffer- entries_bytes entries zeroed move tail page still break case RB_PAGE_UPDATE really fixup work struct statically initialized make sure tracked object tracker debug Order 10 pretty much junk order 15 things sort-of make sense jump abruptly order 20 quite nicely -- far keeping good indentation brackets could memory things modeled could quite easily enrich model support also keeping track brackets indentation adding information seen conditioning history requires extra work non-trivial human reasoning make model significantly complex LSTM hand seemed learn that's impressive Back top web site host notebooks renders notebooks available websites Delivered Fastly Rendered Rackspace nbviewer GitHub repository nbviewer version f399a06 IPython version 3 2 0-dev 5e57377 Rendered Thu 28 May 2015 17 17 14 UTC"),
('Interpreter, Compiler, JIT', "Nick Desaulniers enemy's gate RSS Archives Blog Publications Talks Interpreter Compiler JIT May 25th 2015 Comments Interpreters compilers interesting programs used run translate programs respectively programs might interpreted might languages like JavaScript Ruby Python PHP Perl programs might compiled C C extent Java C Taking time translation native machine code ahead time result better performance runtime interpreter get work right away without spending time translating happens sweet spot somewhere interpretation compilation combines best worlds technique called Time JIT compiling interpreting compiling JIT ing code might sound radically different re actually strikingly similar post hope show similar comparing code interpreter compiler JIT compiler language Brainfuck around 100 lines C code code post GitHub Brainfuck interesting hard read language eight operations perform - yet Turing complete nothing really lex character token token one eight operators ignored also much grammar parse forward jumping backwards jumping operators matched well formed input post ll skip validating input assuming well formed input focus interpretation code generation read Wikipedia page ll using reference throughout Brainfuck program operates 30 000 element byte array initialized zeros starts instruction pointer initially points first element data array tape C code interpreter might look like 1 2 3 4 5 Initialize tape 30 000 zeroes unsigned char tape 30000 0 Set pointer point left cell tape unsigned char ptr tape since re performing operation character Brainfuck source loop every character nested switch statement containing case statements operator first two operators increment decrement data pointer 1 2 case ' ' ptr break case ' ' --ptr break One thing could bad interpreter written C re representing tape array re validating inputs potential stack buffer overrun since re performing bounds checks punting assuming well formed input keep code point precise Next - operators used incrementing decrementing cell pointed data pointer one 1 2 case ' ' ptr break case '-' -- ptr break operators provide Brainfuck means input output writing value pointed instruction pointer stdout ASCII value reading one byte stdin ASCII value writing cell pointed instruction pointer 1 2 case ' ' putchar ptr break case ' ' ptr getchar break Finally looping constructs definition Wikipedia byte data pointer zero instead moving instruction pointer forward next command jump forward command matching command byte data pointer nonzero instead moving instruction pointer forward next command jump back command matching command interpret 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 case ' ' ptr int loop 1 loop 0 unsigned char current_char input current_char ' ' --loop else current_char ' ' loop break case ' ' ptr int loop 1 loop 0 unsigned char current_char input --i current_char ' ' --loop else current_char ' ' loop break variable loop keeps track open brackets ve seen matching close bracket aka nested depth see interpreter quite basic around 50 SLOC able read byte immediately perform action based operator perform operation might fastest though want compile Brainfuck source code native machine code Well need know little bit host machine Instruction Set Architecture ISA Application Binary Interface ABI rest code post portable C code since assumes x86-64 ISA UNIX ABI would good time take detour learn writing assembly x86-64 interpreter even portable enough build Emscripten run browser compiler ll iterate every character source file switching recognized operator time instead performing action right away ll print assembly instructions stdout requires running compiler input file redirecting stdout file running system assembler linker file ll stick compiling assembling though difficult linking First need print prologue compiled code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 const char const prologue text n globl _main n _main n pushq rbp n movq rsp rbp n pushq r12 n store callee saved register subq 30008 rsp n allocate 30 008 B stack realign leaq rsp rdi n address beginning tape movl 0 esi n fill 0's movq 30000 rdx n length 30 000 B call _memset n memset movq rsp r12 puts prologue linking phase ll make sure link libc call memset re backing callee saved registers ll using stack allocating tape realigning stack x86-64 ABI point 1 copying address item stack register first argument setting second argument constant 0 third arg 30000 calling memset Finally use callee saved register r12 instruction pointer address value stack expect call memset result segfault simply subtract 30000B realign 2 registers 64 b 8 B pushed stack first pushed register aligns stack 16 B boundary second misaligns allocate additional 8 B stack x86-64 ABI point 1 stack mis-aligned upon function entry x86-64 30000 multiple 16 Moving instruction pointer modifying pointed value - straight-forward 1 2 3 4 5 6 7 8 9 10 11 12 case ' ' puts inc r12 break case ' ' puts dec r12 break case ' ' puts incb r12 break case '-' puts decb r12 break output need copy pointed byte register first argument putchar explicitly zero register calling putchar since takes int 32 b re copying char 8 b Look C type promotion rules info x86-64 instruction movzXX first X source size b w second destination size w l q Thus movzbl moves byte 8 b double word 32 b rdi edi register rdi full 64 b register edi lowest least significant 32 b 1 2 3 4 5 6 case ' ' move byte double word zero upper bits since putchar takes int puts movzbl r12 edi puts call _putchar break Input easy call getchar move resulting lowest byte cell pointed instruction pointer al lowest 8 b 64 b rax register 1 2 3 4 case ' ' puts call _getchar puts movb al r12 break usual looping constructs much work match jumps matching labels assembly program labels must unique One way solve whenever encounter opening brace push monotonically increasing number represents numbers opening brackets ve seen far onto stack like data structure comparison jump label produced matching close label Next insert starting label finally increment number brackets seen 1 2 3 4 5 6 case ' ' stack_push stack num_brackets puts cmpb 0 r12 printf je bracket_ d_end n num_brackets printf bracket_ d_start n num_brackets break close brackets pop number brackets seen rather number pending open brackets yet see matching close bracket stack comparison jump matching start label finally place end label 1 2 3 4 5 6 case ' ' stack_pop stack matching_bracket puts cmpb 0 r12 printf jne bracket_ d_start n matching_bracket printf bracket_ d_end n matching_bracket break sequential loops expect relevant assembly look like 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cmpb 0 r12 je bracket_0_end bracket_0_start cmpb 0 r12 jne bracket_0_start bracket_0_end cmpb 0 r12 je bracket_1_end bracket_1_start cmpb 0 r12 jne bracket_1_start bracket_1_end nested loops expect assembly like following note difference order numbered start end labels 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 cmpb 0 r12 je bracket_0_end bracket_0_start cmpb 0 r12 je bracket_1_end bracket_1_start cmpb 0 r12 jne bracket_1_start bracket_1_end cmpb 0 r12 jne bracket_0_start bracket_0_end Finally need epilogue clean stack callee saved registers 1 2 3 4 5 6 const char const epilogue addq 30008 rsp n clean tape stack popq r12 n restore callee saved register popq rbp n ret n puts epilogue compiler pain modifying running Brainfuck program takes couple extra commands compile Brainfuck program assembly assemble assembly object file link executable run whereas interpreter run trade compiled version quite bit faster much faster Let save later Wouldn nice translation execution technique didn force us compile code every time changed wanted run also performance closer compiled code JIT compiler comes basics JITing code make sure read previous article basics JITing code C re going follow technique creating executable memory copying bytes memory casting function pointer calling like interpreter compiler re going unique action recognized token different operator re going push opcodes dynamic array way grow based sequential reading input simplify calculation relative offsets branching operations special thing re going re going pass address libc functions memset putchar getchar JIT ed function runtime avoids kooky stub functions might see disassembled executable means ll invoking JIT ed function like 1 2 3 4 5 typedef void fn_memset void int size_t typedef int fn_putchar int typedef int fn_getchar void jitted_func fn_memset fn_putchar fn_getchar mem jitted_func memset putchar getchar mem mmap ed executable memory opcodes copied typedef respective function signatures function pointers ll passing JIT ed code re kind getting ahead knowing invoke dynamically created executable code give us idea code work prologue quite bit involved ll take step time First usual prologue 1 2 3 char prologue 0x55 push rbp 0x48 0x89 0xE5 mov rsp rbp want back callee saved registers ll using Expect horrific difficult debug bugs forget 1 2 3 0x41 0x54 pushq r12 0x41 0x55 pushq r13 0x41 0x56 pushq r14 point rdi contain address memset rsi contain address putchar rdx contain address getchar see x86-64 ABI point 2 want store callee saved registers calling else may clobber rdi rsi rdx since re callee saved rather call clobbered See x86-64 ABI point 4 1 2 3 0x49 0x89 0xFC movq rdi r12 0x49 0x89 0xF5 movq rsi r13 0x49 0x89 0xD6 movq rdx r14 point r12 contain address memset r13 contain address putchar r14 contain address getchar Next allocating 30008 B stack 1 0x48 0x81 0xEC 0x38 0x75 0x00 0x00 subq 30008 rsp first hint numbers whose value larger maximum representable value byte represented x86-64 instruction value 30008 answer 4 byte sequence 0x38 0x75 0x00 0x00 x86-64 architecture Little Endian means least significant bit LSB first significant bit MSB last humans math typically represent numbers way Big Endian Thus write decimal ten 10 01 means 0x38 0x75 0x00 0x00 Little Endian 0x00 0x00 0x75 0x38 Big Endian 7 16 3 5 16 2 3 16 1 8 16 0 30008 decimal amount bytes want subtract stack re allocating additional 8 B stack alignment requirements similar compiler pushing even numbers 64 b registers need realign stack pointer Next prologue set call memset 1 2 3 4 5 6 7 8 address beginning tape 0x48 0x8D 0x3C 0x24 leaq rsp rdi fill 0's 0xBE 0x00 0x00 0x00 0x00 movl 0 esi length 30 000 B 0x48 0xC7 0xC2 0x30 0x75 0x00 0x00 movq 30000 rdx memset 0x41 0xFF 0xD4 callq r12 invoking memset rdi rsi rcx contain garbage values since call clobbered registers point longer need memset use r12 instruction pointer rsp point top technically bottom stack beginning memset ed tape end prologue 1 2 0x49 0x89 0xE4 movq rsp r12 push prologue dynamic array implementation 1 vector_push instruction_stream prologue sizeof prologue iterate Brainfuck program switch operations pointer increment decrement nudge r12 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 case ' ' char opcodes 0x49 0xFF 0xC4 inc r12 vector_push instruction_stream opcodes sizeof opcodes break case ' ' char opcodes 0x49 0xFF 0xCC dec r12 vector_push instruction_stream opcodes sizeof opcodes break extra fun block switch statement C C define variables branches switch statements Pointer deref increment decrement equally uninspiring 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 case ' ' char opcodes 0x41 0xFE 0x04 0x24 incb r12 vector_push instruction_stream opcodes sizeof opcodes break case '-' char opcodes 0x41 0xFE 0x0C 0x24 decv r12 vector_push instruction_stream opcodes sizeof opcodes break O might interesting x86-64 opcode calling function end pointer r13 contains address putchar r14 contains address getchar 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 case ' ' char opcodes 0x41 0x0F 0xB6 0x3C 0x24 movzbl r12 edi 0x41 0xFF 0xD5 callq r13 vector_push instruction_stream opcodes sizeof opcodes break case ' ' char opcodes 0x41 0xFF 0xD6 callq r14 0x41 0x88 0x04 0x24 movb al r12 vector_push instruction_stream opcodes sizeof opcodes break looping constructs get fun part compiler deferred concept relocation assembler simply emitted labels assembler turned relative offsets jumps values relative last byte jump instruction ve found Catch-22 though many bytes forward jump matching close bracket haven seen yet Normally assembler might data structure known relocation table keeps track first byte label jumps rewriting jumps-to-labels aren kept around resulting binary executable relative jumps Spidermonkey Firefox JavaScript Virtual Machine two classes MacroAssembler Label Spidermonkey embeds linked list opcodes generates jumps yet see label finds label walks linked list embedded emitted instruction stream patching locations goes Brainfuck anything quite fancy since label ends one jump site Instead use stack integers offsets dynamic array relocation know exactly re jumping 1 2 3 4 5 6 7 8 9 10 11 case ' ' char opcodes 0x41 0x80 0x3C 0x24 0x00 cmpb 0 r12 Needs patched 0x0F 0x84 0x00 0x00 0x00 0x00 je 32b relative offset 2's compliment LE vector_push instruction_stream opcodes sizeof opcodes stack_push relocation_table instruction_stream size create label break First push compare jump opcodes leave relative offset blank four zero bytes come back patch later push current length dynamic array happens offset instruction stream next instruction relocation magic happens case closing bracket 1 2 3 4 5 6 7 8 9 10 case ' ' char opcodes 0x41 0x80 0x3C 0x24 0x00 cmpb 0 r12 Needs patched 0x0F 0x85 0x00 0x00 0x00 0x00 jne 33b relative offset 2's compliment LE vector_push instruction_stream opcodes sizeof opcodes First push comparison jump instructions dynamic array know relative offset need jump back point thus need push four empty bytes makes following math little simpler done yet case 1 2 3 4 stack_pop relocation_table relocation_site relative_offset instruction_stream size - relocation_site pop matching offset dynamic array matching open bracket calculate difference current size instruction stream matching offset get relative offset interesting offset equal magnitude forward backwards jumps need patch simply go back instruction stream 4 B write relative offset negated 32 b LE number patching backwards jump go back site forward jump minus 4 B write relative offset 32 b LE number patching forwards jump 1 2 3 4 vector_write32LE instruction_stream instruction_stream size - 4 -relative_offset vector_write32LE instruction_stream relocation_site - 4 relative_offset break Thus writing JIT one must worry manual relocation Intel 64 IA-32 Architectures Software Developer Manual Volume 2 2A 2B 2C Instruction Set Reference A-Z relative offset rel8 rel16 rel32 generally specified label assembly code machine code level encoded signed 8-bit 32-bit immediate value added instruction pointer last thing push onto instruction stream clean code epilogue 1 2 3 4 5 6 7 8 9 10 char epilogue 0x48 0x81 0xC4 0x38 0x75 0x00 0x00 addq 30008 rsp restore callee saved registers 0x41 0x5E popq r14 0x41 0x5D popq r13 0x41 0x5C popq r12 0x5d pop rbp 0xC3 ret vector_push instruction_stream epilogue sizeof epilogue dynamic array bytes isn really useful need create executable memory size current instruction stream copy machine opcodes cast function pointer call finally clean 1 2 3 4 5 6 7 void mem mmap NULL instruction_stream size PROT_WRITE PROT_EXEC MAP_ANON MAP_PRIVATE -1 0 memcpy mem instruction_stream data instruction_stream size void jitted_func fn_memset fn_putchar fn_getchar mem jitted_func memcpy putchar getchar munmap mem instruction_stream size vector_destroy instruction_stream Note could used instruction stream rewinding technique move address memset putchar getchar 64 b immediate values r12- r14 would simplified JIT d function type signature Compile function JIT compile execute Brainfuck roughly 141 SLOC make changes Brainfuck program recompile like Brainfuck compiler Hopefully becoming apparent similar interpreter compiler JIT behave interpreter immediately execute operation compiler emit equivalent text based assembly instructions corresponding higher level language might get translated interpreter JIT emit binary opcodes executable memory manually perform relocation binary opcodes equivalent text based assembly might emit compiler production ready JIT would probably macros operation JIT would perform code would look like compiler rather raw arrays bytes though preprocessor would translate macros entire process basically disassembling C code gobjdump -S -M suffix punching hex like one would Gameshark Compare pointer incrementing three Interpreter 1 case ' ' ptr break Compiler 1 2 3 case ' ' puts inc r12 break JIT 1 2 3 4 5 6 7 8 case ' ' char opcodes 0x49 0xFF 0xC4 inc r12 vector_push instruction_stream opcodes sizeof opcodes break compare full sources interpreter compiler JIT 100 lines code fairly easy digest Let examine performance three One longer running Brainfuck programs find one prints Mandelbrot set ASCII art stdout Running UNIX command time interpreter compiled result JIT expect numbers similar 1 2 3 4 5 6 7 8 time interpreter samples mandelbrot b 43 54s user 0 03s system 99 cpu 43 581 total compiler samples mandelbrot b temp assemble sh temp time 3 24s user 0 01s system 99 cpu 3 254 total time jit samples mandelbrot b 3 27s user 0 01s system 99 cpu 3 282 total interpreter order magnitude slower compiled result run JIT interpreter isn able jump back forth efficiently compiler JIT since scans back forth matching brackets O N two jump need go instructions O 1 production interpreter would probably translate higher level language byte code thus able calculate offsets used jumps directly rather scanning back forth interpreter bounces back forth looking operation something based operation lookup etc compiler JIT preform translation first execution interleaving two compiled result fastest expected since doesn overhead JIT read input file build instructions execute runtime compiler read translated input file ahead time take account time takes compile source code run 1 2 time compiler samples mandelbrot b temp assemble sh temp 3 27s user 0 08s system 99 cpu 3 353 total Including time takes compile code run compiled results slightly slower JIT though bet multiple processes start suspect JIT pay price compile every time run code compiler pay tax compilation time cheap case Brainfuck compiler JIT makes sense prefer JIT allows us quickly make changes code re-run compilation expensive might want pay compilation tax especially plan running program repeatedly JIT neat compared compilers complex implement also repeatedly re-parse input files re-build instruction streams runtime shine bridging gap dynamically typed languages runtime much dynamic thus harder impossible optimize ahead time able jump JIT d native code interpreter back gives best interpreted compiled worlds Posted Nick Desaulniers May 25th 2015 Brainfuck C JIT compiler interpreter time Tweet Hidden Plain Sight - Public Key Crypto Comments Please enable JavaScript view comments powered Disqus Recent Posts Interpreter Compiler JIT Hidden Plain Sight - Public Key Crypto Writing First Technical Book Chapter Let's Write X86-64 Write Test Case GitHub Repos Status updating nickdesaulniers GitHub Copyright 2015 - Nick Desaulniers - Powered Octopress"),
("Naming Classes Without a 'Manager'", "Naming Java Classes Without 'Manager' Naming Java Classes Without 'Manager' 5 PM February 25 2003 many classes come across named 'SomethingManager' decent sized commercial system seems plenty - SessionManager ConnectionManager PolicyManager QueueManager UrlManager ConfigurationManager even sadly EJBManager quick look dictionary entry manager manage gives least ten different meanings - make keep compliant achieve one's purpose remember one day receptionist briefly retitled Switchboard Manager common semantic definitions seem vague looks stuff imprecision makes Manager bad word use naming classes instance take class named UrlManager - cannot tell whether pool URLs manipulates URLs audits use name tells URL somehow work hand name UrlBuilder gives much better picture class Java world seems Manager suffix thrown around lot Almost anywhere class responsible way objects automatically gets Manager label Manager come danger signal - warning lack thought behalf application's designer either means designer couldn't bothered thinking truly descriptive name begs question else couldn't designer bothered b designer hadn't carefully thought role responsiblities class 1 Manager therefore placed list Words Never Used Naming Classes list full reads Manager suffix Object suffix prefix prefix profanity anywhere 2 Since I've banned Manager behooves suggest better alternatives Herder Herder looks things stupid look Taking insurance domain example let's say whole bunch Policy domain objects application constructs multiple datasources might PolicyHerder find store delete policies across various data sources ensure Policy accessed one agent time audit changes Policies Shepherd Wrangler could used you'd like avoid association cows Bucket Bucket place stick stuff don't need hold situation need bucket pooling connections external resource want connection take one ConnectionBucket finished put back Pool computer-sciency feel means thing Supervisor Supervisor implies allocating work checking progress sytem handling workflow users object responsible balancing units work amongst user queues could properly called QueueSupervisor plenty words use describe objects interact coordinate responsible others Auditor Gatekeeper Coordinator Planner Home Utility Builder come mind trick succinct accurate next time feel tempted name class XyzManager pause moments grab thesaurus find exactly right words helpfully descriptive name making world kinder gentler understandable place 1 don't count innocent particular coding sin 2 good list suggests TheBloodyManagerObject bad name class right alang Comments 6 Posted Software Development Comments 00 35 26 Feb 2003 weolopez wrote hit one biggest biggest pet programming peeve suggestion always make people rethink object structure likely split functionality multiple objects dump suffix call object make management functionality method names like URLManager make URL Let objects manage selves need class pool URLs create URLPool class nothing ambiguous manager class Thanks blog every find diamond rough 00 49 26 Feb 2003 Darren Greaves wrote Add Util list Util another word can't arsed think proper name 03 07 16 Jan 2005 rstoya wrote came across article precisely couldn't decide name class guess tempted didn't want call Manager many managers Another name comes often well Director difficulty thinking name maybe others well it's hard pick one word describe alogirithm class think you're correct suggesting try generalize pick one word bit suggestive manager 18 20 31 May 2006 Mohinder wrote ReportManager good FieldPropertyManager also good Goddamnit rookie ways get nowhere 05 16 11 Sep 2006 Mohan wrote good article 23 19 29 Nov 2006 Andrew Kirkland wrote I've tried many times many developers explain can't slap Manager back class I'm glad others think way developers conversation look blankly anyway also dislike use word Engine back anything time would feel need put Engine back something I'm going fishing I've never understood Engine adds value describing classification Nice article - thanks Add Comment Name Email Address displayed URL Comments Leave blank line paragraphs URLs converted links HTML stripped Indented source code formatted pre tags Navigate Home Weblog Index Free Survey Answers Interview Programmer February 2003 M W F 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 Monthly Archives May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 November 2014 October 2014 September 2014 August 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 April 2013 March 2013 February 2013 January 2013 December 2012 November 2012 October 2012 September 2012 August 2012 July 2012 June 2012 May 2012 April 2012 March 2012 February 2012 January 2012 December 2011 November 2011 October 2011 September 2011 August 2011 July 2011 June 2011 May 2011 April 2011 March 2011 February 2011 January 2011 December 2010 November 2010 October 2010 September 2010 August 2010 July 2010 June 2010 May 2010 April 2010 March 2010 February 2010 January 2010 December 2009 November 2009 October 2009 September 2009 August 2009 July 2009 June 2009 May 2009 April 2009 March 2009 February 2009 January 2009 December 2008 November 2008 October 2008 September 2008 August 2008 July 2008 June 2008 May 2008 April 2008 March 2008 February 2008 January 2008 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 May 2007 April 2007 March 2007 February 2007 January 2007 December 2006 November 2006 October 2006 September 2006 August 2006 July 2006 June 2006 May 2006 April 2006 March 2006 February 2006 January 2006 December 2005 November 2005 October 2005 September 2005 August 2005 July 2005 June 2005 May 2005 April 2005 March 2005 February 2005 January 2005 December 2004 November 2004 October 2004 September 2004 August 2004 July 2004 June 2004 May 2004 April 2004 March 2004 February 2004 January 2004 December 2003 November 2003 October 2003 September 2003 August 2003 July 2003 June 2003 May 2003 April 2003 March 2003 February 2003 January 2003 Category Archives Christian Life Java Python Rants Software Development Stuff Tall Tales javablogs Site Weblog Various Writings Project Management Checklists Estimate Software Projects Software Downloads RSS 1 0 Feeds Elsewhere PyBlagg Daily Python-URL blogs4God java blogs Dilbert Blogroll Fishbowl Daniel Bradby David Pinn Keith Pitty Simon Brunning Joe Grossberg Kate 2003-2006 Alan Green"),
('Automating Stuff Using Python and Selenium', "Skip content Anuj Bansal's Blog Learn Code Discover Menu widgets Tagscmd ebomb google hack hotspot python selenium smalltricks vlc wifi Search Archives May 2015 August 2014 Automating Stuff Using Python Selenium Python makes life easy 50 line code save days work login site enter name bill copy 250 ID excel sheet lazy person wrote script code available github script works Share TwitterFacebookGoogleLike Like Loading Posted May 17 2015May 17 2015Author bansalanuj1996Categories UncategorizedTags python selenium smalltricks Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Post navigation Previous Previous post Google Hacking Twenty Fifteen Theme Blog WordPress com Follow Follow Anuj Bansal's Blog Get every new post delivered Inbox Build website WordPress com d bloggers like"),
('Java 8 Concurrency API: Atomic Variables and ConcurrentMap', "W Blog Projects Contact RSS GitHub Google Twitter Follow Java 8 Concurrency Tutorial Atomic Variables ConcurrentMap May 22 2015 Welcome third part tutorial series multi-threaded programming Java 8 tutorial covers two important parts Concurrency API Atomic Variables Concurrent Maps greatly improved introduction lambda expressions functional programming latest Java 8 release new features described bunch easily understood code samples Enjoy Part 1 Threads Executors Part 2 Synchronization Locks Part 3 Atomic Variables ConcurrentMap simplicity code samples tutorial make use two helper methods sleep seconds stop executor defined AtomicInteger package java concurrent atomic contains many useful classes perform atomic operations operation atomic safely perform operation parallel multiple threads without using synchronized keyword locks shown previous tutorial Internally atomic classes make heavy use compare-and-swap CAS atomic instruction directly supported modern CPUs instructions usually much faster synchronizing via locks advice prefer atomic classes locks case change single mutable variable concurrently let's pick one atomic classes examples AtomicInteger AtomicInteger atomicInt new AtomicInteger 0 ExecutorService executor Executors newFixedThreadPool 2 IntStream range 0 1000 forEach - executor submit atomicInt incrementAndGet stop executor System println atomicInt get 1000 using AtomicInteger replacement Integer we're able increment number concurrently thread-safe manor without synchronizing access variable method incrementAndGet atomic operation safely call method multiple threads AtomicInteger supports various kinds atomic operations method updateAndGet accepts lambda expression order perform arbitrary arithmetic operations upon integer AtomicInteger atomicInt new AtomicInteger 0 ExecutorService executor Executors newFixedThreadPool 2 IntStream range 0 1000 forEach - Runnable task - atomicInt updateAndGet n - n 2 executor submit task stop executor System println atomicInt get 2000 method accumulateAndGet accepts another kind lambda expression type IntBinaryOperator use method sum values 0 1000 concurrently next sample AtomicInteger atomicInt new AtomicInteger 0 ExecutorService executor Executors newFixedThreadPool 2 IntStream range 0 1000 forEach - Runnable task - atomicInt accumulateAndGet n m - n m executor submit task stop executor System println atomicInt get 499500 useful atomic classes AtomicBoolean AtomicLong AtomicReference LongAdder class LongAdder alternative AtomicLong used consecutively add values number ExecutorService executor Executors newFixedThreadPool 2 IntStream range 0 1000 forEach - executor submit adder increment stop executor System println adder sumThenReset 1000 LongAdder provides methods add increment like atomic number classes also thread-safe instead summing single result class maintains set variables internally reduce contention threads actual result retrieved calling sum sumThenReset class usually preferable atomic numbers updates multiple threads common reads often case capturing statistical data e g want count number requests served web server drawback LongAdder higher memory consumption set variables held in-memory LongAccumulator LongAccumulator generalized version LongAdder Instead performing simple add operations class LongAccumulator builds around lambda expression type LongBinaryOperator demonstrated code sample LongBinaryOperator op x y - 2 x y LongAccumulator accumulator new LongAccumulator op 1L ExecutorService executor Executors newFixedThreadPool 2 IntStream range 0 10 forEach - executor submit - accumulator accumulate stop executor System println accumulator getThenReset 2539 create LongAccumulator function 2 x y initial value one every call accumulate current result value passed parameters lambda expression LongAccumulator like LongAdder maintains set variables internally reduce contention threads ConcurrentMap interface ConcurrentMap extends map interface defines one useful concurrent collection types Java 8 introduces functional programming adding new methods interface next code snippets use following sample map demonstrates new methods ConcurrentMap String String map new ConcurrentHashMap map put foo bar map put han solo map put r2 d2 map put c3 p0 method forEach accepts lambda expression type BiConsumer key value map passed parameters used replacement for-each loops iterate entries concurrent map iteration performed sequentially current thread map forEach key value - System printf n key value method putIfAbsent puts new value map value exists given key least ConcurrentHashMap implementation method thread-safe like put don't synchronize accessing map concurrently different threads String value map putIfAbsent c3 p1 System println value p0 method getOrDefault returns value given key case entry exists key passed default value returned String value map getOrDefault hi System println value method replaceAll accepts lambda expression type BiFunction BiFunctions take two parameters return single value case function called key value map entry returns new value assigned current key map replaceAll key value - r2 equals key d3 value System println map get r2 d3 Instead replacing values map compute let's us transform single entry method accepts key computed bi-function specify transformation value map compute foo key value - value value System println map get foo barbar addition compute two variants exist computeIfAbsent computeIfPresent functional parameters methods get called key absent present respectively Finally method merge utilized unify new value existing value map Merge accepts key new value merged existing entry bi-function specify merging behavior values map merge foo boo oldVal newVal - newVal oldVal System println map get foo boo foo ConcurrentHashMap methods part ConcurrentMap interface thereby available implementations interface addition important implementation ConcurrentHashMap enhanced couple new methods perform parallel operations upon map like parallel streams methods use special ForkJoinPool available via ForkJoinPool commonPool Java 8 pool uses preset parallelism depends number available cores Four CPU cores available machine results parallelism three System println ForkJoinPool getCommonPoolParallelism 3 value decreased increased setting following JVM parameter -Djava util concurrent ForkJoinPool common parallelism 5 use example map demonstrating purposes time work upon concrete implementation ConcurrentHashMap instead interface ConcurrentMap access public methods class ConcurrentHashMap String String map new ConcurrentHashMap map put foo bar map put han solo map put r2 d2 map put c3 p0 Java 8 introduces three kinds parallel operations forEach search reduce operations available four forms accepting functions keys values entries key-value pair arguments methods use common first argument called parallelismThreshold threshold indicates minimum collection size operation executed parallel E g pass threshold 500 actual size map 499 operation performed sequentially single thread next examples use threshold one always force parallel execution demonstrating purposes ForEach method forEach capable iterating key-value pairs map parallel lambda expression type BiConsumer called key value current iteration step order visualize parallel execution print current threads name console Keep mind case underlying ForkJoinPool uses maximum three threads map forEach 1 key value - System printf key value thread n key value Thread currentThread getName key r2 value d2 thread main key foo value bar thread ForkJoinPool commonPool-worker-1 key han value solo thread ForkJoinPool commonPool-worker-2 key c3 value p0 thread main Search method search accepts BiFunction returning non-null search result current key-value pair null current iteration doesn't match desired search criteria soon non-null result returned processing suppressed Keep mind ConcurrentHashMap unordered search function depend actual processing order map multiple entries map match given search function result may non-deterministic String result map search 1 key value - System println Thread currentThread getName foo equals key return value return null System println Result result ForkJoinPool commonPool-worker-2 main ForkJoinPool commonPool-worker-3 Result bar Here's another example searching solely values map String result map searchValues 1 value - System println Thread currentThread getName value length 3 return value return null System println Result result ForkJoinPool commonPool-worker-2 main main ForkJoinPool commonPool-worker-1 Result solo Reduce method reduce already known Java 8 Streams accepts two lambda expressions type BiFunction first function transforms key-value pair single value type second function combines transformed values single result ignoring possible null values String result map reduce 1 key value - System println Transform Thread currentThread getName return key value s1 s2 - System println Reduce Thread currentThread getName return s1 s2 System println Result result Transform ForkJoinPool commonPool-worker-2 Transform main Transform ForkJoinPool commonPool-worker-3 Reduce ForkJoinPool commonPool-worker-3 Transform main Reduce main Reduce main Result r2 d2 c3 p0 han solo foo bar hope you've enjoyed reading third part tutorial series Java 8 Concurrency code samples tutorial hosted GitHub along many Java 8 code snippets You're welcome fork repo try want support work please share tutorial friends also follow Twitter constantly tweet Java programming related stuff Part 1 Threads Executors Part 2 Synchronization Locks Part 3 Atomic Variables ConcurrentMap Share post Twitter Facebook Google Reddit Benjamin Software Engineer Full Stack Developer Pondus excited runner table foosball player Get touch Twitter Google GitHub Read Recent Posts Java JavaScript Tutorials Recent Posts Java Tutorials Java 8 Concurrency Tutorial Synchronization Locks Java 8 Concurrency Tutorial Threads Executors Java 8 API Example Strings Numbers Math Files Avoiding Null Checks Java 8 Please enable JavaScript view comments powered Disqus 2009-2015 Benjamin Winterberg"),
('Real-world applications of mathematics, by arxiv subject area', "current community chat blog MathOverflow MathOverflow Meta communities Sign log customize list stack exchange communities Stack Exchange sign log tour help Tour Start quick overview site Help Center Detailed answers questions might Meta Discuss workings policies site MathOverflow Questions Tags Users Badges Unanswered Ask Question Take 2-minute tour MathOverflow question answer site professional mathematicians It's 100 free registration required Real-world applications mathematics arxiv subject area vote 125 vote favorite 173 important applications outside mathematics major fields mathematics concreteness let's divide mathematics according arxiv mathematics categories e g math math QA math CO etc community-wiki question please edit improve pre-existing answers let's keep single answer subject area inspired Terry Tao's recent post periodic table elements listing commercial applications suggested might fun summary either MSC top-level subjects arxiv subjects I'd like propose areas applications either numerous non-obvious generally worthy discussion someone volunteers open new question specifically subject area takes care providing summary best answers produced applications mathematics-education popularization big-list share improve question edited Feb 10 '10 15 55 community wiki 3 revisions 3 usersScott Morrison 89 1 you're new user don't enough reputation edit pre-existing answer please don't hesitate create new answer Someone merge Scott Morrison Oct 26 '09 4 50 1 Okay answers rolling Let's try add links possible external references make first line stand-alone summary that's awesome Scott Morrison Oct 26 '09 5 11 1 mean vote subject area assume want people vote post think one applications really great Anton Geraschenko Oct 26 '09 15 06 2 vote answers think particularly interesting surprising Scott Morrison Oct 27 '09 17 01 9 don't see anything financial mathematics Maybe it's application real world Bruce Westbury Feb 15 '10 21 24 show 7 comments 30 Answers 30 active oldest votes vote 40 vote math AC Commutative algebra Reed-Solomon codes type error correction codes based polynomials finite fields - CDs DVDs still work even scratched share improve answer answered Oct 26 '09 16 46 community wiki Terry Tao 5 CDs DVDs still work even scratched Unfortunately always DVDs cease work apparent reason visible scratches damage Zen Harper Feb 25 '11 5 47 think turbo codes popular nowadays user16007 Aug 23 '11 6 29 add comment vote 31 vote math DG Differential geometry Lie groups used robotics find efficient way maneuver robotic arm instance Spherical trigonometry essential navigation centuries ago application mathematics real world - naval empires built upon Finsler geometry used planning shipping routes ocean currents winds well earth's curvature need taken account conserve fuel Differential geometry Riemann metrics stress tensors used mechanical engineering study properties large membranes example one go building large tent Keyword literature search elastic membrane continuum mechanics Without taking account effects general relativity orbiting satellites make GPS system locations reported GPS receivers would accumulate errors around 10km day rendering system useless Nonlinear control theory makes heavy use differential geometry Quantum theory atoms molecules application Morse theory quantum chemistry share improve answer edited Feb 25 '11 14 49 community wiki 6 revisions 4 usersTerry Tao 65 surely applications almost obvious would challenge find part differential geometry doesn't known application Zen Harper Feb 25 '11 5 50 add comment vote 31 vote math Algebraic Topology Algebraic Topology finds applications sensor network design coverage analysis sensor networks expanding data analysis techniques give better visualizations large data sets also applied computer vision pattern recognition algorithms instance topological data analysis Algebraic Topology used robotics Motion planning behavioral algorithms robotics studied topological tools Knot theory used dealing protein folding analysis DNA function enzymes called 'topoisomerases' change knottedness loops DNA fact bacteria circular 'chromosomes' called plasmids reproduce make use enzyme whose specific role unlink Hopf links antibiotics target enzyme Model categories used study concurrency See paper Gaucher Nash's proof Ann Math Vol 54 2 1951 every finite non-cooperative game equilibrium point mixed strategies direct application Brouwer's fixed point theorem spurred great deal interest applications game theory economics cf survey article Game theory applications computer science mathematical finance share improve answer edited Oct 4 '14 15 17 community wiki 11 revs 8 users 38 Carnahan 4 good page expert math upenn edu ghrist index_files research htm Persistent homology particular rapidly developing locus applied algebraic topology attracted attention big names like Shmuel Weinberger Stephen Smale Paul Siegel Apr 19 '10 19 32 designing robots feature claimed motion planning algebraic geometry answer Elizabeth Q Goodman Mar 5 '11 22 15 1 mere fact algebraic geometry used understand configuration spaces robotics mean algebraic topological techniques also use Mikael Vejdemo-Johansson Mar 6 '11 16 39 1 understanding real algebraic geometry used study e g positions robot arm various joints segment lengths take expressing system polynomial equations solve whereas topologists Ghrist used notion configuration space e g studying several robots could move around factory floor perhaps set tracks obstacles without bumping Patricia Hersh Jun 29 '12 11 56 add comment vote 30 vote math GR Group Theory Group theory provides methods understanding Rubik's cube generating algorithms solving cube remarkably quickly state cube may Groups find various applications chemistry eg study crystal structures spectroscopy Cryptography - various hard algorithmic problems groups used design crypto-systems Groups symmetries used reduce dimension parameter spaces engineering models make model verification tractable Potentially fast matrix multiplication see MO question Card tricks don't work sleight hand via arrangements cards e g Sim Sala Bim see site description graphical explanation think symmetric group explains trick shows extend past three piles seven cards N piles M cards share improve answer edited Jun 29 '12 18 37 community wiki 7 revisions 4 usersTerry Tao 61 36 Rubik's cube Real world come Randomblue Oct 27 '09 17 36 Hey solved Rubik's cube first time using group-theory considerations took 20 minutes solve cube learned actual method Harrison Brown Dec 2 '09 3 57 got interested group theory article Rubik's cube Scientific American school think learned concept conjugation article actually Jos Figueroa-O'Farrill Dec 2 '09 12 55 3 Would happen remember Scientific American article Paul Siegel Apr 19 '10 19 08 1 See mathoverflow net questions 94907 applications group theory math biology Alexander Chervov Jun 29 '12 21 15 add comment vote 23 vote Math AP Analysis PDE Partial differential equations used lot modelling systems biology medicine help describe e g animal coat pattern formation zebras leopards wound healing tumor growth spread virus population predator-prey systems ecology predicting variations concentrations chemicals hormones drugs within organ time PDEs used climate modelling atmospheric dynamics ocean currents Radar imaging based solving inverse problem recent buzz metamaterials invisibility based understanding variable-coefficient elliptic problems share improve answer edited Jan 30 '10 1 23 community wiki 4 revisions 4 usersAnton Geraschenko 50 1 Inverse problems also occur medical imaging MRI CAT scans etc Michael Lugo Oct 26 '09 15 36 2 sorry make similar comment PDEs virtually guaranteed useful almost definition Zen Harper Feb 25 '11 5 52 add comment vote 23 vote math RT Representation Theory Much modern particle physics related representations Lie algebras instance Gell-Mann's Eightfold Way comes representation theory SU 3 associated algebra Almost every application theoretic physics solid state physics extensively uses representation theory description periodic quasi-periodic media crystals semiconductors etc fact solutions Schroedinger Equation cases numerical analytical carried accordance representation crystal quasi cristal symmetry group applications representation theory three-dimensional Cryo-Electron Microscopy - recent paper Hadani Singer Annals study orbits permanent determinant thought points space polynomials central idea Valiant's algebraic version P vs NP representation theory relevant coordinate rings orbit closures leading approach Mulmuley Sohoni many references two starters report ICM paper share improve answer edited Feb 18 '14 19 37 community wiki 6 revs 6 users 50 kakaz 4 would much interested applications representation theory outside cognate areas Jos Figueroa-O'Farrill Dec 2 '09 12 52 2 find representation theory statistics projecteuclid org kjetil b halvorsen Jan 19 '13 21 05 add comment vote 22 vote math CO Combinatorics Combinatorics finds applications computer science especially run-time analysis algorithms also recent years found applications physics least part via relationship quantum theory Combinatorial group testing allows one quickly isolated defects large collection samples testing batches samples time Combinatorial designs routinely used design experiments applied statistics quality control Combinatorial optimization Logistics Operations research Graphs used models networks e g internet server connections Applications include searches least expensive plane tickets optimizing garbage pickup routes Graph models used machine learning combinatorial properties permutation group fundamental part Enigma cipher breaking Marian Rejewski II-nd WW dated one first application higher mathematic reasoning cipher breaking usually linguistic reasoning used instead Finite projective spaces Galois geometry used random network coding cryptography share improve answer edited Aug 26 '14 12 24 community wiki 8 revs 5 users 56 kakaz 1 Data compression played important role communications technology Audio CD's DVD's HDTV I-pods many examples use data compression techniques Combinatorics played important early role development elegant idea Huffman tree due David Huffman Huffman coding en wikipedia org wiki Huffman_tree Joe Malkevitch Joseph Malkevitch Dec 6 '09 1 42 1 Design theory used create efficient error-correcting codes Douglas Zare Jan 13 '10 14 40 add comment vote 21 vote math AG Algebraic geometry Elliptic curve cryptography Motion planning Configuration spaces robot arms semi-algebraic sets algebraic geometry especially Cylindrical Algebraic Decomposition used understand geometry design algorithms Algebraic geometry finite fields used construct error correcting codes Statistical models often semi-algebraic sets algebraic geometry used devise tests correctness model fit parameters Birational geometry used design NURBS CAD tools Projective geometry implicitization used 3D image reconstruction multiple camera views Geometry Representation theory tensors used Physics Computer Science Statistics Phylogenetics Psycometrics summary 2008 report share improve answer edited Feb 18 '14 19 25 community wiki 7 revs 6 users 42 Terry Tao add comment vote 20 vote math CT Category Theory Category Theory helps design modern novel programming languages end able optimizations based mathematical theorems even allow provably correct code less effort using techniques example language Haskell makes use many ideas category theory deep connections category theory logic sense computer science Feynman diagrams form monoidal category share improve answer edited Oct 26 '09 16 16 community wiki 5 revisions 4 usersAnton Geraschenko 39 add comment vote 20 vote math CV Complex Variables Conformal mapping simplifies various problems heat conduction fluid flow calculating steady temperatures Modelling flow fluids around solid bodies example aircraft wings also simplified appropriate conformal mappings Tools complex analysis phasors argument principle conformal mapping widely used analyzing electrical circuits stress strain analysis mechanical engineering uniformization theorem discrete complex analysis circle packings allows efficient pleasant visualization geometric data related surface triangulations share improve answer edited Jan 20 '10 23 23 community wiki 6 revisions 5 usersSteven Sam 33 add comment vote 20 vote math ST Statistics Accurate polling Fraud detection whether financial e g via Benford's law voter fraud Used world finance economics gambling daily basis Predicting consumer preferences e g Netflix prize Experimental design hypothesis testing e g testing medical hypotheses Machine learning Quality control share improve answer edited Feb 25 '11 16 08 community wiki 9 revisions 5 usersTerry Tao 52 add comment vote 19 vote math RA Rings Algebras Google's Pagerank algorithm based part singular value decomposition Fourier analysis transforms linear algebra work world millions times per second video audio particular creating displaying JPEG image requires discrete fourier transform Quaternions used 3D modeling animation software represent rotations robust form Euler angles helping avoid transition issues like gimbal lock Every simulation using Finite Element Method uses algebra extensive way share improve answer edited Feb 11 '10 10 57 community wiki 6 revisions 5 userskakaz 38 7 think Fourier analysis transforms linear algebra Finite Element Method don't really fit well Rings Algebras although obviously put really insist - obviously use algebraic techniques main core elsewhere analysis numerical analysis etc opinion Zen Harper Feb 25 '11 6 04 5 SVD rings algebras darij grinberg Feb 25 '11 14 52 3 don't think finite element analysts I've worked quite care anything either ring theory modern algebra Also technically true Fourier transform product representation theory level used signal processing perspective commonly taken fact JPEG uses discrete cosine transform approximate images Fourier transform convolution theorem probably better understood using functional analysis perspective Mikola Jun 3 '11 22 24 add comment vote 18 vote math CA Classical Analysis Fourier analysis allows one precisely divide electromagnetic spectrum leading course radio television wireless forth fast Fourier transform relatives fast Wavelet transform essential component many signal processing algorithms MRI based inverting Radon transform Wavelets used signal processing e g image compression edge detection picture Hilbert spectrometer share improve answer edited Jan 30 '10 0 09 community wiki 4 revisions 3 usersAnton Geraschenko 36 2 Radon transform representation theory Lie groups www-math mit edu helgason Radonbook pdf darij grinberg Feb 25 '11 14 53 3 picture leo Jul 19 '13 3 50 MRI generally based inverting Radon transform inverting Fourier transform special cases translates Radon transform Fourier slice theorem LKlevin 2 days ago add comment vote 14 vote math Information theory Compression efficient use bandwidth Error-correcting codes protect digital data corruption noise packet loss physical damage etc Used machine learning share improve answer edited Oct 27 '09 0 16 community wiki 3 revisions 2 usersTerry Tao 67 add comment vote 14 vote math NT Number Theory Number Theory comes ideas theoretical basis modern cryptography used secure communications everywhere banking cellphones quirky one SETI primes binary would clear indication signal non-natural origin would starting point communication gamma ray telescope design using mod p quadratic residues construct mask Gamma rays cannot focused design uses redundant array detectors separated mask reconstruct directional information share improve answer edited Oct 27 '09 1 19 community wiki 3 revisions 3 usersScott Carnahan 42 2 Weren't continued fractions first used Huygens build clockwork clockwork one needs approximate irrationals ratios number teeth two wheels vaguely remember twentieth-century mathematician found handy Cultural Revolution H Helfgott Oct 27 '09 18 27 2 vaguely recall Chinese remainder theorem used early Soviet mechanical computers basically embedding integers profinite integers don't recall details thought theorem used ancient China count soldiers army appears story apocryphal Terry Tao Oct 27 '09 18 47 add comment vote 14 vote math PR Probability Stochastic processes branching processes HMMs used model speciation extinction Tree Life evolution molecular sequences cell proliferation things biology example see Branching Processes Biology' Kimmel Axelrod Here's somewhat frivolous one one casinos greatly care number times one needs shuffle deck truly randomizes used world finance economics gambling daily basis Random number generation key component many efficient algorithms also plays important role cryptography Stochastic calculus used price options Black-Scholes formula hedge risk course always applied wisely Markov chains used find uniformly random objects among things makes designing experiment fairest crypto-systems based designs securest share improve answer edited Jun 29 '12 16 20 community wiki 7 revisions 3 usersTerry Tao 45 Surely it's place statistics - randomised sampling like H Helfgott Oct 27 '09 18 24 Yes seperate category statistics Graham Jones Oct 29 '09 8 59 think riffle shuffles used home games casinos least games like poker would want say casinos greatly care mathematically approachable riffle shuffles unless say historical concern effectiveness riffle shuffles led casinos use method doubt would drop item Douglas Zare Jan 13 '10 14 48 Let's forget queueing theory Concrete settings theory applies e g call centers hospitals computer networks Also stochastic networks used model analysis e g spread disease social networks Pierre Aug 23 '11 6 05 add comment vote 13 vote math NA Numerical analysis Linear programming algorithms used compressed sensing used MRI imaging increase resolution decrease number measurements required Numerical analysis makes calculators work much use numerical linear algebra approximate solutions discretized versions complicated PDEs heart Google's Pagerank algorithm relatively simple numerical eigenvector computation called Power Method study large complicated networks e g Facebook done using tools graph theory comes back using tools numerical linear algebra share improve answer edited Jun 29 '12 16 22 community wiki 3 revisions 2 usersTerry Tao 93 add comment vote 12 vote math FA Functional Analysis Used signal processing modeling design Used machine learning design classifiers e g spam filters share improve answer edited Oct 27 '09 0 18 community wiki 4 revisions 2 usersAnand Sarwate 63 1 Numerical mathematics whose usefulness require proof applied functional analysis See example Collatz' book Functional analysis numerical mathematics way example nicely shows futile division pure applied math M Mueger Oct 31 '13 12 54 add comment vote 12 vote Math DS Dynamical systems Modeling flow liquids like animated flow lava movie Volcano Solving classical few-body problems though doesn't help modern notorious two-body problem Heteroclinic trajectories used space mission design Heteroclinic tangles used chemical engineers get well-mixed reactants Pseudo-Anosov braids used design efficient methods stirring viscous liquids see example http arxiv org pdf nlin 0603003 pdf share improve answer edited Jan 7 '14 21 14 community wiki 3 revs 2 users 60 Anna Varvak 3 Another great example modeling flow liquids movies Finding Nemo actual mathematicians hired generate various twirls vorticities high degree precision Somnath Basu Feb 10 '10 16 11 Shouldn't mention applications stability theory bifurcation theory ecology predator-prey model basic example Paul Siegel Apr 19 '10 19 20 Predicting ecological climate catastrophes done bifurcation theory cf www nature com uidfinder 10 1038 nature08227 dranxo Jan 18 '12 23 47 2 Isn't vortex sinking ship Titanic also example first point sorry spoiler -P Julien Puydt Jun 29 '12 16 29 add comment vote 11 vote math SG Symplectic Geometry Symplectic integrators used numerical simulation Hamiltonian mechanics Prominent applications include molecular dynamics solar system dynamics computer animation wide variety problems mechanical engineering share improve answer answered Oct 27 '09 0 02 community wiki Ari add comment vote 11 vote math OA Operator Algebras Nature Operator algebras broadly operator theory appear mathematical models quantum phenomena Engineering Completely positive maps used quantum information theory also many connections operator algebras wavelets useful electrical engineering share improve answer edited Jan 28 '10 20 03 community wiki 2 revisions 2 usersOrr Shalit 80 add comment vote 11 vote math LO Logic Lambda calculus theoretical basis functional programming Lisp particular developed Alonzo Church 1930's part research recursion foundations mathematics Formal verification used verify software hardware failure rates need close zero possible e g avionics Finite Model Theory used design improve database query systems logical reasoning widely sometime non-trivial used law application courts parliaments setting law systems share improve answer edited Feb 11 '10 11 34 community wiki 4 revisions 4 userskakaz 41 add comment vote 11 vote math MG Metric Geometry Discrete sphere packing solutions lead error-correcting codes earthmover metric used image recognition classification Triangulation using Euclidean metric used navigation nowadays GPS systems Banach fixed point theorem contraction mappings beautiful application image compression called fractal compression One starts complete metric space X images Hausdorff metric given image x X one finds contraction mapping X X unique fixed point x one considers self-similarities picture that's called fractal compression get rid original image store map reconstruct image one starts x_0 X example image black white applies several times result close x Evgeny Shinder first learnt high school friend implemented fractal compression final project programming class fascinated abstract math applied concrete problem image compression share improve answer edited Mar 11 '10 19 45 community wiki 5 revisions 3 usersScott Morrison 65 taxicab metric something many us think driving Ryan Budney Jan 20 '10 23 33 add comment vote 11 vote Math HO History overview used understanding mathematics social human endeavor considering alternative approaches historically used explore quantifiable relationships teach us mathematical ideas appear empty social space every idea child time application HO mathematics One real-world application mathematics set forth Bill Thurston's far-sighted essay http arxiv org abs math HO 9404236 Proof Progress Mathematics arXiv math 9404236v1 math HO purpose provide foundations social enterprise 300 references Proof Progress Mathematics among most-cited arxiv's math HO articles Nowadays many influential essays systems engineering example draw implicitly upon Thurston's influential ideas regarding central role mathematics social enterprises mathematicians reading reflecting upon ideas share improve answer edited Nov 13 '13 10 18 community wiki 5 revs 5 users 42 John Sidles add comment vote 11 vote math SP Spectral theory Spectroscopy course avoid bridge collapse knowing resonant frequencies extremely important - Shape model recognition Network analysis security spectral graph theory design quantum wave guides share improve answer edited Dec 9 '14 22 15 community wiki 2 revs 2 users 83 Terry Tao 10 may worth pointing bridge collapse resonance least partly urban myth particular famous collapse Tacoma narrows bridge due complicated aerodynamics phenomenon credit understanding collapse probably belongs PDEs often cited textbooks resonance phenomenon hand problems Millenium bridge London indeed due resonance apparently coupled positive resonance feedback due natural reactions pedestrians bridge Arend Bayer Feb 25 '11 15 38 add comment vote 10 vote math OC Optimization Control Optimization heavily used medicine cancer treatment technique radiation therapy called Intensity Modulated Radiotherapy IMRT Take look presentation one main researchers field Used everywhere almost every electro-mechanical system cars planes power grid Kalman filtering like used enable e g radar tracking Optimization generally operations research used management logistics analyses feasibility studies share improve answer edited Jan 28 '10 20 14 community wiki 5 revisions 4 usersProportional 38 add comment vote 8 vote math KT K-Theory Homology Used purposes edit image processing computational dynamics book Chomp project share improve answer edited Jun 29 '12 6 10 community wiki 2 revisions 2 userstetrapharmakon 83 add comment vote 7 vote math GM General Mathematics cosmic distance ladder largely built using elementary geometry although legs ladder advanced mathematics e g relativity probability play role Mathematics considered general model precise reasoning widely widely could even probably used various branches everyday living law economics psychology rhetoric etc Person know mathematics usually small chances solve problems abstract way means every problem may certain solution related defined example without generalisation share improve answer edited Feb 11 '10 11 31 community wiki 2 revisions 2 userskakaz 62 add comment vote 5 vote math GT Geometric Topology used topological quantum field theory TQFT information applications subject area chapter 6 Topological Quantum Computation edited Zhengan Wang CBMS 112 availabe http www ams org bookstore pspdf cbms-112-prev pdf argued TQFT relevant real world due emergence phenomenon Also site http web ornl gov sci ortep topology html geometric topology used crystallography share improve answer edited Feb 17 18 58 community wiki 3 revs 2 users 90 Kristal Cantwell wouldn't consider TQFT real world believe many physicists would agree DamienC Feb 16 23 15 added material answer including TQFT real world Kristal Cantwell Feb 17 19 05 add comment vote 2 vote math MP Mathematical Physics subject already uses several already mentioned categories like group theory functional analysis applied physical theories like quantum field theory since intention see concrete applications real world taken mathematically rigorous framework could mention first place Noether's theorem every differentiable symmetry action physical system corresponding conservation law Onsager reciprocal relations express equality certain ratios flows forces thermodynamic systems equilibrium notion local equilibrium exists Onsager's contribution demonstrate L_ alpha beta positive semi-definite Onsanger matrix phenomenological coefficientes also symmetric except cases time-reversal symmetry broken issues proving thermodynamical statements strictly statistical mechanics became one biggest discussions mathematical physics time Ludwig Boltzmann Ernst Zermelo see book colleted works Ernst Zermelo volume II edited Herausgegeben von Heinz-Dieter Ebbinghaus Akihiro Kanamori Springer 2013 existence anti-particles P M Dirac first mathematical result Dirac realised relativistic version Schr dinger wave equation electrons predicted possibility antielectrons discovered four years latter Carl D Anderson Universality Feigenbaum constants proven Landorf Lanford III Oscar 1982 computer-assisted proof Feigenbaum conjectures Bull Amer Math Soc 6 3 427 434 corrections Eckmann Wittwer Eckmann J P Wittwer P 1987 complete proof Feigenbaum conjectures Journal Statistical Physics 46 3 4 455 concept Universality together scaling introduced Kadanoff see example Physica 163 1990 1-14 Scaling Universality Statistical Physics Roughly speaking scaling description changes behavior physical phenomena terms adimensional constants scale case Reynolds number Universality concerns invariance properties different dynamical systems independently physical details example see aforementioned paper Kadanoff perturbation drive away Hamiltonian near critical point deemed irrelevant Hamiltonians kind perturbations said belong Universality class speculative region today prediction possible second Island Stability new stable chemical elements might found possibly interesting physical properties see example Zeitschrift f r Physik 1969 Volume 228 Issue 5 pp 371-386 Investigation stability superheavy nuclei around Z 114 Z 164 Jens Grumann Ulrich Mosel Bernd Fink Walter Greiner Even speculative still valid mathematical results solutions Einstein's General Relativity equations allowing closed timelike curves e time machines past G del Spacetime see Review Modern Physics volume 21 Number 3 July 1949 example new type cosmological solutions Einstein's field equations gravitation Kurt G del Roger Penrose's arguments possibility Strong Artificial Intelligence actual construction physically based intelligence based brain like algorithmic machine based insolubility halting problem G del's incompleteness theorem preventing existence algorithmically based system logic reproducing traits human intelligence mathematical insight yet published mathematically solved strict mathematical derivation turbulence Navier-Stokes equation otherwise turbulence complete mathematical theory extent knowledge Navier-Stokes even theorem following problem Prove give counter-example following statement three space dimensions time given initial velocity field exists vector velocity scalar pressure field smooth globally defined solve Navier Stokes equations Along similar lines mathematical completeness Yang-Mills existence mass gap Prove compact simple gauge group G non-trivial quantum Yang Mills theory exists mathbb R 4 mass gap Delta 0 importance comes fact simplest Quantum Field Theory available far know need assume existence quarks share improve answer answered Mar 24 22 31 community wiki Arturo Ortiz Tapia add comment protected Community Aug 14 '14 8 13 Thank interest question attracted low-quality answers posting answer requires 10 reputation site Would like answer one unanswered questions instead answer you're looking Browse questions tagged applications mathematics-education popularization big-list ask question asked 5 years ago viewed 42719 times active 2 months ago Blog Stack Overflow Andela partner provide education beyond borders Visit Chat Get weekly newsletter Top questions answers Important announcements Unanswered questions see example newsletter subscribing agree privacy policy terms service Linked 59 Good papers books essays thought process behind mathematical research 47 write popular mathematics well 41 work pure mathematician impact society 31 Recent Applications Mathematics 21 Fast Matrix Multiplication 19 Applications group theory math biology pharmacology 3 Applications rank factorization full rank decomposition Related 3 area mathematics hardest learn 16 Axiom Choice optional set theory axiom real-world consequences 28 Interesting applications pure mathematics first-year calculus 1 teach mathematics subjects engineering curriculum 12 Generalized notions solutions various areas mathematics 55 Applications mathematics 31 Recent Applications Mathematics 67 Mathematics talk five year olds 9 Role applications modern mathematics 14 applications operator algebras areas question feed tour help blog chat data legal privacy policy work advertising info mobile contact us feedback Technology Life Arts Culture Recreation Science Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix Linux Ask Different Apple WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce 14 Photography Science Fiction Fantasy Graphic Design Seasoned Advice cooking Home Improvement Personal Finance Money Academia 10 English Language Usage Skeptics Mi Yodeya Judaism Travel Christianity Arqade gaming Bicycles Role-playing Games 21 Mathematics Cross Validated stats Theoretical Computer Science Physics MathOverflow 7 Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design logo 2015 stack exchange inc user contributions licensed cc by-sa 3 0 attribution required rev 2015 5 28 2614 MathOverflow works best JavaScript enabled"),
('Nom, a byte oriented, streaming, zero copy, parser combinators library in Rust', 'PDF-1 4 1 0 obj'),
('The tadpole operators - The Old New Thing - Apparently April 1st is late this year', "Sign MSDN Blogs Microsoft Blog Images Old New Thing Translate page Powered Microsoft Translator Common Tasks RSS postsRSS commentsAtom Search Search blog Search blogs News Holy cow wrote book Basics Archives Ground Rules Suggestion Box Contact Disclaimers Blogroll Daily WTF Michael Kaplan NT Debugging Categories Code History Non-Computer Computer Tips Support tags New C experimental feature tadpole operators MSDN Blogs Old New Thing New C experimental feature tadpole operators New C experimental feature tadpole operators Rate Raymond Chen - MSFT 25 May 2015 7 00 Comments 116 often write code like x y 1 10 x y 1 z - 1 x wcslen 1 sizeof wchar_t Since - operators low precedence end parenthesize lot lead heavily nested code hard read Visual Studio 2015 RC contains pair experimental operators nicknamed tadpole operators let add subtract one integer value without needing parentheses x - y 10 x - y -z x - wcslen sizeof wchar_t They're called tadpole operators look like tadpole swimming toward away value tilde tadpole's head hyphen tail Syntax Meaning Mnemonic - y y 1 Tadpole swimming toward value makes bigger -y y - 1 Tadpole swimming away value makes smaller enable experimental tadpole operators add line top C file define __ENABLE_EXPERIMENTAL_TADPOLE_OPERATORS example here's simple program illustrates tadpole operators define __ENABLE_EXPERIMENTAL_TADPOLE_OPERATORS include ios include iostream include istream int __cdecl main int char int n 3 std cout 3 1 - n std endl std cout 3 - 1 3 1 -n - n std endl return 0 Remember operators still experimental officially part C play give feedback learn 116 Comments Code Blog - Comment List MSDN TechNet Comments Loading Leave Comment Name Comment Please enter comment Please shorten content 3072 less Please add 3 4 type answer Post Publishing error occurred posting Please retry posting comment 2015 Microsoft Corporation Terms Use Trademarks Privacy Cookies Report Abuse 5 6 426 415"),
('Nocera: iio-sensor-proxy 1.0 is out! [LWN.net]', "logged Log Create account Subscribe LWN Recent Features SourceForge replacing GIMP Windows downloads tale two data-corruption bugs LWN net Weekly Edition May 21 2015 PostgreSQL good bad ugly introduction Clear Containers Printable page Weekly edition Kernel Security Distributions Contact Us Search Archives Calendar Subscribe Write LWN LWN net FAQ Sponsors Nocera iio-sensor-proxy 1 0 Posted May 22 2015 n8willis blog Bastien Nocera announces 1 0 release iio-sensor-proxy framework accessing various environmental sensors e g accelerometer magnetometer proximity ambient-light sensors built recent laptops proxy daemon listens Industrial O IIO subsystem provides access sensor readings D-Bus right support ambient-light sensors accelerometers working sensor types development current API based used Android iOS may expanded future future versions we'll want export raw accelerometer readings applications including games make use might bring security issues SDL Firefox WebKit could adapted near future Log post comments Nocera iio-sensor-proxy 1 0 Posted May 22 2015 22 38 UTC Fri josh subscriber 17465 Link anyone wondering security issues raw accelerometer readings sufficiently clever application could use accelerometer readings get pretty good idea user typed least provide enough information drastically reduce number guesses required get someone's password passphrase Nocera iio-sensor-proxy 1 0 Posted May 22 2015 23 06 UTC Fri dashesy subscriber 74652 Link depends accelerometer sensor precision key strokes fall noise level amount cleverness would suffice Nocera iio-sensor-proxy 1 0 Posted May 23 2015 2 01 UTC Sat wahern subscriber 37304 Link Care provide rigorous elaboration proof assertion accuracy precision necessary provide consistent user experience far stronger useful password sniffing scheme past decade seen tremendous advancements side-channel attacks particularly ability derive useful bits system noise Maybe can't deduce password single input session 10 100 1000 Basically can't provide proof security--at minimum proof constraints usefully applied gauge security--it's best either assume it's possible least abstain asserting it's impossible probably impossible Nocera iio-sensor-proxy 1 0 Posted May 23 2015 2 45 UTC Sat dashesy subscriber 74652 Link lets say accelerometer chip 14 bits 2 bits noise 1 1mg LSB normal used detect taps double taps varying degree success depending sensor microphones accurate ears detect smallest glitches original purpose accel chips manufacturers detect free fall void warranty yes could right high enough sample rate capturing enough data Nocera iio-sensor-proxy 1 0 Posted May 23 2015 12 48 UTC Sat oldtomas guest 72579 Link put Wahern's statement words communicate slowly enough channel 1 Wahern's words get enough attempts compensate noise level assuming noise uncorrelated signal yes inch way towards password fraction bit time related attack demonstrated already 2 1 https en wikipedia org wiki Noisy-channel_coding_theorem 2 https www schneier com blog archives 2013 02 guessing_s Nocera iio-sensor-proxy 1 0 Posted May 23 2015 17 22 UTC Sat dashesy subscriber 74652 Link agreed information use accel detect activities 1 precise enough accel sensors read heart-rate However setup 2 uses smart phones article laptops Different scale matters comes acceleration besides fact major application accel phones games need good sensors accel sensors perform well detect orientation stable state detecting temporal changes accel readings require high sample rate cannot keep accelerating long displacement short think taps-scale becomes chaotic entering passwords tilting keyboard way pins phone could compared agreed right enough time high enough sample-rate many devices error average get bits information interesting enough write paper work 3-letter organization 1 https www amiigo com 2 https www schneier com blog archives 2013 02 guessing_s Nocera iio-sensor-proxy 1 0 Posted May 24 2015 16 57 UTC Sun paulj subscriber 341 Link I've tinkered accelerometers seemed little 'shocks' tapping device could seen accelerometer signals - least eyeball Nocera iio-sensor-proxy 1 0 Posted May 24 2015 17 24 UTC Sun dashesy subscriber 74652 Link Yes detect shocks taps Hard part distinguish shock another First need sensor noisy band either high sample rate look profile rely internal sample rate chip set interrupt different tap events using lower rate capture event approach useful though detect key pressed unless keys far register event closer ones former example take account distance key accel chip use max amplitude polynomial fitting fix clipping better model take 3 axes look individually 3 springs taking shock solving wave equations distinguish different keys radius Nocera iio-sensor-proxy 1 0 Posted May 25 2015 3 43 UTC Mon mrjk subscriber 48482 Link seeing product would make vulnerable attacker sophisticated enough decipher accelerometer readings get keystrokes good enough get software laptop intercept readings aren't good enough get software laptop read accelerometer guess could make easier less sophisticated make attacks seems high level practice professional level would expect kit could movement translation would include software read sensor present either new subsystem direct read don't know wouldn't insert keystroke logger access Nocera iio-sensor-proxy 1 0 Posted May 26 2015 0 18 UTC Tue dlang supporter 313 Link attacker good enough get sort software system can't read keystrokes directly Nocera iio-sensor-proxy 1 0 Posted May 26 2015 14 03 UTC Tue ssam subscriber 46587 Link acceleration exposed javascript browser sensitive enough give timing keystrokes http slashdot org story 05 09 13 1644259 keyboard-so problem Nocera iio-sensor-proxy 1 0 Posted May 26 2015 11 08 UTC Tue andreasn1 subscriber 88420 Link Isn't easier ask X directly Copyright 2015 Eklektix Inc Comments public postings copyrighted creators Linux registered trademark Linus Torvalds"),
('New .Net library like System.Math for Decimal data type', 'Menu Skip content HomeDownloadsRed Alchemist ProContact Nathan Jones Programming tips reviews etc Introducing DecimalMath Posted May 25 2015 Nathan Ever working project requires Decimal precision stuck need use something System Math would shave half precision similar situation several years ago made wonder would actually take implement something like Pow fractional exponent trig functions Sin Cos Tan turns everything needed help sources like Google Wikipedia ex Wolfram MathWorld adapted used past created open source portable library along NuGet package Check let know think GitHub DecimalMath repo readme also details library contents NuGet DecimalMath DecimalEx Coming soon adaptation companion geometry library GitHub right ll add NuGet cleaned unit tested demand ll create preview package well Share FacebookTwitterRedditEmailMorePrintGooglePocket entry posted Coding tagged net decimalmath nuget open source Post navigation Information Sources Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code class title data-url del datetime em q cite strike strong pre class title data-url span class title data-url Notify follow-up comments email Notify new posts email Find Web Recommended Podcasts Security Reply Hanselminutes Stack Exchange Triangulation MacBreak Weekly Archives May 2015 April 2015 March 2015 February 2015 January 2014 October 2013 June 2013 April 2013 March 2013 January 2013 September 2012 August 2011 May 2011 April 2011 May 2010 April 2010 February 2010 January 2010 April 2009 Copyright Nathan Jones 2015 - Designed SiteOrigin Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email'),
('Introduction to Reactive Programming', "Please click redirected within seconds Skip main content ClipMine home Account menu FAQ Help Log Sign FAQ Help Log Sign Search videos channels tags Search submit Clear search Toggle table contents Video Progress 0 complete Play tag Reactive Programming Play tag New Needs Requirements Play tag New Architecture New Needs Play tag Reactive Definition Play tag Property Event Driven Play tag Property Scalable Play tag Property Resilient Play tag Property Responsive Play tag Event Handling Call-backs Play tag Event Handling Better Play tag Contents Online Course Reactive Programming Play previous tag Play video Pause video Play next tag ADD TAG 00 00 00 00 Toggle video settings Video Settings Captions None Change volume setting Close full screen Go full screen Video Contents Toggle table contents Close highlight editor Save highlight 0 Cancel highlight share url prompt tags Log create tags request auto-tagging Don't ClipMine account Sign tags display Tip view existing tags click filter icon select filter tags results found Reactive Programming 00 18 ClipMine Staff Share tag Bookmark tag Tag options Play tag Reactive Programming Pause tag Reactive Programming Edit Delete Report New Needs Requirements 01 21 ClipMine Staff Share tag Bookmark tag Tag options Play tag New Needs Requirements Pause tag New Needs Requirements New Architecture New Needs 02 16 ClipMine Staff Share tag Bookmark tag Tag options Play tag New Architecture New Needs Pause tag New Architecture New Needs Reactive Definition 02 41 ClipMine Staff Share tag Bookmark tag Tag options Play tag Reactive Definition Pause tag Reactive Definition Property Event Driven 03 46 ClipMine Staff Share tag Bookmark tag Tag options Play tag Property Event Driven Pause tag Property Event Driven Property Scalable 04 21 ClipMine Staff Share tag Bookmark tag Tag options Play tag Property Scalable Pause tag Property Scalable Property Resilient 05 35 ClipMine Staff Share tag Bookmark tag Tag options Play tag Property Resilient Pause tag Property Resilient Property Responsive 06 17 ClipMine Staff Share tag Bookmark tag Tag options Play tag Property Responsive Pause tag Property Responsive Event Handling Call-backs 06 59 ClipMine Staff Share tag Bookmark tag Tag options Play tag Event Handling Call-backs Pause tag Event Handling Call-backs Event Handling Better 09 03 ClipMine Staff Share tag Bookmark tag Tag options Play tag Event Handling Better Pause tag Event Handling Better Contents Online Course Reactive Programming 09 33 ClipMine Staff Share tag Bookmark tag Tag options Play tag Contents Online Course Reactive Programming Pause tag Contents Online Course Reactive Programming Search tags input Clear tag search Show video filters Select Deselect Hold Cmd Ctrl click select one deselect filters Hold ctrl cmd click select single filter deselect others 0 ClipMine 0 Bookmarked 0 Community 0 Users Highlights sure Yes Close Report tag Welcome ClipMine tag Bad tag incorrect text spelling mistake etc Spam Inappropriate access features ClipMine need login account don't account also create new one Cancel Submit Login Sign Week 1 - Reactive Programming 11 43 Hendry Suwanda video https class coursera org reactive-001 class index View count 4 8K Like count 32 SHARE EMBEDDED PLAYER 2015 ClipMine Inc ClipMine FAQ Help Open ClipMine Facebook page Open ClipMine Twitter page"),
('Nasven = Nashorn + Maven. A tool to get Maven artifacts in scope for Nashorn script execution', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 7 Star 25 Fork 0 nasven nasven Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Nasven js core code 65 commits 1 branch 0 releases 1 contributor JavaScript 95 7 Shell 4 3 JavaScript Shell branch master Switch branches tags Branches Tags master Nothing show Nothing show nasven better dockerfile shebang parameters latest commit 42fa0bb10e brunoborges authored May 26 2015 Permalink Failed load latest commit information docker better dockerfile shebang parameters May 26 2015 nbproject alignment node package format May 26 2015 samples sample run outside docker see readme May 26 2015 gitignore alignment node package format May 26 2015 README md explanation May 26 2015 nasven explanation May 26 2015 nasven js better dockerfile shebang parameters May 26 2015 package json alignment node package format May 26 2015 README md Nasven js project allows developers code Javascript applications run top Java Platform may dependencies Apache Maven artifacts Developers build pure server-side applications shell scripts even desktop applications JavaFX Maven dependency downloaded configured classpath automatically Requirements must installed environment following softwares Java SE 8 Apache Maven 3 Docker use Docker image nasven nasven js published Docker Hub sudo docker run -it nasven nasven js -- nasven samples helloworld also map run local host application sudo docker run -it -v pwd samples hellodocker appdef nasven nasven js Example samples folder contains Nashorn application depends JAX-RS Client API application coded inside file index js JAX-RS sample Prior Nasven js order run application sample developer would download dependencies JAX-RS Client API implementation specification simplify things easier use Apache Maven configuration sample Nashorn Maven application defined file package json JAX-RS Sample run application use one following commands jjs -scripting nasven js -- samples jaxrs arg0 arg1 arg2 nasven samples jaxrs arg0 arg1 arg2 read arguments inside code ''arguments 0 '' ''arguments 1 '' Example Application Definition File Check samples folder examples package json files Maven dependencies License GPL CDDL Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Rim  Aspiring Vim-like text editor [Rust]', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 16 Star 226 Fork 9 mathall rim Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Aspiring vim-like text editor 113 commits 2 branches 0 releases 1 contributor Rust 100 0 Rust branch github Switch branches tags Branches Tags github master Nothing show Nothing show rim Update README latest commit eafe21abd7 mathall authored May 23 2015 Permalink Failed load latest commit information src Merge branch 'master' github May 23 2015 tests Add support deletion buffer May 23 2015 gitignore Let buffer Oct 14 2014 Cargo lock Use libc crates io May 23 2015 Cargo toml Use libc crates io May 23 2015 LICENSE Let buffer Oct 14 2014 README md Update README May 23 2015 screenshot png Update README May 23 2015 README md Rim Rim aspiring Vim-like text editor written Rust Current state Rim early prototype stage means load edit save files hopefully relatively comfortably Vim used particular simpler commands insertion deletion well window buffer navigation implemented bound expected key strokes Try need nightly build Rust compiler order build Rim set simply clone cargo run Note key bindings testing purposes may work exactly would expect Window navigation C-w v C-w - Split focused window C-w c - Close focused window C-w h j k l - Move window focus left right n N - Move window focus forward backward window order C- y u - Resize focused window C-w - Reset window sizes Buffer navigation h j k l Arrow keys - Move caret Home 0 - Move caret start line End - Move caret end line PageUp C-b - Scroll view window's length PageDown C-f - Scroll view window's length C-u - Scroll view half window's length C-d - Scroll view half window's length gg - Go first line G - Go last line Space normal mode - move caret forward across line boundaries Backspace normal mode - move caret backward across line boundaries Insertion - Enter insert mode - Enter insert mode start line - Enter insert mode caret - Enter insert mode end line o - Enter insert mode new line current line O - Enter insert mode new line current line Escape - Exit insert mode Deletion dd - Delete line D - Delete rest line C - Delete rest line enter insert mode x - Delete character cursor X - Delete character behind cursor r - Replace character cursor R - Replace character line Misc q - Quit F1-F4 - Load buffers C-w C-w - Write buffer file What's next Lots first maybe ability search buffer would open range features perhaps big scary one scripting Trouble shooting stated Rim requires Rust nightly build Rim using unstable features Rust language standard libraries Although breaking changes seem far days may haven't updated latest nightly things compiling Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
("DuoCode and React: an incredible match I can't recommend highly enough that you try out", "Productive Rage Dan's techie ramblings 26 May 2015React Flux DuoCode Back January heard DuoCode signed part beta program started takes C code analyses Roslyn generates JavaScript run browser promises offer benefits statically-typed C Visual Studio writing browser code didn't actually get round installing early version closed beta period recently opened beta product general public got around trying properly Trying go top it's absolutely fantastic compilation process really fast admittedly small projects I've trying translation seems faultless - I've tried catch variety ways seeing could handle ref arguments example since JavaScript concept playing generics trying LINQ statements generating anonymous types really seem Suffice say I'm impressed I've seen there's always currently say FAQ page much DuoCode cost - pricing model introduced future Beta period quite concern since there's literally indication whether expecting charge personal use commercial use per-seat per-company commercial use whether freemium model basics free additional features paid-for something else entirely there's also indication beta period actually Bummer Particularly since I'm excited seriously want push project work it's going prohibitively expensive stability going problem there's chance never reach 1 0 it's going difficult good conscience let's brush aside get back positives Like said way works phenomenal even JavaScript generated really good - source code write support library recreates System System Collections System Linq etc wanted try scenarios particularly current technical loves React Flux Spoiler alert DuoCode React incredible match can't recommend highly enough try Building blocks I've written previously using TypeScript React TypeScript ES6 classes React components TypeScript classes React Flux actions I've got experience I'd hoped able apply Integrating React TypeScript two major challenges Firstly creating base React Component class may derived create custom components secondly getting TypeScript definitions React library two challenges apply working React DuoCode biggest issue using classes React components React's render methods expect React Element generic instance whatever can't define class render method pass React React library's createElement method must used prepare instance use React component TypeScript addressed component file AMD module defined class component model actually exported Factory function would instantiate class given props reference would need - eg import React require 'react' interface Props name string role string class PersonDetailsComponent extends React Component Props constructor props Props super props public render return React DOM div null props name props role function Factory props Props return React createElement PersonDetailsComponent props export Factory React Component class derived class within React library exposed generic class whose type parameter data type props reference component base class accessible due third party TypeScript definition I'll talk shortly gist React library function createElement must used initialise Components - gets passed Component class' constructor props reference pass constructor actually calling constructor performed explicitly exactly C would challenging particularly idiomatic I've ended instead following public class ExampleComponent ComponentWrapper ExampleComponent Props public static Element New Props props return Ele Props props ExampleComponent private ExampleComponent ComponentProps Props props base props public override Element Render return DOM div null props Props Name public class Props public string Name Component class inherits base class generic type parameter props type constructor private since never called directly consuming code - instead static New function magic There's actually several things walk let take one step time ComponentWrapper DuoCode binding meaning it's class DuoCode compiler translate JavaScript Instead it's way tell type system type available runtime looks like Js Extern true Name ReactComponentWrapper public abstract class ComponentWrapper TProps protected readonly ComponentProps TProps props protected ComponentWrapper ComponentProps TProps props Js Name render public abstract Element Render Js Extern true Name ReactComponentWrapper public static class ComponentWrapper Js OmitGenericArgs true public extern static Element GetElement TProps Type componentType TProps props C extern keyword used declare method implemented externally - usually used import functions dlls it's used indicate implemented runtime JavaScript Js attribute DuoCode construct allows structures identified implemented externally words DuoCode compiler need try generate corresponding JavaScript also allows different reference name used runtime class would otherwise indicate - instead MyDuoCodeProject ComponentWrapper use name ReactComponentWrapper final JavaScript ReactComponentWrapper class present runtime Well you'll reference additional JavaScript file index html following content window ReactComponentWrapper function _super function Component props _super call props null Component ctor Component Component GetElement function componentType props return React createElement componentType self ctor Props props return Component React Component base class hooks C Component class inherits React Component class React library like TypeScript class derived React Component library class two things note DuoCode generates JavaScript instantiates classes always ctor function ctor required ReactComponentWrapper alias onto primary constructor GetElement function defined takes DuoCode Component class props reference passed constructor type - returns React Element calling library's createElement method method also declared ComponentWrapper binding would possible create React Element Component class calling var element ComponentWrapper GetElement ExampleComponent Props typeof ExampleComponent new ExampleComponent Props Name test thought would bit unwieldy every time required - needs ExampleComponent typed three times make little less arduous I've created helper class - public static class Ele public static ElementFactory TProps Props TProps TProps props props null throw new ArgumentNullException props return new ElementFactory TProps props public class ElementFactory TProps private readonly TProps _props public ElementFactory TProps props props null throw new ArgumentNullException props _props props public Element TComponent TComponent ComponentWrapper TProps return ComponentWrapper GetElement typeof TComponent _props C supports generic type parameter inference method calls long single type parameter needs resolved means call Ele Props TProps props reduced Ele Props props TProps inferred whatever type props call Ele Props props TComponent know TProps type constaint TComponent ComponentWrapper TProps whatever type props It's bit back-to-front specifying props declaring type Component class it's succinct least it's allows Component classes' static New factory methods declared thusly public class ExampleComponent ComponentWrapper ExampleComponent Props public static Element New Props props return Ele Props props ExampleComponent private ExampleComponent ComponentProps Props props base props rest Component goes words instead type ExampleComponent three times Component compromises whole I've found really good system couple small compromises need explicitly reference ReactComponentWrapper js file page wish way declare JavaScript within net code included final output unaltered would make really easy separate project create NuGet package React integration containing base ReactComponentWrapper JavaScript class C ComponentWrapper class helper classes Ele bindings React library coming haven't found way yet though Secondly due way createElement function works React library Component class constructors may take single argument props data means configuration data must included props type standard arrangement React component classes it's biggie third final compromise createElement function something bit wonky props reference handed basically strips rebuilds maintaning properties declared object prototype object props object class fields - eg public class Props public string Name get set would problems since DuoCode generate JavaScript object get_Name set_Name functions Props prototype best practices JavaScript means functions shared instance class rather identical copies functions present every Props instance - createElement loop properties anything doesn't return true hasOwnProperty lost get_Name set_Name functions go astray become clear code C Components tries access Name property fails runtime workaround wrap props reference container object since createElement enumerates interferes top level properties That's GetElement function ReactComponentWrapper looks like Component GetElement function componentType props return React createElement componentType self ctor Props props gets props reference wraps React doesn't try hurt that's C ComponentWrapper exposes props data protected property thusly Note props property wrapped ComponentProps TProps instance rather TProps protected readonly ComponentProps TProps props ComponentProps class looks like Js Extern true public sealed class ComponentProps private ComponentProps Js Extern true Name Props public Props get It's way tell C type system level indirection around props data it's render method example Component looks like public override Element Render return DOM div null props Props Name really don't need worry system place take granted works forget need access props Props Name instead props Name compiler give error reminding you've made mistake love static analysis React library bindings you've got probably imagine I'm going next define create Components haven't got way actually call React render use builtin Component initialisers React DOM div bindings required - classes functions marked extern Js extern true tell C type system connect JavaScript known present runtime said they're basically equivalent TypeScript type definitions added bonus it's possible give classes functions aliases fit neatly project structure naming convention DuoCode compiler ensure aliases mapped back original function names final JavaScript let's deal obvious one first Js Extern true Name React public static class React Js Extern true Name render public extern static void Render Element element HTMLElement container There's things talk I've named function Render used Js attribute map back library function render - note change case code write C functions pascal-cased wanted able call Render C code rather render HTMLElement type DuoCode class used describe DOM elements call Global window document getElementById x get one back React wants second argument render call DOM element that's great first argument Element type React type needs binding - Js Extern true public sealed class Element private Element public extern static implicit operator Element string text something we're ever going instantiate directly sealed constructor private used describe return type createElement function used return type Ele Props props factory method shown earlier required way tell type system may used one way comes play however - implicit conversion string type required strings frequently used child elements React - eg React DOM span className greeting Hi implicit operator part extern class simply serves tell compiler it's ok use string anywhere React Element required - doesn't anything special allow consistency DuoCode translation process flexibility C language really play together beautifully delighted see easily possible dictate type system Speaking React Dom class far I've covered fraction total library hopefully it's enough make clear may expanded intend add support element types need Js Extern true Name React DOM public static class DOM public extern static Element div HTMLAttributes properties params Element children public extern static Element h1 HTMLAttributes properties params Element children public extern static Element input InputAttributes properties params Element children public extern static Element span HTMLAttributes properties params Element children public class HTMLAttributes public string className public class InputAttributes HTMLAttributes public Action FormEvent InputEventTarget onChange public string value Js Extern true public class FormEvent FormEvent EventTarget Js Name target public new target Js Extern true public class FormEvent SyntheticEvent Js Name target public EventTarget target Js Extern true public class SyntheticEvent public bool bubbles public bool cancelable public bool defaultPrevented public Action preventDefault public Action stopPropagation public string type Js Extern true public class InputEventTarget EventTarget public string value Js Extern true public class EventTarget Note types external aren't simple rule must explicitly created C code external received C code external illustrate DOM input new InputAttributes className message onChange ev Global console log Input onChange ev target value InputAttributes class explicitly instantiated C code InputAttributes must external class requires InputAttributes class generated JavaScript use runtime onChange callback ev instance FormEvent received callback explicitly created - declared external type need generate JavaScript class reasoning behind FormEvent FormEvent SyntheticEvent hierarchy thought would make sense try imitate TypeScript React definitions use types names However one things dislike TypeScript version typing could even stronger example onChange callback React input element TypeScript ev target non-specific type EventTarget skirt around type system access input's value property TypeScript React DOM input className message onChange ev console log Input onChange ev target value DuoCode bindings ev target reference onChange callback known InputEventTarget value property explicitly declared string significant improvement feel Possible gotchas first investigating encountered problem trying Props class nested within ExampleComponent class - seemed specific combination class Props nested within another class ExampleComponent non-generic specialisation generic base class ComponentWrapper TProps It's perfectly valid C compiler translation errors would fail runtime found went Managed NuGet package project added DuoCode Compiler package selecting Include Prelease rather Stable since DuoCode still beta new version compiler installed 0 6 1253 0 instead 0 3 878 0 gave confusing compile error cleared closing solution opening rebuilding resulted problem going away clearly something fixed compiler point tried recreate earlier order get precise error seems creating new DuoCode project gets newer version compiler immediately unable reproduce It's possible artifact earlier installation DuoCode wasn't cleared properly - thinking different PC problem seems feasible kinda wish detailed changelog available DuoCode - maybe freer details decide upon licensing model One oddity go add new C class project two options Class - one described empty class declaration one empty class definition I'm sure I've got two may well another leftover something I've installed past annoying thing though one always tries add System reference project happens project longer build since Referenced assembly 'System' compatible DuoCode error entirely reasonable descriptive DuoCode translates C JavaScript can't translate arbitrary net binary System library re-implemented DuoCode mscorlib get translated JavaScript suffer problem remove System reference project - try remember use correct C class option next time sample project sounds interesting don't want go hard work piecing together various code snippets article check sample ReactDuoCode Bitbucket project It's Visual Studio 2013 solution DuoCode site mentions Visual Studio 2015 places it's requirement demonstrate using React DuoCode also illustrates could use Flux architecture There's implementation Dispatcher incredibly easy using C events translated perfectly DuoCode actions implemented C classes changes state handled one-way-message-passing arrangement There's reason architecture recommended Facebook use React it's awesome D I've seen framework library approach really makes concerted effort manage state - it's I've going immutability years since it's way keep accidental complexity since essential complexity hard enough work there's well-used well-supported UI framework based around gaining real traction able use C language Visual Studio tooling might make perfect combination maybe I'm getting bit carried away don't give try let know think Posted 11 42Last time Writing Brackets extension TypeScript BracketsTags React Productive Rage 2015 Dan big geek likes making stuff computers quite outspoken clearly needs blog last minutes seems taken referring third person He's quite enjoying dangger36 gmail com Recent PostsReact Flux DuoCodeWriting Brackets extension TypeScript BracketsTranslating VBScript C Simple TypeScript type definitions AMD modulesTypeScript ES6 classes React components - without hacks RSS Feed ArchivesMay 2015 2 April 2015 1 March 2015 1 January 2015 2 December 2014 1 November 2014 1 October 2014 2 September 2014 2 August 2014 1 July 2014 1 June 2014 1 May 2014 2 February 2014 1 January 2014 1 December 2013 1 November 2013 1 October 2013 1 August 2013 3 July 2013 3 June 2013 1 May 2013 2 April 2013 1 March 2013 8 February 2013 2 January 2013 2 December 2012 3 November 2012 4 September 2012 1 August 2012 1 July 2012 3 June 2012 3 May 2012 2 February 2012 3 January 2012 4 December 2011 7 August 2011 2 July 2011 1 May 2011 1 April 2011 2 March 2011 3 Every Post Title"),
('Source code for Quantum, an RTS with massive unit counts (x-post r/gamedev)', "jump contentmy subredditsannouncementsArtAskRedditaskscienceawwblogbookscreepydataisbeautifulDIYDocumentariesEarthPornexplainlikeimfiveFitnessfoodfunnyFuturologygadgetsgamingGetMotivatedgifshistoryIAmAInternetIsBeautifulJokesLifeProTipslistentothismildlyinterestingmoviesMusicnewsnosleepnottheonionOldSchoolCoolpersonalfinancephilosophyphotoshopbattlespicsscienceShowerthoughtsspacesportstelevisiontifutodayilearnedTwoXChromosomesUpliftingNewsvideosworldnewsWritingPromptsedit subscriptionsfront-all-random gadgets-sports-gaming-pics-worldnews-videos-AskReddit-aww-Music-funny-news-movies-books-history-food-philosophy-television-Jokes-Art-DIY-space-Documentaries-Fitness-askscience-nottheonion-todayilearned-personalfinance-gifs-listentothis-IAmA-TwoXChromosomes-creepy-nosleep-GetMotivated-WritingPrompts-LifeProTips-EarthPorn-explainlikeimfive-Showerthoughts-Futurology-photoshopbattles-mildlyinteresting-dataisbeautiful-tifu-OldSchoolCool-UpliftingNews-InternetIsBeautiful-sciencemore gamedevcommentsrelatedother discussions 1 want join sign create account seconds Englishlimit search r gamedevuse following search parameters narrow results subreddit subredditfind submissions subreddit author usernamefind submissions username site example comfind submissions example com url textsearch text urlselftext textsearch text self post contentsself yes self include exclude self postsnsfw yes nsfw include exclude results marked NSFWe g subreddit aww site imgur com dogsee search faq details advanced search author subreddit post submitted 24 May 2015367 points 97 upvoted shortlink remember mereset passwordloginSubmit New Threadgamedevsubscribeunsubscribe131 670 readers352 users Posting Guidelines Hover info Use following guidelines determine submission method utilize Post Daily Discussion Discuss tips advice get started Discuss game engines libraries Discuss general programming issues Discuss game Submit new thread Post interesting articles post-mortems videos streams Post questions topics generate meaningful discussions Share free resources guidelines Utilize weekly threads Don't post job offers recruitment resumes portfolios Don't ask us work Don't ask legal advice doubt use Daily Discussion thread Weekly threads FF Feedback Friday SSS Screenshot Saturday STS Soundtrack Sunday MM Marketing Monday QS Quarterly Showcase DD Daily Discussion Filter posts subject Game Jam Post-mortem AMA Technical Resource Unfilter Wiki Resources 1 2 Getting Started Engine FAQ Game Design Art Programming Math Physics Marketing Business Sound Music Motivation Developer Tools Wiki Related communities 1 2 r LearnProgramming r GameDevClassifieds r PlayMyGame r IndieGames r GameDesign r DevBlogs r GameJams r LevelDesign r GameAssets r GameAudio r OpenGL r Unity3D r UnrealEngine r TrueGameDev TigSource IndieDB CompoHub Game Conferences Communications Chat us IRC channel Video chat Google Hangout Watch live development streams Post Daily Discussion community 7 yearsmessage moderatorsMODERATORSrichcoder codebyterethicszen jeffz4000kiwibonga kiwibongaslime73L VE developergoodtimeshaxor LunarPetervraid mflux mfluxLordNed LordNed LuxelOperation com Phil Fish r gamedevrgamedevdrone rgamedevdronelemtzas 6 discussions r gamedev X13 points 30 comments soon process submit steam greenlight 14 points 3 comments run YouTube channel focusing Oculus Rift content There's lot good stuff Indie community I'd love try 42 points 137 comments I've writing mostly game code 365 days straight AMA11 points 5 comments 2D Game Development Tutorials w Java LibGDX4 points 16 comments UK videogame trade association Taking proactive approach diversity makes good business sense publishes 2 free equal opportunities policy templates UK games businesses Looking algorithm repo hosted code Red Faction1 Geo-Mod2 points 2 comments I'm using Pyglet calling draw function inside scheduled update function works fine scheduling draw function independently causes flickering indie game devs go publicize new games 3 comments PSA Message Apple support app Review day2 points 4 comments Need mobile MMO business advice366367368Source code Quantum RTS massive unit counts self gamedev submitted 3 days ago badlogicgameslibGDX benevolent dictator badlogicgamesMany moons ago 7 exact 84 wrote little RTS inspired Dyson Eufloria actually contacted Eufloria guys offered write multiplayer mode politely declined allowed write clone MP support that's 2 months work Quantum complete played lot work got around 20k downloads around web making rounds websites TIG JGF etc Eventually interest faded away forgot Fast forward today thinking writing RTS remembered Quantum started searching traces web found video shortly fork original source forked fork started reviving hours later it's ready shame code 7 years ago D features might interest Multiplayer via latency-adaptive lock-step simulation thousands units inspired old 1500 Archers article Scripting via BeanShell old super lightweight scripting language JVM Here's complete AI map editor take code structure big inspiration Code style architecture especially graphics part good However there's lack fully open-source games simple 2D platformer thought i'd share Github Repository Download You'll need Java installed someone opens server let know 75 commentssharecancelall 75 commentssorted besttopnewhotcontroversialoldrandomq NominalCaboose 29 points30 points31 points 3 days ago 16 children awesome Thanks sharing I'll sure check I'm back home tomorrow hate I'm guy btw 7 moons 7 months permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 2 points3 points4 points 3 days ago 0 children suck permalinksaveparentreportgive goldreply chargingkoala 5 points6 points7 points 3 days ago 3 children don't worry haha permalinksaveparentreportgive goldreply dei2anged 8 points9 points10 points 3 days ago 2 children like guy forget something spent two months seven months ago Lol permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 4 points5 points6 points 3 days ago 0 children happen permalinksaveparentreportgive goldreply chargingkoala 3 points4 points5 points 3 days ago 0 children We're kinda dicks it's also probably important everyone knows moon monthly yearly thing lol permalinksaveparentreportgive goldreply ironpotato 3 points4 points5 points 3 days ago 7 children 7 rotations around Sol doesn't nice ring permalinksaveparentreportgive goldreply teapotrick 1 point2 points3 points 3 days ago 1 child Solar Cycles Bam permalinksaveparentreportgive goldreply ironpotato 1 point2 points3 points 3 days ago 0 children Damn good permalinksaveparentreportgive goldreply -Rizhiy- 0 points1 point2 points 2 days ago 1 child Seven suns ago permalinksaveparentreportgive goldreply jk_scowling 1 point2 points3 points 2 days ago 0 children Seven winters passed permalinksaveparentreportgive goldreply vulgarman1 0 points1 point2 points 3 days ago 2 children 84 moons permalinksaveparentreportgive goldreply ironpotato 1 point2 points3 points 3 days ago 0 children quite yet closer permalinksaveparentreportgive goldreply piderman 1 point2 points3 points 3 days ago 0 children 13 moons year 91 moons permalinksaveparentreportgive goldreply kyle2143 1 point2 points3 points 3 days ago 2 children Yeah saw said 7 years later double take permalinksaveparentreportgive goldreply juehoffmann 0 points1 point2 points 3 days ago 1 child Somehow missed 7 years ago part really thought must hyperactive kid thought maybe that's getting old got depressed thanks everybody clarification saved day permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 4 points5 points6 points 3 days ago 0 children I'm also old fart club however take 2 months finish back permalinksaveparentreportgive goldreply harrro 11 points12 points13 points 3 days ago 15 children cool thanks sharing start digging code unit pathing done pathfinding going node node randomness looks like flocking behavior units permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 21 points22 points23 points 3 days ago 14 children bot use star find shortest path planets current bot iterate planets based heuristic send creatures another planet plant tree See link bot AI OP creatures always moving planet next orbiting planet attacking enemy directly nothing special movement dictacted simple flocking behaviours flocking aware creatures surrounding Extra care taken make O n2 apply simple spatial partitioning iirc Connections planets established map editor either manually automatically via simple Delaunay triangulation permalinksaveparentreportgive goldreply hogofwar 9 points10 points11 points 3 days ago 2 children Star star star permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 38 points39 points40 points 3 days ago 0 children YES permalinksaveparentreportgive goldreply Rotten194 0 points1 point2 points 13 hours ago 0 children paths starred aggressively permalinksaveparentreportgive goldreply harrro 1 point2 points3 points 3 days ago 0 children Nice I've always curious flocking pathing avoid units overlapping educational Thanks permalinksaveparentreportgive goldreply Plazmatic -5 points-4 points-3 points 3 days ago 9 children use there's point map known APSP algorithms instead lazy heuristics permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 6 points7 points8 points 3 days ago 8 children known quantity back map sizes small it's easy modify cost functions permalinksaveparentreportgive goldreply Plazmatic comment score threshold-7 points-6 points-5 points 3 days ago 7 children large amount units paths taking literal graph approach use Floyd Warshal would barely run-time performance hit path already cataloged every situation would longer loading times would also allow much much larger maps permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 9 points10 points11 points 3 days ago 4 children There's path finding individual units There's benefit using Floyd Warshal Even 1000 planets unplayable largest map ever around 40 planets would sufficient Also path finding static bot also take account current unit distribution etc already lying around previous project make sense wasting time something zero impact player experience permalinksaveparentreportgive goldreply Plazmatic comment score threshold-23 points-22 points-21 points 3 days ago 3 children need angry dude permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 8 points9 points10 points 3 days ago 2 children Uhm angry permalinksaveparentreportgive goldreply Plazmatic comment score threshold-19 points-18 points-17 points 3 days ago 1 child Pretty clear one voting permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 5 points6 points7 points 2 days ago 0 children never vote ignore https docs google com file d 0B-iSLz-MItyVSmNvRXJrRjBKZ0U edit usp docslist_api permalinksaveparentreportgive goldreply kefeer 3 points4 points5 points 2 days ago 1 child Floyd Warshall algorithm good choice computing paths pairs vertices dense graphs pairs vertices connected edges sparse graphs non-negative edge weights better choice use Dijkstra's algorithm possible starting vertex since running time repeated Dijkstra O V cdot E log V using binary heaps better O V 3 running time Floyd Warshall algorithm E significantly smaller V 2 sparse graphs negative edges negative cycles Johnson's algorithm used asymptotic running time repeated Dijkstra approach http en wikipedia org wiki Floyd E2 80 93Warshall_algorithm Comparison_with_other_shortest_path_algorithms permalinksaveparentreportgive goldreply Plazmatic -4 points-3 points-2 points 2 days ago 0 children Understand assumption made Floyd Warshal simply example algorithm APSP simply intuitive fastest means B assumption one would want expand game past sparse graphs C Floyd Warshal could run beginning never thought resulting gains overall game run time performance original assumptions process play cannot simply bold wiki article expect point anything don't actually understand anything context conversation you've entered permalinksaveparentreportgive goldreply Sosowski 6 points7 points8 points 3 days ago 3 children see lot resemblance Galcon permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 7 points8 points9 points 3 days ago 2 children Blame Eufloria that's stole everything permalinksaveparentreportgive goldreply Sosowski 0 points1 point2 points 3 days ago 1 child Oh Never played one permalinksaveparentreportgive goldreply g4t34t34t 0 points1 point2 points 2 days ago 0 children probably galcon took inspiration actually permalinksaveparentreportgive goldreply straubi 5 points6 points7 points 3 days ago 5 children Hm 'strictfp' enough contain floating point problems dealing different machines using something else addition permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 5 points6 points7 points 3 days ago 4 children That's enough also need make sure order processing machines use seeds random number generators short need deterministic Sim everywhere permalinksaveparentreportgive goldreply vikhik 0 points1 point2 points 3 days ago 3 children Except different hardware permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 9 points10 points11 points 3 days ago 2 children that's point strictfp work hardware guaranteed following specific IEEE spec permalinksaveparentreportgive goldreply vikhik 2 points3 points4 points 3 days ago 0 children strictfp Huh learn permalinksaveparentreportgive goldreply saucecode 2 points3 points4 points 3 days ago 1 child Oh god made Quantum remember seeing game java development forum least five years ago friends used play competitive game LAN parties school remember talking week ago go forum find Quantum post download link died matter happens saved Dropbox folder got play Quantum awesome I'm glad you're still around permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 2 points3 points4 points 3 days ago 0 children Hah awesome Every months get request download link Thought I'd make available properly Thanks playing permalinksaveparentreportgive goldreply Giggaflop 0 points1 point2 points 2 days ago 4 children can't run linux get error GL2 libEGL warning DRI2 failed authenticate SoundManager buffers size 16384 Exception thread AWT-EventQueue-0-AWTAnimator java lang RuntimeException javax media opengl GLException GL2 implementation com jogamp common util awt AWTEDTExecutor invoke AWTEDTExecutor java 58 jogamp opengl awt AWTThreadingPlugin invokeOnOpenGLThread AWTThreadingPlugin java 100 jogamp opengl ThreadingImpl invokeOnOpenGLThread ThreadingImpl java 205 javax media opengl Threading invokeOnOpenGLThread Threading java 172 javax media opengl Threading invoke Threading java 191 javax media opengl awt GLCanvas display GLCanvas java 483 com jogamp opengl util AWTAnimatorImpl display AWTAnimatorImpl java 74 com jogamp opengl util AnimatorBase display AnimatorBase java 440 com jogamp opengl util Animator MainLoop run Animator java 197 java lang Thread run Thread java 745 Caused javax media opengl GLException GL2 implementation jogamp opengl gl4 GL4bcImpl getGL2 GL4bcImpl java 37127 javax media opengl glu gl2 GLUgl2 getCurrentGL2 GLUgl2 java 198 javax media opengl glu gl2 GLUgl2 gluBuild2DMipmapsJava GLUgl2 java 443 javax media opengl glu gl2 GLUgl2 gluBuild2DMipmaps GLUgl2 java 499 quantum gfx Texture loadTexture Texture java 265 quantum gfx Texture loadTexture Texture java 237 quantum gfx Font init Font java 62 quantum gui Gui init Gui java 54 quantum Quantum init Quantum java 242 jogamp opengl GLDrawableHelper init GLDrawableHelper java 540 jogamp opengl GLDrawableHelper init GLDrawableHelper java 562 javax media opengl awt GLCanvas 6 run GLCanvas java 1037 jogamp opengl GLDrawableHelper invokeGLImpl GLDrawableHelper java 1032 jogamp opengl GLDrawableHelper invokeGL GLDrawableHelper java 909 javax media opengl awt GLCanvas 8 run GLCanvas java 1065 java awt event InvocationEvent dispatch InvocationEvent java 301 java awt EventQueue dispatchEventImpl EventQueue java 756 java awt EventQueue access 500 EventQueue java 97 java awt EventQueue 3 run EventQueue java 709 java awt EventQueue 3 run EventQueue java 703 java security AccessController doPrivileged Native Method java security ProtectionDomain 1 doIntersectionPrivilege ProtectionDomain java 75 java awt EventQueue dispatchEvent EventQueue java 726 java awt EventDispatchThread pumpOneEventForFilters EventDispatchThread java 201 java awt EventDispatchThread pumpEventsForFilter EventDispatchThread java 116 java awt EventDispatchThread pumpEventsForHierarchy EventDispatchThread java 105 java awt EventDispatchThread pumpEvents EventDispatchThread java 101 java awt EventDispatchThread pumpEvents EventDispatchThread java 93 java awt EventDispatchThread run EventDispatchThread java 82 Exception thread AWT-EventQueue-0 java lang NullPointerException quantum Quantum display Quantum java 230 jogamp opengl GLDrawableHelper displayImpl GLDrawableHelper java 588 jogamp opengl GLDrawableHelper display GLDrawableHelper java 572 javax media opengl awt GLCanvas 7 run GLCanvas java 1054 jogamp opengl GLDrawableHelper invokeGLImpl GLDrawableHelper java 1034 jogamp opengl GLDrawableHelper invokeGL GLDrawableHelper java 909 javax media opengl awt GLCanvas 8 run GLCanvas java 1065 javax media opengl Threading invoke Threading java 193 javax media opengl awt GLCanvas display GLCanvas java 483 javax media opengl awt GLCanvas paint GLCanvas java 537 sun awt RepaintArea paintComponent RepaintArea java 264 sun awt X11 XRepaintArea paintComponent XRepaintArea java 64 sun awt RepaintArea paint RepaintArea java 240 sun awt X11 XComponentPeer handleEvent XComponentPeer java 584 java awt Component dispatchEventImpl Component java 4957 java awt Component dispatchEvent Component java 4703 java awt EventQueue dispatchEventImpl EventQueue java 758 java awt EventQueue access 500 EventQueue java 97 java awt EventQueue 3 run EventQueue java 709 java awt EventQueue 3 run EventQueue java 703 java security AccessController doPrivileged Native Method java security ProtectionDomain 1 doIntersectionPrivilege ProtectionDomain java 75 java security ProtectionDomain 1 doIntersectionPrivilege ProtectionDomain java 86 java awt EventQueue 4 run EventQueue java 731 java awt EventQueue 4 run EventQueue java 729 java security AccessController doPrivileged Native Method java security ProtectionDomain 1 doIntersectionPrivilege ProtectionDomain java 75 java awt EventQueue dispatchEvent EventQueue java 728 java awt EventDispatchThread pumpOneEventForFilters EventDispatchThread java 201 java awt EventDispatchThread pumpEventsForFilter EventDispatchThread java 116 java awt EventDispatchThread pumpEventsForHierarchy EventDispatchThread java 105 java awt EventDispatchThread pumpEvents EventDispatchThread java 101 java awt EventDispatchThread pumpEvents EventDispatchThread java 93 java awt EventDispatchThread run EventDispatchThread java 82 permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 0 points1 point2 points 2 days ago 3 children file issue https github com badlogic quantum I'll try look next weekend Silly Linux gfx drivers permalinksaveparentreportgive goldreply Giggaflop -1 points0 points1 point 2 days ago 2 children can't disabled issues XD warning appears implementation super old That's going age project errors found Google permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 0 points1 point2 points 2 days ago 1 child Ah damn it's fork I'll create proper repo sometime week actually updated new JOGL version appears stable Thanks reporting permalinksaveparentreportgive goldreply Giggaflop -1 points0 points1 point 2 days ago 0 children You're welcome It's shame looking forward dueling boss P permalinksaveparentreportgive goldreply acousticpants 3 points4 points5 points 3 days ago 8 children Forked I'm going try work tonight Thanks much I've played starcraft years really want RTS bigger armies Also game programming seems interesting permalinksavereportgive goldreply Raw_Chicken 6 points7 points8 points 3 days ago 3 children tried supreme commander permalinksaveparentreportgive goldreply FyreWhirl 6 points7 points8 points 3 days ago 0 children Forged Alliance best series opinion It's stand alone expansion Supreme Commander 1 improves almost every way units new faction better balance Forged Alliance Forever fan made program downloads mods balance patches extra units sorts multiplayer It's successor total annihilation there's Supreme Commander 2 takes lot systems like resources unit research different direction still good though 200 hours Planetary Annihilation meant spiritual successor Supreme Commander Total Annihilation opinion fell far short games it's based permalinksaveparentreportgive goldreply theonlycosmonaut 1 point2 points3 points 2 days ago 0 children Total Annihilation fans permalinksaveparentreportgive goldreply acousticpants 0 points1 point2 points 2 days ago 0 children Indeed permalinksaveparentreportgive goldreply beefzilla 2 points3 points4 points 3 days ago 3 children Go Planetary Annihilation www reddit com r planetaryannihilation permalinksaveparentreportgive goldreply IAmA_singularity 0 points1 point2 points 3 days ago 2 children love game permalinksaveparentreportgive goldreply Viklove -1 points0 points1 point 3 days ago 1 child think SC fan went downvoting spree permalinksaveparentreportgive goldreply beefzilla 0 points1 point2 points 2 days ago 0 children permalinksaveparentreportgive goldreply ttesla 3 points4 points5 points 3 days ago 4 children Look solid promising video abondoned project 1500 Archers article favourite way permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 6 points7 points8 points 3 days ago 3 children Haven't abandoned consciously things fade away permalinksaveparentreportgive goldreply b-rat 0 points1 point2 points 2 days ago 2 children idea started genre I've seen lot type game around years especially popular 3-4 years ago iirc permalinksaveparentreportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 1 point2 points3 points 2 days ago 1 child I'm sure Galcon first contact minimal RTS games permalinksaveparentreportgive goldreply b-rat 0 points1 point2 points 2 days ago 0 children mean general node based army gathering moving thing I've seen lot flash games like http www kongregate com games tjcarlos civilizations-wars probably earlier examples definitely genre I'd like see new interesting mechanics D permalinksaveparentreportgive goldreply deleted 3 days ago 4 children deleted badlogicgameslibGDX benevolent dictator badlogicgames 2 points3 points4 points 3 days ago 0 children multiple licenses repo file based 3rd party LGPL lib hence LGPL license permalinksavereportgive goldreply PlainSight 1 point2 points3 points 3 days ago 2 children Feel free steal triangulation code want JavaScript http plainsight github io demo includes triangulation area well across permalinksavereportgive goldreply OffensiveJerk 0 points1 point2 points 1 day ago 1 child Thanks Unfortunately computational geometry algorithms extremely hard cover edge cases permalinksaveparentreportgive goldreply PlainSight 0 points1 point2 points 1 day ago 0 children Yeah hard replicate issues Originally Java code using integer math bunch handling edge cases converted JavaScript threw lot edge case code seemed work 99 time permalinksaveparentreportgive goldreply TotesMessenger 1 point2 points3 points 3 days ago 0 children I'm bot bleep bloop Someone linked thread another place reddit r programming Source code Quantum RTS massive unit counts x-post r gamedev follow links please respect rules reddit don't vote threads Info Contact permalinksavereportgive goldreply GISPFaultline Games 0 points1 point2 points 2 hours ago 3 children Game strangely addicting good job Uploading maps dosnt seem work permalinksavereportgive goldreply badlogicgameslibGDX benevolent dictator badlogicgames 0 points1 point2 points 2 hours ago 2 children Yeah server hasn't running years permalinksaveparentreportgive goldreply GISPFaultline Games 0 points1 point2 points 2 hours ago 0 children made maps p another note thought creating sequal would love nothing play scifi envoirment Emagine zooming way instead triancles spaceships Could also diversify ships perhaps tree upgradeable provide passive upgrades planets Much like creating map - ingame permalinksaveparentreportgive goldreply GISPFaultline Games 0 points1 point2 points 2 hours ago 0 children https youtu T1GM7xfA_J4 D permalinksaveparentreportgive goldreply Voltrondemort 0 points1 point2 points 3 days ago 0 children Awesome I'd meaning pick old project tinker holy crap really 7 years permalinksavereportgive goldreply gsuberland 0 points1 point2 points 3 days ago 0 children Introversion feel kind Darwinia DEFCON aesthetic permalinksavereportgive goldreply PtTheGamer 0 points1 point2 points 2 days ago 0 children experience ever OpenGL today tried give shot current doubt work animator yes compare Notch game loop since I'm used running long System nanoTime unprocessed - lastTime nsPerTick lastTime boolean shouldRender true unprocessed 1 ticks tick unprocessed - 1 shouldRender true try Thread sleep 2 catch InterruptedException e e printStackTrace shouldRender frames render System currentTimeMillis - lastTimer1 1000 lastTimer1 1000 System println ticks ticks frames fps frames 0 ticks 0 understood animator would take care render loop want fps independent logic probably still use logic loop right use animator make render calls seems would deal threads way I'm really used either loops completely independent option game looks great btw I'm really RTS didn't read instructions didn't know wth it's clear nice style Edit Also book recommendations Java OpenGl permalinksavereportgive goldreplyaboutblogaboutvaluesteamsource codeadvertisejobshelpsite rulesFAQwikireddiquettetransparencycontact usapps toolsAlien Blue iOS appreddit AMA appmobile betabuttons 3reddit goldreddit storeredditgiftsreddit tvradio redditUse site constitutes acceptance User Agreement Privacy Policy Genitive 2015 reddit inc rights reserved REDDIT ALIEN Logo registered trademarks reddit inc Rendered PID 28461 app-91 2015-05-28 18 10 15 933715 00 00 running 6258777 country code"),
('The Soul of Software by Avdi Grimm', "Skip navigation UploadSign inSearch Loading Close Yeah keep Undo Close video unavailable Watch QueueTV QueueWatch QueueTV Queue Remove allDisconnect Loading Watch Queue TV Queue __count__ __total__ Tropical Ruby 2015 - Keynote Soul Software Avdi Grimm Gravento SubscribeSubscribedUnsubscribe962 Subscription preferences Loading Loading Working Add Want watch later Sign add video playlist Sign Share Report Need report video Sign report inappropriate content Sign Transcript Statistics 3 685 63 Like video Sign make opinion count Sign 64 2 Don't like video Sign make opinion count Sign 3 Loading Loading Transcript interactive transcript could loaded Loading Loading Rating available video rented feature available right Please try later Published May 20 2015Talk presented March 7 2015 Tropical Ruby 2015 conference Porto de Galinhas Brazil Watch talks tropicalrb com videos Category Science Technology License Creative Commons Attribution license reuse allowed Remix video Show Show less Loading Autoplay autoplay enabled suggested video automatically play next Next Clojure Concurrency - Rich Hickey - Duration 2 32 39 ClojureTV 22 558 views 2 32 39 Play nextPlay Tidal --- Nicki Minaj Gave Fans EXY View Impressive ASSETS1 - Duration 0 33 LL 231 views 0 33 Play nextPlay Taylor Swift - Bad Blood ft Kendrick Lamar - Duration 4 05 TaylorSwiftVEVO 78 231 742 views 4 05 Play nextPlay AMD shows new Ruby techdemo Radeon HD 7990 - Duration 3 15 BitsAndChips 23 614 views 3 15 Play nextPlay 29 videos Play Play TaylorSwiftVEVOby Liam Payne Linux 4k coding - Duration 46 22 AssemblyTV 478 views 46 22 Play nextPlay Awesome Games Done Quick - AGDQ 2015 Highlights Trailer - Duration 3 26 Brian Wilt 10 753 views 3 26 Play nextPlay Tropical Ruby 2015 - Better Programmers por Rodrigo Franco - Duration 34 48 Gravento 262 views 34 48 Play nextPlay Desenvolvimento de jogos em Android por Anderson Leite - Duration 50 14 Gravento 817 views 50 14 Play nextPlay Historical Snapshot Twerking YouTube 2005 - 2015 - Duration 3 44 Kyra Gaunt Ph D 121 views 3 44 Play nextPlay Usando o Vagrant como ambiente de desenvolvimento Ruby - Nando Vieira - Rupy 2012 - Duration 46 35 Gravento 1 427 views 46 35 Play nextPlay Integrando o Google Analytics com Unity 3D por Jean Silva - Duration 41 44 Gravento 222 views 41 44 Play nextPlay Abril pro Ruby 2014 - Novidades Ruby 2 1 por Marcio Trindade - Duration 22 10 Gravento 244 views 22 10 Play nextPlay Abril Pro Ruby 2014 - Algorithms Data Structures Ren e Hendricksen - Duration 28 23 Gravento 650 views 28 23 Play nextPlay AngularJS Yeoman por Bruno Germano - Duration 37 34 Gravento 418 views 37 34 Play nextPlay Prototipando aplica es utilizando Parse com e AngularJS por William Lepinski - Duration 41 24 Gravento 227 views 41 24 Play nextPlay Abril Pro Ruby 2014 - Desenvolvendo Produtos n o Aplica es por Jo o Moura - Duration 25 47 Gravento 626 views 25 47 Play nextPlay Concorr ncia Paralelismo e o Ruby - Ricardo Valeriano - Rupy 2012 - Duration 47 56 Gravento 187 views 47 56 Play nextPlay Abril Pro Ruby 2014 - Rails Partes Escondidas por Rafael Fran - Duration 28 23 Gravento 312 views 28 23 Play nextPlay Abril Pro Ruby 2014 - Browsers eat world por Steve Klabnik - Duration 41 02 Gravento 259 views 41 02 Play nextPlay Loading suggestions Show Language English Country India Safety History Help Loading Loading Loading Press Copyright Creators Advertise Developers YouTube Terms Privacy Policy Safety Send feedback Try something new Loading Working Sign add Watch Later Add Loading playlists"),
('A genetic algorithm that tries to draw sample images based purely on a naive image hash comparison for scoring', "CodePen Run Fork Share Share Twitter Share Facebook Share G Save GitHub Gist Export zip Direct links code html css js Settings Log Sign HTML Tidy View Compiled h3 Click start stop genetic algorithm h3 p Add local IMGs HTML algorithm attempt converge abomination based p canvas id preview width 640 height 640 canvas output output img width 256 height 301 title alt src data image jpeg base64 9j 4AAQSkZJRgABAQEAYABgAAD gAeTEVBRCBUZWNobm9sb2dpZXMgSW5jLiBWMS4wMf bAEMAAwICAwICAwMDAwQDAwQFCAUFBAQFCgcHBggMCgwMCwoLCw0OEhANDhEOCwsQFhARExQVFRUMDxcYFhQYEhQVFP bAEMBAwQEBQQFCQUFCRQNCw0UFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFP CABEIAS0BAAMBEQACEQEDEQH xAAdAAEAAQQDAQAAAAAAAAAAAAAAAQUGBwgCAwQJ 8QAGwEBAAIDAQEAAAAAAAAAAAAAAAEFAgQGAwf 2gAMAwEAAhADEAAAAdqCSACQACAC2jCxZRJdRl8vkEgAAAAEEkAEgAEHWalmtR0gA7DPBuYewAAAAAgkgAkAAg1SNWQAD1GcDDBmA3hAAAAAIJIAJAAOg Y5SgAD0lylrHUb4GZAAAAAQSQASAAWsfNQAAAAGYDfQAAAAEEkAEgAFqHzWKuVYto857DIZ1GPjzHuPqGcwAAACCSACQAC1D5wm8B6jRw8RukX0W8aNHkB9MC5AAAACCSACQAC2j5 GQTKZiUsY3ONIza0xIYOB9HS9wAAACCSACQADzHzPMoFM0PbL3E2dlZ4Xx0GnqR0OrspKjGAgfQ4yMAAAAQSQASAAQfLk2aoN 7fl3Q3DWx2e2pOzFq lefb6WifZ19Iygb5GYgAAACCSACQACD5vaftsR8n6u9KPP3eOtzuNXq03m8Zo29665fSqjGnUV43INjAAAACCSACQACD5t eWY nHRZY43dqsalL9vOh7Hp4PXZ79qNavqfMUXe8POZRN8wAAACCSACQACD5wmytds2bwt5c9H7dGXvGasdfT3v1lRhf2w1qllkw8b GVwAAAQSQASAAYUNGD6GFnV zaVDY iYuq50b tNS8ChHzjKQDJZ9BjmAAAQSQASAC3D50GUzeIsUoR6i8yukg1JNYgDc42GAAAIJIAJAOg fpZR9IitnAp0PdLuABZ583jiCqH0IL4AABBJABIBqiasmwxuYSDicgAdQPnqY7ALwPoeVUAAgkgAkFrnzdPKbbmdy5DgUwqpyPMW6Uc6jG5qCdh5gbAm6YABBJABINRDXMr59Ai5QAAAdRRihmihbpJ4jmfRgvkAEEkAEnQfNI8ht Z AAAAAKeYNNPCoFFOs2NNxwAQSQASYTNGS5z6SHcAdR2gAAEniPmSeQqRRytH01O0AgkgAk0SMMG2RtEQAeA94AABIPnGWOVcpAN jKwBBJABj0 eJwPo4XwQAUoqoAABINCTEJWSjA2aNugCCSAdZ86yxCsn07BABRysAAAEg0VMKlXKQDLJv2AQSQCknzCBeR9IgQAUsqgAABINGzCh7imAykfQIAgkgHjNCuYsrupNrHXeU30Z9sBABSyqAAAEg0GLDKges8Rk43ZAIJIBRavaxZ8e6n36kWv0WpsH9b5nsziACllUAAALe5 esz5naaq RKvFXUaIF1afpuPS7GY m0wIJIPFr54b Z9RPN7Pu8MOUTdn0KlvXvqeADoO8AAEFgcfbWt8yutb ptJiXsKod2E7S J77LlXnk37fzoEFlc3Y0Hnd 06Te9NV71HWx7EDjl55L 0czWLXXAAAAFvGOeStfF806Cyrnxxb19T4tjzyTy9jlTkt6pemGVfuXIdvviKdqeuF jHX1DUTiHNHJEkYz7uir8p XucmQAAAFumLeZs j5f0Pmznw7GPdCu6M nydiLo7Crvr6dQTLy OeEfinYVLRckQCSQMIvP6pz939dXAAAAUU1a5m0vz5nf1bTy55JhyxcojnOPMuLq629 pdF2e OAvi Z1msicREgkiYnHLns62U tnM 3b8wAAKWaTlM5K32B cXtX03bOJPGJI5zETHZE13pa vqvP4I MdnWa2ERxORyRKIOKetj6u3rcs SKHuABwMKGoJbBmfiLzOXz 4qWvHcxlPEI5JHLewyJ9S51tYYZ S9XUNR24Il3YR2IlESiJ82U2xbYYW q8xkCy1fcdRa5i0toAz5886PLvGWNR1nex4p4S4ZTy2vO7Oyq707en9Oz5 LW9MO8Pe2nS7vPU9PX5T6fOfV4vZ4uzBEvD7rNu LCfdUVhdDWgAADPHz3pMncrv1vQy7YdPop zFW6muy73lDUdryAgHVhNrV2zaVZt2ZXbVqV2x763YqerlEqPuYWnb69s9jRZPsNa8CoHMkHMtQxTxt7fnM2dX0su CaTued7djT5y6qo5SAEEkAEnnhjnQ2cPUu ZNds b2xybe1uzdvpdsgAABrjXbOIeatato P3wzR0dXmy60QABBJABIAKdjPOY9sgAAABJR4Wthld eNSkAAB 8QALBAAAAYBAgUDBAMBAAAAAAAAAQIDBAUGAAcREBITIDAUFUAhIjE0Fhc2Mv aAAgBAQABBQLyzFkjIAkjrXHoifW2QExdbn 7PW5qc0JdoawG Qc5UyXPVpVY6qp11OwSmTymapu4c7R2i bfG1ftxwV7WpOo4PHInZP2wNl9NLwaAffFWVKglKyB5WS7W6vRWdWJZYp1TKjml1l9 r xLSbkrXi0smvabX8S1 5jGEU7kRWYA0FdEzdbGrRZ6q2oTxYj2IXgE3CQIrYxdGYvSG5yfDtf YaNxdOq5WhbNZ2jkmG0i1XYvEkzLK1OjFYMxZx7Re1V5R6wdtjs3PCtOPVV34dlJ1a7VEwVsuo9hcObPTZNSKsGrLYiFwiWvQmbfOHrlRYPyBI6aWL1brVuITjrDwpB pUPhuUgXQhnYR0xqnDnazlFdOVLFY642tkk4oLRtl9FWUqJiiUdGIpx67WR4VaxcNO1OpS iPUui9h5JKy0eMjEGbdNMpAOgkrhkwAshXo SN70MXFS7t0 kuGkznr0v4izIF7XHIFTKn yQPpgjiipUi uOdW FIEzw0TelUg iWFQ7S1w0mdJu1UKsQwgALvEkMVlDqYH1N1DK5bSuiTkaw9wO7YLMjaWzxYSzfEuqqC1r9oKtDogZmuIAqUEkkc6oDjaOMqLeNHpakwZnMc2XM2XeyTGQic01sf8hrfwtTLmFdjvyKccdBnJRRHmeyuiinBODYziyNxYRfNhSgUJeKTkmktGqRElwoNqNVpshyqE BYZ1vXIqYlnE5JaY0809KnIByyDEyJxLiDY6otIwqXZrPAdJxx0ktvucf511iNkb1cFbZKRMarMSUNEoQcZhigcPbktyJES7bbC wAgrwgJR4Rkk4h39Stba2Rnm1euAifNJmKab388dw37DKlJhFSqZf4kYe2catZnVWlIqTbzMf5LNOJ12EdOVHjnKpHGZRkeVyBMOXnKk2EwgGwYsQxyroOi4frFxNc6R9V4QJeETJ1DrtzNzcNJbZ7XJ TWmc6zxNsJ0KvEmmpqKiSs0 AZMp8cRhTgQoEy1QClbmkF njlDojhDmTPSrB JK74l1yNkJuTUn5p6PSDSSshHwvjdtAcF1SrZn9bZtvVrnR9KqcgpnzReaFvL LVqb9rrBTCU1ahFLHOIIkbI8ROBTeB62K9ZkVVjnCqxlzuw67fIWRNESySpV0vDqtO 72fNFIXlR7B rvw3hp6K24h90dw0xlvdah4LzZi1eAMYTmykxntFV7CfV74dVicl2xuPLGcNEpPpv8AvUUKkncbUta5bIVsD2Y7UP3PDq6TluWG2TjOGlixkrv3y4bxXCmF5rZ2t 2fDrD AK9NMyqkgoBl GmP 573iIuGkJRHL48lpoToVlurH3Ltb seHUdx7tdm8gWNULZFQxOVjnxpqANGF0aYi4s fLPwj2jdTfN8kIJF2 IcFCdjf9jvmn5mSIu19r6VFrI8WAPJ5XTyEQrLHudvEmSUhInlXSRdsDhCvuQ3YCJSqd2 2WNcixebYl anM74IoncK0ytkhUGH7nY syaCi9heqYuC7tRNLlwocR3yLe tbeKYUEiT4ft33TkGpV8d04hzJUs4mg62jHmRLylSP0lU1AVT4SAiDBuT7QJm2bdrF16F2A8weGZLulLqdMqJ YiqPNgtsTZ4kiBQ4RUj0B4OSdRu3Ngd 5CCe8xfDLnKkw kwWCTafjkzpZybdsfKmb4ksRcpv UB2UDwAoZMzN0V4375KTaxDS96iLWg1JT 5qX6B4Ic5geLn6aCX1OXBzfuE22RkyWLcpKkXT7DGAgWfVWLhiT1kf2R1lLT5W7f8AAd5CKODxkaDEk0p0owhuXCrZz75vgD2q iQ 5ILNLVN211ueET vE G1xW2eayTjgJSySk12VVPptUB gcBHN858IcVTtK8Y INk2xMdtiu28hXn7UTrKtzFegOA7wrzAdBhFt8586mLrgAPnG4WMQEvgryuyLdbCKgOc4YZYAxZ4BciYpzM4yYIsEu1RIiwOqtHOsdUTHVYmGmKuVWaiMlhZDfDP8Xe748efROsS9mXZ6ILGTS0Vhy4XRyBDP6egM p6v4Oj9fz oa9kxoq1UIxKZg4RXxNzgu8Xf8ALlYrh5IxSgUPEu3Scpyen8c9GYrMtBAEqUQM9FU1Z0 cySqaZUU Bd6O69clIGQMEuTZN8q VrlEMQ nWjWjkyDJu18jyHYSInoEAczGNaxiff8A 8QAKxEAAgEDAwIFBAMBAAAAAAAAAQIAAwQREjAxECETICJAQQVCUWEyQ4Bx 9oACAEDAQE Af8ABtKi1U4WCxXGSY1mnwY9s6 v3lvamt3PEWmqDSI34hmY1NH5EezPKQjHY 4orrcKYgAHbo0PVaZMvVC1O3uFYqciUK2VzCwxGOegpsYqBY9VaYy0rVPFct7mjVNM qLpYZgpAwKqwsBK97jskd2c5Y 7pVzT wCQXiw3o JUuXqdv8629mao1NxH nqR6DGUodLe9tqPjvj4mMdulxbiuv7hBU4O7aUBWY6vieGi bLoKG9I8lNDUbSJVtmpjPPnRGqHCy2oCimPmHre0f7Bu Tz6jCuZfU8EMOoBY4EoW3hL35lemRTPlo2TVO7dov0 mOYlJaf8R5XXIlel4T43Pp 8j0dQ3Yx7EfaYLA JlG2SlxMRxqUrGUqdJ60u9Rdm5o Iu5YnDGDrjyXlt4nrXnqh0sDBsN3l3S0nWNuxGWMGxcWgq peY6Mhwwgg42aiBhpMqIabaTtWA5MEOxeqDSyYoywEEOwwl3Q1rqHO1YjC56Hzu60xqYy5uTXOBxLVdVZds8S4TQ zajCDzswQZaVfqAHakI9Rqhyx6U3NNgwiX1Nue0WorcTMz52Mu9m2Pp8uZcXi0uy8ypVaqct5gSOIt1VX5i3x 4Rb2mYtZTwYHmqZhaO8rvqONm3btAZmZhbEuLr7U3OItw6xLsHmeMI1aVK wCNqlV09jErzxhGuAJVuS3ZfYZ3tR Oz EADQRAAEDAwIDBgQFBQEAAAAAAAEAAgMEBRESITAxQQYQEyAiMkBRYXEUM4CRoSM0QrHh8P aAAgBAgEBPwH9BtXWRUbNUhU aaZr9LIwPuoe0dQ87xg b xVLfaSoOlx0n6oHO4 LuN0ZRjQzd lVVcsz9bjunOJ3KgLgchPiwNRVLc6qj ACn7fLoqPtJFKdNQ3T9eia4PGppyPiKuUwQOeFUvLjun81zOFC1sTdblLKXlNaXnDU2IRjc pdni40hB6H4h7GyNLXclcqDDyG81KxzTgoMA3ygJZtgE2ma3eQ sidtLBgKmopJ3YaFRUwpYGxD4mrpRUN qqoTu1wXqYfaP2RdI mmwFxVFZsjVMooI4BpjGPi6mjZUb8in2iTPRMs7 uAqe3xQHUNz nW53plCfDZu5U3ad2rFQzb6KKVk7BJGcg G3GsFFBr69FOS92o91puz6CTS72FMe2Roew7Hi3mufRQAxcyjda0n80qwTz1EBdM7Pkq6llHCZpOQVBfqeuk8LGl3nmnjp265CrnXGrk1dOiec9xXZy4ZH4WQ bi9oxmJixkrs7K0RGHrz73vbG0vcdgr5dDXP0M9gVq vofuPLW3qKm9LPUU tHO72gBTV8k5y85T358kUjoXh7Vbq1tbAH9evE7RD i1ciqaYx7tKhvjgMSNynXxmPSxV90lqRh3L5J5yVTymCVso6KGVs8YkZyPfVEiB5HyKmcconzFWS4Gknw7kUDnccO jMIUg0lMfhCVOmT3577FdhSu Dze0 x wAQOdx3TN1xOb8wp2 rgcjlWC4fiIvBfzHDvbsRtU3NZWpZ8tqvj6PEU27P5CgqIqpniQuyEeSqBuUfOVSVL6SYSMVLUNqomys68K u2a1Sng9npJG1zWt5HOf2UrtEbnHoFKUeBjKsFd4DvBfyPCvjsvwpOfApqSWqfojGVa7Uy3t1Hd5V0eY6OQhPGUWLHnaqfZ2VQTeLEM9ODd3apHKTy4UVLLOdLBkqj7Nk qpOPoFBTRUzdELcDuqIW1ERid1U1jmj9u4UlI5hw4J0C8FGFGIpzcLCwo2EqCNWwY4NyZl5UjEWrSgxMgJVBZXT zVT00VM3TGPM5rXbOClttNL jj7KSyNPscn2eZvTKkoXt9wT6ZGmQpkyBQwqji0Mzwa5mSU NOiXgqOnyrfax ZKFy4ZGealoopOimthbuEaQhMpiqekxu5cuDUU3ibhS0mUaJyit7nFU1vbH6n AYCxjiYC0N SAA5cD 8QATBAAAQIDAwcGCgcECQUAAAAAAQIDAAQREiExBRATIjBBUSAyQmFxgRQjQFJikaGxwdEVJENTcrLhM2OSk0RkdIKDosLi8CU1hJSz 9oACAEBAAY Atran5xuXuqEE1UexOMESci Nek4oNj4wbGTpYDdVSjArk6WI6lKj61kx5kcWnAv30gIlJ1GmP2LmovuBx7vKVLWoJSkVJOAhcpkQ6JoXKmyNZX4eHb7oU44tTi1XlSjUnk3giESuU1LnJL7w3uN MQ3MS7iXmXBaStOB8nGRJVwpAFqaKd BPx7xym08TGuBWkEJ5u6EyE25 0583E ZK49nHyZbqzRCAVE9UTM45z33Cs9 KQvgYso1R1xVSq5gw6u1NydG113p6J 5w8lysRj4I7 Q7NhtSqMzY0Cq8ej7ff5Llb yO lOb6uwXaeqNDPyypNaua8i8d4 UKbXzk8MwbYbLi Aiq3ENnzcYCJ9lMzJLNLaecjsMKSlQWncobxmYmUc9lxLg7jWAoYG yTK39kd KYaZGK1BMNhLYbbpvhaCtFojhvh2VmQQ8wdGQeqENpFVKNAIFuiScTvJhLK5ttDxwQtQBPdDrdjSNkdHdDjLgopBoc S3ialcs2T CPJMqo4yro ymMnIUKgvJhcmp1xMjK2UaFCqA3XmGcl ErmcmzjGlltIq1YIvoDwpWHFJFNM0hau3D4Rk9VtDjZeRrJOBrDsyxc qjbZO4nf74008jwtLh8YXDU37 2J JIdVMMS vLuLNTYwKYQ81RKZlu0UjiM SD V0D2eSOtqwWkpMScwea08lR7KwnKCR9XnUA2uCgKEfGMmvLCly8mFC0OiKH5x4e444BYCEhsjdAW3OuMLBqkrob4ZZbbW4 26lZCBW6hggihHGJvKJSUy2j0IJ6Sqg CGGEmuhYFrqJNflnyUf3ZHqUR5K 35jik 2G8nZRl1OOoVZQ5hcMFA yA222EtjoiAlIASNwii0BUU3RamJVDivOwPrhSJaQClNI8UyzqpMTMxO18KcWSu0KUOeWT904tHtr8fJZmXXh4S5XuJgWRQcm0s2R1wNGmjW8q3wkpFFKbqr1nPPSn2jT k7lD AGnyXKikGikzbv5zDCnuYtIVU7oBSboxjXWE9UUYRT01 KLTqy4rriy2mph8TSbCuhws7oUi3ZXS6KOop17oQh5diXmk6FRJuB6J Hf5LlRcsbTRfVfxO 21iUbAottlIHqizaU3fuNI buH mui04bKeEeLaoIRNpT4yXOt GEOpxSYK1EVpzd9czWkXam5bxTtcTwPq PkfgcsumUZlOqR9mnzvlmati yIrzV8YolQp2xruCLr1cTAUu5MUGEONqTW0mhHGJiTeFFtLs9vXnQ4tR8Ce1H09W5Xd84CkkKSoVBG yF6emDqoGqit61bkiH52aVaddNeodQhM6 n6hKqqa9Ne5MUOEVAqk5rhFpd54ciWyu2LnPEu9vRPq93I iZg WJVPiiek3 ny8gW66sNtoFpSlYAQVCqJFmoYb 1HrMS8kwPGvLCR1dcMSUuKNNJp28TmoRURWkaopyZ2S6a0Vb ELxBBuIzszkq4W32jVKoEwzqPI1XmSb0K W3 g5VdwoqZUPYj45lT7gvBsIPDjyKcm8xqmJ9qlG3F6ZHYq kIm5c2k4OtHBxPCGJyVXbZdTaB G1mZ5yh0adRJ6Stwh195Vt11RWtR3k5pZtI17No9sCpu681MIqo3Z9VVmMaxfANYayqyir8rquU 7PyPvMBNoIrvVhFFU7UmoOf6LmF VZs Lr0XP1w9W1lMlNq1WRpnR6Rw9n5oW8VBCE3X7zwES8ulNpNbS yAVDW2N4iqIcln02mHQUKSd4MPya YDaaX5yNxiysW2jimAUqttKvSrMFJJSoGoI3RKzZIL9NG8B54x ffs3HnFBDbaSpSjuAianVA25hyoTjQbh6qQiVrc1zqeccfl3R9IvJ8fN3pruRu9ePq2npQmcpWYkTWvFs4 OA3h1wZVxVW14HzTxgpUKKFxzTOTVHUmUW0D0k p7tmZZCqPTqtF d6Xy74BBoRErIpr41WurzU7zDbTabLbaQlKRuA5ATx2L8usVQ6goPeIcFKOJqkgwVrNTDUzvOovtH6ZpSdTiw6ldOPVCHEG0hYtAjeNkthCqsSQ0Sb7rXSPw7s07lRYvUdA32Yq Hq5I6hssqtYePUsd9 wAc0yOCknPKD7SW rq7sPZTYuvpUPCnPFsJ9Lj3YwVKNVG8k5smyx5 itq7Vax9 JVspz0ktn IM031qQPfnyhIH7RAeT3XH3j1bBS1miUipMKmF1TLo1WGvNT880jLq5rr6EHvVynNk6fOZQczYprOOFVeof8ADnkAMFhxJ gOwnR 5X7s SB WkH28p3Zf Oj4wlCRVSjQRYTzGhox3Z8mdq mrYPtDFaCn2QvwsKlkoUUlHSqMYtSb6g4Oi5eDGS2nkFtxM02CD LlO7KeDRBS1Rqu4WRf7axWWbQ4v71wV9Qi VlD AIIgInJBDP7yX1aQl9penlF81e8dsOzFk2Zdgm1uCjQe6uwK mbkiCTibzmk5war8s6lwK7DWkBSTUHku7BARcpZpXhFdO5 FFlhAQp4W3SOka8iXychWr7usw7LFekmnl2lOUpXgPf6 WXHlhCffGk5rYuQnkeDrNx5vJK955dTDISqtCczcyBq0sHqzpbbSVrVcAILrlFTa cfNHCGfxcnRy6NOoYncI8WENd1YtvuqcPXybjQjCAT 0TcrZpAOMJzKStNpJ3GCWHC36JFY15gU6kxVCar89WOZK BgKGBzzBGNg7FK s1XKiow2STwhrrOw0bh1Dv4Z3UeckiKbCkGWWdZPN6xsnFrUEoTeVKNAIdbYH1RnmqOKjx2IQvWb90WkKtCDB2KXEXLRCXU7 ZsFzM48lhhOKlQZWVtS TUnm9J3rV8odV102SQMDWsOK4AnZkOqsyy8T5p4wlxtYcbUKpUk1BHJJUaAbzC25JQyjN7g2fFp7VfKNPPPlynNQLkI7Bmr5xrsbDSStUVUbTpxMPkcKbNQgiQm1IYUa6FWsjruMUmMmsur85two cf8AZ0 x tjVyS2D1v1 EEMolZXrQip9pg Gzz0wmtbClavqw5DfZywhsFajuEWplVn0UxZbQEjMtpWCoJaR4Q36GMWXW1Nq4KFIxjHlmB LYoHVycYtnxMr5 9XZFhpFOveeVRaErHBQrH7HRHi0aQTLTZHBLo MXMB9PFpVf1iw 0tlfBaaRjGObGDfCRJybimfvl6qPWYSZrKiG170NNWh6yR7o8ZNzq xSR pi9U2rtdHyj lfzf0j lfzf0jCZH L kcyY mwVZMnHGXPu5jWSe8Ye2Fy7lzjSihXaORjCZydSRLYttnp9fZAAFAN2zLbzaXWzilYqDBXL25F391zf4Ytlvwtj7xi naIxgJQCtRwSmEzOVUql5UXhg3LX28BCUISEISKBIwGxdynk1GmS5rOsJ5wO8jjBQ4ClSbiDuzBmWaW86cEIFTCZnKtFqxTLYgfi8gtOyrLquK2wY8Sw0z BAG0rNSbEweLjYJi0cnJr1LUPjGjlZduXRwbTTYf xAAoEAEAAgAEBQQDAQEAAAAAAAABABEhMUFRECBhcYEwkaGxwdHw4fH 2gAIAQEAAT8h0hHiZehcROAD6Fr2lLcstDqZvcJtwMwebIHcwAuHj meiUhkosRq8h8nA9TSEeJlzOgYvQGasxb69qNydWO25eRW5G6ufK8WOZZUQE2h3t19px2dJeBK9h6mkI8TLmFu1DVT26xb9B5rELBwmZ01y9peMOCaqcHcDsv23v09IR4mXLf60tAWsT1bmbq112MvHNdpZdUqVp3il0T68FWrKzfqxO V6ekI8TLlbBwoTT0xBRrRWxXeoeXp6QjxMufkjxpimHuYdzhZN7zZ7jZh7AlNrHqOpwVptHLvtDr8ZBcwZKBTb5h2xIaVuPw0OHyqAgPqDlRB6WkI8TLm5IrVs2thvJhZK4XV5dCMRgnRLfW3SUon3ytEw GOfFjj984RgZC5v6q6Sw4 GZwVzvjelpCPEy5XEzMlVocnmLoUFYQ4WuKeIc8 4GsjHAwdusvBfCjf4w086ywGDtEo l5sAXiNLNWVqxvFQpFYMFjUFKgTUKMmpfrjhBVe0p PS0hHiZcoFWUdEqIXSn0C iMxQYyG AeXSMcshm4N94sfdFVJ1pxxlLOaMBltKuqySCU94jbCIKSUshjYIiu32g XUGpU9reePS3 IbelpCPEy5sKqwDsiW2LT8nKvqx3h7coCZBdAwhNR6kDArZBQ 3qeiKamFz9wgyOhMAiHY2K0rKuO7Pzf0vSEeJlysyWpdZa pQIJQGRMYqUWhhay1jcI6qD NdV2mnmGcDQ1aPo47uG7UPn0jSEeJlysw032JQNczrF4 uHFVjnKKQJ25OL2NZkY7P1 0sBjrp7GkWDH2jg8Cl2tYf7G4A9Cx3lkBujWmXQIF8U8nu lpCPEy5WA8XBysxkK0ltvRwl3VqI8XZO6XJiZVuurLlLHpBiNjm qFLW6hnMSOsmK8 Zp94qNXJZa8V6MaykYVdXRn99W56LSEeJlyq7YCcXwe M6rdIWeqsUq8tthlLLI5H8xaSgiVTpbDCJSVexuwGdDSEstbQkSAsrKpp5FPnjhsib4G6b7U1gLyJWByT0NIR4mXIBvBYBXuH6t0mOkfWTp0AoJhZXUwLEOhgvg1iI7U6zgIl5Q2Kyhhgrjhtng7S JY8OSwzvVjdVd7h26H0NIR4mXFZl0qEWqx2UFcMNeweCjq2yNkrZroFviYa rq9TqtvBSZNGW4ztDKPlGIGMky MleWGQopHM41glz5HcSxNmZWcslL5Wjr3Hn0hHiZccIa4ubn9C8GjwzxUWjV IIBMR46wXtyhWJMuWYxsYNDpOyp45LGDjWcxWzs6PknVCcjdbI2Juc2kI8TLhYsdROHvZ9LiZ89Eq193glvA7rF 4VVSMsc5aWeojBIHCs5VFrWrwPFw ZiAxHrYYVZL3j3T 0IEobdU9piQGniB4o9Muxln9ZnVzaQjxMuGOrUHYPcsw7iy doLQDsj B5gWWmBt6J1GxxgO02IpICkgfLc2v AMnqMO11 wCxswaeODzNnqcAXmSpRkkA3GxMH3YeDl0hHiZRsRGUAtXxL7UvbZHXqjxEOCi2YNXwohn79ej ANOz0xNHA1glKzGeQ GvBjiNMV2SnrFL4P26R9jaHR4IjxkcDOo6t9vLpCPEymSQAM64r6iiZViaRGQWnmOPtX5qG2yhAKD25HNnzzgOIPuyD9yopg3JHH6l1H1lRW3P7T5pwt9aC0Dj5FnmFDJyZCx5NIR4mUfB3Itq96 CWDmuMhSeVPlyurepznHBylB0w DExdX0zOJqJij4 fydIR4mMBazWaNh8A1j GqFq78GA0AKYmEeGnjlXbHOcTWar7H44dRn L8ccY9Y8wF JyTSEeAJHHaBmxvrRm r1Zr A4DIosbAP3DA5R4L5zie X7V OF2o7SQHzxIX7J2 YcmkI8OphfPiDH IvMLfnOP9nWMJEB1hZ7Cu p8tvErRyJpCPBmwPruoln20MaV2QKGV aAw Z1sB1A9uZ33ec44 DzchuvSFbgwxZ8lB8 UUwnZkGGcDG9dGHuMAiislNh Y4EqwxEB7r28mkI8BVT59vNRWsdZiIAdd2oKXRqVTFY8tQuvORIdObpGtN5TdHT28848max7YA iYSW9UAo 32cmkIwOg3zWxvGaHFjQ cqzAQahYAxG77cpAOeQVKDVhynYqF3apY0x06lPvigYtWWVOvg5bCbjRyaRpc1X1 6DV1Is Z3OnwO0wmEo4aRUu5WjSG60Drv6dMweMqxdZ8CGgEpCxglN2U85wdQ8v7h9zYOMv1KYlRaTGnsbOLOUK07QUsCPAOOsfpJ mCCWixPSU8zTv44Xeupa5TGtOEgpgws6eC1 qCJZicPLidSZ xijy3KHWTN LT7HpH 3DA3WYalISnXfQYYH DLJilXGEMoYwJlAbOhvBkXRnx5UerMZyvAjP2rGZGpxN2p6AtdxefQM16GLBistmkMuht7rwruMew 2ADgIxJVQ4GUf9rp6VAZy9sILXrMHAQcKjFqWujNXs KAfUiyWSJmco1McpQQGtwxA31O1vEv4LZYbaXfN1eHdKvr8TAZjhy2ENPG2kwRLgZHQi5 fnwhKBvEjOHVyTEgqQI6kQg1ni32F9KYd2fV7J95 3stfXTD6yyqZNP3j4jtuYhC9Dg9uQupLAoRweEkJXeZHdhuUVFv4 WdrZ69 FjYVWaQ NmCvpKxJmhcMFBbx2sAZym8wRjjKRcVDP9H0emR oOGM1CVaxTOH4woM3Zz2H5g4WHF49x5NOHTuIEPf7zll8TDSP4B o3YrT AAa E6s2z9mYJV5SjDziB4AFmTiFb7TXS2O edl2kBsU6X9p GQ6T cxiZezCvpSC1fP9QdKFKGaFAjxFW4CMhKfqYZTKNZQZwyztpUb1v5fbMGxqAUBy6QjxMpkOJXvBiSqxtXfqvxUWUvSfsT5Os0kdmYXawWvifT5QC 2 4cYBtAZAeihyraXg9DnRjbhd4PQCjpWyTWMZn3nNvBKg7gG1usntl3gUVzaQjxMuRgoaj SPuOZ4z7HpHDTBvz8kBgjQ72KTdrgb96z9D 2gAMAwEAAgADAAAAEAIAJJIABIAJJJJJJAIAJJJIJJJBJJJJJAIAJJJJJIIAJJJJJAIAJJBJJIBJJJJJJAIAJJJJJJJIJJJJJAIAJJBMhAtIBJJJJAIAJJBFJJBJBJJJJAIAJJJJIgIJBJJJJAIAJJAA8z4JBJJJJAIAJJJEIgPJBJJJJAIAJJIn jW5JJJJJAIAJJAJD6rJJJJJJAIAJJBNY SohJJJJAIAJJAJYbJBIBJJJAIAJIBJBJAJJJJJJAIAJJJBNAAIJJJJJAIAJBNAIAAAJJBJJAIAJBBJBBABJJBJJAIAJAAAAABBBBIJJAIABJIAAAAJBoIJJAIABAIBAAAJJJJBJAIABBIAAAAJJIJBJAIBBJIBAAAJIJJBJAIBJBIBAAAJIJJBJAIBJJIAAAAJJBJBJAIBlpIBAAAJBAJJJAIG8LIAAAAIfpIpJAI0GRIBAAAJbZKdJB782XoAAAAJYzXj5FLVPpiAAAAJbPW4LI9L wC5gAAACJ9aqh1KTto5sAAACMQmYUO0X5tmuAASSF kffqsIbaBogQCSAxawQTUuhPkAySSSOiQgSQRVYpTygACSSYHeSQCACqMXgAACd9MSSSCACQIgAAACSoySST xAApEQEAAgEBBwIHAQAAAAAAAAABABEhMRAgMEFRYXFA0YCRobHB4fCB 9oACAEDAQE EPgNox5eRDZPxAGU81 pkwp29olYfVtGP7 HvCI0SoUizUKzrt15whbfbnEVFPqB04ylQxyywNiQ6EI9R7 oBaxKtNn2iLDFgJrJUy3OXQqO7 nj1OV6oxBmQWaJALlhzPWZUH1bdaxWzZK CwxTR8Otg65OrLgw98n6 sfhSetUeVl8fuIANDZdDA0Y4Ck4vIYI4FflC2DG4I5koVoa75k7Z1EasWwmanz78Wr ABlWOSxVO0wFrMhq wBUW g7od1Pr pkGv8AdoVVEuo7OcLNpETk5cTIthqFkc3V21iH8MzAt6uspLt5lRnqG0AHqfeBLly9zUpliGpkiVh4klZKibFVL2UK8Ne57xKw7OyqMyLjM7t1BSyY3w6 eHcfE0brjbbYfpZhWZqJpR3XYaRFoMV8vjIXs13GoZKr5 0YnmkFBsaytrsJaYiV2H1OF5FCKG5cqL6RKAUdD8sIT1v5Ziy5WxJUqVDE1IRQw0TR4OMdIRJTKuVKiRqJYWO77TNs7NVsmBzd eCW7gXYuXc1lSiLUwRCHng4R2g7iDWcwvs8yy9 beVtVOsvP9cF Gaip5mVsgJiFtsIJ4FwRATDDYHD5bPWKrbwxVYznNwmsGDGsANYzhRbbeDqCYMwqhd3D353oBGjFXV4gppO6irq8D xAAsEQEAAgADBQgCAwEAAAAAAAABABEhMUFRYXGBkRAgMEChscHR4fBQYPFw 9oACAECAQE EP6ln Wq71 adk1 gk89m7aBivA ct8XADeX0T91mHV4h94DXfCsB1y61AAlj5tx8Bxb93WM1q1jK9rLopwhWWLFAQ2mPQ FMMXGxjzGZ6w6ZMRGx5 Yzxww4uHpdx1a2KHA7EBRKZWxvjaAyOL9ddIsOCh0F9XzBp2ohyhpomifUobjGJYqk9Obkc5mrdn2 rnoEfLmw ef3OZmBiu1c o3B5m hRyfiBoVNpcHAFW58zAVChUM8I2a iVEia9jTl5gXqfuIwW5 iWMYc2Bg3j8TL dr hJ wAupua w3O13YVMF19cCclb9OMCDkk epp51AM A37eBn6ax6lrEuWCtMT5N565cLkAWJqeLhYPQ51Uv71WK8o0XwvPucGY2ugQg0mQ4juvbu9bw77GgeruDViVYHAbD7dYPYEvcp s8UlbF9o5WK9zU34A 3bQCxFYVvMs2u1 DTix ta91tGjPGg568uswojhb6vxL1Vv cImOLbLjjGKpGEtwYDf fEVfe 0oisVE1IBFvDT0xPaG1G9 EZPWwy PPlMQmcYx6R5rCz64mTv7WdpPaZakVl3L7ghJtN UAGQ HTd7FXsVGsTSK4wlqMbB2vtrsz2wAJY9m sOpKlElSu4lzEhDvtnvPx7eHVtq EzmCOw3mcy7eDP8Ag2m7pvOAbZ8mY7mZ0Bo2zN3xcYakYlWA6Opy8KrcF6 5HV7Dtrsvsftro0oSPUMeWsPISPQmexXDvMJLY E7fvwuGgPn5mNdufcq4eWn9xdDexAlCl2Gw56zPASurT6MSWJciRO24zPGgIhs1Dlp4L8UwNvaSoNyIZWmhK6u4jzcjlfGVcbrXi5vPsyVR02MYUcLPp stJHYlRTSL2RdILSLFpeKZSuoyTd9eDY972bjBMRjOUrOIavD7y4zBf36vF7wtBN5czazk9MvSaF8S Ur2mQDgfumI0pxJtyV5ExsoZWEtTCYtzfbwVdWrMbElkMcd0ECGA0Nu93e CACgw8MBQuW7gd01RN0WyjmglKij1fqACjLwcYeectNFMsYTJFx0C0yPvyC2ZAZDxFMybt0JkDwP EACgQAQABAwMEAwEBAQEBAQAAAAERACExQVFhECBxgTCRsaHB8NHx4f aAAgBAQABPxB VYdjB2uetxWkpSJCGbSINWpLx4I4g48jilFO bIAfQUkEImXdCrH01brCVfPq9WiScJkSAVEFWAi70y R VYdjB2uaDhRclKFgAVWwFKVZfimHAjwE5EQmjyTu3sqSp3XtUj0InISoQYMhACqRi9oOgMvxpXeo YjcRGEfkf1WHYwdrmoJREFlVzCIloGh3BBE3hN6ksWSCzanWuA6XxRZgzAMIcqwwSWxQMnxv6rDsYO03LboGkeAWj3ByXUGdBAaANO4HgtjKa0VhhBJRwYP7XNF3PTXVMyjI6q6t1V3fE qsOxg7VpZCIVZfWacvxHwkk4YvA503vjf1WHYwd1dzUAXEAk2UD1OtFLhcCCFGW7IC5YGyirOuAWQREsiJnpfi2SIbrA5UKGsRhBdFsT4UqAFzL6YQSayViGJvNJwAquuGMmjJ0CWQCYm GlxTby07iSfvxP6rDsYO6vE0phNgT6mhbzDRNjGrOrqzehXsNcTsCMXis0FP2hA67nCLRTAisyIHtSgKMmLJddg0DH3QXjBk4EAso6U8JSiZi0m6GeKdYOkiYbPhITh65IC1rSXMz8T qw7GDtMmZ03TP7XPo1yl xW0WCBcRZgEReksyFpdAQthmQEpBortGQ9j2TRbiAQlg8qQyX0wwSMMIcZhhTA2kTai3AFQBnyuTLLdoWCiM0g7yzdFMBVg6BH9DH8PUw4IWZxfFP6rDsYO1eAkEqtEeGlhxkMi1pwbUXxr5a 7obecZVZp2Nu6rKiBtwTSaLhLZlUyXYxFPpWi0TMDXzSx2eQReVJNom9LxpWI1EcVMkNQFjfG90Sb0Tuxo3wbONsN uPNF Ij qw7GDtc1FcFwTFo lDSwq4WQYpbRCUiKw0QAN11V1W7RGWgAB4K3zAElQ1kgOCgSGCGI2RTgsUOmsphjY3mJW rUJBJiLF 4ADQAadWcZVzyT H4n9Vh2MHblTKra JGM2mZnWgkZDwBYApXCCK5BUSrNO0UfmbkCoaPZ0KLbabzdbF5oO4MRaC8wE7B1GCgJcMP b9fE qsOxg7dU4pT5cvBHhP2jWT sEORew970R7YJITcosUQlvU URcD7F1wFTrXzCtwMv08VoqcxHgW9CrFLIwOVwUUMwGAW1IYV2QsiVcmSiRc8eN6S2tC6cP tDTXPsyXbeOBPif1WHYwduTUHkTdSBkZh1EaHGL4DAy vukTuBhOshb VbbttXiyUOx8yh8jloviVgFKKCJg f PikI2GobrrSV7ZIJg3eLgF1BiY3yaj5JKjcgRQLhGZmIoYkWjFKnSUAi VVIlN hz qw7GDtYxDgNLnRxhMNikAGMDKtOBaeGcbjcrjgiu8DWiw5syP8pF12Nfqx aeWZGRPBpT2qASg JYBpUzzMLICPpabTrWgyRsocDqLG81S9g1KYKoKGOQ0KlBZERE B VYdjB2YfyISbzKGgwEIVT AFRlBIMqhgSsF1ZadOK00JMWU8PwR A10qRFVgqXFeIoT4sTFW6jchY80AAADAdSMznMXyN0Hf27HNkU1HBe5LG07Lj3v6rDsYOo8i syywAKvFG3q2U0AzpGNAJhoDEy0mR9hHCqD CQM3dqTl6ZoQBNKqimYRURPuF 1upk0XkG0gk03KQOweELImj1GQ3E4QWqIWUHNR4IIEJebhjsEsA7n9Vh2MHWSk6wLROjAWqytqBoSdpGwhy28B3adsBImE6zfZV xQJWCmvDpl ikkVNMP1RpmIJht3Fl6vsdUsiCQ7Azl3BQGg1kZAIsNIWQ7n9Vh2MHSXY4yJ rFFllwLSodvMSl8Wujagmgj0CFwYPtVZEfMKCCQwumJokZ2rDS6oEl0OZrApRLK eiAZUwx9qcdxxmpCX1o NJRauBmAqkqhkQGwlPryJx5EKeY81BdVzBbjZ6stIT38Qs2ACztbu5 VYdjB04VBqNV joHoJQxGGUAGWBVYALtwTAFiJFizwtA3RApMI1oAICDjqAYt2o5Pql6w6c1EPDbcivItKy5cBqybwcANKsLQzw XR0fuSrfKBDcDRrJ iPRx6mlUoLiIIlNgMhpkSCIxhgLTtf1WHYwUAMCy484AKvFOBS GYbBZDa8Kv1FYvSbw9460gJAAutHwrzLZTn4sqlwYbd5padA3YE3tU4N2lksBEwP Ktt6dGjx3tuW4Q34IVwYTpuP1SSNxlS gt2P6rDsYKj2PUglH3EH4qGRC8KMI0UaNzyHbSGE5Q1oanGQMFwAPVOes4jNEaR35dDOI1ImUeFQZmlhiBG40SkuVacBoVG6TdmSHyonkek5tBYT3xSnCpCtLSCA6iI x VYdoQ fbEoRpZfj0JepcCER1LC1Do56kvKWGz35dUv1iEA9r0elzJbrZq75RD 51TWgRxHB 909j qw7CPCMCizCMpSQyETTBcjJMqXKrM1mlYxWCSjlPQc9TaXlPq3fl1K Ms16IKFiwGbt OoJUsuD8Nw3jsv6rDqxCXiMqcALSejtQuBAwxl1eAYBQFEslf5sqAAABYDTo56uuNrn335dSSQ2ZlH T04kRhCvv9HqagCUmf8AdXrsf1WHUChI8bz18Lh yTbq56roIp e LrOUpFmKXSGB1TBXCSasj2vs6x5mFZ0CXsf1WHVh4LoCF 6agQyIMggESYZi1oVQkk5w4CuY8KDl8sJchwobJZMPVz1mW6 e LpJvUTwEhCNKFC8RmjgBk9SX9BKK1SYXY yTbXStVvc51AKhBJWCWJNO5gWY0bUD kyQu3RDWe3Y qsOpwkJGr2bBf6NaioX7kpuq1CxRdRS334QI4WTUTxHn1Et0c9ZiYZQe Kg1qhiBCwNpZP7U4YFU wDSpAdJsxIydQqMsLc7Gm6EpIZguwt7NaKAhHHLgsGV8u4HY qsOibgUS8AyuCp4MpeVdJZfRoUoWivuVOqQRKpYWffJz56OerRgob27z4GlSApo52gSFLNZoZQcQyGXhkeTnqckYcq0 8A2hoFlxnT brq8BTJsn9 x VSaDK3Ggw WDlqKmjJw8k lDNEpHhGA4KGCgEtboxdtUGg5qFG1CKAP 5ZifunPxNSdtcwWP7U1sZ5pbA0VPqGDkpIML6KJAPM1frNxlHsFEFqyimYIAHAaEzRzMb0 Wk RqJcrTPryY6uiZohGdyihFyV3oJOWhdKb5iKMBQ04oIDzQ5lsHZ Q3orhSEiOH4pzAs 6nU4X8KAkylEolVm NAEB6olAWoZ6vBNSeXDrcnLXbO9GkEJEw9MWeDXT aiDbIFXKRU3obUW1 qGkxFATmxSq6crf8AVH54 KGc9AeUWAyrRcq4aQQuyEJi7C0KHNJg5mgRAmjVyobZ6E0NCXTehXw0P17nH1TdJq7jsmR4aMly KZjH 1WFTUjE9JjqVk2qArJ9YyO47Ux5qO45PD ACHX4G36YMUKGu4YJ0BrP9wxMCwW4qDdIoSHr32UQdIrAqRWU0E aDhWMUzNADNQd0ESIaL7D mlDhb4R yo3i6f7QiC0gvigWrgoIrKYttRNPqtFREuC9CyTkOi8NHi lEUmqRKxEERLPaRXoQDVVsFAOZ8UqsTlOFzGymE9NwWNAqYCSOgAC8k4f8AFBhaULGri aimFootUyVg5p1J4NjuuA5aZhhMZ CddYoaJ nY 4tCkYpkF1Y8GgU1VOE0M61EUL1Zo0S1LiIlqOxfRnKBI0yuY3ocetIfm ePSrerULNEhnkP2ojAI5XRT91BJJdIVh gVnoXaOAiW8pL WtpKjQmjbzUMRapQ1A3AUhAoQX8pt1rxHxwHqfNH8rMbrdN189H83WlMj6QtQ3qsJOXf6ml NDj0k0SXTs1DMnzQbNvmsWfui5BpuIKRkxRRC1BiINRNMN gDJRPMA wCKQToAWzUiaIFH3SxEDmt7ZGhbmsZJ2L5RKPcEL56uZveMbB2P6oJKcrVlY9I0oLXUo8XVJyoCe6aDLSNe9vSqMrpN97lkaFgBw0YSPdX8VUH qM0kb1mFhhIvYgaZjZq6BDiwRPloQYKGWasSf37o8FQyWfoq 7nGCtg2NrDQUiEzIX 1Ql Y1DboLoY5jK8VKAoapjFvEqrvKJUI wB1pE900IPdDWMTOpB0xQqBQgaAsAGDtf1WHYwUDXYOLhI ynOmgzegDh1lu67cXhixkrAyFL7ZWZJGkytKX7Au0tEhxRMhkyTMPAE0CfYstAFgAADHwFLhcZmnItJTToCFHTgUGWUQibNGmopJHeEIywLBq4KGdMLlMgGUjGdzcUAAgCAO5ph2MHWKyUIcLzlGlVzJ71F8WXR01hAIMQxPTS0AkyfqdHCVYvxDUdUBXLL8H Z img width 256 height 256 title alt src data image jpeg base64 9j 4AAQSkZJRgABAQEASABIAAD 4QDQRXhpZgAASUkqAAgAAAAGABoBBQABAAAAVgAAABsBBQABAAAAXgAAACgBAwABAAAAAgAAADEBAgAMAAAAZgAAADIBAgAUAAAAcgAAAGmHBAABAAAAhgAAAAAAAABIAAAAAQAAAEgAAAABAAAAR0lNUCAyLjguMTAAMjAxNTowNToyNSAyMTowNzoxMAAFAACQBwAEAAAAMDIxMACgBwAEAAAAMDEwMAGgAwABAAAAAQAAAAKgBAABAAAAAAEAAAOgBAABAAAAAAEAAAAAAAD 4QNAaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49J 7vycgaWQ9J1c1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCc Pgo8eDp4bXBtZXRhIHhtbG5zOng9J2Fkb2JlOm5zOm1ldGEvJz4KPHJkZjpSREYgeG1sbnM6cmRmPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjJz4KCiA8cmRmOkRlc2NyaXB0aW9uIHhtbG5zOmV4aWY9J2h0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvJz4KICA8ZXhpZjpYUmVzb2x1dGlvbj43MjwvZXhpZjpYUmVzb2x1dGlvbj4KICA8ZXhpZjpZUmVzb2x1dGlvbj43MjwvZXhpZjpZUmVzb2x1dGlvbj4KICA8ZXhpZjpSZXNvbHV0aW9uVW5pdD5JbmNoPC9leGlmOlJlc29sdXRpb25Vbml0PgogIDxleGlmOlNvZnR3YXJlPkFkb2JlIFBob3Rvc2hvcCBDUzIgV2luZG93czwvZXhpZjpTb2Z0d2FyZT4KICA8ZXhpZjpEYXRlVGltZT4yMDA1OjA5OjIxIDEzOjM0OjIxPC9leGlmOkRhdGVUaW1lPgogIDxleGlmOkV4aWZWZXJzaW9uPkV4aWYgVmVyc2lvbiAyLjE8L2V4aWY6RXhpZlZlcnNpb24 CiAgPGV4aWY6Rmxhc2hQaXhWZXJzaW9uPkZsYXNoUGl4IFZlcnNpb24gMS4wPC9leGlmOkZsYXNoUGl4VmVyc2lvbj4KICA8ZXhpZjpDb2xvclNwYWNlPnNSR0I8L2V4aWY6Q29sb3JTcGFjZT4KICA8ZXhpZjpQaXhlbFhEaW1lbnNpb24 ODAwPC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24 ODAwPC9leGlmOlBpeGVsWURpbWVuc2lvbj4KIDwvcmRmOkRlc2NyaXB0aW9uPgoKPC9yZGY6UkRGPgo8L3g6eG1wbWV0YT4KPD94cGFja2V0IGVuZD0ncic Pgr 4gxYSUNDX1BST0ZJTEUAAQEAAAxITGlubwIQAABtbnRyUkdCIFhZWiAHzgACAAkABgAxAABhY3NwTVNGVAAAAABJRUMgc1JHQgAAAAAAAAAAAAAAAQAA9tYAAQAAAADTLUhQICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABFjcHJ0AAABUAAAADNkZXNjAAABhAAAAGx3dHB0AAAB8AAAABRia3B0AAACBAAAABRyWFlaAAACGAAAABRnWFlaAAACLAAAABRiWFlaAAACQAAAABRkbW5kAAACVAAAAHBkbWRkAAACxAAAAIh2dWVkAAADTAAAAIZ2aWV3AAAD1AAAACRsdW1pAAAD AAAABRtZWFzAAAEDAAAACR0ZWNoAAAEMAAAAAxyVFJDAAAEPAAACAxnVFJDAAAEPAAACAxiVFJDAAAEPAAACAx0ZXh0AAAAAENvcHlyaWdodCAoYykgMTk5OCBIZXdsZXR0LVBhY2thcmQgQ29tcGFueQAAZGVzYwAAAAAAAAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAABJzUkdCIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWFlaIAAAAAAAAPNRAAEAAAABFsxYWVogAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAABvogAAOPUAAAOQWFlaIAAAAAAAAGKZAAC3hQAAGNpYWVogAAAAAAAAJKAAAA EAAC2z2Rlc2MAAAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAFklFQyBodHRwOi8vd3d3LmllYy5jaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABkZXNjAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAC5JRUMgNjE5NjYtMi4xIERlZmF1bHQgUkdCIGNvbG91ciBzcGFjZSAtIHNSR0IAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAAAAAAAAAsUmVmZXJlbmNlIFZpZXdpbmcgQ29uZGl0aW9uIGluIElFQzYxOTY2LTIuMQAAAAAAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHZpZXcAAAAAABOk gAUXy4AEM8UAAPtzAAEEwsAA1yeAAAAAVhZWiAAAAAAAEwJVgBQAAAAVx nbWVhcwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAo8AAAACc2lnIAAAAABDUlQgY3VydgAAAAAAAAQAAAAABQAKAA8AFAAZAB4AIwAoAC0AMgA3ADsAQABFAEoATwBUAFkAXgBjAGgAbQByAHcAfACBAIYAiwCQAJUAmgCfAKQAqQCuALIAtwC8AMEAxgDLANAA1QDbAOAA5QDrAPAA9gD7AQEBBwENARMBGQEfASUBKwEyATgBPgFFAUwBUgFZAWABZwFuAXUBfAGDAYsBkgGaAaEBqQGxAbkBwQHJAdEB2QHhAekB8gH6AgMCDAIUAh0CJgIvAjgCQQJLAlQCXQJnAnECegKEAo4CmAKiAqwCtgLBAssC1QLgAusC9QMAAwsDFgMhAy0DOANDA08DWgNmA3IDfgOKA5YDogOuA7oDxwPTA AD7AP5BAYEEwQgBC0EOwRIBFUEYwRxBH4EjASaBKgEtgTEBNME4QTwBP4FDQUcBSsFOgVJBVgFZwV3BYYFlgWmBbUFxQXVBeUF9gYGBhYGJwY3BkgGWQZqBnsGjAadBq8GwAbRBuMG9QcHBxkHKwc9B08HYQd0B4YHmQesB78H0gflB gICwgfCDIIRghaCG4IggiWCKoIvgjSCOcI wkQCSUJOglPCWQJeQmPCaQJugnPCeUJ woRCicKPQpUCmoKgQqYCq4KxQrcCvMLCwsiCzkLUQtpC4ALmAuwC8gL4Qv5DBIMKgxDDFwMdQyODKcMwAzZDPMNDQ0mDUANWg10DY4NqQ3DDd4N A4TDi4OSQ5kDn8Omw62DtIO7g8JDyUPQQ9eD3oPlg zD88P7BAJECYQQxBhEH4QmxC5ENcQ9RETETERTxFtEYwRqhHJEegSBxImEkUSZBKEEqMSwxLjEwMTIxNDE2MTgxOkE8UT5RQGFCcUSRRqFIsUrRTOFPAVEhU0FVYVeBWbFb0V4BYDFiYWSRZsFo8WshbWFvoXHRdBF2UXiReuF9IX9xgbGEAYZRiKGK8Y1Rj6GSAZRRlrGZEZtxndGgQaKhpRGncanhrFGuwbFBs7G2MbihuyG9ocAhwqHFIcexyjHMwc9R0eHUcdcB2ZHcMd7B4WHkAeah6UHr4e6R8THz4faR UH78f6iAVIEEgbCCYIMQg8CEcIUghdSGhIc4h yInIlUigiKvIt0jCiM4I2YjlCPCI AkHyRNJHwkqyTaJQklOCVoJZclxyX3JicmVyaHJrcm6CcYJ0kneierJ9woDSg KHEooijUKQYpOClrKZ0p0CoCKjUqaCqbKs8rAis2K2krnSvRLAUsOSxuLKIs1y0MLUEtdi2rLeEuFi5MLoIuty7uLyQvWi RL8cv jA1MGwwpDDbMRIxSjGCMbox8jIqMmMymzLUMw0zRjN M7gz8TQrNGU0njTYNRM1TTWHNcI1 TY3NnI2rjbpNyQ3YDecN9c4FDhQOIw4yDkFOUI5fzm8Ofk6Njp0OrI67zstO2s7qjvoPCc8ZTykPOM9Ij1hPaE94D4gPmA oD7gPyE YT iP JAI0BkQKZA50EpQWpBrEHuQjBCckK1QvdDOkN9Q8BEA0RHRIpEzkUSRVVFmkXeRiJGZ0arRvBHNUd7R8BIBUhLSJFI10kdSWNJqUnwSjdKfUrESwxLU0uaS JMKkxyTLpNAk1KTZNN3E4lTm5Ot08AT0lPk0 dUCdQcVC7UQZRUFGbUeZSMVJ8UsdTE1NfU6pT9lRCVI9U21UoVXVVwlYPVlxWqVb3V0RXklfgWC9YfVjLWRpZaVm4WgdaVlqmWvVbRVuVW VcNVyGXNZdJ114XcleGl5sXr1fD19hX7NgBWBXYKpg GFPYaJh9WJJYpxi8GNDY5dj62RAZJRk6WU9ZZJl52Y9ZpJm6Gc9Z5Nn6Wg aJZo7GlDaZpp8WpIap9q92tPa6dr 2xXbK9tCG1gbbluEm5rbsRvHm94b9FwK3CGcOBxOnGVcfByS3KmcwFzXXO4dBR0cHTMdSh1hXXhdj52m3b4d1Z3s3gReG54zHkqeYl553pGeqV7BHtje8J8IXyBfOF9QX2hfgF Yn7CfyN hH lgEeAqIEKgWuBzYIwgpKC9INXg7qEHYSAhOOFR4Wrhg6GcobXhzuHn4gEiGmIzokziZmJ opkisqLMIuWi yMY4zKjTGNmI3 jmaOzo82j56QBpBukNaRP5GokhGSepLjk02TtpQglIqU9JVflcmWNJaflwqXdZfgmEyYuJkkmZCZ JpomtWbQpuvnByciZz3nWSd0p5Anq6fHZ Ln qgaaDYoUehtqImopajBqN2o akVqTHpTilqaYapoum adup CoUqjEqTepqaocqo rAqt1q msXKzQrUStuK4trqGvFq LsACwdbDqsWCx1rJLssKzOLOutCW0nLUTtYq2AbZ5tvC3aLfguFm40blKucK6O7q1uy67p7whvJu9Fb2Pvgq hL7 v3q 9cBwwOzBZ8Hjwl C28NYw9TEUcTOxUvFyMZGxsPHQce yD3IvMk6ybnKOMq3yzbLtsw1zLXNNc21zjbOts83z7jQOdC60TzRvtI 0sHTRNPG1EnUy9VO1dHWVdbY11zX4Nhk2OjZbNnx2nba 9uA3AXcit0Q3ZbeHN6i3ynfr A24L3hROHM4lPi2 Nj4 vkc T85YTmDeaW5x nqegy6LzpRunQ6lvq5etw6 vshu0R7ZzuKO6070DvzPBY8OXxcvH 8ozzGfOn9DT0wvVQ9d72bfb794r4Gfio Tj5x pX uf7d wH Jj9Kf26 kv 3P9t 2wBDAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAQECAQEBAgICAgICAgICAQICAgICAgICAgL 2wBDAQEBAQEBAQEBAQECAQEBAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgL wgARCAEAAQADAREAAhEBAxEB 8QAHgABAAICAgMBAAAAAAAAAAAAAAgJBgcFCgEDBAL xAAbAQEAAgMBAQAAAAAAAAAAAAAAAQMCBAYFB aAAwDAQACEAMQAAABv8AAAAAAAAAAAAAAAAAAAAAAEOBsjXW5H31to6eX7kAAAAAAAAAAAAPxDQfqRAHpqo6buPzWJG fNo3GXZ9rykAAAAAAAAAAANS76EPv1zB5zLe nlxuUVh9FVpP3Iuu4G 7IAAAAAAAAAAAfNKF3SYbE8qZLedkkPEOvd9A1bj TvkH5mYAAAAAAAAAHGwqvwmrCWhb4sIpdiDJ wCk tKJ5 NZL3w80gAAAAAAAAOKKXsEx5bb9FB dwzfws7PZAeIUF9bXOjw8rDfOySAAAAAAAAAwCGRp42Gmd1jmeMt9GQBhcR1Ott 9KcrOybk39IAAAAAAADwcOemEHcZ90xLHOdf3xIrWJDVd0Q 95YDzc6qhRRi7E2bmQAAAAAAAY7jP1TFLFWdd2GcLrqbzs1intYyJ8mc1rnij8Q9KcQxYraznGI84pi5AAAAAAABikMHtVZ0qIcZw OL5sk3OowlxzeWRUZcplFY1eVVuGew7KuwFe1HuJW c UgAAAAAAAI77bCd2NW1MdybC9PH79ROHwc9UROd5R1Ra5iZE4ZZj2is2W9HhYJzWfkAAAAAAAAQwG6I0 jFPnQ03t8nfvzTlLHSOfoOF11PNLYkraPUx01vRYPzOaQAAAAAAAAGrbo62H0jW7RXzPZ5fGQMMzVTdDXs25keM5jrpi Dlk2EpAAAAAAAAAak2Y65v0XX7Fvze Tu3hMLzrQOsz3Hnza8jYuL53Y1btRzVbOapAAAAAAAAAGpro66 0bXuG4y6v AKKu vhLwOtH9A8 xTntu0fn7evz3dFj3OZzp8exIAAAAAAAADWFsdfX6HRbRyVsMPdwvA4e4Drpd3q2m85sbn0ZoY7ejsk P7 XiQAAAAAAAABhlkdfv6DTaTyVkPOgwux4e4Dr3drrWk8 fjWUQd9fG87kLfMgAAAAAAAAB88uu 8AQKLMuWsip0OF0PDXAUIdrrWbeBdqO5qPZi3HmbEgAAAAAAAAAhQJ3tFmXMWQ06Wu5ThL0hSP1 vPvybdSWMFsWpc7mkAAAAAAAAAEKJu217VOcvqr6 m8XgL UxCrLpqt1UzgFM49tLQ azSAAAAAAAAACFKfX0WT LdWL0VNrfL27k0chXr7 GdYxjdDRnpLZ WsSAAAAAAAAACFOHU68ztS7SE4ezcysP5jL1SgX02Ep By0BdjEb3V0 IWAAAAAAAAAAIVu 3r 3dtsO5jKl7qNfkb8 msmQnkzZH4NkNPSqrG6vHsC8FekAAAAAAAAABovYwq266u57i7uewa5tj7TOasvMoaelXVz1mHYR4C9IAAAAAAAAADxCiDs9a4PmdjbunIAEPfTxr46Wu8nhrkgAAAAAAAAAEKm h15UU3y78SfMgEIb zjonfxs 5exIAAAAAAAAABDXFuNN3YUW88vsbf0pA4HNX90uMlvJSJ83JIAAAAAAAAAACtv2deLPurTebvzChj9saM9aPnqTn57PyAAAAAAAAAAAAQD9bXiT607hos5yEhfPSs8rP2CQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH EAC8QAAEEAgECBQMEAQUAAAAAAAUDBAYHAQIIAEAQERITFhQVIBciJzEhIzQ2UGD 2gAIAQEAAQUC wCuelBw3XefxHTLabRZ1vjbG2O6ztjXB6Sre3IpUOYdamS5DraSOGKkSsh6KUjsiHyRj3J9 wCeSbgpKTMXruNxfTp2zaP29oU0gMaV1NlWDxuuk6Q7dVTVFKVFfoBlYR IsF B8UnELNrJ9u9i3avHjQe1n3KAOF6kHI6wTGy9nTB3rAuW0iGvcZxtjxtb0Fbgp Kv2ntHz1oNZEc2dyMLRLjlV8YTPiY yxFqvg86lWOJFU4JfgUlQX57UNhQf7Z2kijgqUMve0R0VcEs9GmJd3vXDJqBz Ej3UTjxatLQzqvTFwsWEGuaxamI11Y8cs0B2P9dYz9Rl49YC2pnkdABKkd5FVdInJMS1fIBzbkWQ8Zpst8ZkY94qDbKtN05rX0SsEcSjsv4s2AOIMyw sCq3sMW cezyEnKqkxOLstkH23 vxIskqT6mSOmdI2Q3Kgv66zvut19KljrZohnDsC1Wz91KgtygsDNY9T4QtCWPYHGir4UBNIu2vJ rzRhdYwstptt6s8UK3LA pcW033ibFUdHHy NM4 bpbd0OgZKQTuY7KwXlTLo6R0djJGGAkchD AGUijztosOmGuepBB6plzkTXtPRhwamCimkSibo066kau7V0krhVO8GZaK2u5LrL65z554w ddaZkTnyf9mVjAI1tKoKmEAPLYOZzGIUCYs AqOSKsB5t2MdT2Dwy1hBbiBMEXUP4jbovHxUWFGRlgrJJL2k4 xCl2mqjhh sfE0BHHm8mscfBJgHnyB1LJI49yOgcjL7iRDAIy7Sff8GSznZN KBMViUKu6Gzgx437jVW3uJbXVBPqVTEHDmkdkQuUi 0nuPODNNfNva2vu0 Tw3XWyvG8U XbnGIao1GdWxMVZKd49jSDGA9pNtfVDBLf3GNiY96mKg0 kLxuVHG1vUInhOI2WY3CwwoNUJmWDJuNY9pI0vfj8ex7jKUZwvQ1RY9M 8bl09Ny0hp6Irdj7bqu2ChC4 1V0wqnBdcLolsfwVVWmdZp4303yztmmPL4rcLjCkqp5L Uu2i6eEJbhBJ5UkD29gj48kGufn1LZx8TuVJNGU1Hp6bM7bdvgXcMaYpPAcGdKqIMnOHjPw5CNE1StLY9KF9JL6FauzjSw 2sVt9nu Gb6fXvW3xa0oU8wqL8LTZpkpBT6W EeQXlrG4OrujPe25HtdBs1grrTZ1yFjS2iEAl2F0mJJkRTIFGg1KVEEm6VehFAcY5D65 CRcluic7bk4L ohNeEtMgXLZu9bSqtZbVhUXc0beNyVyBtOoBBZLIX XIDGv6URh1nfXtrMA7SaAU8V 4RwW7 vG9E4dETaoqLxoFt4cgP3VPCEsqa9vHmusGtmIrelr N3IbOobXbHdU52 IkIoJNx44h5fjaTrVbNTB ek3by6NMZhGq1Pvo6UjJjCyfiQIthreXOVVOq1A5Dge4verXkgSr21Wz5MZKlvY WiMaupbvnQgeTT2jMfcSp73Vk0EAmjpjB7via v6s TaN2ya6BVYzaqa666a 8AjP EADARAAEDAQcCBAQHAAAAAAAAAAEAAhExAxAgITJAURJBIkJhgSMzcbEEEzBQYKHw 9oACAEDAQE Af2 qHKDge 9KJvDoQM7s55INAvc2M2ppg7pxgJoj3w0c9v zTNO3jnJZLLjE7WUzvtqXtmTi6SXEpoPG2hZKByumMXV6qdv0m6cJzEIgkU2oRTY7o3miGCSpWWzCNbpvJQQua3uUQ3bzdKJQFw73AqbzXakLrgwVA QJQ20Zg4i8AxKmVmo2xobiekT2TbQOMd8Fs4 mkcL8PpNxMVQM7U0NztKYB1YLVpNqVZCG3PPdWemdqaFCITtKZqwPHxE2iOQThMDnbheT2TNWB3zU2idwhr m3bK8nsmahgtB8RqZROqhqnb ZeUptcFrqaeEyidUIV2 nd6G4YH1TE6oQrt3R13UdCF7kxPCFRt7XJ7PVDsrQUdwm3uMBNEBWmQldxt7YZNPBTdIyuIdZukeJn2QtWn6o2reyAmCcrrXQfSFxt7QdTHBWRllb lp7IACmV9rmwj6fdDyjcWfhe5mN1EBmBxuLTwvD1lXEU3Udw4dTSD3Vk7yuqMRy900Zbm1YfmMqFZ2zXiO6 tSpUwonM7t9gHHrael6AtBUSs FBQbzn AA7 xABDEQABAgQCBQcICAUFAQAAAAABAgMABAUREiExQEFRsRATICJhcZEUIzJCUoHB8AYkM2JyodHhNDVTovFDUGCCkrL 2gAIAQIBAT8B wBuQy46bNoK 6E0yfULiXPiP1hyQnGxdUuqw3Z8Lx7tclJIGynRi7PnhEuyEbAhMeUyyMlPp95EJdl3fQcSr3xO0liaClAYHN4 O JqVdlHS24O47DrUmziOM57oxMyLPPOadg3ndEzPTE0olSsKNiQcuRKlIN0qKT2RTKy6haWJlWNCsgraO sioyaZtgj1hmD2wpJSSk5FOWsAXIG JJsFSRsRFTmvKJgpB821kPiejS3jMSDS1ZqSLf coq7QanXLevZWr492cJKrgpOcJmZlsHCspvF759GiKwU 52qPGK6QZhpQ0kat6XcItEi2FFSim40RVW2mmZdKUAKXwEW6MvOSsvJsNKcAUALjt2xVHm35nG0rEnCBq5vuiWm YASU7bmJ bTNrbUjJKE29 RSCpQSNKsoVT5gHAE4rQUkGyhmIzvlq2Md8XEIsDDjJwY0bOhK4fKGivIA38M4RNsjnDzgBzgm9ze5i0aNSVo5FmO6AOSTTjTYi94eQEOuI2JJ5bX90WG2MAhKcQy0wRsMDdqJF8oLRtcZwoZ6IA90aISgqVYRJs820Cd0TCgt5xQzCiYJzHIpVshFzvgEw0qyuyJlm7fOp0p4anLvBPUc0b4Moh0XTtg086YRTVE5wxIttZmJ eQElhg3JyJ3cliVCDlpgpvGGLQ36QhtoeSuFei3w1Rp91n7NduEM1N4qQlaArEQPGCHMOLDaH52YdJCl2A2DLlvYiEtIeTdMKllg6ILa0 rAacVoESkiSpKlRUZhLDBZSeuvL3arLi8wwN608YUAGjlshfpK7 g26to4kRK2mWucUmx0QtqXRbGoJvvgLk2xfnE Ih6qtITZgY1b7ZQ44t5ZccOJR1WTt5VL39ocYXbmlDshDLkw WmhdajE3SpqTQHXACjeNnQojCDT0Ei5USeMfSFsNuMBO4 DklpR bUUMJxFOmHmHJZwtOpwrGqy 8Qx NPEQvNNuyKT1amRuxcYrh oODtHHoUTKmtHRp4x9IV3mWs V PJR5YS0ugH7Reaorjzbs6rB pixPzu1Vj7dn8aeIhxWQHZFN myvxL4xXj9QV2lPHoUc2pjfv4mK2ombTc oOKokWufmmk7L3PuzgvBqXec0JQDClFalLVpUSfHVWTZ1o7lDjDmhO28SnUrIA9ZavzuYrw oK708ehRCVU78JVFY ix EcTFHT51xfsp4 4ipLKKc5bQuw1ZJsoHdCldRo9ghoYaym XX4iK3 L3O8cehQc5AgbFGKyLTn UcTFJyamDbPKKsr6m2kaCr4auFEysurT1Rwh1WCqIWPaT8BFSuuVfT909D6OqHkzyfvfARXRadB2FA4mKQbtvp3FJ fCKtnKs9ivgdXlTipbBvoTE8cEy0vcEnwMO9dhKtOIQtPNrWg6UkjloCrIf7xFfHXYVvCvhFGPWfRvSD4GKoAZIfdUOGrGKSrHTFJ0lJVFSTYMnvHCJFzn6a0QbqQLH3ZRUWsEwVaA5n79vLSOo2T7auEV1fnGE7QD f IoyrTCxsUg8RFSTiknPukQNGqmPo6vEiaaPYfH EVRAwK3oVxihzQbWuVWeq9o7 3iflQ4koOR0jvhxtxtRStNrQ00t1VkiJNrCEp9VuKg wCUTTiwbpGQ7h 94pA uoGyxicbJlZgWv1eGrGKC7zc5g qpI9 n9YqLalGYHtAnwgEpIUDYiJOoszTYZmTzTw9bYf3gySleicQhEkEC7qghIioVBtKTLShuDpUOAi35xSf49ge1cf2mH0eaeGzCdXlHOZmmHNiVD9 yidRdSTsWIcRgcWj2SeRDzyBZDykjsJELddcyW6pY7STx5aQL1GX7Cf AJMTPoPbsJ1hLpmacy6M1JFj3jIxPJs7j qcR0qRfyxKh6oJiectKvr 7A1eiPYg9KK9fMfH4RNMkpcb9ZGY6VLTbG5ovYRVncEolva4eEDV2HVMPNvJ9JBv898PoTMstzbGeKxPx8Im5fm1FxA6itPYfnR0G21Oqwp2xJtAYEJ9FPzeKpMc hT6DWX66zSKiJZXMPH6u7 AGn99sTMkFJLjfXQvZsMOyBucBwncf1jyF 9svGG6cq nFWHZDMpbqpThT87YnpxEsgsMKu6dJ3fvrcjVn5MBtXnWdx2d36Qqp058XVdtR7I8rpux7LuMGoSDeaLuHu WJiqvOgoaHMo7NPjGZvfSf8Ahv8A 8QAWxAAAgIBAgQBBgYMBwgSAwAAAQIDBAUREgAGEyExFCIjMkFRQEJSYYGRBxAVICQzYnGCkqGiNENTcqWxwSVEc3SUlbXDFiY1RVBWYGNmg4WTlqOys8LR0uHw 9oACAEBAAY Av8Ag7dfu1qg2lgJpkR3A k4yd0h ZQTxo2XGv5NLIv 1Kh4SOLMVwznReuliouumveS1Cir82p7nsO54DKQysAVIOoIPcEEeI0 FlmIVVBJYnQADuST7BpwyUJPJYO 62QBNJ gA34pPHv63ftt07zFperO3eSaWTqSsdNNzu51P0 7jq0MXk7kbMdHqULVhTp46GGI68LFkK1mlI3qpbhlrufH1VmUfPwnktrrU9wMuPnctWZSSW6Q1 BpPOJ3JpqQN4cDbwLdJtHTRbVVyOtVlI9V lRnQ7H8GAPgwZV EvUU6QwgPaPfz39ZIP5oGjN7yQO2h1i5dwm3yiXe8sra9GlUjKia3OVHaJdyD8ppFQd2HEcsVOPIZcbWmzWQijnvNMDuLVS4Ix8W7wSHb2Reo0jjeeJKl6rXu1ZRpLWtwR2K8o110khmUq41944sc18hwmqaCy28ty7GzvXnqIOpLaw6MSa9iNQ5asPRyRjSuI5EEVirfhbeBpHah9liqxXqxePr6AFD8V1UnUagw2YHEkFiKOeGQa6PFKgkjca wow ESTP6kUbyN NRSx YOJppGAlm6kz wA Qljp38NTwMtbQjKcw9PIWC3rRUjubG1fW7aQSGRuwbfaZG9RdPvOaMBUXpY PIJdoRgKscVTLV4MnHWrqqjSvCbbQJ210raEt6xhR 7wtWKQbXUuno7ak 7QW9v5ox8GnvX7VelSqxNNat25461WtCg1eWeeZgsMQHizEAcSVuV60ViXQdLJ5mK0qv58L76nL0TRWbFdoTOoktTY a4WREsRetZjGfyUME5k2wV5KWKSGNm1EcAxNOKbYPZ1LE0nvkbjZczmZup7Vu5rJZAae7bkLEq6fo8VKnPcUOcwjnp2spBTgpZyjveLS3sxyR1r1WKJZtYFqwytvDCc7OnIGUhlYAqwOoIPcEEeI0 8vQ1V0kxeIw9K4e2jWGgOSVv8lyFYfo8ZaJtelFk1C 7qmrF1fp2iH4LbyN xFUo0Ks927anbZDWqVYmnsWJXPqxJEjsx9gXhpMBv5Q xTWtbcXmMpA4fJ SuoOXrYslXy99nYmHcUqVRAUWaO7HI7pLcwq83ZXUyWcpzXplevKy6ORjJR5IidTeyawvKNw3TOVVhDj6mHxVWCOtLYlq18bTgrMJD04S0UcIVj6Ob2dtfn45hOb5ZxNjGYyhFAYa0T4qdrmQsbq8ws4loJPMgoWx M7dcae3hL mdqy2ksHCvlqr4uSJZA5oyM2M8qaoyja34V1dp GhvO 95yyuRurGZc3kIVMNa7cVYKNhsdUEr060gjn8mqw7kJ1Un3cXcfJzXhq2RtZqe1DRyFn7lWZI5oatSFYI8okPlcham50h6m0Om7QsB8Fhxuci8rxKXK963jXbSlkzTJlrVcpH fWPW2IZmhOiSPUjEu HqRSJFVg8yJVjjRAIYUjUbVRAF81QoGgC6duPQx1kHukWWU Wkif1cT2GELySQJCqoHiRETcfaXJ852P08ZiLINHWzGWyaFd7OFsU4IY1pxxSMoRpfKLF7zAeod2ummn3ueeKzJSlTDZR47kOvVqOtGcpZi0YekRvOHcd18RwJLOHkmo14o46slS jhQFdEATyaubSNGvb48aOT3YcLkTyXn56ckcUirQEOXlkjmUNGy0MbYmlkUhhr6Pt7dOExsnlkmOqSRJf5P5gjtQxRwApuiqRWF6uAs9AOIzGBEGIeWtOF2FM5y MwaNlgyeMsbVv4m4V3eT2kU chGpjlXVJVHY7ldV Bbv4v4q 8AKPz8T3shbq0KNVOrZuXZ4qtSvGNAZJ7E7KkMepHdiB34CxVuY8tCVBFuhjKtSA699ETmHI0ZXH5SxlD8VjwKU2UscuWZHWOFeZIIaVaYtr vnUtWKdfuANJrEZYyAIG78PqiMGU wEMpH7RxFhspKZqdpxDj7sz mrWD2jp2JHPpoZG7RMdXWRhH56uvS 3loKwZ7FquKgijQyyyRW5oqtkJGoJP4NLL3A80ed7OPI61WwZGjEeiRPqnm7dfV7acLHTlgkjhVUVYJEkWNVG1F8wnQaD9nH3N5pw8GQRQ3ktsawZHHyMNOrRvxaSQNroSupjfbpKjr24o8x46W3mvsf5ayKc9hUT 6GNkJlmwmXi1CVeYYI1eWpMCkc5g6iaRm7Tio5XHWEt4 JVK1 jaj16dmnchSxWnTcAdjQyIw1GvnfAZn107wR RNYihP7JOAR8nityiswFLCVaNxq jDdmcgktk3p1Muyz0Ma1EVfR iluWW1Zun02ZdGkYatIx3u7HxLM3ieG2du s4yX2N8tLLdr4rFtmOXrMrM8lKjBZqUbeHaRpDuqq12q9VAvolWdN3T6KRzr4aq2hB0IYeBUjwPGLvy95p6kflB0A3WYvQ2WAXwUzxyEfMftaISifK M3 wCI bxqQCfaTx6q8b0HSmXXZLGTHIhPbVJE7oe s423upkseNdX0ByEA83aVfUC2g0bUP6Q9TXqHaENvFZKCvl8Fm6jQWIm7pLGTqro3rV7cU6KyONssE0AdSkqAjN Y5yjW7lXlXIC1yvmZYYxDkuVM 1m3RjM8cnn5Stk4MzDZjKR9NVrmMdCSI Ablev CDGJa47DfPXkSzDGSx80NJEqk zdrxHqdDp4N5rA 1XVu6sD2IPhp34x 2ReVKljJT0KH3M5jx1MdW15FXkknoZarTig32tnlFmO0d7ssS12SIRR2JF03HuPfxqeMl9kjORS4 DKYlsRy SnDRz26Ni1Vu28xLC8YMVVmo1Uqtr6ZXml2dIwSSzkMNibtTrxh6k4KzpTSSdGBVoprJNmWJgfakkzL jxBX186wzHT3xxbd 7zx XwOLXK3LVlKVumYYclmBDDZtpclhjtHH4mG5E1dWSvNWM9mVJ0Q2DAkPXVnhe6nO N8czefpBzfzNXjB0HqV6mUjghGgGqpCiH5PjxHU5xL82YCSRElkZKsOcxsW9Q81K1DFGuS0TqN0rWryNootQrrxUy Lsw38bkakV2jch1MditYjEkUg3AFdVI1DAMp81gGBHC42RgMdmJWRQSAK T09C6sXG1ZgvSKgEtIYdNPO119vv 8A783wKXNYCJpWlcy5LFxnQzO3r3aKn ddTLH G93X0uom2lyrxkpJFIDHLE6na8ckb90cHUEHuNOHvcwcm4e1dmLPYu1fKcRctSOxdpbdrDWK8lqYsfXkZm fhbuI5IxAtR dFLkJchnTE skhGduWRFKPisoDL7COH1lEUffU66E RxXzWYgeDFQOLFGnOGSbIyowaGeeJhqKOo3AN O0HYwnz MNbJUQdazTf5XWsJFPDp Ttpz6 ORwrKdRpxzbWvGwY8jlLfMOMnm3bbGNz9mXIRGuT68EU8lirqOwfHMnxONpY8anjFnJ wX7o504TX1vuV5dJu3 8Aa 3V26 E26ebpxWaL8bFfqSxaePVjsxtFp8 8D4J1Mhj4pLGmgtxGStb8AF1sV2VpANBoGLL28OMxmcZlsgz4fE5PKGreFewtvyClNbWsksMUXkxcxbd5Emm7XaeOhBjooZmOgeWw8yD3 iSKMn9bjHZCWn5Zk3q17Elm xsmOeWJJW6ELejg2uTtZU3geLn7dijKSgmT0cq92gnQiSCwo1GrJMqNp4Nt2nsTxJicqvk96tpvXUmOeE6iO3VkOnWqvtO0 IIKOFkR0WHGcywyLLTd5cXlqUkcGVxUs3S8o8knkjdTDKkMayxSJJG xG29WKGSMrgubOVcpR2rtnyf3Twt0vtG8GlXpXYwu7XQ UkkDXQeAht ZB5oxrUYJ98mH5ZNuZ8hCI30jly92vXOPHW6W8R15WePeqSwuVlWvh8NBBUp0q0dKlTrKI4K1aBBFDFGo9WNUVfq4rvpuoYieLIX5tfNM8bdSlWHynaxGCR4dOJ9fYG Cc3n ovn 8ARVvgTAeqd3FL FK tJ94sF6Nt0W5q1qFulbqO40L15tDp4LqrBo22LvRtBxlOUMpcsP9zPIyuSaqRFIt3H1MhGjpXeRllCWgpO0Kdm7zd20SS4ax900hEZsGhrbNbrb kLIgBNdm6cmgfafRt27HjZXxmZsFiF9DjrjKCx0G9 lpGvvJ0A8T24DZZlwlLd6RBJHaycyhk1EYiZo64aPqaO7MyEDWFhxHj8dAIa8erH40k0rab555D3lmbQak 4AaKAB8E5y0 4rZ 6vuVa1 ZwT8x4rcwZmaSKjBjqJ9FE8800s0EfQrwxoO8ruQo12oNdXZFBYfcKgmWxmSdHepDma1Sut pKXljqSVL84adYVZ9jbCVUld21tPt84hvDfglH0crYMH97Xjnpx GHlv937vf8A39qK1mrDobLslSrXTq27TR7TN0YywARFdSzMyoNyjdudFaLLYibrVpGaNlcbJ688enUr2Y9T05huU JBDhlJVlJ Cc5j38p8xD h7nGunGNHyo WT 5MR45Xl07rPkW UwuSf 4 ec3H5VjF u4HEp ZxzVbb1LNrEVl n04Lsz ALL8f2shko5N2OgY4 DgEbPIazMFnQp63XmMs2vjpMq CgAWbx0TMZS1kaUfxhW6Val1H92 Sm g SqsPX C83L8rljPL9eKtjh2 ZuMbKO lDlKX9cUU 1v7eOXD8lssf6Ayo rP3nMq xij tg8Uf7eMoANP9slj9mIwv9uvGYmhcJbuxLiafrb tknFV3h2sNJo6r2ZVPsNfXRvVOC5erkLNk8jQxsR8QslyzFWRiPdvlHFPHVE6dTH1a9KtH8ivVhSCFPojRfgudgA162GycWnv6lKdNP28SqPy wCvioR5xTAcnxkn Ur3sLBKf1kfjlz52yoP Ycqf6x95ntf4w4V1 8AD2JQ vKeMiPfzDZP9F4f wCuOU8N09Y7d I5R5NfVbFVYqscentDfdhz wBTxgPMDQ45MnkJ93xEix9mOFwNO7eWS1fza6 z4NJEfCRGQ mdSp r4mU OrdvdxOn8lThT JuY4l 1fHL8vumuD vMZdj wDn94LB8L OxdlfzJD5F 6qh4uEfGzlg 0di OV6Wn8FxGVt6 47ZqwgfR5B 3jJt8jla 4 wA5YdP9Z8H5jxoAUQZ7KVFX5HSvzw6afNt ZxzHSbv5FjuZCR7rFaS1lq 75gPGDuI20x5XH7290MlmOKf64Gf7zl6cfGwNUH84yWU XFhdfOGXlJHt0bH43Qke7UN9XHKFrX0lzG5qow JpT4 VP3shJ9XGUb5XKd wD0tgz AGfB bqYJ0k5kt3 59uUm 6hH5tbnb5uOZMUWCi9bvQSAaarHexdWHfp7vxn6vD13DRWIvFDqskU0Z9Uqe6sHH1jirbXstqvBZUa66CeJZANfb2b7fK8u0GXyW4rHTzunHPE0YPzbpJdPznjNL zeIOn cRx9j7IKPwaKfmGlM3umuR4ieuv6lC1 rwX8PKOXL8S ORbx0un1Qn6vg9uyzDbmqmEycYHsVKUWIbX3Hq4qQ TxltG72KuNmVflLGbaufoMsf6w45kxUm8QT5WXIVS40U1cvpkYkiPx44 KTFr74CD5wPDUSfSY Qgetq1WyXmrOTpp49ZNB7K p8R9te 8UMRXiZf5KeSezYI09jGGSA m04zsuxhDux1ZJNPMaaBbjzRg KVJ4Cf8KPfxyxP7Y dKK6 kSYfOhh ssf1ccpSIdEnbJ1p wAtJMNfZF yhID j8H5Hz6zP1cli72KeHzRGkeEuw245VPiXY5 QN7hAmnieMNOW h IsVl LlXoW9P5wjrSH6 MVz AI6PWbCFMdm9pYucVPY1o2tpl0CQX55Vbahdhk9zt04O1PIwMJZIoujZgDKDYrPpuTU DhlVl8O6aE7SeBJUnSTtq0euk0R TNCfOjb8 wCcajQ8b7Eg6hB6VdPOnnb2LHH f4x0UfGIHF69dkQWbTSTzecNE1GkcIOg1RIgiD26J378VI7KNHdyDPlb0b7t0U9wJ04GRvxckdSOtG48OpG3v4qWNNfI Z8NOT8kOtupr9doD9Ljk 1HpuGfxVZtf5HIWI6E5 iGxJ8HxOZjr75cDzJSkmshdWrY IwWaMo36eZG RfFA wsqe3Tjlu4pDGperJKWPqQ2T5JO b3QzMfo4sU7cMVmrbglrWq86LJDYrzo0U0M0bDSSJo2YMD2IbQ8TZnk6re5h5NkJnerX328vgtZQDWmrKTLkKKhwUsIHZUjfyoJ0 vMnlqxdVfHeo1DDx nUcCvh4BLbsOIoY68e WaZzoqIiDWSQt4Aak8VuaOe60mMoVXit4nl2x2uXLGgkitZmA96daMlCtZ9JnlT06xxx7LHHMkh8YbHLjp8zHmjDR6 qyN9fGMmHrV79CZe tiswuCPpUfB bMLGsj2LOGtS0o4tN8mRoAZHGx6FTqrX6tcN7dpOhB0IsUNdT0jp9Wq6fPxRu6gmzVglfT2SNGOqunsIk3D6PtNPmeVuXMvO5BebJ4TGX5WKqEUtJarMSQgA MNON E5eweGfaU3YrE0Me2xtCybqldPNJA7fN9vmaP40k LqoPlFeZ8NKQP0I3P0cU4tO7Wqi XMg r Ec0cpnbHTTKzS49FTpRJjskqZLGxIB5p6dK3DGSvbdE3ZfVFvGk96FpniG1v4HeLWImLHsx8o8sHbwWMdvDX72OqO4nzNIOPyYq92yP34U4xNRUL wB16G5QP4mO1FJO35hCshP834Ryh9kWrrsilTlvMekPmL1J7 ImSJYuy6tlUlkZ Fq6hfE8YfNRupq2oEpX2Deakc wxTnvp5k4TUn1UZ f99ToBn0qwTW517dIvY0ire3XqqsU s8Jx469jb0bp46GxZ1A8xpJE8ljRz7D EOw wAB7tfhGY5ayOq1stTav1lBL1bCss9K7Gocb5ILsVeZVJ2s0ADaqSOMpyDzUOjcxtiWhPC5YoJE7BoXkUdWtJGUkifQB45VcdmHCYy1LutQp CTNppeqqPN0b22UTs48WVRJq3n7Ptmew35MUS95rEvxYoV Mx oDzmIUE8WbNnTyq7JvdE7hAFWOKIH2hY1Rdfbt14FmZNtvLMtp9dwZaqginGy7tPVeSTwB CNp9UfCYed UarNzZh0Vb1SszCbO4mHcwWKEdpsrX7mLTSSaJmh9K6VYxDjcxI0FmFlCT7jFLFKnYMr Mcgb6uENhRk4dNVt02iWyRouwS1mKo7a7tWVl9nme06t5Ykn8gaVgyH9JFKfv 3j8BotH2Pp8iVRU7jQrXgkJmBXd4vHp28eHtWrLWrWhAkkI2xD TgjXzYU7eAHfxOp78Jl8jEVwsD7o1kX AHSkU9o4gfGoG GP4Np011O8xfCpM9hLH xfmiR3ms3K8Jmx XkK6g5Kisq9Oz1F hMWjnqu0yWDs2rVTDx5yqiqfLsTmsc1VidfRrDk7Nazr29tfb38eBu5Lv7v8cxGn1 dDhxYxNHBKpAVsvlqzdRfaUTDm2w TCHt7uEt8x5CTmC0jblrdLyTEp2iID1d7vcZZBL3eTpOsgDV9RqVVFCqoCqqgBVUdgqgeA0 5G xAAqEAEAAgIBAwQCAgIDAQAAAAABESEAMUFAUWEgcYGREKGx8MHRUGDh8f aAAgBAQABPyH AI7cbD1U7VCCBIBcRxDsX0X7xO7qOnFssRAkJgEvIFh jEQid rKyFo J6ASrxkgIBPHXhm0nB2sRSS0Rd71gLWE4IEw4gfRNx3ziFCa2ULqUHGFMxITRVTveZBLRu9MkA5uB1SnhBdraEnRGpJ4E8QYjRTktLC805mexmiohUjcL B4MVjGQIDAYSycZz00c BysQuU5wyS 6gJI0FBg0WkleoGQknPUTmUHuk55kwKDItNhpcCfbJmBhUUMkRShzmD0kol6V8aXFAJDmZ1y3ipIaYn7HTQ6dbRv agolQwR8PCirXK2BhZq6qRQ2EqOIYiDkh1Y0cV1oUo40soTgLnlw8IYmQ 4Ej8mQiETc hsWAUSuDcXV66jDm Acc X9zpRXOkpiozDYcFRGXxb388Ieg8soUbwlCQ7TLgwfKD4CJOGh4VlU6Olks yFom4uAGfGio1iAPQWpveQCBIoVKLM98dbDDFmdK2Dog7ltkhhjDIAK6W 1QAiIECDGJiHKHfVeMTF8dKwXGyezDcARL J4sAcpXp3BxmUUYRHU9zH0f3byNdKSjNZWIRK RmIBwZOII03eJfnJ3kBxCDyFpCSYoS6IagVQAVVgA2q6MaQoXtQGh5XE6DvKsSmtnD0ZJTleN0fIppQie9w2WEQE4bvAmhCMA8lSGzB1YPs4cPIbsxkQwoPQlt73 AFw5toDQkKtsGGJTkMvteHBrnE0NCGEtqeEw6E5ExJ3EET2BMl4tr5N2MV2wDRAQsDXQ8irWtJXwofOcJEJ9eMXr3hKlwoaJKbGfAUKRblmeXnBFaFbRJ5jjHIcryu3KYuTG3NyDniikmERETFW09YGjgAIgKNYoFUAFVoAtV4IxJ0jCi1Jzdxw2WYTECwSr5eXIstLwGGnyR90niKiUMOBdbawzfhW8DkZSOTjWgYH01EpYZU PLHMyrdAk23MTGgvho GTeuRFHo0CEAVATkdU4eCifdluHzKh7BE4e2IjysyvjJTVVuZYAU4Uw0e110SaP3ljfOoDWMMxeprJDCpNJGeKfkWMIHEV9fh8tBQc8ayDeUMkin2TJrITfDC4 cHoHU0C2Tm1tCjVcMoo4Q5DDHxmV0nbM4JoQEIEgwoPaR9dEFBqCwYgSspNw9LxylRhA6CEQg5MOvDA5mFskUrEc2yr8p5ttF3MFI03PdRLf9jImd4Eigagsyr LqQOqJZ9jYZbEDTzH6f9YO9ogh2 fMCA6Smtv v7GO25XNWbaI643cncPAtv hwiUfSRqCAQEV 42KVkZa8jFoKDUH0UMWIb6eyRGq znal KonrIqJlfwD1ULlsqgWxKR2K2WaHYdBDB6BuRMgBGXh7acgMOqtwx9cIAidcDauRzOPfkp41lRwzZ5IfycthtmI4eZh NJelzEoge9ZHotpqicjVEUxqOLx6JBbi83fBI4YgQwDChYGBpp3YOtncI6fWOiBKIocoGoiXMRWBkBOQH3kdt8WCoy7jelsIjaxdhFdKc0fg99j AKHN4GDz7ft 8amxT77H9WjPUskH1N IBRFHoJkSGOwQ n3zeyeu0h MOwHtGSmm63EHnjcyabF1HSjflA3 yDJ3gFnbz sPanuA 8w4GJof0j0X5AJ8J HA3gTiLF t1 EJu3dTouCs5c4d1XTnWbk8cTJKdJVM0Xeo eeIKvbftkUoGvYJXxQwz3qa0 w30RCtH4Wsngkc8xDJ7C Ob Wx1GKkYkAMFBoQJQKKpfBmpcPcUQabRrpVcGWdv7xk7wkftfvX3lqtA5ZJyY1QG8Tx4F0f2fQsFB54SGWgo hzBQg1lquPI00imaSdMszNSgEc0rHTcpP8A wDAFhp0JW6dnneKs33HS J HIhxsPO p iqXiyZzm8M2i xP BjoNJzXcGlPJyC5YFS OzH7dPFibcAhfxY4wWwz2Nlvb2yzIugldMXsBvv6GFU6DhL MVEs6RAnJFCeZ9nNjzDU2jysjtDK8iId5 xl07wEUsoTwg7AGb5BAP7vad59smVcBgUwCcJSeDA3BwhEyJAG4PyF404uSBe7V7ji30eIGGQ70T7ZudLI xhmGH9uR a9OgGuVxwRZyc22uUUuVYXnYNwtG7mvgPI9ZbhKA7bJ1aq6KABZ GSsIqIxopO6lUZ92JyCuTOBcCEHtv7MHIpElD q0c nkBdIEw9jutgwhSweal3n7EGFu9q9Kz0 Akmblb STBl34cAs7fMNfChaNAksRGVgkBRvpRANjm0zu2BpTckS2NlLFmdlRQNavZi2wxEBbvX8fIYmAqD1RMbWPJs6dhCZgMYbMkAMElbMiwHZbvtWODJqzNidSsCOQQuzmL0ZB2AYPvBMr4MpIGHsmSN8HUpM6ACGjCZktvfmVAYH34yGz7HJviYXZkYseaiR8dOaBSFShHOCYm8R63cXSTPqw6oNQHsLm84Wfgi5N3IPx1aHQxIuPb0QUmbop7H5BKxyq8vj4R4oaF7T2Ly6g3DQtDTmHSOI3OJNMYJwGyJYtFvUJ swMoHIO9wcmInHSyl tS9uogG OFYiGxZyg6cJwSg5A1PpyfUYEuRhkwpFRAOHBVKxmJo7YByL4JdO62jwRQnBANAa6JwBTOBhN8k54ZWxvFYmoZPRMuvToCqpStoSCBIS9qrUhPiJsWuMOOshICCyRBMtHUC3 QHL5RBe3k8u5DaYYh7ZCjjLxfT93vCm4iNnCRWBIsLo7V7OTuLXLIvjvi6EtDJkbBJLYoiikSidVT2u6J6hwhQzJ3EURqNHjjqg9Eu1AhUFXIH1ivFVBQxCqEDE5AOSkBkJVqv98 GAQJ2hhIzEIOlFrww jPBnCCTEAJ81GEoMABQH AE3 2gAMAwEAAgADAAAAEAAAAAAAAAAAAAAAAAAAAAAAjaAAAAAAAAAAAAAEtN0gAAAAAAAAAAABuvVgAAAAAAAAAABCkBmQAAAAAAAAAAuaYANkAAAAAAAAAI1AABHUAAAAAAAAAMpiABxXgAAAAAAAALj9kBoIAAAAAAAABvm8SAc EAAAAAAAA3JJDhURsAAAAAAAAAqVQ0kg4AAAAAAAAEQohxuHUAAAAAAAAAOKAJH70AAAAAAAAAF QBfogAAAAAAAAAJ gANHkAAAAAAAAANygAxlwAAAAAAAAALygB1dgAAAAAAAAANvgASKgAAAAAAAAAFf0A8EgAAAAAAAAAFgIBXIgAAAAAAAAAF1yACSAAAAAAAAAAAoC78UAAAAAAAAAAFecwo6gAAAAAAAAAAA zhkgAAAAAAAAABrQABqAAAAAAAAAAAlMAFMAAAAAAAAAAAl4ktIgAAAAAAAAAABlF6AAAAAAAAAAAAAB0vEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP EACoRAQABAwIEBgMBAQEAAAAAAAERACExQVFAYXGxECCBocHwkdHx4VBg 9oACAEDAQE EP8AnKGWuSrBS43qgoWYujF7 wA 2oFJjvWLpjemww0AkeKtqwU1xYntv1rAl9 BBISRqMhMXT9e9Hkk1oxvxN8tDQidbnyfFQ4QGTpdSkEzFuHszltq edTCA6tQwHCmJtjyxubHv8A5WAxDwwqkzW981idKzLJ9 ZfLEBHPf7ihDML8NYS2Gg1PtUyxc2oU5Zm8np5VgXaoBeAdqJXmZpZduESGPCyKQNJDGYoREUs38gUBMlCYRioduEEoNZPWjnl261HC3zTl8GlmaUg MsZv0qwE2KHrekQow7cGoSsm1GcTTLlHjNi4UIAoDM6HgDcttrQLBc1 d6cto8JOEQMLUm9Q3pG2CkUdPCKhtb6eCFLhYSdb LsMcIg5KGGLU2BdY7UWEPEUZPCbxRGZv0 3wGLZaKsuOFcPSksi937agscvLM8HPzQ4IzFrX9WN899ann FDc2oII4VwxoNDJOKOUwPWsmg3C8fnyMxCHapXWb vwGO6gEnC 2e1GCsvQ KEULs9vIbZ19qdh38N5bB960GCy8LC5iGohNpI7VbDpUEcp8gLM47fygCDAvxTkcU13KqAADBwrhoSR9slN7i8H2rc59vIwM2gGsykKtMQTdv KEmdD2OGzQgjZH1zy kU2HR2ruOz5LwmT913WlZ0fiiS1Rw3xQQjWWokAmBD4pkVweQJppfNOWzN gr0SPc ddv9ft4ZYzQ25j5KCJMfwpCoWuxa vrkHTvUzeM IkRoNYp69 1QJcNyu2 HDqW0YnnEFDdN70kujP5 2senicvJqcK4 v5zUkbid 5Ugnn8cPcOY7VJUNopCHFj0nPpUm4z2jf ACi5tShab0lxJl9LWphHNKHYnehum8cPeO9PrSu6PkxSSM4c86TAttn3XDp1qKljmz9 dNdb X0pmODeNdbv3XwjI6u4PmhvfaR9 HUHKe nvFKIyiydIoZB3qBpQqWdwX3rCBcgPzFFvAXCJexSEguxf1 7cQJKQWSdv4 b0QWPMRi6p3KANch85 9634fC5MPrrFEoLJ7eZ6FCU24jXsPSd zc7UhO09S9Dv8A03jyTFMC4pBJut 17cSdyHc1Q25hc5 lGFY50T aF1QcqhMUqLEG9QCzLu9dKMJbMOtHFbzFOi8z7rmnQDmPTSp3pOlSgYDePhoJvbun9 8AHf EACoRAQACAQMCBgIDAQEBAAAAAAERIQAxQVFhcUCBkaGx8MHRECDh8VBg 9oACAECAQE EP8AzXR2yYDOCxB00yVOdR9kOLxOgVdyrd2xkYonM fX1PF2oAqsfTH2p3097vnZzOHjBzwRF7cYCAU0hf7gBa2UZjXecFrBIUa9GjaHyyPN3oZiT8mo9EUZJ8S4HJYMe 8AvfG45nUQaHzMYwtJkgjyaLEEpewZBXTABjopE7IzkoJyNRa4qomJNWSUi QUhSE61TEalVgOylHCMJ6 IQklQHm4IZiDyDfm 2JbwmaKdIbaNaBNcgmf5jFNVGrKyZvVicA3Q7CyV6Tvbnv4VYvbIKhpvtiYIISBmviMpDVxNj10h9dLySUitsT AFIryCdJaeZN88YXgJnmmr3gWOs4aHhFi3Elde5kNqyeUQKqS0 9tMkpMqFwHHKmt8ZDav6Ts0mIROC4Qqe6uDyQp0sla11fumEwTr4RBIcZCicl0EdcOTQmTC6c1oc4JiLB1JX5REP7zyj muow7qAe PVc0zOujjlAsScj0 frKsnvgjv4RYJ0xBgp0yYTR274gqCNaGnz90yUJSya1qp2 wBybj UECcLpEh51XXFkiI73DEfrJSBFXzxDqXmuZrBmzwP071 cGQeTHGBYOMGQhbdbc3zhIKzH3nBhLwWoPzW2EpgI7DX8oBO4j cl0YwQVi7kan35yBShNTKdngYFomPnACshH bYpaDH34yVJJXhAjnCQ3 8EhZI9HLXBHaae2QAav AD8 w6C13yO5Prv98ssOofaxAi185DlywW8vL cjVi3wOuRz304dH7BpRgkhBJG5ftxlsKRx uAkrEbc9vvrgRCpbOn3pjmaS0GiHK6dLucSdXFiE7e B0ojEUxM8OEeh68zp3wAAWYFI5r0wGoHfSUvg2dmMSFDx jJ3xGFIRDCjrcs 2SgoLnivvxjbVJoO7u vlrkEzF wJATDhlpokdmqr75auwkR9v8Y9Eme w5BMA9J mHWAX30yhGsOEWxtXzhd8 EYvUPO3CuDa vfTIT6Avn klL4dE6n1x11LSymJ2648nrggntPfEUBN7DTaeaxsrkQDG82 5qTOKIks gNu3 cGdo8Iw1j34R7xjmCRU mT1YgkAJtVqDXd820pqBVZOzRU0N7MH9CRSFrUj9efXE6lVel4F3yJyJSwBtLtMV9c1oQiZkdEd58K4TjGdJ1 AcO6MfpDCDBL5NPn9f0qjA Jm5AJ823sYyjG59 ch4Rm3lCDyojSRdZyAkocxlQiI1ak2w6YET3fC0oWaIPYMqZp XmhEfGP9BU7 DKxAkDiS BhQ8k6ERpPRgHo4gbMTzFX5buuJZLjulffwvU0 gcN oD7GJQUN7UvJje4yC2f1f6QFsheqn6xzhIwySL1bYGNQ17ST nZwZ8LJdjH0Zxllj50hHs lYglK87WJ8mKiNfVh RSzQvrJ9640D5emJAJJPpx6vtiFUNeEk35x7bmCNnhXbIA2njmH0nI9yr pwcXgSaTc3HHTOD ULdJ v6MWCjsE23yVJtOON8gMmvS2ST0sACjwr01xCZMC3qVr00yNyqTdRYneAjbrkQKn7mn3i8fljORitOOn8k2bfj cB40fJ bJI9fYO zkZMe2Ufkw0I08LKKJy5kNcsTYe 3MZvC2bad2jfpmidk1c7cTqdOMijR6tNA76N7sdv4CKs7jSAv5OZMBTr3NIivNk79khI DNYFmJnuDikPhRI9LyRFEN8Ea8nxhhSdd0pG3T0yPhdxCaTOoK7ZqwKusfo35XtioWo3h4RiEwM22Fhg0ufxvkPMnbpLqr54NWN cnrJ2ck3L41zVcJDhQ jDwsor6YKqgDqKR0jhOjoOIFmAreCB6bZNQYiNiMidZucHeIBQUxbodE3qLs5INKUI3tqZqOqqgG xmi7W mld15J4GdCit0xxHk UT7YUthH7N OE7 FSceZCUdwWPJJrDd5HZO208YyRADylj2 cjis0cNRldBPukYNuhFp5nI65pjJN69oflMYI0J MGSfDOIZCc9Ka8ldMhSQAe9D2qP1 YBCG84o O Re0oh3kj84pPDOGgoPfgBPsN5XI4MrVrrJ1UmOuDP8ARYF4xwzaPky jIUYAdyCnseuaI48M5o4ru2TfRIsb5ACSDcmYJyqeN8ZRWtyLJ0F1aNnGSc4oa5OEznc7BVr2wclOvLUru 5hO819Nd3sHlhNz4dnbXEamiXcm gq4U8uEKEaEgyntkwuulNTFoL zIKAMZuEVFc78R1xBOjXdHeOa3dPISHS1BVTSxL615ZAUcFcWJJ24Hm7T5z4owo6msdXQmFWhIGB91hdNbknvOQUnqNun34Ng00CPeB6OHrevVuVFJIDvc42Ety7zyvLh 8Z EACcQAQEAAgEDAwQDAQEAAAAAAAERACExQEFRECBhcYGR8KGxwVBg 9oACAEBAAE EP8AnJtQUgKsJYaaRkU0rF7mnu CxWgFEiPUeHcWKNFbapKwBECMerbEBqyoi4gAFdXAns0B0kahGuilgS1DxaG2X2sBdQQkZ90nmDCUmhRy3Ok3eC1u4Jd0MZcAIJCSMhq5yRvqwKOM4 MTqrSU0VO2cLtiyuGZaCGs6DIDdXLAf0fKyBnQXB9ARMhMT4xwgIKDjNu3Q opmTggSQtnvXClxgg0IUWgKGZMQw0HXUNoFQCGgKOm7XACKlSjhlQBMJWHZEBu4hraSX7JTmcvy PD25cZ eBatONy4c1NuoAHBJX0HWoOlQVhbG1EDABi4rbZThOpv01 BM iVwwFA950YP8AVhcDWpoCkMYcz966RZGznFnQ ldUiwBAEUfYoddpMrru0bwJSJgou2Q0JEq2VgnS9ryLHHEWEq0evGc1ZcsVbxBkBxv57nTY6C7JMgRtsmsaeTUUMMgDde7PBbj83NlXiKHzAEJ416rP3 BiBGNCgpEyNgZ0s4FtRidfZCvSNA4CR6Q7Y2w86nIHf8AH1inAyV7596kFbPcfnwOsnxgFY9dbJgRgbl2f8dV8C23j2UIYAPGcu067QaM7UWFjTTgHhrwo7eBwILwsqvSRzx5mOONEFEgYGj AERSKXMM5wBUEAFVYTIIVUEWFCq2ICAGIXAMOQSSmaBMOJp5nOgv7CiAGVNRo5aVFVyZw7yugeuQEp2GumjvekKzuOeVxfBv1ioT4ud2linW5GS NW0MECMDYwYRCqRdQQpqag4chqx5YiCSZDh1i1DYGVi cXuuWsarSBoEQYjoGPYMY2rQxQeY4jEY6KJRN68LF7 N8wnkcxCHEc5fyPLiu6siOqmwD2wZKrI34GjSH2jziUjr37IKxoc7bDqOsCoMHAI0E4aMMc4BsSAoIeMwYAUGgCq6AxwBWFOFIlLRpJauKzoQXn35Fitd95i4TBKqnGvq9jib7mgirA08PWhHCuWUkFMLkbB PIydBsIT7M3FjcbjUCidRdDFqW0FApch6UPHGGwB8 YhlAKhQCq0xb47xibrEsMuqIIwjaN3ROLC9wKBkNVeAnPHbjA6ZO5DAf5wxqSkxsJoKm Tt1wvOceFi b1wSVW8lBpg2UE7WjtsS4UCsq8IFVfF8sPOMR0bz16992wmsIEkwrhSiJlnKEM0uZyrPbR0Y5bk0BYnYCaKmrjPSVi6pyuUyERuWUSU4UrwdE1m3ttpw5IDvEo4VAkBy5ciULaQ akhcbvfUad8bgEcqsEhplNIYG01CeVL8ux4my1o k7tvpARi0IAvgFR2RzsaIhokFE5ophZUOT2scB4aOQYBChYR71GudWz7sbyqNaTSBzCu9fQNmJBEDE0nCUecd4ZTe 1C1SWrYiIfXCdu 7 OjsQUmhXfSTmHgdTtkbMjICS KCvlMUJn9FMSukw0kvWkeONuRRinpdfAoLXCuEgca1sXEM7bCSnlRz0Wnmwr1D8jQ1wWIqFZdKSosoe2r ALMxjmC5LFiGA4ys2aLUQmHE3ivlHPpWK4FT4Oc77mu9wZnRCAQTm8P3XS4kjTRRSlqzVJLqb9mvHtytBRzHZQSUQ42GhzFPEKVEyqwkYbLQFhRztsUOGsfnBaroi5socRSQ7DBSmc5QZTpbtE6BfRT8rQffIaUbFpRgQ1dAywdzFqEnEPWfv8Ua M4X2GEdOP1i8suLByg0 LtLguAkdNdtOd 0t7mQ f8Af4 GF8mi IMa85QAbbGSQSHHpSs7bmwX1K5 Uw9kZRULd1Cp ZuFVFRhrJBJ5DvuPGHAAg00zxu gdu3rLt0wOuBC9r4l1dIkdlrcKRuocBUuUbNx ky3PXFkhcUJacJq3ETiURUtwSzpSGJFDahATaoykF5YqJX7Fm9VdtMBYLV0iJIrY1v4TCEJ20GZRRfCs8SvsR4RdbRFtxO7mshRSSJA2NeBYI4FsK5BGymBJK7OvOMS by6AgBQpUMGwSSwzEyauHaBo6QPhCUAEeVQfKZrAHhWGt0yyLxp5xINuQnYQAvcREE1pYIAujY6oYd IA9kAOOomIFN1XfDwGS5GM8tChOE zj4Bp6UA1V2TDmQONZbUkdsqtAThUs30p iTCiQp3MlRAq8nGdPA8PMLdoguOsloLyScoMvxMKZo9TRN9zt7HHGO6BtoUX6dQ1M7xE8NU2nJN3 TNr ad2xpwIHcqMH7noilbbWDuxbinTP 4UdgA eZaqKEMmVLkUTGZB4JaOQpICddpqO0Z0DVgib36pz3cBU2PiPt4MnT0djYECk0hFQLJwqAnebtBoMG3LwA8eXy3Hgdum fpjqQfhMa7YOxA4ERYgh3A7EtERl0wJokew0ToC0Yq0uBHsckByJYWepOEqmxIAjJCwbCxwxpdkwQQa7z4xNBQ6GrU76eRB3ISbMEi4mlOU7mbvTP4xYf2G83A45s3zCdl cLXRS pKYBdUS69lMQhQQGnY4AdIhnqQt65OpCtqrFwCuoiUBdrWMoXPnxiApsmO vuh5s6zkAYhW1HQX0YBK66aa 6xLwHo1gCw3ydFo FZKbS8O8307xZyQLP3diKKA4egOWsseH0pHiGQEg0sTDTCbkmBwGQdkELRGiBeg4aAoS11 qZg2twPaEfnISot0iedJw4nyOaI67HqFDkJ s6Zc4XVJ4b3kXYkJhBVg2dXcKRbj3miZTMJuCAYFc0lZlSm3sh0ryA7PzlHgWjETAGwANuqWGqRdgtgLMKxMbDL2cE PLrATs6bREi10e4ssIuIuCCBEd7PNmBP8 NGumNbVLDEYc L6C4ZVOrpGwRUbYm8NgK0XeiRjXfGYla36Yi7AtTTp1opCBWM18sAUasEWCcdp4 j8ehqO2CVMclg4qdXG8c7u10URpbJvjBvTOhfG8P8xsR8AtNNGBvAoIipMawA4 5sQBZSK9xEugTYYyUSZQIFe71dKdOfj4 vf8AGFa04oqDc9pHURTCWB sKCsSLfh r aYQD2Nog5BbDyTm2qlIYRxNMR9O fxiPPYEhhGh4KKoybD1tZgWODU8ME7ZJROlUCnj PV0FSXcZa2w4ygw6OEcJSFICUojfR0HRKfeEi6igkdmGLex5kDYeayR EAWJDg7lY1wJx9pImXlno7mQWyB0oM6yFIiBg0UkbXUKGwPVBMDRH7DRE6RMUVl4 jQpVzpB5sAAAECQGgBwSdS8Pf484 V9AOjiR4cjI2LV W4IZUuWSjcDIA0 e qcYApG3sE4VXENsWiZ5 r6cmP5GOIXBWZgYwAAB wCN 9k img width 256 height 256 title alt src data image jpeg base64 9j 4AAQSkZJRgABAQEAXwBfAAD 2wBDAAMCAgMCAgMDAwMEAwMEBQgFBQQEBQoHBwYIDAoMDAsKCwsNDhIQDQ4RDgsLEBYQERMUFRUVDA8XGBYUGBIUFRT 2wBDAQMEBAUEBQkFBQkUDQsNFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBT wgARCAEAAQADAREAAhEBAxEB 8QAHQABAQACAwEBAQAAAAAAAAAAAAEGBwIFCAQDCf EABoBAQACAwEAAAAAAAAAAAAAAAABBQIDBAb 2gAMAwEAAhADEAAAAfVIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPgPHZ6pMqAAAAAAAAAAAAABDx0atPcpmYAAAAAAAAAAAAANHnkM9SHoA gAAAAAAHwZRhdny DtxAAAEAPg15eRKnr29v1 gs47EgICEP3xnvNGf2RIAHzmjfUVeN2nLSgpAQhCENT asvmrOr1zZc3OXEhxISXE4kPq59mwK f9AAMfNBe6ouOUUFBAQEIdNy7dFeOuPWVhozfdhxIQ4yhxIcTiIZpUdeQAAxc0R7ui4zFAB8WrMfZtwhCGovL2nbcW wBR2HPCHXxPyw7bOIcSHE4gy6n68oABi5oX3dFJgADTnlbXnlG3 UVcIddo2aH8Xc srHRme3DjKGhOLdrvRn67tOaHEhxIQzGn68oABi5oL3dFxmAANP8AlbXnlG3PUVYhrmgsOtp z1nZ8whDQvFu15oz9c2nNDiQ4kBmdP15QADFzz97uikwAIai8ra8so216irETozxVzvPfhtzq1whDQ Fu19oz9a2nNCHEkoQzem68oABi55693RSYAgT WMj9MoHS8e3TXj7j2PbcvZ5RDiQ CH5H0ykoQhxBnVN15QADFzzr7yiAEABAYLR9vUUnd6rs YQhCShCEIcSAz6m68oABi55x95RCAAEBDVnlrTOOfZvbu0wEIQhCEOJCENh03XlAAMXPNnvKIAExBJESRprxdzvPow2Z06xCEIQhCElDiQ2RS9eUAAxc8z 8o6CAAgOENJ Fu Tlnz5ZtxEIQhJQhCEIcTZtL15QADFzzF7yjoIACA XVlpzxF1kOzH95QH3ZR6Os eEIQhEQhxltKk7MoABi55d97R2AEkglIJfjrnF6jrAGOVfTkOnP0NZaIiAhJQhDgbXpOzKAAYueV e0fIAgBAQEBDW k7TYWvLb AHaYQgIQhJcDblH2ZQADFzyl72j5A4Q1t5O07bt05Pccv29GsCAgNV Lt9z9GGxevXIQ6XCdccm3FdOfoS05ucocDcNH2ZQADFzyb72j5AkMYqevFKTs63k29j1au479HZder7OjD99uPPKJDW3kbXZ Tr7DKMf1ZYtpz6LXlke3DZ3Zq2F166Q M3NR9mUAAxc8ke9pOQQCYjruTb0dd0dVxbuv5dny6M ywygB9uUdxsx7vZGT7sMx6MO82YiEB ct1UXZlAAMXPIfvaTmAQAgISHCJ4YzDWXjLbd bqzzp1hKEBCA I3fRdmUAAxg8fe8pecxAACAEAIa18da7W2xszs1QgICAh RvSi7MnAB1J5G9VW9LZ8wEAIACAGBeXsct5tu57HRAQEBAOfP0HVdPbAA4muso0jbc3WbsIAAAAQGva f0HLs9E9evkCBBIH14TtHk2bDieQABxPjPwAAAAABpo8Wn9DzKAAAD9z7DkAAAAAAAAADGj eB6YPTgAAAAAAAAAAAAAB854zNXH9HT6AAAAAAAAAAAAAADVxoQ9cnZgAAAAAAAAAAAAAHznxHaFAAAAAP EAC8QAAEDAwIDBwQDAQEAAAAAAAADBBEBAgUGIBQWNAcQEhMVIjUhMDFAIyRBMmD 2gAIAQEAAQUC wDJP3yONaO 0rJ36g03qBHUuM c B2j6v8AWXmKxt Ud6bb0aMP3O0vVnpDFJO5ZTRumqNkkUqJWfecvE2tjjVNtt3NVTmqpzVU5qqc1VOaqnNVTmqpzXU5rqc11HutqMmuUyS2Xf6L0lVVBpXhLPULj1C49QuPUbj1G49SuPUrizKVlBzatTasp5dmYyV7tz9zU S89fS ErnMnZZROz7KDi5G9FTzLNmZU8DW7 r7eWfensq1rfdpHCei4r7eGU8bXZnukr dqr1ujck9QXu2alfcS80PhvU8t3ucg1ZVTzLBZTd uB6TZnukr dupvldL J9 Qd0ZM7q1uu0lifSMN39pfUaa e3f7gek2Z7pK nbqX5TTHyffqp3NdKYz1TNbO0rqNN Pbv9wPSbM90lfzt1J8ppn5IkkyDni3vZ3jvJYSST3dpPUab d34HpNme6StfrtuTsuranbZXuy7jh8dbbW 7GNKY HySSSKJWKlGyVtd B6TZnukr Se SSe6TVC 8AHpZnxudkkknbJJJJJJgek2Z7pJ7pJJJJJJJNQq Zkeztt4nckkkkkkkkkkkkkmB6TZnukkkkkkkkkkkfqea90Cj5eIkkkkkkkkkkkkkkwPSbM90kkkkkkkkkl10UrXxV0on5WAkkkkkkkkkkkkkkwPSbM90kkkkkkkkkjq7wthHUORbpcz5Q5nyhzPlBjnso7eSSSSSSSSSVqYHpNme6SlfpJJJJJJJItZ5qXL6Ry kcvpHL6Rk2djJTRjfz83JJJJJJJJJWv0wPSbM90lK SSSSSSSSSSSSSTMqeN oFIkkkkkkkkkur9MD0mzPdJbX2ySXX0stdZRVV021BWgg Rckkkkkkkj 7xPdDWeHFSSSPcyzx5kdc3XGN1G5a5JNW1ZOSS6vtwPSbM90ltfbJJX3Ud4VNUcMF2 clkXCInqBWhZqBKpbmmtSmUa1PUWx6i2F7vEvp UjPFYtXXqNBxrl6oOc6 d9zHAPX5jNHt2tbaUtpJJfX24HpNme6SyvskkknuWYILiuBtqKYVxaXMHFhVK 3aizXcCWnciqIaLeqDbQ6Fg0wrJifgkkkkvr7MD0mzPdJZX2SSSSSSST3fQrZbU8myp5KY6p4XOi7vFhySSSSSe9SvswPSbM7T pb9LSSds7J7slTwvtCqyxJ752qV jwVP6mzJI c3zLK7Hvu ds7c1b4XehnHhefZRs4pxjUfJb7LqeKme09Y sdaQcI3ctPjlp8ctPjlp8ctPjlp8ctPjlp8ctPjlp8csvTlp8amxi7O3AOrmuWog rThnxwz44Z8cM OGfHCvjhXwjiXriuEwNrOltPDTbWklzWy44FM4FM4FM4FM4FM4FM4FM4FM4FM4FM4FM4FM7QsJa4w9t1bLtNqo5jDcCmcCmcCmcCmcCmcCmcCmWtbLSlI VzTfzm2bYVxmV7Gs55rT91ezxp9qGGqktpXOXaezqCtq6X7ur8NbkmWA0Ikg5x9nlt 3VUaK0Tx6adaUj7n 8QAKxEAAQIDBwQCAgMAAAAAAAAAAQACERIUAwQTIDFAYRAwMlEhQSJwQlBS 9oACAEDAQE Af1GTDVG8NGiqeFU8Kp4VTwqnhVPCqeFU8Kp4VTwqnhNt5jADoXQU6nU6nU6nU6nU Yt7SZ0O7d2QExRMO207OzZO6HRxidwGuOgRa4ajLd2StinGAywO0u grx4ZGNndDo4xORidptLv4K8eGS7N knGAysTtNpd BXjwyMbK0BPOVidptIlRPWybM8dD8767DUp2m u4gxP39mINCfr QO13zfIdJQpQpQpQiBugYGKqT6VSfSqT6VSfSsnm0EU Tf2AgxWm01TLJobAp13 ynMc3Udiz8An65ACUGe0W HfZbkapto13Q2bHahG7t ijdnfRWA9YT Sw3 lhP9JvwAnNJKw1IFKB0LgEX7Fto5uiF4P2ELdpQtGH7UQcsVMFOFiIuJ3EVEqYpniE XYnvWXgFabG2ZKY967n8Vadpoic5EdUbu06Km5VNyqblU3KpuVTcqm5VNyqblU3KpuVTcqzs8NERCw1hrDWGsNYaw1hrD Uv 8QAMxEAAQMABAwHAAMBAQAAAAAAAQACAwQRFTEFEhMgITJAUWKRoeEQFDAzQVLwQmFwInH 2gAIAQIBAT8B wAja0uNQTMHyOvVmnf 5qzTv c1Zp3 ALmrNO 9zVmnf 5qzTv AHNWad 7mrNO wDc1Zp3 uas07 3NWad wC5qSg5Jpe537n4NiLhWsgsgsgsgsgsgsgsgjCQiKs g0cRsxzefVwhPjuyYuCjbjn05WVivPGgepSZshGXK9RtxRtDpY2GpzgE2WN5qa6vNwhNlJMQXBRNxnZhIF6xm79kwh76wd72ZPJkYy9E16So24rcykXhR6w2TCHvrB3vZmE5bowo24zs2kXhR6w2TCHvrB3vZk8mVlL1A3RXm0j4UesNkLQb0GgXeNLfk4XHwaKhVnVbRhN hrFEK3Db8IOxp6tyo40k7fSHY0rj agH O3HQiazWotQbdKao3HwEjh8rKv3rKv3rKv3psjyaq9qe3HaW71ZjPsrMZ9lZjPsrMZ9lS6O2juDQVAK37fT3Y05VGF52QkNFZU1MkfLjsNSiwn8ShR0iKXUPoUk1zO 9VH1cxz2tvKdSPqmSkOrKv8AVIrvU2DmP0x6FLRZYrx4MpU0eq5NwnINYVpuE4 5AoYQo5 UKZAf5LzUH3XmoPspTjPcVFK1jaijSR8BGkO EZHuvPg2JzkyAC YZKLFLrBPwY3 BTsHTC7SjRZm3tRjeLxmhpNyETz8IUd3yhRh8psbW3DZ6lihZNm5ZNm5TiqVw tUfU2EafWpgxZ3KjapGw0GkCWPFN49bCTapq96ox0kelM EbVntcWHGamYTkbrCtWpwdeytTg69lanB17K1ODr2VqcHXsrU4OvZWpwdeytTg69lanB17K1ODr2VqcHXsrU4OvZUqleZq0VVKN I6tea4V5rhXmuFea4V5rhXmuFea4V5rhRpJ AiSdJ yT 8QAPxAAAQIBCAUICAUFAQAAAAAAAQACAwQRICEwMTJxEiIzUZEQI0FSYXKi0RMUQEJigaHBNENzgrEFJGDh8WP 2gAIAQEABj8C wASiymUPEODDGk5xRl8B hJxqtkrsJZ29vamSuCx8OvRcx4uP39uMgkz 7KAdYj8x3kmwm4feduChQWN0IbBMB7b6hJnzSuUCsj3Gf7TWME7nGYBNnE7r3HegBblzzMFM0cSrmcT5K5nE S9zifJXN4nyXucT5L3OJ8l7nE SuZxPkrmcT5K5nE SuZxPkokZ jM0XTmv6KNK5QZ4kQz5dibL48QQi7ZtLZ6t6DWvbwWILEFiCxBYgsTfqsTfqq5jkqqRKcAdRt1r6sw6kPF2uTIZHMM1oh7NyDWiZoqAFlOgaLkbR8T3rm5reSmhw5 LrxPK0bRdkjS0YkeHDduc8BaMOPDiO3NcDR9E06kKr5oRXieDJ9c9p6KA9YlMKBpXekeGzoMhy2TxHuua2K0k2DcqLskaTu6F w0IkXcKs0SayVCa4TRYmu OhIe677KQ qiwblRdkjSd3Qv2GhCk477lBYRPDZzj8hRkPdd9lIf1RYNyouypu7oX7DQixegmrJRZW4a0Z0zchRkPdd9lIf1RYNyouypzloKnDQOWM7pI0Qg0Vk1KBJx WwCjrtDs1OIbQcrBuVF2VnBhbzpKStOFrtM K3blRdlZkdRoClUo6jQwfP lu3Ki7Kzju IqJE6YkQ27cqLsrIlEqSDeC7ibduVF2VlFPwnkbDhyp7WNEwAX4yIvxkRfjIigQfXImu8Ns25UXZWT2dYTLaPW0eto9bR6YxriSROZ013RCaXfb72bcqLskLZ ZMFK4uTRZFNyouyQ5S4mYBekhvLAKmhTR2T E1akQE7umwjd4qI7rRT Aoc Ha13VFZ4ItkcLR wDSJ5ISiNFfGa6p4J6E17DpMcJwRylNyouyQ5Zjcp4XNu3dC1mTjeOTVimbca1rw2uyqWtDe3KtYyM2rbBbZnFbZvFRDvcU2FF0zE0iZmNXNSV7u 6Zc1DhQRxK5yVRCNwMw nINCCWt676gg UH1h 44UAKgOUpuVF2SGVLWhifeFqRCM1VouVcJ3yVbHDMUeagxIg3tbOqpM4d4gLXdDhjiuejPid2pc1AaD1jWaTsk3Ki7JNys7lgCwBRR8RWUQiydkm5UXZIW0XNSiHuiT AE 1ZOyTcqLgojSJmOM7bafrNUohddmlw 7ZNhNrrrTRSOrOj6Nxm7a1f4Vf4Vf4Vf4Vf4Vf4Vf4Vf4Vf4Vf4Vf4Vf4VDfF3zXKTub0nQ4rZhbMLZrZhbMLZrZhbMKZ2qOxAkV2FywrCsKwrCsKwrCsKwrCsKlGg3WDdIfJBwqIrUklbQOdhgnsPSsKwrCsKwrCsKu9mcpRJ5pg12rl0KU 0x51oR9JD7pv v8 3EKHLGi7Uf9lJZYMDXTRBvYb017DpNcJwR7dFhkVPEya6Us9acOhw1eCY2bRAEwA9umKnmtf xAAqEAACAQEFCAMBAQEAAAAAAAAAAREhIDFBYXEQUYGRocHR8DCx8UDhYP aAAgBAQABPyH AJJlEeAIciq8mZh3r8S0ExFtcDvSeDNf5 a3CR85VLonHRcuL3E4CnKvSRaFangv7b1Dza3TetxcRuWMGLKvhcbwtCI dQFW8Zk4WMXRS9sePkbHH5A QPlWXjhw8dUFehM2CWcqffbkwTJKhftBVv8Ab61JYEYyR O B O B e B O B e B N4HveBhRzEua0t7gPQp0IrM BF1HMPSnkbU9MZ RGxWAol8D2LKumItbjZc8tw06mySSSSSSSSSROI6e97vPAZG5fl72xEH1jc8OBdySdk7JJsXsc891oH5xJJJJJivSccmyhVJnnQkkkkv2c9j8F0O5LsH34FxJIsWdS8MSx22odhkkySSSSSROi2FPziSSSSdkfU0JJJHrvpd Aam2pbeLEQKs WHBQiSST3 YZJJJJJInRbqn5xJJJJOzPoaEkkk67vAu5W fYOLhFygkkk9Xv2ISSSSSSJ0W6p69SSSSSdkPU0J2HCpWqeTKLoYngvbGeVgSNPo12ESSSSSSJ1VuqqCSSSSSRI3tEkRvSJJI4ccYOggGVBLFlxKxaxcVfOyENRroSK6QuaEkkkkkidVbqmqJ2JJsCdiBN3jcKL7ZE6ftVdYshJJJNoF63VOon4QDcn3HuSgr0apf94AAqgAxgmLSSeFUpySS 5 uAAKoAIeXJSTpe3J mIPv8wAB21UqF8IBkA7oSIGujoS5HpLwekvB6S8Cu1IuubrgXPhAKDt1VB8IAhy2k12sxY3Q8H6i8H6i8H6i8FxiweHclNT8RwAVluq5V8wACJbvQnuV3qtdzb7fEAORW6rkG0WCSlt4D9SeHhmQnWnkIlnS45PgAS3K5G 7oLAFzhmN0VSiPuvXw8i hH7hWEC86i7mntOUW6rla2kWIlr0xo3dQGrk1dEkXRsWHUg ZmLyjQL31p2Ll4soTmRqMtS5TCfEf3Pcy973BOZPD9ZJlbwQ tToK2nm dcIEyMmY WvfAhhNYoThjxENpCElhtORu3VchWQdbyffCBkk8pWS9acnDPNJ9HW5ETBJJIjnehoXOm 7BkE9dNiIbzciXuRjTcDqOoouKLIc4W6rlD4QCRpsEXgr4DvTeBB4TIb7hEN an3JtgSScyWqmBS3elBO0kkknYkknYkjurmpKhXXOgnYknYkkkk5wIrI0AJSBuwreiSSdiSSSdiSSSSNwoZNbuE4hJJJJJJJJI Ao44I0AspamI1pLIVWWqMj61Mj61Mj61Mj61Mj61Mr61Mr61Mr61Mr61Mr61Mn61GrD71E0SlVUL AMIEppnc7n20T5bJMttzMttREupXwJQGNsSlK0tal8qZYyhlDKGUMoZQyhlDKGUHFcNwbvfV2gaDKg1gyn1CXAcHKMoZQyhlDKGUMsXSotafypWiaDlyd6tegVcOp7yhaVf3U5QXzdIt2LnK4oc06TZDz1SEnUjqU07n a1KJY7rRhmSiB6qvEg1UyKEluX90XZIqWRKwvk 9oADAMBAAIAAwAAABCSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSQCSSSSSSSSSSSSSSQQSSSSSSSSSSSSSSQASSSSSSSQ7SSJZKD001vsySSCm00m23rmv8AJpkkkHtpNNJJqNbpptYkkipNMhtuF DJptMkkCJJKpNJTtEpppokkCttqNJApJEJp7YkkCJJqtIVJJgpfpokkCJNgEHQJtf9pPIkkEAEgEDHbftv7 YkkFNkBhslpL bf74kkFtIsMMPbb AGT JJBAJAIPT2 AG JLCSQZLaLYjCSDf7f CSQBJTDBr1 r9oADCSQQAQCKTbBSSJLCCSQfK3zZdddjauOTCSQPtwTlmHa96PgDCSQLfqvbsSQGQDbICSQBJbLaOAabARSLCSSZ 8Ab fb A22WSUkkmbf7 b AH0ssssrJJAkbbaSTSjkt0kuJJIBJJJJJBJJJJIBJJJIAAAAABIAAABJJJJJJJJJJIAJJJJJJJJJJJJJJIJBJJJJJJJJJJJJJJJBJJJJJP EACcRAAIBAQgDAQEAAwAAAAAAAAABETEQICEwQGHh8UFRcbFwgZGh 9oACAEDAQE EP5GhZbAcQkkO3BDtwQ7cEO3BDtwQ7cEO3BDtwQ7cEO3BDtwQ FiWggQIECBAgQEjqJzir7GLRZvt5 hEkrlRuHfblzmRXh5EklCzEV91vJZY18EssX LuIav8MIuJN0Q0VWc71E e49CiSShXQpZU0lE e5gt l4KWVNJRP3u2yOLtLKmkSKMbKu2IWNKbskvUY4tDa BfsfBLWRbAthqNclLgShQNL65ZRurGzFo2TZNkTTcaqK9DZGyNkbIaGUDRYmydXA7jUWhdqTaEQrl Rbxf8A3kvLCNrtREe0JcENRg8p2qU5Rg NFHduD1RCFBjTRf8ARrqN6bgSE RKkJvLEqoqBWeQHvBYZbrdRVlmqtgUQKkd1oqsa I1UG3hFQea65UklQi8m6NLNlotIbznkkxT0L2rR50kfTEwTysc8K hIoHEtBDpyQ6ckOnJDpyQ6ckOnJDpyQ6ckOnJDpyQ6ckOnJiIcyYUfR9H0fR9H0fR9CRVYkkoX8k 8QAKhEAAQICCQQDAQEAAAAAAAAAAQARITEgMEFRYXGRoeEQgcHRQLHx8HD 2gAIAQIBAT8Q wAjBhuShjm2UfQ0JWP0CY QJj9AmP0CY QJj9AmP0CY QJj9AmP0CY QI gwwHQ EP7NOv25Tr9uU6 blOv25Tr9uU blPv25T79uUOgUQmNMJDadrBWx3vM FBbEzQ6SQpjOExTEAArAWrIZ 0USSJMyoeZmrMRTEhSdALiQEwEWBBoxE9tvpRwyFCbmQMWAa1wlSnZBfSfFAJKwQzsRCMwpsBnRG6rhKlOyC k KDhOxPjymkWUhuqZpiVKdkF9J8ULoiYZSGyaO RmTdVwlSJOCJODdWdmQw7wQDwQRhZRIBmgAsrhVNCWknSHlM7575cAefKc eMzyaI3n5xACSiEK1C3zjCAH66AmFAAAe0TfANSEqZCNVdFt6WM2WM2WM2RERJDxUUuqh8Vp3ADZ NWAqjg7AIwIAQGWOaMGc4j1z2UpSbpHSoe LaCFjONF45gPcp3T3oEA4l1FUAGkTwZ23HbRWvi8RH9n0hRGuMftSzyOPaLksmPpTAx2Ph1Ih39IGsaois6oIWRJO6taIBB8gHXCRiCi8ZQDQHUVhAKiQXvkdkVEozj6U9BJ89o SmOOxUqEjE9GEzAIWd6DDdRP4LDYiWYRJMNEBSHRYFF9qLuTVInTIACK5t4vqAUb4iqdo0xA1nmLD7rma6HpNXwVQyBM0w0jEWoQw9ntPQeg9B6D0HoPQeg9B6D0HoAdjOtefYJia6b uE39cJv64Tf1wm rhM XCZ uEz9cI8M1uirjn JP 8QAKhABAAIAAgoCAwEBAQAAAAAAAQARITEQIEFRcYGRobHwYfEwweFAYNH 2gAIAQEAAT8Q wCSVYsmAbA2q0AYqgYsxy2yAtQNOcGI0NKXLiYEZhNYhWE5IIj AGGiwCWV3MwYbbcXYLmGArzAC8TZ8sg Qwz430B5VtVxVVxf9qYEFWNuzsqd0DwQsTyMwSVtoG8TyMg3c4VQCsPzgBnFUQERMXeQHMGLQAusDho4cCCWgAFkFCBQ7Wdjq0C1QW7Y4F HXIboAHwS66dsPnsrPXNAiKKzbtKZpOaTmk5pnpgCr whUA5g6ILAY72jmazeVS4 UDGbtfdnFhlDQaC3FqOMWLUYtzEfuCwoquVri7kwmTHYVcLb3hvq2yHDjQAFABkRYsWLFixYosVSlwXmRvLpeqmlN461ttjzg6TinFoMOgYYH6VW9gegxXwojbVHFT3Vh qVLFTo1HG22MMLGFjDCxYsKEclqIpbXVfXeJtra86x0QSCoNyaDUxNCwlmbSWsdFhlivqFVOCZ VHEO BhAKLs UeWbZYKMAjDBLqUWSrQV1ZdbyEvi0JkIq BGGGGGGOtkfTeNXunideedZ6v1sGOj74wyyyg4vF22B6pyuKhU9ajavOZwzsoCU sB3xlllXB3TetxllllljrhOyeNXunidUedb6v1sGOj746FlnKFNA7Wx6W5kPBuJLFBF8K3wsEAYAVGWWXcQVe7jGWWWWWOsE7J41e6eJ1VrfV vgxUfXHShCmgLVj4mM9jkIFQ3obdLOLvwRhhh0RQq9nGMsssss9eJ2Txq908Trbrf2aHoLMOB1SGOj2dgrjtRwFeUe2HmyNAc5WPQRljqWecYYYYZaucdOsZZ9iCMZZZZZZ6tOyeNXuniW8R1bdA6FhssPm4ehuhcFYwDdxJ5zARhhhllllhhhhgwOM7J41e6eJiOOpOKOkOgS5sSfKX97oA1ShvajgHroMMMMMMMMMMMMGInZPGr3TxGznqhxRjijDSYi0Mvgg7BDqwJvH zr0WGGGGGGGGGGGHFOyeNXuniFw0jqgflFIpSfgI6rFLitw6ulz5jnQ8cYYYYYYYYYYoGdk8avdPEv4Wg6Q6F0GO 6p6Bv ABqsoDgn10voJfQSxG6gYQC4C3lB0vOMMMMMMMMdCnZPGr3TxL CahdA6RmM3QAIp1gTFPwnSlSmCnJLuKi6pQboqKQbytAftyjoGWGGGGGKOGzsnjV7p4nTHj8AB0DpDCWVhvQu6g5UHSJLDoGGGGGGKOM8TsnjV7p4lvB NInpT1AC1ZkmqEY8xkrmjew2QKo5OHzPDonCXxrcLmp1QdI2w Sr9QKHHr AHcdBhgV3uT6o4oEGu2xXxRaPhTwlT5HAU55SWIAGZhbHOyBY1icowxVx idk8avdPEu9LDQYBYLQLEls xQXytnLpFwx65icwgxsaZTtlKEbqtXKVos2pXk7Qc3gwB3PEA5WnwZUU73fIQAFzvpFEbTdaCuPTJFIwCAyGMDEGQbZUt6uxibBxky aIYL4aabmonEl1vWLycwWjeXgcDMMaBZPtmT4IPFg1AMgIwxV72E7J41e6eJ7Js0HSGGgJ8zGQ9l3ymPJ wB7VLF2EF6CV3l7crcPMxhFDP9oRSRKTY6nKtTXcQKlIutweQPaMpbMS QB3lM7zY Ji7k2JT S3dKlENxGGHQVexhOyeNXuniWexhoOoHFGOKJc8Zmjcp3OoatDemDLBTaGVSUHD4vUCoFiRlBQyK0GHQOgZZ9u2M7J41Wr70bgoKNyFP5Z7mcGaE9J 0z4NbuCftosMssMsss1fOHaNfNjVpUtWRU6kmBV8UVT4fh N3vrszB8ij2CGKAMdrXhyfSOnununhc4zxANhxXtLVKQmqQViSm2XB2oVLbDCuDg9Yk1 NpppphjrrrnhFmH X3YWXj8usXlXyVRrbxHKCqhx9wnvfyev ACet J738nv AMnrfyDtenSL1awYlcZtqoDFYQVAaygAketzwij ifWT6yfWT6yfWT6yfWT6yfWT6yLXghsS6pjeVPlFzRrZebA2JzlKFiaKa5byJ9ZPrJ9ZPrJ9ZPrIA oj1meEEAA DUqVKlSpUqVKlSo8jj4JeyOYsAZ sAcRmaB YtYm6tSUkqVKlSpX dnl2iKhCiNtVvgUKmJ2N5Qrag0IqpuyjCDtER 22A7ZaqlC1JgPkaT5CU8TcAEePqo7pWJMAYoAwACgP9yEAd8rz2u6hEKD8n 2Q CSS Tidy View Compiled margin 0 padding 0 box-sizing border-box html body width 100 height 100 img visibility hidden canvas position absolute left 0 top 0 width 100 height 100 output position fixed top 0 left 0 width 33 height 100 output hover background-color fff JavaScript Tidy View Compiled window addEventListener load function use strict var COUNT 128 var WIDTH 64 var HEIGHT 64 var MAX_VALUE 0xFFFFFF var RGB_PAD 000000 00000 0000 000 00 0 var Genesis function count width height max models exempt top mutation var ALPHA_PRESERVE Math floor 1 count 0 03 probability breeder mutate var CHANCE_OF_MUTATION 0 05 probability gene mutate var CHANCE_OF_GENE_MUTATION 0 05 breeders sorted descending score order give higher priority better scores breeders near beginning list var BREEDING_PRIORITY Math log 0 75 Math log 0 99 var COUNT count var WIDTH width var HEIGHT height var SIZE WIDTH HEIGHT var GENE_VALUE_MAX max var GENE_VALUE_BITS Math floor Math log2 GENE_VALUE_MAX 1 var GENE_COUNT SIZE var SCORING_MODELS var fnMaxValueIndex function p c return c p p var fnSum function p c return p c var fnStdDev function arr var mean arr reduce fnSum arr length return Math sqrt arr map function v return Math pow v - mean 2 reduce fnSum arr length function randomGene return Math floor Math random GENE_VALUE_MAX function randomGeneBit return 1 Math floor Math random GENE_VALUE_BITS function getPixels image var canvas document createElement 'canvas' ctx canvas getContext '2d' result l imgData canvas width WIDTH canvas height HEIGHT ctx drawImage image 0 0 image width image height 0 0 WIDTH HEIGHT imgData ctx getImageData 0 0 canvas width canvas height 0 l imgData data length l 4 result 2 imgData data 16 0xFF imgData data 1 8 0xFF imgData data 2 0xFF return result function imageHashError var diffs 0 m generation SCORING_MODELS length m 0 m SCORING_MODELS length m 0 SIZE SCORING_MODELS m diffs return diffs m SIZE function imageHash pixels var result sum 0 gray r g b c avg 0 SIZE r pixels 16 0xFF g pixels 8 0xFF b pixels 0xFF gray 0 2126 r 0 7152 g 0 0722 b sum gray result gray avg sum SIZE 0 SIZE result result avg 1 0 return result function createChromosome var genes Array GENE_COUNT var hash var score 0 var inst get score return score get genes return genes get hash return hash mutate function var m generation SCORING_MODELS length 0 SIZE Math random CHANCE_OF_GENE_MUTATION genes randomGeneBit else hash SCORING_MODELS m optimize evolution genes randomGeneBit cross function b var m generation SCORING_MODELS length x parent 0 SIZE WIDTH parent Math random 0 5 b cross genes row time x 0 x WIDTH x genes x parent genes x update function hash imageHash genes score 1 - imageHashError hash return inst randomize function var 0 GENE_COUNT genes randomGene hash score 0 return inst return inst var generation 0 var chromosomes Array apply null Array COUNT map function return createChromosome randomize function reset var 0 COUNT chromosomes randomize 0 models length SCORING_MODELS imageHash getPixels models generation 0 function evolve var 0 COUNT chromosomes update chromosomes sort function b return b score - score fresh population 0 ALPHA_PRESERVE chromosomes COUNT 1 Math floor Math random COUNT 1 randomize breed COUNT - 1 COUNT 1 i-- chromosomes cross chromosomes Math floor Math pow Math random BREEDING_PRIORITY COUNT chromosomes Math floor Math pow Math random BREEDING_PRIORITY COUNT mutate ALPHA_PRESERVE COUNT Math random CHANCE_OF_MUTATION chromosomes mutate generation DEBUG window Genesis Genesis reset return get chromosomes return chromosomes get generation return generation reset reset evolve evolve COUNT WIDTH HEIGHT MAX_VALUE document querySelectorAll img var samples document querySelectorAll 'img' canvas document body querySelector ' preview' ctx canvas getContext '2d' outp document querySelector 'output' running false w h pw ph var fnResize function canvas width window innerWidth canvas height window innerHeight w window innerWidth h window innerHeight pw w 3 WIDTH ph h HEIGHT var fnTick function running Genesis evolve var best Genesis chromosomes 0 worst Genesis chromosomes Genesis chromosomes length - 1 m Genesis generation samples length y x p ctx clearRect 0 0 w h ctx drawImage samples m 0 0 samples m width samples m height 0 0 w 3 h y 0 y HEIGHT y x 0 x WIDTH x p best genes y WIDTH x ctx fillStyle RGB_PAD p toString 16 length p toString 16 ctx fillRect w 3 pw x ph y pw ph y 0 y HEIGHT y x 0 x WIDTH x p worst genes y WIDTH x ctx fillStyle RGB_PAD p toString 16 length p toString 16 ctx fillRect 2 w 3 pw x ph y pw ph outp textContent 'GEN ' Genesis generation ' nSCORE ' best score console log BEST best score WORST worst score window requestAnimationFrame fnTick var fnToggle function running running false true fnResize window addEventListener resize fnResize false window requestAnimationFrame fnTick window addEventListener click fnToggle false false 999px Loading HTML CSS JavaScript Behavior HTML Preprocessor HTML Preprocessors HTML preprocessors make writing HTML powerful convenient instance Markdown designed easier write read text documents could write loop Jade Learn Versions None Haml Markdown Slim Jade Add Class es html Adding Classes CodePen whatever write HTML editor goes within body tags basic HTML5 template don't access higher-up elements like html tag want add classes effect whole document place Stuff head head CodePen whatever write HTML editor goes within body tags basic HTML5 template need things head document put code Insert common viewport meta tag CSS Preprocessor CSS Preprocessors CSS preprocessors help make authoring CSS easier offer things like variables mixins provide convenient abstractions Learn Versions None Less SCSS Sass Stylus Need add-on CSS Base CSS Base It's common practice apply CSS page styles elements consistent across browsers offer two popular choices normalize css reset chose Neither nothing applied Normalize Reset Neither Vendor Prefixing Vendor Prefixing get best cross-browser support common practice apply vendor prefixes CSS properties values require work instance -webkit- -moz- offer two popular choices Autoprefixer processes CSS server-side -prefix-free applies prefixes via script client-side Autoprefixer Prefixfree Neither Add External CSS stylesheets added order code write CSS editor also add another Pen pull CSS Try typing font ribbon External Resources apply CSS Pen stylesheet web put URL we'll apply order CSS Pen stylesheet link file extension preprocessor we'll attempt process applying also link another Pen we'll pull CSS Pen include it's using matching preprocessor we'll combine code preprocessing use linked Pen true dependency Learn Quick-add --- Bootstrap Foundation Animate css add another resource Analyze CSS via CSS Lint JavaScript Preprocessor JavaScript Preprocessors JavaScript preprocessors help make authoring JavaScript easier convenient instance CoffeeScript help prevent easy-to-make mistakes offer cleaner syntax Babel bring ECMAScript 6 features browsers support ECMAScript 5 Learn Versions None CoffeeScript LiveScript TypeScript Babel Add External JavaScript scripts run order code JavaScript editor also link another Pen run JavaScript Also try typing name popular library External Resources apply script anywhere web Pen put URL we'll add order JavaScript Pen script link file extension preprocessor we'll attempt process applying also link another Pen we'll pull JavaScript Pen include it's using matching preprocessor we'll combine code preprocessing use linked Pen true dependency Learn Quick-add --- jQuery jQuery UI Angular Ember React Backbone Underscore Lodash Three js D3 Snap svg Modernizr Polymer Zepto Handlebars Greensock TweenMax add another resource Analyze JS via JS Hint Code Indentation Spaces Tabs 1 2 3 4 5 6 Width Indent Autosave active Pens autosave every 30 seconds saved Auto Update Preview active preview update automatically change code CodePen PRO pretty sweet saying Pen Secret Sam HTML CSS JS Use Left Layout Use Top Layout Use Right Layout Editor Commands F Find F Find Replace Indent Code Right Indent Code Left Block Comment Tab Tidy Code J Join Next Line Pen Actions P Create New Pen Save Info Panel owned 5 Re-Run Code Also see Tab Triggers HTML Specific D Select Outward Matching Pair Wrap Close Closest Open Tag CSS Specific Y Evaluate Simple Math Increment Number 0 1 Decrement Number 0 1 Misc 8 Clear Analyze Errors 9 Open Dialog ESC Close Dialogs Collapse Editors CodePen doesn't work well without JavaScript We're progressive enhancement CodePen bit unique it's writing showing front end code including JavaScript It's required use features CodePen Need know enable Go Close use anyway"),
('[PDF] MODELS - VIEWS - CONTROLLERS (1979, Trygve Reenskaug - father of MVC).', "PDF-1 2 12 0 obj stream H W n 8 6bU 6-P Zc L j KRq d' 4 3 Mj D O f iMk n _ _ ym_ ' pM V m di d - 9 H 6 cd GF - 87 K H R ' eR Y bxk l tMYy 7 E 9 F kv U R p K z ycI zk H tgy Cp 9 gE M hk h CnE G y H 2 n p 9 R 3jj r ' HT 9 9 y ZlI7 1 b tr z 2zN F F 5 X4 k Y c h2 rb E p Sv k 3 Q ' e H n z g e9 un 3 Hr D G 8 y _uL e YRg9pZf Q J ll 4 '4p q Z sp 9 Rm 31 c b F b' 4 tP e C4 B 5 aZ y x 4 H KC Jl Hs F 7 ' 2 b Sg ql M b O N y 4 Ao j u 39t C BAb n3 p 6 3 cgQ p o 5 P _ r BC E U H 1 o - 3 k K zh D G - Y 1gU 0 7 W M -T X 9 C n B U b R R l m Q o J 9VH Al _ c k cn 4 Z W iVE6A z k P x aby e F - 'p 7S VA r 6 9 N f p 3 wO e y eh b 2 ' P 3z YB d 0 NC spe Y E j 9 e Y KRooA o h o 6 e9 P OV h W Q D n j - 8N9 K X p n ' _ N H ' O Z h Bn'j U 6 n o endstream endobj 13 0 obj 1934 endobj 4 0 obj ProcSet 2 0 R Contents 12 0 R endobj 17 0 obj stream H uS_o 0 g f AQ 'X q 0c 7 e 1 6 y j 'uv 0 x xd 8 g 8 GA 2 1 F Y2 6t o Y Y OGv YL y z 0 B PB'zB 3 j K qB v k4 B RE 7 l GSk NS d w8 R eK n D VX K HZQ - Z f dx j J Qo r D_b L 6 Y c V B aP pB F U6 r E 1 H D X Z _ 2 J 5I h F 6 e Y e -5 K w endstream endobj 18 0 obj 723 endobj 16 0 obj ProcSet 2 0 R Contents 17 0 R endobj 6 0 obj endobj 7 0 obj endobj 8 0 obj endobj 9 0 obj endobj 10 0 obj endobj 11 0 obj endobj 14 0 obj endobj 15 0 obj endobj 2 0 obj PDF Text endobj 5 0 obj endobj 1 0 obj CreationDate D 20030228181441 Title Author Producer Acrobat PDFWriter 4 05 Windows NT endobj 3 0 obj endobj xref 0 19 0000000000 65535 f 0000008729 00000 n 0000008607 00000 n 0000009114 00000 n 0000002052 00000 n 0000008638 00000 n 0000003182 00000 n 0000004271 00000 n 0000004531 00000 n 0000005616 00000 n 0000005869 00000 n 0000006970 00000 n 0000000019 00000 n 0000002031 00000 n 0000007241 00000 n 0000008337 00000 n 0000003027 00000 n 0000002206 00000 n 0000003007 00000 n trailer startxref 9163 EOF"),
('Eventual Consistency Today: Limitations, Extensions, and Beyond', "Current Issue Past Issues Topics talks 2015 Applicative conference online Databases April 9 2013Volume 11 issue 3 Eventual Consistency Today Limitations Extensions Beyond applications built eventually consistent infrastructure given guarantee safety Peter Bailis Ali Ghodsi UC Berkeley July 2000 conference keynote Eric Brewer VP engineering Google professor University California Berkeley publicly postulated CAP consistency availability partition tolerance theorem would change landscape distributed storage systems architected 8 Brewer's conjecture based experiences building infrastructure first Internet search engines Inktomi states distributed systems requiring always-on highly available operation cannot guarantee illusion coherent consistent single-system operation presence network partitions cut communication active servers Brewer's conjecture proved prescient following decade continued rise large-scale Internet services distributed-system architects frequently dropped strong guarantees favor weaker models notable eventual consistency Eventual consistency provides guarantees Informally guarantees additional updates made given data item reads item eventually return value particularly weak model given time user rule possibility inconsistent behavior system return data still eventually consistent might converge later point guarantee point future something good happen Yet despite apparent lack useful guarantees scores usable applications profitable businesses built top eventually consistent infrastructure article begins answer question describing several notable developments theory practice eventual consistency focus immediately applicable takeaways practitioners running distributed systems wild production deployments increasingly adopted weak consistency models eventual consistency learned several lessons reason program strengthen weak models primarily focus three questions preliminary answers eventual eventual consistency scores system architects advocating eventual consistency indication eventual consistency seems work well enough practice possible provides weak guarantees New prediction measurement techniques allow system architects quantify behavior real-world eventually consistent systems verified via measurement systems appear strongly consistent time one program eventual consistency system architects cope lack guarantees provided eventual consistency program without strong ordering guarantees New research enables system architects deal inconsistencies either via external compensation outside system limiting data structures avoid inconsistencies altogether possible provide stronger guarantees eventual consistency without losing benefits addition guaranteeing eventual consistency high availability guarantees provided Recent results show it's possible achieve benefits eventual consistency providing substantially stronger guarantees including causality several ACID atomicity consistency isolation durability properties traditional database systems still remaining highly available article intended formal survey literature surrounding eventual consistency Rather pragmatic introduction several developments cutting edge understanding eventually consistent systems goal provide necessary background understanding eventually consistent systems programmed deployed evolved well systems tomorrow heading Eventual Consistency History Concepts Brewer's CAP theorem dictates impossible simultaneously achieve always-on experience availability ensure users read latest written version distributed database consistency formally proven property known linearizability 11 presence partial failure partitions 8 CAP pithily summarizes tradeoffs inherent decades distributed-system designs e g RFC 67714 1975 shows maintaining SSI single-system image distributed system cost10 two processes groups processes within distributed system cannot communicate partitioned either network failure failure one components updates cannot synchronously propagated processes without blocking partitions SSI system cannot safely complete updates hence unavailable users Moreover even without partitions system chooses availability consistency enjoys benefits low latency server safely respond user's request partitioned servers also respond user's request without contacting servers even able 1 Note can't sacrifice partition tolerance 12 choice consistency availability services increasingly replicated provide fault tolerance ensuring services remain online despite individual server failures capacity allow systems scale variable request rates architects must face consistency-availability consistency-latency tradeoffs head dynamic partitionable Internet services requiring guaranteed low latency must often relax expectations data consistency Eventual Consistency Available Alternative Given CAP impossibility result distributed-database designers sought weaker consistency models would enable availability high performance weak consistency studied deployed various forms since 1970s 19 eventual consistency model become prominent particularly among emerging highly scalable NoSQL stores One earliest definitions eventual consistency comes 1988 paper describing group communication system15 unlike shared text editor Google Docs today changes made one copy eventually migrate update activity stops period time replicas database converge logically equivalent copy database contain predictable order documents replicas document contain fields eventual consistency servers eventually converge state point future servers indistinguishable one another eventual convergence however provide SSI semantics First predictable order necessarily correspond execution could arisen SSI eventual consistency specify value eventually chosen Second unspecified window convergence reached system provide SSI semantics rather arbitrary values seen shortly promise eventual convergence rather weak property Finally system SSI provides eventual consistency eventuality immediate vice versa eventual consistency useful Pretend charge data infrastructure social network users post new status updates sent followers' timelines represented separate lists one per user large scale frequent server failures database timelines stored across multiple physical servers event partition two servers however cannot deliver update timelines tell user cannot post update wait partition heals providing response strategies choose consistency availability cost user experience Instead propagate update reachable set followers' timelines return user delay delivering update followers partition heals choosing option give guarantee users see set updates every point time admit possibility timeline reordering partitions heal gain high availability arguably better user experience Moreover updates eventually delivered users eventually see timeline updates users posted Implementing Eventual Consistency key benefit eventual consistency fairly straightforward implement ensure convergence replicas must exchange information one another writes seen information exchange often called anti-entropy homage process reversing entropy thermodynamic randomness physical system 19 Protocols achieving anti-entropy take variety forms one simple solution use asynchronous all-to-all broadcast replica receives write data item immediately responds user background sends write replicas turn update locally stored data items event concurrent writes given data item replicas deterministically choose winning value often using simple rule last writer wins e g via clock value embedded write 22 Suppose want make single-node database eventually consistent distributed database get request route server contact server performs write local key-value store send write servers cluster write-forwarding becomes anti-entropy process careful however sending write servers wait servers respond acknowledging local write another server partitioned write request hang indefinitely Instead send request background anti-entropy asynchronous process Implicitly model eventual consistency assumes system partitions eventually healed updates eventually propagated partitioned nodes eventually die system ends operating single partition eventually consistent system great properties require writing difficult corner-case code deal complicated scenarios downed replicas network partitions anti-entropy simply stall writing complex code coordination master election operations complete locally meaning latency bounded geo-replicated scenario replicas located different data centers don't endure long-haul wide-area network latencies order hundreds milliseconds request fast path mechanism described returning immediately local write put data durability risk intermediate point trading durability availability return W replicas acknowledged write thus allowing write survive W-1 replica failures Anti-entropy run often rarely desired without violating guarantees What's like Safety Liveness eventual consistency relatively easy achieve current definition leaves unfortunate holes First eventual state database database always returning value 42 eventually consistent even 42 never written Amazon CTO Werner Vogels' preferred definition specifies eventually accesses return last updated value accordingly database cannot converge arbitrary value 23 Even new definition another problem values returned eventual state database reached replicas yet converged guarantees made data returned questions stem two kinds properties possessed distributed systems safety liveness 2 safety property guarantees nothing bad happens example every value read point time written database liveness property guarantees something good eventually happens example requests eventually receive response difficulty eventual consistency makes safety guarantees eventual consistency purely liveness property Something good eventually happens replicas agree guarantees respect happens behavior ruled meantime meaningful guarantees safety liveness properties need taken together without one trivial implementations provide less-than-satisfactory results Virtually every model stronger eventual provides form safety guarantees almost production systems however eventual consistency considered bare-minimum requirement data consistency system guarantee replica convergence remarkably difficult reason Eventual Eventual Consistency Despite lack safety guarantees eventually consistent data stores widely deployed eventually consistent stores don't promise safety evidence eventual consistency works well practice Eventual consistency good enough given latency availability benefits many stores offer choice eventual consistency stronger consistency models scores practitioners advocate eventual consistency behavior eventually consistent stores quantified eventual consistency doesn't promise safety doesn't mean safety isn't often provided measure predict properties eventually consistent systems using range techniques recently developed making way production stores techniques discuss next surprisingly shown eventual consistency often behaves like strong consistency production stores Metrics Mechanisms One common metric eventual consistency time long take writes become visible readers captures window consistency measured according wall clock Another metric versions many versions old given read information used ensure readers never go back time always observe progressively newer versions database time versions perhaps intuitive metrics range others numerical drift true value data item various combinations metrics 25 two main kinds mechanisms quantifying eventual consistency measurement prediction Measurement answers question consistent store given workload right 18 prediction answers question consistent store given configuration workload 4 Measurement useful runtime monitoring alerts verifying compliance SLOs service-level objectives Prediction useful probabilistic what-if analyses effect configuration workload changes dynamically tuning system behavior Taken together measurement prediction form useful toolkit Probabilistically Bounded Staleness brief deep dive quantify eventually consistent behavior discuss experiences developing deploying integrating state-of-the art prediction techniques Cassandra popular NoSQL Probabilistically Bounded Staleness PBS provides expectation recency reads data items 4 allows us measure far eventually consistent store's behavior deviates strongly consistent linearizable regular store PBS enables metrics form 100 milliseconds write completes 99 9 percent reads return recent version 85 percent reads return version within two recent Building PBS PBS work Intuitively degree inconsistency determined rate anti-entropy replicas constantly exchange last-written writes window inconsistency bounded network delay local processing delay node replicas delay anti-entropy possibly save bandwidth processing time delay added window inconsistency many systems Amazon's Dynamo example offer settings replication protocol control delays Given anti-entropy protocol given configured anti-entropy rate network delay local processing delay calculate expected consistency Cassandra piggyback timing information top write distribution protocol primary source anti-entropy maintain running sample user wants know effect given replication configuration use collected sample Monte Carlo simulation protocol return expected value consistency data store closely matches consistency measurements Cassandra clusters Berkeley PBS Wild Using PBS consistency prediction tool help several friends LinkedIn Yammer quantified consistency three eventually consistent stores running production PBS models predicted LinkedIn's data stores returned consistent data 99 9 percent time within 13 6 ms SSDs solid-state drives within 1 63 ms eventually consistent configurations 16 5 percent 59 5 percent faster strongly consistent counterparts 99 9th percentile Yammer's data stores experienced 99 9 percent inconsistency window 202 ms 81 1 percent latency reduction results confirmed anecdotal evidence eventually consistent stores often faster strongly consistent counterparts frequently consistent within tens hundreds milliseconds order make consistency prediction accessible help Cassandra community recently released support PBS predictions Cassandra 1 2 0 Cassandra users run predictions production clusters tune consistency parameters perform what-if analyses normal-case failure-free operation example explore effect adding SSDs set servers users adjust expected distribution read write speeds local node predictions inexpensive JavaScript-based demonstration created4 completes tens thousands trials less second course prediction without faults predictions good underlying model input data statistician George E P Box famously stated models wrong useful Failure account important aspect system anti-entropy protocol may lead inaccurate predictions Similarly prediction works assuming past behavior correlated future behavior environmental conditions change predictions may limited accuracy issues fundamental problem hand reminder prediction best paired measurement ensure accuracy Eventual Consistency Often Strongly Consistent addition PBS several recent projects verified consistency real-world eventually consistent stores One study found Amazon SimpleDB's inconsistency window eventually consistent reads almost always less 500 ms 24 another study found Amazon S3's inconsistency window lasted 12 seconds 7 recent work shows results similar presented PBS Cassandra closing inconsistency window within around 200 ms 18 results confirm anecdotal evidence eventual consistency often good enough providing quantitative metrics system behavior techniques PBS consistency measurement continue make way production infrastructure reasoning behavior eventual consistency across deployments failures system configurations increasingly straightforward Programming Eventual Consistency users verify predict consistency behavior eventually consistent systems techniques provide absolute guarantees safety violations application requires safety always respected growing body knowledge program reason eventually consistent stores Compensation Costs Benefits Programming around consistency anomalies similar speculation don't know latest value given data item proceed value presented latest you've guessed wrong compensate incorrect actions taken interim effect compensation way achieve safety retroactively restore guarantees users 13 Compensation ensures mistakes eventually corrected guarantee mistakes made example speculation compensation consider running ATM 8 13 Without strong consistency two users might simultaneously withdraw money account end money account ever held Would bank ever want behavior practice yes ATM's ability dispense money availability outweighs cost temporary inconsistency event ATM partitioned master bank branch's servers event overdrawing account banks well-defined system external compensating actions example overdraft fees charged user Banking software often used illustrate need strong consistency practice socio-technical system bank deal data inconsistency well errors data-entry mistakes application designer deciding whether use eventual consistency faces choice effect designer needs weigh benefit weak consistency B terms high availability low latency cost C inconsistency anomaly multiplied rate anomalies R maximize B-CR decision necessity application- deployment-specific cost anomalies determined cost compensation many overdrafts might cause customers leave bank too-slow propagation status updates might cause users leave social network rate anomalies seen depends system architecture configuration deployment Similarly benefit weak consistency possibly compound term composed factors incidence communication failures communication latency Second application designers actually design compensation Writing corner-case compensation code nontrivial Determining correct business application logic handle type consistency anomaly difficult task Carefully reasoning possible sequence anomalies correct apologies make user become onerous designing solution strong consistency general cost inconsistency high tangible monetary consequences e g ATMs compensation likely well thought Additionally depending application possible compensation protocols already exist example even database perfectly consistent forklift may run pallet inventory warehouse packages may lost transit 13 applications however rate anomalies may low enough cost inconsistency may small enough application designer may choose forgo including compensation entirely chance inconsistency sufficiently low users may experience anomalies small number cases Anecdotally many online services social networking largely operate weakly consistent configurations user's status update takes seconds even minutes propagate followers unlikely notice even care complexities operating strongly consistent service scale may outweigh benefit say preventing off-by-one error Justin Bieber's follower count Twitter Compensation Design Compensation error-prone laborious exposes programmer sometimes application effects replication could program without Recent research provided compensation-free programming many eventually consistent applications formal underpinnings eventually consistent programs consistent design captured CALM theorem indicating programs safe eventual consistency also conservatively aren't 3 Formally CALM means consistency logical monotonicity informally means programs monotonic compute ever-growing set facts e g receiving new messages performing operations behalf client ever retract facts emit e basis decisions program already made doesn't change always safely run eventually consistent store Full disclosure CALM developed colleagues UC Berkeley Accordingly CALM tells programmers operations programs guarantee safety used eventually consistent system code fails CALM tests candidate stronger coordination mechanisms concrete example logical monotonicity consider building database queries stock trades completed trades cannot change answers based solely immutable historical data remain true However database keeps track value latest trade new information new stock prices might retract old information new stock prices overwrite latest ones database Without coordination replica copies second database might return inconsistent data analyzing programs monotonicity bless monotonic programs safe eventual consistency encourage use coordination protocols e strong consistency presence non-monotonicity general rule operations initializing variables accumulating set members testing threshold condition monotonic contrast operations variable overwrites set deletion counter resets negation e g exist trade generally logically monotonic CALM captures wide space design patterns sometimes referred ACID 2 0 associativity commutativity idempotence distributed 13 Associativity means apply function order f f b c f f b c Commutativity means function's arguments order-insensitive f b f b Commutative associative programs order-insensitive tolerate message re-ordering eventual consistency Idempotence means call function input number times get result f f x f x e g max 42 max 42 42 42 Idempotence allows use at-least-once message delivery instead at-most-once delivery expensive guarantee Distributed primarily placeholder D acronym symbolizes fact ACID 2 0 distributed systems Carefully applying design patterns achieve logical monotonicity Recent work CRDTs commutative replicated data types embodies CALM ACID 2 0 principles within variety standard data types providing provably eventually consistent data structures including sets graphs sequences 20 program correctly uses predefined well-specified data structures guaranteed never produce safety violations understand CRDTs consider building increment-only counter replicated two servers might implement increment operation first reading counter's value one replica incrementing value one writing new value back every replica counter initially 0 two different users simultaneously initiate increment operations separate servers users may read 0 distribute value 1 replicas counter ends value 1 instead correct value 2 Instead use G-counter CRDT relies fact increment commutative operation doesn't matter order two increment operations applied long eventually applied sites G-counter current counter status represented count distinct increment invocations similar counting introduced grade-school level making tally mark every increment summing total example instead reading writing counter values invocation distributes increment operation replicas end two increment operations sum correct value 2 works replicas understand semantics increment operations instead providing general-purpose read write operations commutative key property advances separate data store application-level consistency concerns underlying store may return inconsistent data level reads writes CALM ACID 2 0 CRDT appeal higher-level consistency criteria typically form application-level invariants application maintains Instead requiring every read write data store strongly consistent application simply ensure semantic guarantee counter strictly increasing granting considerable leeway reads writes processed distinction application-level read write consistency often ambiguous poorly defined example database ACID consistency strong consistency Fortunately identifying large class programs data types tolerant weak consistency programmers enjoy strong application consistency reaping benefits weak distributed read write consistency Taken together CALM theorem CRDTs make powerful toolkit achieving consistency without concurrency control making way real-world systems team's work Bloom language3 embodies CALM principles Bloom encourages use order-insensitive disorderly programming key architecting eventually consistent systems recent work focuses building custom eventually consistent data types whose correctness grounded formal mathematical lattice theory Concurrently several open source projects Statebox21 provide CRDT-like primitives client-side extensions eventually consistent stores one eventually consistent store Riak recently announced alpha support CRDTs first-class server-side primitive 9 Stronger Eventual compensating actions CALM CRDTs provide way around eventual consistency shortcomings former requires dealing inconsistencies outside system latter limits operations application writer employ However turns possible provide even stronger guarantees eventual consistency albeit weaker SSI general-purpose operations still providing availability CAP theorem dictates strong consistency SSI availability unachievable presence partitions weak consistency model order available Clearly eventual consistency simply provides liveness guarantee available possible strengthen eventual consistency adding safety guarantees without losing benefits Pushing Limits recent technical report University Texas Austin claims consistency model stronger causal consistency available presence partitions 17 Causal consistency guarantees process's writes seen order writes follow reads user reads value 5 writes B 10 another user cannot read B 10 subsequently read older value 5 transitive data dependencies hold causal consistency useful making sure example comment threads seen correct order without dangling replies users' privacy settings applied appropriate data UT Austin report demonstrates possible stronger model causal consistency accepts fewer outcomes without either violating high availability giving assurance two servers communicate agree set values data items many available models neither stronger weaker causal consistency impossibility result useful places upper bound familiar consistency model Especially light result worth noting several new data storage designs provide causal consistency COPS Eiger systems16 developed team Princeton CMU Intel Research provide causal consistency without incurring high latencies across geographically distant datacenters loss availability event datacenter failures systems perform particularly well near-negligible cost performance compared eventual consistency Eiger prototyped within Cassandra system incurs less 7 overhead one Facebook's workloads recent work demonstrated existing data stores already deployed production provide eventual consistency augmented causality added safety guarantee 6 Causality bolted-on without compromising high availability enabling system designs safety liveness cleanly decomposed separate architectural layers addition causality consider relationship ACID transactions CAP theorem it's impossible provide gold standard ACID isolation serializability SSI turns many ACID databases provide weaker form isolation read committed often default cases maximum offered recent results show many weaker models implemented distributed environment providing high availability 5 Current databases providing weak isolation models unavailable implemented unavailable algorithms several others developing transactional algorithms show need case rethinking concurrency-control mechanisms re-architecting distributed databases ground provide safety guarantees form transactional atomicity ANSI SQL Read Committed Repeatable Read causality transactions matching many existing ACID databases without violating high availability somewhat surprising many past assumed highly available system arbitrary multi-object transactions question Recognizing Limits results push limits achievable high availability several properties weakly consistent system never able provide fundamental cost remaining highly available providing guaranteed low latency CAP theorem states staleness guarantees impossible highly available system Reads specify constraint data recency e g give latest value give latest value 10 minutes ago generally available presence long-lasting network partitions Similarly cannot maintain arbitrary global correctness constraints sets data items uniqueness requirements e g create bank account ID 50 account exist certain cases e g arbitrary reads writes even correctness constraints individual data items achievable e g bank account balance non-negative challenges inherent cost choosing weak consistency whether eventual stronger still weak model Conclusions simplifying design operation distributed services eventual consistency improves availability performance cost semantic guarantees applications eventual consistency particularly weak property eventually consistent stores often deliver consistent data new techniques measurement prediction grant us insight behavior eventually consistent stores Concurrently new research prototypes building eventually consistent data types programs easing burden reasoning disorder distributed systems techniques coupled new results push boundaries highly available systems including causality transactions make strong case continued adoption weakly consistent systems eventual consistency weakly consistent cousins perfect every task performance availability likely continue accrue admirers advocates future Acknowledgments authors would like thank Peter Alvaro Carlos Baquero Neil Conway Alan Fekete Joe Hellerstein Marc Shapiro Ion Stoica feedback earlier drafts article work supported gifts Google SAP Amazon Web Services Blue Goji Cloudera Ericsson General Electric Hewlett Packard Huawei IBM Intel MarkLogic Microsoft NEC Labs NetApp NTT Multimedia Communications Laboratories Oracle Quanta Splunk VMware material based upon work supported National Science Foundation Graduate Research Fellowship Grant DGE 1106400 National Science Foundation Grants IIS-0713661 CNS-0722077 IIS-0803690 Air Force ce Scienti c Research Grant FA95500810352 DARPA contract FA865011C7136 References 1 Abadi D 2012 Consistency tradeoffs modern distributed database system design CAP part story IEEE Computer February 2 Alpern B Schneider F B 1985 Defining liveness Information Processing Letters 21 October 3 Alvaro P Conway N Hellerstein J Marczak W 2011 Consistency analysis Bloom CALM collected approach CIDR Conference Innovative Data Systems Research 4 Bailis P Venkataraman Franklin M Hellerstein J Stoica 2012 Probabilistically bounded staleness practical partial quorums VLDB Large Databases Demo text http pbs cs berkeley edu demo 5 Bailis P Fekete Ghodsi Hellerstein J Stoica 2013 HAT CAP highly available transactions arXiv 1302 0309 cs DB February 6 Bailis P Ghodsi Hellerstein J Stoica 2013 Bolt-on causal consistency ACM SIGMOD 7 Bermbach D Tai 2011 Eventual consistency soon eventual evaluation Amazon S3's consistency behavior MW4SOC Workshop Middleware Service-oriented Computing 8 Brewer E 2012 CAP twelve years later rules changed IEEE Computer February 9 Brown R Cribbs 2012 Data structures Riak https speakerdeck com basho data-structures-in-riak RICON Conference 10 Davidson Garcia-Molina H Skeen D 1985 Consistency partitioned network survey ACM Computing Surveys Volume 17 Issue 3 11 Gilbert Lynch N 2002 Brewer's conjecture feasibility consistent available partition-tolerant web services ACM SIGACT News Volume 33 Issue 2 June 12 Hale C 2010 can't sacrifice partition tolerance http codahale com you-cant-sacrifice-partition-tolerance 13 Helland P Campbell D 2009 Building quicksand CIDR Conference Innovative Data Systems Research 14 Johnson P R Thomas R H 1975 Maintenance duplicate databases RFC 677 http www faqs org rfcs rfc677 html 15 Kawell Jr L Beckhardt Halvorsen Ozzie R Greif 1988 Replicated document management group communication system Proceedings 1988 ACM Conference Computer-supported Cooperative Work 395 http dl acm org citation cfm id 1024798 16 Lloyd W Freedman M Kaminsky M Andersen D 2013 Stronger semantics low-latency geo-replicated storage NSDI Networked Systems Design Implementation 17 Mahajan P Alvisi L Dahlin M 2011 Consistency availability convergence University Texas Austin TR-11-22 May 18 Rahman M Golab W AuYoung Keeton K Wylie J 2012 Toward principled framework benchmarking consistency HotDep Workshop Hot Topics System Dependability 19 Saito Y Shapiro M 2005 Optimistic replication ACM Computing Surveys Volume 37 Number 1 March http dl acm org citation cfm id 1057980 20 Shapiro M Pregui N Baquero C Zawirski M 2011 comprehensive study convergent commutative replicated data types INRIA Technical Report RR-7506 January 21 Statebox https github com mochi statebox 22 Terry D Theimer M Petersen K Demers Spreitzer M Hauser C 1995 Managing update conflicts Bayou weakly connected replicated storage system SOSP Symposium Operating Systems Principles 23 Vogels W Eventually consistent 2008 ACM Queue 24 Wada H Fekete Zhao L Lee K Liu 2011 Data consistency tradeoffs commercial cloud storage consumers' perspective CIDR Conference Innovative Data Systems Research 25 Yu H Vahdat 2002 Design evaluation conit-based continuous consistency model replicated services ACM TOCS Transactions Computer Systems Recommended Reading Compensation Stronger Models Shapiro M Pregui N Baquero C Zawirski M 2011 comprehensive study convergent commutative replicated data types INRIA Technical Report RR-7506 January http hal upmc fr docs 00 55 55 88 PDF techreport pdf Terry D 2011 Replicated data consistency explained baseball Microsoft Research Technical Report MSR-TR-2011-137 October http research microsoft com apps pubs default aspx id 157411 Saito Y Shapiro M 2005 Optimistic Replication ACM Computing Surveys Volume 37 Number 1 March http dl acm org citation cfm id 1057980 Helland P Campbell D 2009 Building quicksand CIDR Conference Innovative Data Systems Research http www-db cs wisc edu cidr cidr2009 Paper_133 pdf CAP Latency-Consistency Background Abadi D J 2012 Consistency tradeoffs modern distributed database system design CAP part story IEEE Computer February http cs-www cs yale edu homes dna papers abadi-pacelc pdf Brewer E 2012 CAP twelve years later rules changed IEEE Computer February http www infoq com articles cap-twelve-years-later-how-the-rules-have-changed Portions piece particular safety liveness discussion originally appeared http bailis org blog LOVE HATE LET US KNOW feedback queue acm org Peter Bailis graduate student Computer Science AMPLab BOOM projects UC Berkeley works closely Ali Ghodsi Joe Hellerstein Ion Stoica currently studies distributed systems databases particular focus distributed consistency models Peter received B Harvard College recipient NSF Graduate Research Fellowship Berkeley Fellowship Graduate Study Peter blogs regularly http bailis org blog tweets pbailis Ali Ghodsi Assistant Professor KTH Royal Institute Technology Sweden Visiting Researcher UC Berkeley since 2009 general interests broader areas distributed systems networking received PhD 2006 KTH Royal Institute Technology area Distributed Computing reached alig cs berkeley edu 2013 ACM 1542-7730 13 0300 10 00 Originally published Queue vol 11 3 see item ACM Digital Library Tweet Related Rick Richardson - Disambiguating Databases Use database built access model Mark Cavage David Pacheco - Bringing Arbitrary Compute Authoritative Data Many disparate use cases satisfied single storage system Wyatt Lloyd Michael J Freedman Michael Kaminsky David G Andersen - Don't Settle Eventual Consistency Stronger properties low-latency geo-replicated storage Lucian Carata Sherif Akoush Nikilesh Balakrishnan Thomas Bytheway Ripduman Sohan Margo Seltzer Andy Hopper - Primer Provenance Better understanding data requires tracking history context Comments David Collier-Brown Wed 10 Apr 2013 21 53 19 UTC interesting parallel reasoning properties causal consistency reasoning employed safety-critical systems classic example used illustrate latter train approaching crossing-gate road crosses tracks Example courtesy Professor Jonathan Ostroff https wiki cse yorku ca user jonathan start errors mine train enters block containing gate gate open normally state system changes safe dangerous Within time t1 crossing gate report closed state returns safe train must stop time t2 state returns safe train runs cars crossing track systems statically sized proved correct based - maximum speed train - minimum deceleration rate train - maximum time taken close gate Logically guarantees available variations eventual consistency could explored way example might ask long system would take regain consistency repairing partition explore consider possible partition failure --dave --dave Leave field empty Post Comment Comment Required - 4 000 character limit - HTML syntax allowed removed 2014 ACM Inc Rights Reserved"),
('20 Years of Java  20% OFF IntelliJ IDEA', "JetBrains IntelliJ IDEA Blog Tips tricks news how-to intelligent Java IDE Skip content JetBrains com IntelliJ IDEA Discussion Forum Early Access Program EAP Issue Tracker IntelliJ IDEA 14 1 4 EAP 141 1192 Available 20 Years Java 20 IntelliJ IDEA Posted May 25 2015 Andrey Cheptsov Tweet hard believe story part began 20 years ago Sun Microsystems announced Java May 23 1995 Today look back journey ve made together sure interesting eventful one Hurray Java community helped history happen become real Java turns 20 invite celebrate anniversary us make fun ve come series humorous cartoons illustrating Java timeline day DISCLAIMER graphical characters appearing illustrations fictitious resemblance real persons coincidental reading story make sure scroll look small gift ve prepared Enjoy birthday without gift memorable occasion re giving every Java developer small present 20 purchase new personal license IntelliJ IDEA Hurry get license May 31st already one share discount friend doesn Let make Java happy using best Java IDE Develop Pleasure Andrey Cheptsov Andrey Cheptsov IntelliJ IDEA product marketing manager JetBrains He's passionate productivity programming languages tools View posts Andrey Cheptsov entry posted News Events Bookmark permalink IntelliJ IDEA 14 1 4 EAP 141 1192 Available 26 Responses 20 Years Java 20 IntelliJ IDEA Luciano Mammino says May 25 2015 2 04 pm Great illustration really curious see future Java next 20 years Reply Vasanth says May 25 2015 2 06 pm glad extending offer new license great extend license upgrade well Reply Julian says May 25 2015 10 22 pm Great suggestion Reply confused dev says May 27 2015 10 54 doesn license start V14 ve always wanted buy intellij rather using community version seems reducing upgrade program therefore increase cost end users buy CANT upgrade 15 Reply Andrey Cheptsov says May 27 2015 1 10 pm Right buy one-year upgrade subscription Within year get updates including major ones e g 14 15 renew subscription every year renew price twice cheaper purchasing new license However renew subscription time whether renew since date ended renew day pay additional fee works right re considering adjustments current model make transparent simple Reply Martins says May 25 2015 3 07 pm Amazing post thanks Reply Giancarlo says May 25 2015 5 07 pm want picky Java turn 20 January 1996 first stable JDK 1 0 version released publicly available Alpha Beta versions 1995 unstable recommended production use although name change Oak Java occurred 1994 still known Oak details 1991 Gosling named new OS mind Green according programming language today known Java Oak fall 1992 Gosling team demonstrated Green OS Java new PDA device Star7 1994 Oak renamed Java due trademark conflict Reply reza says May 26 2015 6 58 picky well celebrate intercourse night instead birthday Reply Ron Grimes says May 25 2015 5 09 pm believe timeline fails mention Java originally named Oak Reply Steffen says May 25 2015 5 57 pm gift loyal long term upgraders Hmmmm know upgrade anyway Reply Julian says May 25 2015 10 23 pm Ah hope wrong Reply terrapin says May 25 2015 10 28 pm 1 re actually rewarding journey far Agree get bandwagon though good job score Reply Kiview says May 26 2015 8 56 Would love discount upgrade well Reply Pattabi says May 26 2015 7 13 pm 1 suggestion extend discount Upgrade well Reply Eclipse User says May 28 2015 10 34 Hmm Doesn sound like whining Apple sell affordable accessories IntelliJ Idea Apple Eclipse Android know signed Reply Crocmagnon says May 25 2015 6 08 pm Nice post picture available anymore Dropbox says Error 429 account public links generating much traffic temporarily disabled Reply Andrey Cheptsov says May 25 2015 6 16 pm Mistakenly hosted Dropbox moved another place work Reply Sean says May 25 2015 6 12 pm Getting Dropbox Error 429 image Reply Andrey Cheptsov says May 25 2015 6 15 pm Sorry much traffic ve moved another place work Reply Percy says May 25 2015 6 15 pm see Java timeline image http blog jetbrains com idea files 2015 05 java20_com_1 jpg 404 File found Reply Percy says May 25 2015 6 16 pm Never mind see probably deleted minutes Thanks Reply Scott says May 25 2015 7 29 pm bunny K hat Reply Andrew Binstock says May 25 2015 7 44 pm think really important remember IBM San Francisco project late 1990s weren businesses might never embraced Java turning point acceptance Java enterprise Reply Jason says May 26 2015 3 19 Oh man bought personal license last week bad wasn aware Reply Pete says May 26 2015 3 13 pm Yes hope re going reward existing users discount upgrade subscriptions Reply Subhash Chandran says May 27 2015 9 25 Discount upgrades please Reply Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code class title data-url del datetime em q cite strike strong pre class title data-url span class title data-url Categories Beta Releases Demos EAP Releases Featured Plugins Guest Post Interviews New Features News Events Plugin Development Release Candidates Releases Tips Tricks Tutorials Webinars Search Tweets IntelliJ IDEA Tags12 1 13 13 1 14 14 1 30 Days Guide ActionScript AIR Android Android Studio Cardea Cassiopeia Code Analysis Code Assistance Code Completion Code Generation Code Navigation CSS Database Tools Debugger Editor Flash Flex Git Gradle Grails Groovy GWT Hibernate ideaX Java Java EE JavaScript JSF 2 0 Leda Maia Maven Nika Refactoring Spring Testing UML VCS Web Development Xena Want IntelliJ IDEA T-Shirt Visit Apparel Store JetBrains blogs RubyMine Blog WebStorm Blog PhpStorm Blog TeamCity Blog Upsource Blog YouTrack Blog PyCharm Blog IntelliJ Scala plugin blog AppCode Blog NET Tools Blog MPS Blog CLion Blog 0xDBE Blog Meta Log Entries RSS Comments RSS WordPress org JetBrains IntelliJ IDEA Blog Proudly powered WordPress"),
('IBM Watson QA demo', "Question AnswerThe Watson Question Answer QA service interprets answers user questions directly based primary data sources brochures web pages manuals records etc selected gathered body data 'corpus' service returns candidate responses associated confidence levels links supporting evidence current corpora available Bluemix focus Travel Healthcare industries Cognitive services learn improve training beta-level service training shows representative always highly accurate output Try serviceSelect corpus HealthcareTravelTry example questionAsk"),
('Python 3.5 beta released', "Notice Javascript essential website interaction content limited Please turn Javascript full experience Skip content Close Python PSF Docs PyPI Jobs Community Python Network Menu Search Site GO Smaller Larger Reset Socialize Google Facebook Twitter Chat IRC Sign Sign Register Sign Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Python 3 5 0b1 Release Date 2015-05-24 Python 3 5 0b1 Python 3 5 0b1 released May 24th 2015 Major new features 3 5 series compared 3 4 Among new major new features changes 3 5 release series far PEP 448 additional unpacking generalizations PEP 461 adding support -formatting bytes bytearray objects PEP 465 new operator matrix multiplication PEP 471 os scandir faster alternative os walk PEP 475 adding support automatic retries interrupted system calls PEP 479 change StopIteration handling inside generators PEP 484 typing module new standard type annotations PEP 486 making Windows Python launcher aware virtual environments PEP 488 eliminating pyo files PEP 489 multi-phase extension module initialization PEP 492 coroutines async await syntax Python 3 5 entered feature freeze default new features may longer added Python 3 5 However handful features weren't quite ready Python 3 5 0 beta 1 granted exceptions freeze scheduled added beta 2 resources Online Documentation 3 5 Release Schedule Report bugs http bugs python org Help fund Python community Notes release binaries AMD64 also work processors implement Intel 64 architecture Also known x64 architecture formerly known EM64T x86-64 work Intel Itanium Processors formerly IA-64 Windows users installing Python 3 5 0b1 non-privileged user may need escalate administrator privileges install update C runtime libraries Windows users web-based installers Windows platforms installer contain Python instead downloads needed software installation time Windows users Windows binaries built Microsoft Visual Studio 2015 yet officially released It's currently offered Preview mode akin beta intention ship Python 3 5 using VS2015 although right VS2015's final release date unclear OS X users OS X installers distributed signed installer package files compatible OS X Gatekeeper security feature OS X users important information IDLE Tkinter Tcl Tk Mac OS X Full Changelog Detailed Release Information Files Version Operating System Description MD5 Sum File Size GPG Gzipped source tarball Source release 435ec867c2f3433052317ef905c9589e 19915714 SIG XZ compressed source tarball Source release c336db6cfa13aebd30a8ab6bfe1e8091 14657144 SIG Mac OS X 32-bit i386 PPC installer Mac OS X Mac OS X 10 5 later f6f035138c593446510a1f766e53b3d3 25291886 SIG Mac OS X 64-bit 32-bit installer Mac OS X Mac OS X 10 6 later 1acb10f8d8bac4ee453a2823a77912f6 23628889 SIG Windows AMD64 embeddable installer Windows 37225a8da45f3866711a701623728974 7824329 SIG Windows AMD64 executable installer Windows 9dd5021887b087b27fa1d44c1fe22f04 28799600 SIG Windows AMD64 web-based installer Windows 3bbe95109fd3df8c2b544c26c5a8eb53 916016 SIG Windows help file Windows b1c56c7bf60c79ebc397033c1cf26841 7590336 SIG Windows x86 embeddable installer Windows fb31910daa9055f3bdb87661c60430f5 7045718 SIG Windows x86 executable installer Windows 878cd8f7a104601bd2de8bbbbc079c5c 27939992 SIG Windows x86 web-based installer Windows 30544135e1b1ff5f37fc9ff51ced416f 889424 SIG Back Top Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Back Top Help General Contact Diversity Initiatives Submit Website Bug Copyright 2001-2015 Python Software Foundation Legal Statements Privacy Policy"),
('Using Monads in C++ to Solve Constraints. Part 4: Refactoring', "Home Bartosz Milewski's Programming Cafe Concurrency C Haskell Category Theory May 25 2015 Using Monads C Solve Constraints 4 Refactoring Posted Bartosz Milewski C Monads Programming Leave Comment part 4 miniseries solving simple constraint-satisfaction problem e n d m o r e --------- m o n e y using monads C Previously Tale Two Monads start beginning go Using Monads C Solve Constraints 1 previous post showed general programming techniques based functional data structures monads lot code wrote solve particular arithmetic puzzle easily reusable fact monadic approach perfect constructing libraries talked discussing C futures ranges monad pure expression composability composability important feature library would justified think rolling monad library solve simple arithmetic puzzle overkill m sure imagine lot complex problems could solved using techniques might also fear functional methods especially implemented C optimized kind programming would lead less performant code doesn matter much solving one-shot problem time spend developing debugging code dwarfs time takes program complete execution even performance issue faced larger problem functional code could parallelized much easier imperative counterpart danger concurrency bugs might actually get better performance functional code running parallel Factorization installment d like talk something lot functional programmers swear Functional programs amazingly easy factorize Anybody tried factorize C code testify hard long takes iron bugs introduced factorization functional code breeze let another look code previous post deep surgery starting point StateList tuple solve StateList sel select return mbind sel int return mbind sel int e return mbind sel int n return mbind sel int d return mbind sel int m return mbind sel int o return mbind sel int r return mbind sel int y return mthen guard 0 m 0 int send asNumber vector e n d int asNumber vector m o r e int money asNumber vector m o n e y return mthen guard send money return mreturn make_tuple send money immediately stands amount repetition eight lines code look almost exactly Conceptually lines correspond eight nested loops would used imperative solution question abstract control structures loops monadic implementation loops replaced higher-order functions opens path toward even abstraction Reifying Substitutions first observation missing data structure correspond central concept use describing solution substitution substituting numbers letters see letters names variables natural implementation would use map data structure mapping characters integers Notice however mapping dynamically collected torn exploring successive branches solution space imperative approach would demand backtracking functional approach makes use persistent data structures described data structures previously particular persistent red-black tree easily extended red-black map find implementation github red-black map generic data structure ll specialize use using Map RBMap char int map lookup may fail either implemented return optional use default value case failure case know never look value map unless code buggy use helper function never fails int get Map const subst char c return subst findWithDefault -1 c objectified substitution map convert whole string characters number one operation int toNumber Map const subst string const str int acc 0 char c str int d get subst c acc 10 acc d return acc one thing may automate finding set unique characters puzzle Previously figured e n d m o r y hard-coded solution use function fashioned Haskell utility called nub string nub string const str string result char c str result find c string npos result push_back c return result worry quadratic running time nub called Recursion preliminaries way let concentrate analyzing code series nested mbind calls simplest thing turn nested calls recursion involves setting first recursive call implementing recursive function writing code terminate recursion main observation level nesting accomplishes one substitution character number recursion end run characters substitute Let first think data passed recursive call One item string characters still need substituting second substitution map first argument keeps shrinking second one keeps growing third argument number used next substitution make first recursive call prepare initial arguments get string characters substituted running nub text puzzle nub sendmoremoney second argument start empty map third argument digit used next substitution comes binding selection plan select int lambda call recursive function Haskell common call auxiliary recursive function go ll well StateList tuple int int int solve StateList int sel select int Map subst return mbind sel int return go nub sendmoremoney subst implementing go think terminating recursion first let talk continue called next digit used substitution perform substitution means inserting key value pair substitution map subst key first character string str value digit given subst inserted str 0 Notice map immutable method inserted returns new map one entry persistent data structure new map shares data previous version creation new version takes logarithmic time number entries regular balanced tree used Standard Library std map advantage using persistent map backtracking unmodified version still available return recursive call recursive call go expects three arguments 1 string characters yet substituted tail string passed 2 new substitution map 3 new digit n get new digit binding digit selection sel lambda makes recursive call mbind sel int n string tail str 1 str str length return go tail subst inserted str 0 n let consider termination condition Since go called next digit substituted need least one character string last substitution termination reached length string reaches one make last substitution call final function prunes bad substitutions complete implementation go StateList tuple int int int go string str Map subst int StateList int sel select int assert str length 0 str length 1 return prune subst inserted str 0 else return mbind sel int n string tail str 1 str str length return go tail subst inserted str 0 n function prune lifted almost literally original implementation difference using substitution map StateList tuple int int int prune Map subst return mthen guard get subst 's' 0 get subst 'm' 0 int send toNumber subst send int toNumber subst int money toNumber subst money return mthen guard send money return mreturn make_tuple send money top-level code starts chain events displays solution left unchanged int main List int lst 0 1 2 3 4 5 6 7 8 9 cout evalStateList solve lst return 0 matter opinion whether refactored code simpler definitely easier generalize less error prone main point easy make refactorization reason functional code hidden dependencies hidden side effects would usually considered side effect imperative code accomplished using pure functions monadic binding way forget given function works state function deals state state specified signature returns StateList doesn modify state fact doesn access state composes functions modify state executed able move functions around easily Word Syntax Monadic code C artificially complex C designed functional programming program written Haskell much shorter complete helper functions prune get toNumber solve StateL select go nub sendmoremoney M empty go c subst prune M insert c subst go c cs subst StateL select go cs M insert c subst prune subst guard get 's' 0 get 'm' 0 let send toNumber send toNumber money toNumber money guard send money return send money get c fromJust M lookup c subst toNumber str asNumber map get str asNumber foldl u - 10 u 0 main print evalStateL solve 0 9 simplification comes using operator place bind simpler syntax lambdas also built-in syntactic sugar chains monadic bindings form notation see example implementation prune funny thing C verge introducing something equivalent notation called resumable functions strong proposal resumable functions connection future monad dealing asynchronous functions talk using generators lazy ranges version list monad still need push towards generalizing resumable function user-defined monads like one described series doesn make sense add separate language extensions aspect general pattern pattern known functional programming long time called monad useful versatile pattern whose importance steadily growing complexity software projects increases Bibliography code blog available github Douglas M Auclair MonadPlus Super Monad Monad Reader Issue 11 August 25 2008 contains Haskell implementation solution puzzle Justin Le Unique sample drawing searches List StateT Send money blog post inspired series ads Share RedditMoreTwitterLinkedInGooglePocketFacebookEmailLike Like Loading Related Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Archived Entry Post Date May 25 2015 12 01 pm Category C Monads Programming leave response trackback site Create free website blog WordPress com Connections Theme Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email d bloggers like"),
('Infographic: Quick guide on SAS vs R vs Python', 'Home Blog Business Analytics SAS R Python Business Intelligence Qlikview Web Analytics Big data Events Trainings Jobs Discuss team Write us AV Apprentice Article index Contact Testimonials Learning Paths SAS Business Analyst LeaRn Data Science R Data Science Python Data Visualization QlikView DATA SCIENCE WEKA Events Home Blog Jobs Trainings Learning Paths Discuss Learn everything Analytics Home Blog Business Analytics SAS R Python Business Intelligence Qlikview Web Analytics Big data Events Trainings Jobs Discuss team Write us AV Apprentice Article index Contact Testimonials Learning Paths SAS Business Analyst LeaRn Data Science R Data Science Python Data Visualization QlikView DATA SCIENCE WEKA Events Moving analytics break career expect rosy land Infographic Quick Guide SAS vs R vs Python Case study Building implementing predictive model 3 days Launching Analytics Professional Salary Test India Conversation Mr Sanjeev Mishra CEO Convergytics Getting smart Machine Learning AdaBoost Gradient Boost Home Analytics Vidhya Infographic Quick Guide SAS vs R vs Python Infographic Quick Guide SAS vs R vs Python Infographic Quick Guide SAS vs R vs Python Analytics Vidhya SHARE Manish Saraswat May 26 2015 7 Introduction One perennial points debate data science industry best tool job Traditionally question raised SAS vs R Recently discussions R vs Python decades back R SAS launched difficult envisage possibilities future offer turned blessing disguise made easy focus one tool today situation different Even deciding technique apply fall pit searching best tool perform particular task finally get nothing honest answer universal winner contest tool strength weakness prudent data scientist would diversify repository tools use one appropriate situation order critical know strengths weakness tool infographic offers Note read comprehensive version article End Notes must realized clear winner race Every tool importance strength areas strength areas provide leverage survive industries hence factors defined infographic plays significant role evaluation like read want continue analytics learning subscribe emails follow us twitter like facebook page Share Pocket Related Tags Best tools learn Business Analytics data analytics infographic python R SAS Sas vs r vs python Next ArticleMoving analytics break career expect rosy land Previous ArticleCase study Building implementing predictive model 3 days Author Manish Saraswat Related Articles Guest Blog May 8 2015 Business Analytics Degrees Aren Fad Kunal Jain December 28 2014 top 10 Data Science articles 2014 Kunal Jain April 11 2014 8 rules new age analytics learning 7 Comments Saurabh Verma says May 26 2015 5 14 nice info graphics Clear thought parameters comparison Good beginners experts get view tools choice vs two closest options available Great job Reply Sudhindra says May 26 2015 5 42 Awesome comparison thorough insight Thanks sharing Also many levels SAS like SAS PM SAS DI SAS BI inputs please Reply Sanjay Karn says May 26 2015 6 42 Thanks Mr Manish comparative post really helpfull beginners data analytics please suggest tool beginners data analytics like start prospect Job scenario recently registered JIGSAW academy Data science R still confused whether go SAS R PGDM Markrting B Sc 8yrs Exp Real Estate BFSI Key account Mngmnt CRM MIS People process mnagmnt Please suggest Thx Reply Mayur says May 26 2015 8 02 Scala heard Scala also gaining momentum analytics market Reply Vikram Choudhary says May 26 2015 10 29 also put light Alteryx Reply Bill Venables says May 26 2015 11 01 learn one tool young person entering profession thing certain throughout career learn work new tools time important thing learn learn beyond capacity anyone game use R Python view Reply Nick Byrd says May 26 2015 4 47 pm prudent data scientist would diversify repository tools use one appropriate situation Reply Leave Reply Cancel Reply Connect email address published Notify follow-up comments email Notify new posts email Get Connected 1 317 Followers 4 542 Followers 215 Followers Email Subscribe Popular posts SAS vs R vs Python tool learn start career Business Analytics 4 tricky SAS questions commonly asked interview Advanced analytics certifications India Planning late career shift Analytics Big data Better prepared Use AGGR function Qlikview Set Analysis QlikView simplified Tips crack guess estimate Analytics case study Latest DiscussionsIntroductions - New members May 2015Welcome Analytics Vidhya discussionsRStudio v0 99 ReleasedSame function different libraries RFriday Funalytics Share favourite data science analytics statistics jokes cartoonsDifference require library RWhat kind algorithm machine learning techniques used scorecard development JobsPrincipal Data Scientist JyotKiran Networks Private Limited Delhi Gurgaon Noida 2-3 Years experience Data Science Faculty Full-Time Edvancer Eduventures Mumbai 2-8 Years experience Senior Data Analyst Marketelligent -Banglore 2-5 Years experience Modeler Marketelligent -Banglore 3-5 Years experience Senior Consultant Modelytics Banglore 3-5 Years experience Recent Posts Moving analytics break career expect rosy land Kunal Jain May 26 2015 Infographic Quick Guide SAS vs R vs Python Manish Saraswat May 26 2015 Case study Building implementing predictive model 3 days Kunal Jain May 24 2015 Launching Analytics Professional Salary Test India Kunal Jain May 22 2015 Us wondering Analytics Vidhya Analytics defined science extracting insights raw data spectrum analytics starts capturing data evolves using insights trends data make informed decisions Stay Connected 1 317 Followers 4 542 Followers 215 Followers Email Subscribe Latest Posts Moving analytics break career expect rosy land Kunal Jain May 26 2015 Infographic Quick Guide SAS vs R vs Python Manish Saraswat May 26 2015 Case study Building implementing predictive model 3 days Kunal Jain May 24 2015 Launching Analytics Professional Salary Test India Kunal Jain May 22 2015 Quick LinksHomeAbout UsOur teamPrivacy PolicyRefund PolicyTerms UseTop Reviews Copyright 2015 Analytics Vidhya'),
('httpbin(1): HTTP Client Testing Service', "httpbin 1 HTTP Request Response Service Freely hosted HTTP HTTPS EU flavors Runscope ENDPOINTS page ip Returns Origin IP user-agent Returns user-agent headers Returns header dict get Returns GET data post Returns POST data patch Returns PATCH data put Returns PUT data delete Returns DELETE data encoding utf8 Returns page containing UTF-8 data gzip Returns gzip-encoded data deflate Returns deflate-encoded data status code Returns given HTTP Status code response-headers key val Returns given response headers redirect n 302 Redirects n times redirect-to url foo 302 Redirects foo URL relative-redirect n 302 Relative redirects n times absolute-redirect n 302 Absolute redirects n times cookies Returns cookie data cookies set name value Sets one simple cookies cookies delete name Deletes one simple cookies basic-auth user passwd Challenges HTTPBasic Auth hidden-basic-auth user passwd 404'd BasicAuth digest-auth qop user passwd Challenges HTTP Digest Auth stream n Streams n 100 lines delay n Delays responding n 10 seconds drip numbytes n duration delay code code Drips data duration optional initial delay optionally returns given status code html Renders HTML Page robots txt Returns robots txt rules deny Denied robots txt file cache Returns 200 unless If-Modified-Since If-None-Match header provided returns 304 cache n Sets Cache-Control header n seconds bytes n Generates n random bytes binary data accepts optional seed integer parameter stream-bytes n Streams n random bytes binary data accepts optional seed chunk_size integer parameters links n Returns page containing n HTML links image Returns page containing image image png Returns page containing PNG image image jpeg Returns page containing JPEG image image webp Returns page containing WEBP image forms post HTML form submits post xml Returns XML DESCRIPTION Testing HTTP Library become difficult sometimes RequestBin fantastic testing POST requests doesn't let control response exists cover kinds HTTP scenarios Additional endpoints considered endpoint responses JSON-encoded EXAMPLES curl http httpbin org ip origin 24 127 96 129 curl http httpbin org user-agent user-agent curl 7 19 7 universal-apple-darwin10 0 libcurl 7 19 7 OpenSSL 0 9 8l zlib 1 2 3 curl http httpbin org get args headers Accept Connection close Content-Length Content-Type Host httpbin org User-Agent curl 7 19 7 universal-apple-darwin10 0 libcurl 7 19 7 OpenSSL 0 9 8l zlib 1 2 3 origin 24 127 96 129 url http httpbin org get curl -I http httpbin org status 418 HTTP 1 1 418 I'M TEAPOT Server nginx 0 7 67 Date Mon 13 Jun 2011 04 25 38 GMT Connection close x-more-info http tools ietf org html rfc2324 Content-Length 135 curl https httpbin org get show_env 1 headers Content-Length Accept-Language en-US en q 0 8 Accept-Encoding gzip deflate sdch X-Forwarded-Port 443 X-Forwarded-For 109 60 101 240 Host httpbin org Accept text html application xhtml xml application xml q 0 9 q 0 8 User-Agent Mozilla 5 0 X11 Linux i686 AppleWebKit 535 11 KHTML like Gecko Chrome 17 0 963 83 Safari 535 11 X-Request-Start 1350053933441 Accept-Charset ISO-8859-1 utf-8 q 0 7 q 0 3 Connection keep-alive X-Forwarded-Proto https Cookie _gauges_unique_day 1 _gauges_unique_month 1 _gauges_unique_year 1 _gauges_unique 1 _gauges_unique_hour 1 Content-Type args show_env 1 origin 109 60 101 240 url http httpbin org get show_env 1 Installing running PyPI install httpbin library PyPI run WSGI app example using Gunicorn pip install httpbin gunicorn httpbin app Changelog 0 2 0 Added XML endpoint Also fixes several bugs unicode CORS headers digest auth 0 1 2 Fix couple Python3 bugs random byte endpoints fix bug uploading files without Content-Type header set 0 1 1 Added templates data setup py 0 1 0 Added python3 support re publish PyPI AUTHOR Runscope Community Project Originally created Kenneth Reitz SEE ALSO Hurl - Make HTTP requests RequestBin - Inspect HTTP requests http python-requests org"),
('The WebAudio sound engine behind Touch Pianist - My recent experience with the WebAudio landscape in desktop browsers and mobile devices', "Earslap Home Site Menu Earslap Home Touch Pianist popular browser experiment perform virtuoso piano pieces computer keyboard touch screen Otomata Popular generative music sequencer helps create beautiful visuals music right browser Circuli Another browser based sound instrument time generating ambient lush sounds I'm Batuhan Bozkurt musician sound engineer creative coder hailing Turkey write sorts procedural generative computational arts Follow work care 4 2 Share Share Browser Sound Engine Behind Touch Pianist May 24 2015 beginning May 2015 released fun browser experiment Touch Pianist received lot questions fellow developers tech used make tick attempt explaining meat sound engine created make possible Touch Pianist HTML5 web browser experiment using HTML5 Canvas optional WebGL thanks pixi js WebAudio provides visualization all-time popular classical piano pieces gives addictive way performing pieces using computer keyboard touch screen also iOS Android versions moment bigger growing music library mobile apps also use native WebViews utilize HTML Javascript WebAudio hood except audio Android even years link infamous issue 3434 audio Android still sucks quite bit Chromium WebAudio latency still high purposes instrument still pretty damn impressive better expectations considering possible layers buffering involved mess Linux audio rewrite inferior sound engine Java get work Android devices ll get back end document Important Constraints website mainly aimed casual crowds music loving people used waiting seconds game-like experience load web browser needed decent piano browser However good quality sampled piano library uncompressed size whopping gigabytes Disregarding possible illegality redistributing commercial piano sample library product even compress samples lossy formats library still amount hundred megabytes aim convincing sampled piano inside browser 2 3 megabytes site would load like javascript media heavy site talk compromises needed made make reality let talk good piano sample library requires gigabytes worth information begin big deal sampled piano creators sample mere 88 keys good piano placed good room good quality microphones package call day Piano Construction 101 piano relatively new instrument 300 years old idea made piano possible goes back hundreds years earlier piano important evolutionary step within series instruments preceded construction continues evolve even today sound 200 years old piano significantly different modern piano today Italian inventor piano named un cimbalo di cipresso di piano e forte keyboard cypress soft loud name later abbreviated pianoforte soft-loud simply piano main selling point new instrument allowed player comfortably control loudness notes playing like inventor Bartolomeo Cristofori fulfilled feature request long sought music performers composers solve previously unsolved mechanical problem make happen build keyboard instrument press key hammer strikes string immediately detaches let string ring instead sticking damping allowing hammer actuated quick succession time predecessors piano problem loudness harpsicord quite loud player control loudness individual pitches clavichord contrast allowed control dynamics sound produced compromises made make possible meant instrument quiet bigger performances pianoforte sound dynamics control main selling point evolution modern piano saw many advancements around particular feature means us purposes consider note piano single instrument piano considered instrument contains 88 sub-instruments one key difference timbre single note played soft played loud quite different loudness changes timbre whole sound especially attack portion different means one simply get away recording note piano single loudness level letting software adjust volume based velocity input sounds awkward play back loud piano note quieter level doesn sound like softly performed piano note sounds like loud piano note played back lower volume like pass human scream sound whispering merely decreasing playback volume simple volume adjustment method piano sounds might passable cases might case web site isn enough want make professional library aimed recording musicians companies produce piano sample libraries record key piano different loudness levels play appropriate samples key based velocity input performance single key piano 127 different samples different loudness levels practice ll see 16 32 64 higher end piano sample libraries lots details libraries record multiple samples single loudness level alternate provide natural sound say press middle C twice one another loudness level 64 sampler won play sample second time pressed prevents machine gun effect fast passages professional libraries also provide separate samples mechanical noises pianos mixed final output sound desired Combine gigabytes worth sound samples Touch Pianist website aimed recording musicians obviously still wanted somewhat convincing importantly entertaining piano sound pieces using would sound reasonably good wanted one small size download would fast bandwidth costs wouldn bankrupt went viral math limit one 3-4 seconds long sample per key decided using pitch shifting reuse single samples multiple pitches use mp3 ogg compression figured hit 2-3 megabyte target Using single sample per key however meant wouldn velocity layering could simple velocity layering using two samples per key one loud one soft doubling package size wanted thing work mobile WebAudio uncompresses files raw audio memory wouldn work well memory constrained environment mobile devices iPad2 wouldn handle 88x2 three second mono samples memory instance tried received stern memory warnings needed way somewhat convincing velocity layering way change timbre soft sounds compared loud sounds without relying changing volume samples alone needed budget terms download size memory requirements d eventually uncompressed Hearing Believing example three different ranges piano notes C1 C3 C5 note first key pressed forcefully softly WARNING loud headphone users Sorry browser probably doesn't recognise audio tag somehow pay attention difference loudness timbre pitch played softly loudly also quite different Especially beginning attack portion loud sounds attack note lot high frequency content whereas softer sounds high frequency vibrations damped qualitative difference different dynamic levels comes physical construction piano huge part makes piano well piano difference clear soft sounds hard hear example time softer sounds volume matched louder ones Sorry browser probably doesn't recognise audio tag somehow sounds softer dynamics almost whisper-like quality get scream pass whisper merely decreasing volume decent piano simply get away adjusting loudness sound based input velocity need alter frequency content realtime web browser Cue Lowpass Filtering obvious way kind-of simulate meat happening use lowpass filter sound Lowpass filter kind filter cuts frequencies signal determined cutoff frequency lowpass piece sound 500Hz instance filter dampen frequency content sound 500Hz allow lower frequencies pass lowpass filter control cutoff frequency want use single loud piano sample lowpass filter playback softer sound requested Removing frequencies lot easier adding starting loud sample carve already existing high frequency content desired WebAudio implementation major recent web browsers include built-in lowpass filter using AudioContext createBiquadFilter interface also highpass bandpass many others Even didn include could build one ScriptProcessorNode javascript decent lowpass filter lines code filter algorithm would lot less efficient native WebAudio nodes implemented native code inside browser WebAudio code implementing realtime lowpass filtering audio nodes grabbing right AudioContext object browser var AudioContext window AudioContext window webkitAudioContext actually creating audio context global limit even across tabs number AudioContexts WebAudio spec implementation need careful create one absolutely necessary Always share global instance ctx ctx new AudioContext WebAudio currently native white noise generator let's create one noise ctx createScriptProcessor 4096 1 1 noise onaudioprocess function e var output e outputBuffer getChannelData 0 var 0 output length output values -1 1 output Math random 2 - 1 creating lowpass filter cutoffFreq 500 lowpassNode ctx createBiquadFilter lowpassNode type lowpass lowpassNode frequency value cutoffFreq connecting nodes together noise connect lowpassNode lowpassNode connect ctx destination point sound speakers want alter cutoff frequency newFreq 1000 lowpassNode frequency value newFreq want end lowpassNode disconnect noise null lowpassNode null GC handle rest action WARNING Might loud Play White Noise Cutoff 500Hz lowpass highpass bandpass example applied lowpass filtering white noise signal demonstrate effect Since WebAudio native white noise implementation right created script processor implemented white noise provided options testing different filter types Highpass exact opposite lowpass frequencies cutoff frequency passed output Bandpass filter passes frequencies around cutoff frequency nothing else full list available filter types listed MDN article apply realtime lowpass audio samples instead script processor ll AudioBufferSourceNode reads data AudioBuffer like following soundFile holds mp3 file ctx decodeAudioData soundFile function buffer decodedBuffer buffer decodedBuffer ready sourceNode ctx createBufferSource sourceNode buffer decodedBuffer lowpassNode ctx createBiquadFilter lowpassNode type lowpass cutoff derived velocity loudness want particular note Louder note higher cutoff frequency since want high frequency content louder notes want softer notes kind muffled means lower cutoff frequencies lowpassNode frequency value cutoffFreq gain node loudness adjustment gainNode ctx createGainNode createGain older browsers gain directly proportional loud want sound lowpass filtering already decreases gain sound source since it's subtractive process use additional tuning loudness gainNode gain value targetGain lets make connections source sound - lowpass filter - gain node - speakers sourceNode connect lowpassNode lowpassNode connect gainNode gainNode connect ctx destination sourceNode start 0 noteOn 0 older browsers cutoff frequency lowpass filter needs tuned ear sample source want lower cutoff frequencies quieter sounds higher cutoff frequencies louder sounds velocity pitch cutoff frequency mapping needs manual tuning case need try bunch values tweak sounds good pitches velocity ranges try see works case go Touch Pianist site choose piece doesn lot variation note velocity suggest Prelude 1 C Major found Bach Pack 1 instead using keyboard try range sound qualities get click tap screen mouse lower click screen quieter note cutoff frequency filter lower value gain node also lower click bottom parts screen click high cutoff frequency high high frequency content pass speakers Alternatives Sampling arguably better way creating physical instrument sounds something recording preserving every sound instrument might make technique called physical modelling synthesis PMS heh entirely procedural approach creating instrument sounds figure mathematical formulas govern sound producing characteristics vibrating body run instead piano case feed system key press system runs formulas create vibrations make sound happen Unfortunately approach requires Ph D applied mathematics years research area Also system requires quite bit processing power Still interested know least one company creates PMS piano opinion works extremely well Pianoteq Modartt m affiliated love work audio examples PMS approach also allows tweak physical properties instrument single code base even lets create instruments plausible physics possibly constructed real life Practical Problems Relying Solely WebAudio initial plan involved multiple fallbacks case browser didn support WebAudio e g Internet Explorer First going good old audio tags else fails using Flash WebAudio Support implementing whole WebAudio version burned decided ship Touch Pianist fast possible retrospect m glad way vast majority visitors million people 3 weeks far support browsers suppose kinds people would interested sort thing computer located place looking music playing websites appropriate already use recent versions Chrome Firefox Safari Although caniuse com says WebAudio available form 66 browsers analytics says 93 visitors browser supported turns would waste time spend time implementing inferior fallbacks audio tag wouldn filtering Flash would increased latency worse performance Sample Format reading samples rely AudioContext decodeAudioData method WebAudio API Almost browsers support decoding mp3 data way exception found case Firefox Windows Firefox OS X problem decoding mp3 data couldn get Firefox Windows decode browser alone put separate ogg audio assets site handled Windows Firefox without issues Puzzling Garbage Collector Behaviour OS X Firefox One frustrating issues encountered development GC behavior one browser Firefox OS X AudioBufferSourceNode interface WebAudio designed way fire forget call start noteOn older WebAudio implementations support unless want anything else node stop prematurely instance forget remove references code GC supposed handle release audio graph accumulated live nodes become issue deliberately forbidden reusing calling start instance leave alone playing GC handles want play sample create new lightweight design AudioBufferSourceNode play new instance instead reusing old one works swimmingly browsers except one Firefox OS X nodes GC simply kick thousands nodes accumulate playback piece computer brought knees browser releases hundreds sometimes thousands nodes Playing piece starts fine nodes one pitch connected gain filter nodes pile CPU usage monotonically increases framerate starts drop sounds start glitch computer fans start whirring max rpm wait seconds ranging 10 60 OS X Firefox decides enough enough releases everything life beautiful Beethoven performance ruined Firefox Windows hand works beautifully expect Creates nodes ask releases inactive nodes start burden idea happens difference two platforms couldn find workaround apologies Firefox users using Mac iOS Issues also made iOS Android versions Touch Pianist iOS WebAudio support efficiency amazing Really almost latency support great issues use WebAudio inside WebView embedded webkit engine handles amazingly except one thing haven able figure little percentage users reported get sound small sample mostly happens iPads rarely iPhone 6 devices running latest version iOS confusing issue resolved complete OS reboot devices haven able reproduce issue devices yet still solutions found part Apple documentation says sounds WebAudio must first initiated following user action making first sound response user tap know holds true embedded webviews ll include action next version see help case doesn explain fact devices problem fixed OS reboot Still affects tell small percentage users might wrong though m sure reason reveal soon ideas please let know Android Issues Audio fragmented Android world continues bag hurt audio latency embedded Chromium acceptable renders instrument unplayable significant latency time tap screen time sound heard speakers makes keeping correct rhythm practically impossible disable WebAudio inside webview completely implement sampler using SoundPool Java code running separate thread implementation SoundPool different bugs limitations different devices works extremely well others crashes burns different polyphony limitations efficient way responsibly apply fade running sounds without cutting abruptly running Timer thread setting volume different sound streams times second inefficient least devices support properly latency adequate Surprisingly Firefox Fennec engine Android supports WebAudio lot better Chrome terms latency Really latency almost par webkit iOS know managed latency great Unfortunately general graphics javascript performance lot worse engine unusable purposes Closing Words last months got opportunity get quite intimate WebAudio API Flexible realtime audio inside web browsers dream long time WebAudio commonplace Two earlier popular projects Otomata Circuli used Flash Adobe brought realtime audio processing web browsers starting Flash Player v10 port iOS though rewrite sound engines scratch native code first time m sharing realtime sound processing code web browser mobile versions apps feeling WebAudio almost ready used fashion support planning audio experiments web browsers afraid use WebAudio alone 90 visitors handle fine Porting mobile devices still provides challenges aren type problems stay iOS one glitch damning one sound devices Android pushing towards low latency audio time already m confident WebAudio workable solution mobile devices care near future See comments currently 1 Contact - Privacy Policy - Jump Top Site last rendered Jekyll"),
('Ricochet: An encrypted, anonymous IM client built on Tor hidden services', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 135 Star 1 274 Fork 137 ricochet-im ricochet Code Issues Pull requests Wiki Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Anonymous peer-to-peer instant messaging https ricochet im 722 commits 1 branch 6 releases 7 contributors C 80 7 QML 15 2 QMake 2 0 2 0 C QML QMake branch master Switch branches tags Branches Tags master Nothing show v1 1 0 v1 0 4 v1 0 3 v1 0 2 v1 0 1 v1 0 0 Nothing show ricochet utils Restore missing semicolon wonder got away first place latest commit 23cf3f7509 special authored May 1 2015 Permalink Failed load latest commit information doc Handle contact removal smoothly Mar 25 2015 icons ui Switch icon font UI icons Apr 19 2015 packaging packaging Strip OS X binaries release Apr 6 2015 src utils Restore missing semicolon May 1 2015 tests Add CryptoKey bits function Dec 8 2014 translation translations Update Spanish Apr 2 2015 gitattributes Added gitattributes export Sep 11 2010 gitignore Add protobuf compilation support build Nov 18 2014 AUTHORS md translations Add Swedish translation Apr 2 2015 BUILDING md doc Update build dependency packages Debian Apr 19 2015 LICENSE ui Switch icon font UI icons Apr 19 2015 README md Small tweaks README Apr 10 2015 protobuf pri Fix Windows build MinGW Apr 1 2015 ricochet pro Bump version 1 1 0 Apr 6 2015 README md Anonymous metadata-resistant instant messaging works Ricochet experiment different kind instant messaging doesn't trust anyone identity contact list communications chat without exposing identity IP address anyone Nobody discover contacts talk metadata-free servers operators compromise could access information It's cross-platform easy non-technical users works Ricochet peer-to-peer instant messaging system built Tor hidden services login hidden service address contacts connect intermediate server Tor rendezvous system makes extremely hard anyone learn identity address Ricochet affiliated endorsed Tor Project information read Tor learn Ricochet's design protocol old protocol Everything open-source open contribution Experimental software experiment hasn't audited formally reviewed anyone Security anonymity difficult topics carefully evaluate risks exposure software rely Ricochet safety unless trust work deserves said believe try protect privacy similar software Downloads Ricochet available Windows OS X 10 7 later generic Linux binary package Visit releases page latest version changelog releases signatures also available https ricochet im releases Binaries PGP signed 9032 CAE4 CBFA 933A 5A21 45D5 FF97 C53F 183C 045D Building source See BUILDING Linux OS X Windows build instructions Bugs reported issue tracker Translations contributed Transifex contact ricochet rs7ce36jsj24ogfw john brooks dereferenced net support Tor Project EFF run Tor relay Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Breaking the Berlin is Cool Myth', "Favorite Things Contact Toggle navigation City guides Bangkok Berlin Brussels Ljubljana Rome Tel Aviv Toronto city guides Travel Destinations Middle East North Africa Egypt Jordan Israel Palestine Morocco Southeast Asia Oceania Australia New Zealand Cambodia Laos Thailand Vietnam Southeast Asia North America Canada New England Boston Miami San Francisco USA Europe Belgium Czech Republic England Germany Hungary Iceland Netherlands Italy Scotland Slovenia Spain Sweden Europe destinations Travel Themes Food Drinks Art Museums Hotels Accommodation Gay Travel Fashion Festivals Books Films Music Politics Travel Tips Technology Blog Search Breaking Berlin Cool Myth Posted Adam 24 May 2015 Berlin Technology 21 comments often wax poetic Berlin specialness little question mind one world exciting interesting places exciting interesting words portray something positive Berlin big city lot going fact newest iteration past 25 years since reunification past decade city repeatedly seen listed one world coolest cities one rapidly changing first came Berlin summer 2011 didn know expect city already reputation cool Kreuzberg already hipster mecca still today came Berlin tourist one-week holiday immediately apparent Berlin somewhere wanted stay longer stay many done many still trying today got job Berlin startup scene Job word used loosely actually internship time thought pretty cool paid albeit terribly thought would give chance get scene meet entrepreneurs find inspiration start something end think good thing made best friends three months learned lot want life business Berlin already 26 time maybe bit late learning life career lessons hey gotta start somewhere day age seems like generation constantly stuck struggle relationship startup companies complicated one one hand strongly believe entrepreneurship Hell m right blog might know blog big part success freelancer Actually 100 responsible success freelancer hand believe startups responsible lot problems affecting generation re supposed like startups disrupt society think change important shouldn afraid belief lot startups including cool ones regularly making headlines Berlin things expense workers rights generation maybe opportunities new things better things hell even better life cost many jobs much security future Berlin sometimes problems get lost whirlwind world cheap parties long nights live free attitude come embody cool Berlin saw friend Liam post following story startup experience thought important enough share always write negative things blog important part life Berlin one surprisingly neglected many Berlin blogs local media Berlin Shitty Startup Scene Liam Docherty point Europe history cool contest decided Berlin coolest place universe contest involved cities like New York preached Stockholm gay vegan cooking blog London wearing top hat like totally ironically telling Paris new bands Paris hadn heard definitely heard name sat around mismatched sofas waiting announcement winner Berlin Berlin course Berlin 36 hours drug fuelled underground fetish party taking place old squat house Berlin chose give fuck cool didn show giving fuck coolest thing Berlin startups like everything else Berlin cool Contracted work 40 hours per week work 50 get paid 40 worry working cool startup forefront new business venture Working 6 month intern contract hoping replace another intern done least Manager title cool right must make feel important re talking Managers open space office cool get free Club Mate Working startups like going casino night Everyone turns wearing unwritten dress code expects Everyone trying look like know throwing around money hope hit big Arrogant arseholes everywhere bullshitting everyone thinking winning strategy Many people sitting machines hours end longer know point someone might hit big never rich kid making bets Dad money cashes investors take company sorry mean chips get keep job sorry mean come back casino wait talking People working startups generally held hostage idea company makes big m ground floor people work massive amounts overtime extra pay one wants first leave Got impress boss right sees hour half overtime per day might pull one side tell seem motivated actually thing happened forget giving great opportunity letting work another thing actually happened means great opportunity make rich Let imagine scenario company doesn fail get fired startup 6 month internship e pay 1200 Euros per month stay long enough company bought get share millions acquisition get keep job maybe get pay rise bring people better companies make entry level However impress everyone Linkedin re Customer Care Executive Code Ninja Big Data Scientist actual job titles found job boards serves warning anyone thinking coming epicentre cool Berlin begin cool new life even get job first place article another time said Berlin startups exploitative bullshitting conventions work genuinely cool ones meet great people working Although m British negative comes naturally Maybe undervalued overworked thing whatever re guess forget startups sinking ships waiting investors come plug hole money captain untying life boat one hand telling everyone really everything fine keep scooping water ll hit dry land soon mean arms getting tired m giving opportunity View original post Facebook Berlin Shitty Startup SceneAt point Europe history cool contest decided Posted IMO Reviews Sunday May 24 2015 find post helpful interesting Please spread word sharing Facebook Please note posts make money never sacrifice integrity exchange favorable review Read full disclosure policy Get travel wanderlust English-language newsletter latest travel news reviews Yes please also send free daily blog updates Related Posts Hackescher Markt Berlin Find Coolest Shops find neighborhood Berlin maze cool shops quirky places hang Celebrating May Day Kreuzberg Berlin life energy May Day Berlin holiday big deal Berlin MyFest street festival beginning summer 21 comments Add comment Reply Kathryn 28 May 2015 worked many years companies worked uncool times thought moving somewhere cutting edge money talk started actually interview indie record label figured working music industry involve long hours crap pay thanks less cool job time money cool things suited better Reply Unimpressed 26 May 2015 article incredibly superficial hipster cool coolest vegan cooking old fifteen way many times repeat friend word cool startup mentality everywhere whether Berlin Paris medium-large city Ask Apple workers startup Silicon Valley many hours working much pay People become entrepreneurs like exploited someone else economy based speculation derivatives toxic bank assets corruption impunity enjoyed financial felons corrupted politicians reason exploitation European citizens suffering whether comes startups traditional company public sector possible Banks lend money money created artificial way money circulation -through bank accounts paypal accounts etc actually physically exists money means less value money offer-demand salary shit even pay hours ve worked 1000 euro salary Bottom line problem place corruption Evading exploitation living Europe hypster city probably one dumbest ideas heard entire life hand describe city like Berlin way shows absolutely lack general knowledge common sense Honestly give piece advice tell Travel Get dictionary synonyms Start reading something serious politics literature history economy stop reading lifestyle snob travel rubbish infects judgment article really hope graphic work much better rational thinking good Reply troin 26 May 2015 entrepeneur always harsh thing Think things berlin difficult Try thing spain easy say captain holds life vest captain putting money get fired cos company sinls find another job boss left job also money lost quite lot developing failed startup idea problem comes people dont realize Working startup extremely hard Long hours lot production one bad choice developing using certain technology hiring wrong guy get business quick Reply Adam 26 May 2015 Hi Troin arguing point think sometimes little much glorification founders entrepreneurs enough respect given workers startup company taking risk make immune proper work conditions Reply the_frickerman 26 May 2015 hire anybody friend someone pointing gun entrepreneurs hire People freelance Oh get love lots zeroes right bank accounts end month wanna rich treat fucking employees properly work conditions gonna harsh honest say upright Minimum owe People gonna depend Relationship worker-owner strictly symbiotic like understood interpreted Reply Adam 26 May 2015 Spot Reply the_frickerman 26 May 2015 100 Story Got Berlin 26 already 30 worked Startup Well Company 2 years got international 100 workers still called Startup justify shitty wages Started intern earning less 600 netto probation period lucky get 1200 brutto complained lot Result got blacklisted wouldn taken account promotions worker rights pain ass Luckily left Company year half funny CEO would talk Manager lengthening contract another year directly knew would kick ass already many People left earlier said total incompetent tip iceberg tell happily work Little Company field studies earning 2000 Brutto Havelland bad Thing happenned already 3rd year m already quite burned living abroad well Congrats post relate 100 Reply Adam 26 May 2015 Thank much sharing experience story think people need share kind information ve generally found talk Berlin startup scene overwhelming positive inspirational sometimes reality quite different every case obviously plenty important share Reply Michael Collins 26 May 2015 really understand complains entrepreneurship startups lot things cost loads hours become profitable someone market scene happy get job multinational create startup realise difficult deal finances Reply Adam 26 May 2015 Hey Michael think part problem lies fact everyone ability necessarily interest creating startup Society government forced many people situations someone like make work benefit everyone opportunity concerns current state job market many startups work Reply Michael Collins 26 May 2015 Well yeah agree understand say different discussion Fact gotta sacrifice self choose -or want part entrepreneur want become someone industry -nowadays completely dominated big multinationals- reason market like another story google lobbies governments wanna make way sort sacrifice Otherwise need re think drive career Anyway good article pleasure comment Reply Angel 26 May 2015 Well bad Spain re used since long ago start-ups big multinational corporations talk field software games ICT companies Except exceptions re hired 40 hours week end schedule 8am 8pm-10pm rule two unending hours lunch course overtime paid happens either startups less cases think big multinational corporations often addition Spain huge problem outsourcing worker may passed 2 3 4 companies get final client finally working read blog Berlin internship 6 months re paid 1200 euros per month Spain re internship under-3-years-experienced worker internship 400 -600 per month hired 6 months internship company fired hired company another 6 months etc re lucky hired normal worker e software developer maybe re paid 1000 per month re luckier 3 years experience may 1300 1600 euros per month Reply Adam 26 May 2015 Thanks Angel comment insight think re totally right multinational companies taking advantage workers well bit frustrating think many government regulations also partly blame Reply Sofie 25 May 2015 article makes think Adam Thanks sharing Also already 26 time maybe bit late learning life career lessons hey gotta start somewhere day age seems like generation constantly stuck struggle m 28 feel like m slightly starting get clue things Slightly Reply Adam 26 May 2015 Thanks Sophie yeah m 30 clue m honestly feel lot options front us day age double-edged sword guess options requires time figure everything Things maybe simpler Reply Tina 25 May 2015 Berlin city already lower wages Germany might cheaper live even non start business would earn 40 less berlin Reply Adam 25 May 2015 good point Tina m also fairly certain Berlin one highest unemployment rates Germany Things always look good Reply Alex Clifford 25 May 2015 Great article think coolness startups means many 20-somethings prepared sacrifice salary time rights part next big thing truth 85 startups fail However re part one learn ever learn corporate boxy job ll learn get things done Even re taken advantage process education invaluable started startup got fired run money 6 months enough experience self-esteem hawk freelance copywriter hourly rate 4-5x earning minimum wage workload much lower d say get involved learn hustle set boundaries boss shark worry fired asserting ll respect get ve learned experience Berlin like god-sent city Reply Clairikine 25 May 2015 Good points Reply Adam 25 May 2015 Thanks Claire Reply Adam 25 May 2015 Thanks Alex helpful comment think re right lot learned working startup wish didn come expense many things d like think could live world learn helpful supportive environments Unfortunately everyone able take risks potential rewards working startup Leave reply Cancel reply Name required Email required published Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code del datetime em q cite strike strong Previous Post Next Post City GuidesView Top Travel Theme Films Adam 2010 quit job graphic designer Boston went 15 month trip around world journey took places like North Africa Middle East India Southeast Asia Since 2011 ve living Berlin Europe hipster city Travels Adam wants explore world quirky amazing personal experiences alternative indie travel tips around world learn read Iceland changed life Where's going 2015 travel wish list Portugal Brazil Los Angeles Chicago Greece Manchester See ve already 2015 May Updating editing guidebook Berlin lots fact-checking sightseeing June Manchester first time Canal Street whatever hipster places find Berlin gay pride Tweet travelsofadam send recommendations else visit year Frequently Asked Questions Terms Conditions Sitemap Media Kit copy 2015 Travels Adam Share friendsYour NameYour EmailRecipient EmailEnter MessageI read article found interesting thought might something article called Breaking Berlin Cool Mythand located athttp travelsofadam com 2015 05 berlin-startup-scene CaptchaSubmitShare friendsYour NameYour EmailRecipient EmailEnter MessageI read article found interesting thought might something article called Breaking Berlin Cool Mythand located athttp travelsofadam com 2015 05 berlin-startup-scene CaptchaSubmit"),
('Declarative CLI parsing in JS', 'Musings FP CS log journey FP CS Home posts Atom feed Declarative CLI parsing JS Clement Delafargue February 25 2015 Tagged javascript m currently working CLI application written javascript kind programs UI plays important part good application consistent easy discover users two means achieving CLI app proper help output autocompletion lots cli parsing libraries available node js handle help correctly none provide help regarding autocompletion hand Haskell world optparse-applicative makes problems disappear allows declare parsers declarative composable fashion generates help output even manages shell completion CLI Parse ve released CLI Parse bit code available CLI Parse github npm install cliparse var testCli cliparse cli name testCli description Simple CLI written sake example args cliparse argument value helpCommand false function x console log x args 0 laundry list nice features box bash zsh completion easy-to-manipulate parsers nested commands syntax la git custom data parsers custom autocompletion Since application described pure data structure manipulate want even let users extend app like git fully integrated even autocompletion Todo-list already usable always always room improvement native ZSH completion variadic arguments cleaner help output Help PRs welcome code quite easy follow shy - Hear rant French ve given talk CLI Parse February slides English Please enable JavaScript view comments powered Disqus comments powered Disqus Hosted Clever-Cloud - Cl ment Delafargue - Generated Hakyll - Source code BTC work licensed Creative Commons Attribution-ShareAlike 3 0 Unported License'),
('1 second per second is harder than it sounds', "Writing Software technology sysadmin war stories Saturday June 14 2014 1 second per second harder sounds you've never problems keeping clock synced haven't run enough machines yet start scaling beyond certain point become obvious even elementary timekeeping small feat even help tools like ntpd First clear I'm talking hardware clock really matters read generally boot Instead I'm talking system clock -- thing gives values programs call time gettimeofday clock_gettime variants It's maintained kernel assuming Linux sort situations system clock timekeeping encountered S0 clock consistently ticks 1 second per second synced correct time best tell S1 clock consistently ticks 1 second per second little offset correct time it's running fast running slow might say 13 01 02 actual time 13 01 05 S2 clock ticks 1 second per second wildly offset correct time -- 1000 seconds much much might set tomorrow next week next year year 1970 S3 clock consistently ticks slightly fast slightly slow delivering something 1 second per second It's always amount though S4 clock consistently ticks really fast really slow gaining losing whole milliseconds every second it's always amount S5 clock ticks fast slow normally everything else in-between changes constantly Sometimes gets 1 second per second times gets less Even degree runs quickly slowly changes unpredictably eventually see tend big enough fleet depends tools available S0 ideal state somehow clock stays anomaly -- nothing truly perfect comes timekeeping Still ntpd quite happy keep S1 likely ntpd adjust slew system clock make tick slightly quickly slowly burn offset tiny little adjustments order parts per million works clock try approach S0 probably like S3 S2 happens far often start ntpd system clock middle nowhere it'll refuse fix things default startup it'll step clock 1000 seconds fix something that's wildly wrong It's bit like picking needle record player dropping back get harsh result you'll probably closer want It's easy make S2 happen mistake set hardware clock something insane reboot start ntpd without anything else It'll see offset give Messing sense whether use local time UTC hardware clock great way start chain events motion usual workaround make ntpdate run startup reading hardware clock starting ntpd ntpdate adjust clock anything anything else course fails startup continue ntpd start it'll bomb you're reading point ntpdate actually retired think ntpd -q instead live world ntpd's -g let step 1000 seconds one-time adjustment Use risk S3 probably wind systems clock's pace always vary tiny little bit different reasons manufacturing variance temperature changes cosmic rays phase moon whatever want ntpd correct It'll fix error 500 parts per million either direction S4 start getting realm things increasingly difficult fix clickity click keyboard system substantial offset number microseconds gets per kernel tick usual value see healthy machines 10000 Run adjtimex -p see using right say unhealthy mean machines dozens hundreds ticks offset 10000 might 9800 even less every time rest world gets 10000 ticks gets 9800 That's clock running slowly ntpd correct Clock adjustment Linux comes two flavors macro form tick setting micro form freq setting ntpd adjust 500 ppm machine USER_HZ 100 that's freq value - 32768000 65536 500 Outside 5 ticks either way won't touch ntpd probably interpret increasing jitter time sources even though it's local clock problem one time fixer scripts looks insanity ntpd restarts time goes sync keep getting one time step startup behavior ntpd clock keep getting dragged along fixit script That's lot needle-dropping onto record clock let's say you're stuck box like use adjtimex set tick value long it's within 500 ppm it's actually ntpd eventually figure start declaring sync pretty dirty hack It's entirely clear impact system might wouldn't surprised programs got differing numbers timeslices something equally weird environment S5 bottom pile crazy clock broken can't even decide broken wants Sometimes it's really fast times it's slightly fast maybe sometimes it's really slow times it's slightly slow words ridiculous variance even variance varies jitters ntpd can't handle also won't able S4 workaround setting tick value letting ntpd work since resulting difference still large state system I'd give Swap hardware try another motherboard It's worth trouble One thing I've deliberately omitted discussion actual clock source used kernel Whether you're talking TSC HPET something else also change system behaves situations get I'll cover another occasion Catch 2011 2012 posts convenient ebook format writing Contact"),
('The N vs NP problem, explained', "Skip navigation UploadSign inSearch Loading Close Yeah keep Undo Close video unavailable Watch QueueTV QueueWatch QueueTV Queue Remove allDisconnect Loading Watch Queue TV Queue __count__ __total__ P vs NP Computational Complexity Zoo hackerdashery SubscribeSubscribedUnsubscribe3 495 Subscription preferences Loading Loading Working Add Want watch later Sign add video playlist Sign Share Report Need report video Sign report inappropriate content Sign Statistics 122 582 3 674 Like video Sign make opinion count Sign 3 675 17 Don't like video Sign make opinion count Sign 18 Loading Loading Loading Rating available video rented feature available right Please try later Published Aug 26 2014Hackerdashery 2Inspired Complexity Zoo wiki https complexityzoo uwaterloo ca Co advanced reading highly recommend Scott Aaronson's blog Shtetl-Optimized http www scottaaronson com blog -----Retro-fabulous cabinet-sized computers System 360 http en wikipedia org wiki IBM_Syst photo 360-91-panel Licensed Public domain via Wikimedia Commons - http commons wikimedia org wiki Fil PDP-8 http en wikipedia org wiki PDP-8photo PDP-8 Licensed Public domain via Wikimedia Commons - http commons wikimedia org wiki Fil -----Protein folding illustration Protein folding schematic Tomixdf talk - work Original text self-made Licensed Public domain via Wikimedia Commons - http commons wikimedia org wiki Fil P vs NP opinion poll http www cs umd edu gasarch papers Category Education License Standard YouTube License Show Show less Loading Advertisement Autoplay autoplay enabled suggested video automatically play next Next 23 Computational Complexity - Duration 51 12 MIT OpenCourseWare 80 902 views 51 12 Play nextPlay Proof Computers Can't Everything Halting Problem - Duration 7 52 udiprod 128 849 views 7 52 Play nextPlay Riemann Hypothesis - Numberphile - Duration 17 04 Numberphile 673 770 views 17 04 Play nextPlay Olbers' Paradox - Level Physics - Duration 19 49 DrPhysicsA 182 103 views 19 49 Play nextPlay Poincar Conjecture - Numberphile - Duration 8 52 Numberphile 319 230 views 8 52 Play nextPlay Turing Halting Problem - Computerphile - Duration 6 14 Computerphile 116 135 views 6 14 Play nextPlay Programming Interview Graph Coloring using Backtracking - Duration 12 50 saurabhschool 42 813 views 12 50 Play nextPlay abc Conjecture - Numberphile - Duration 6 44 Numberphile 452 815 views 6 44 Play nextPlay Riemann Hypothesis - Duration 19 36 singingbanana 204 208 views 19 36 Play nextPlay NP Completeness dummies Complexity Classes P NP lec 1 - Duration 8 30 saurabhschool 13 385 views 8 30 Play nextPlay Rhapsody Proof Pi 4 - Duration 5 55 Vihart 1 009 384 views 5 55 Play nextPlay Scott Aaronson - Could Quantum Computer Subjective Experience - Duration 1 08 00 QFCU Workshop IBM Watson 2014 2 270 views 1 08 00 Play nextPlay Dynamic Programming 0 1 Knapsack Problem - Duration 11 08 Mifta Sintaha 54 636 views 11 08 Play nextPlay Professor Avi Wigderson P vs NP problem - Duration 57 25 ETH Z rich 21 854 views 57 25 Play nextPlay True Power Matrix Transformations Graphics - Computerphile - Duration 14 46 Computerphile 183 415 views 14 46 Play nextPlay Base 12 - Numberphile - Duration 9 12 Numberphile 822 944 views 9 12 Play nextPlay Infinity bigger think - Numberphile - Duration 8 00 Numberphile 3 776 763 views 8 00 Play nextPlay P vs NP TV - Computerphile - Duration 5 49 Computerphile 158 085 views 5 49 Play nextPlay Routers Internet YouTube Offline - Computerphile - Duration 13 22 Computerphile 84 097 views 13 22 Play nextPlay Hackerdashery 1 - Duration 7 13 hackerdashery 7 406 views 7 13 Play nextPlay Loading suggestions Show Language English Country India Safety History Help Loading Loading Loading Press Copyright Creators Advertise Developers YouTube Terms Privacy Policy Safety Send feedback Try something new Loading Working Sign add Watch Later Add Loading playlists"),
('New Keyword Extractor: extract keywords from text using Machine Learning', 'DOCS PRICING BLOG LOGIN Previous New Keyword Extractor smarter flexible excited announce made several improvements Keyword Extractor try free need MonkeyLearn account module extracts keywords text English Keywords compounded one words defined important topics content used index data generate tag clouds searching keyword extraction algorithm employs statistical algorithms natural language processing technology analyze content identify relevant keywords customers already love extractor using empower kind applications decided take step make improvements make module powerful keyword extractor market Improvements response extractor include count positions text different keywords extracts Also using parameters API turn following behaviors Number keywords Set maximum amount keywords extract defaults 10 Capitalization Lowercase given keywords defaults 0 false Company Names Expand company names text appears word Google part appears Google Inc word Google expanded Google Inc Defaults 0 false Stemming Take words base form order get better results defaults 1 true Acronyms Expand acronyms full form example US United States tokens appear given text Defaults 0 false Hyphenated Keep char appears inside name example Ferrara Wolf Defaults 0 false Example Input Google Inc American multinational technology company specializing Internet-related services products include online advertising services search cloud computing software profits derived AdWords online advertising service places advertising near list search results Google founded Larry Page Sergey Brin Ph D students Stanford University Together 14 shares control 56 stockholder voting power supervoting stock incorporated Google privately held company September 4 1998 Initial Public Offering announced August 19 2004 first day IPO share price set 85 closed 100 34 price gain 18 Output 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 result relevance 0 980 count 2 positions_in_text 630 708 keyword Initial Public Offering relevance 0 980 count 2 positions_in_text 130 247 keyword online advertising services relevance 0 882 count 3 positions_in_text 0 331 570 keyword Google Inc relevance 0 490 count 1 positions_in_text 27 keyword multinational technology company relevance 0 490 count 1 positions_in_text 500 keyword stockholder voting power relevance 0 294 count 1 positions_in_text 717 keyword share price relevance 0 294 count 1 positions_in_text 368 keyword Sergey Brin relevance 0 294 count 1 positions_in_text 396 keyword Ph D students relevance 0 294 count 1 positions_in_text 533 keyword supervoting stock relevance 0 294 count 1 positions_in_text 76 keyword Internet-related services read API reference keyword extractor Feedback Would love feedback new smarter keyword extractor suggestions please let us know Share EmailFacebookTwitterLinkedInTumblrReddit Federico Pascual 2015-05-26T14 05 06 00 00May 20th 2015 News 0 Comments Author Federico Pascual Maker Disruptor Entrepreneur Win-Win Mindset Techie Business Marketing TEDxDurazno Speaker Related Posts Permalink Gallery New modules Product Sentiment Analysis Extractors New modules Product Sentiment Analysis Extractors Permalink Gallery MonkeyLearn PyCon Startup Row event MonkeyLearn PyCon Startup Row event Permalink Gallery MonkeyLearn featured Twitter Dev Blog MonkeyLearn featured Twitter Dev Blog Permalink Gallery Black Friday MonkeyLearn 80 every new subscription plan Black Friday MonkeyLearn 80 every new subscription plan Permalink Gallery GUEST POST AngularJS provider MonkeyLearn GUEST POST AngularJS provider MonkeyLearn Leave Reply Cancel reply Recent Posts New Keyword Extractor smarter flexible Hacker News categorizer MonkeyLearn getting whole story Analyzing news headlines across globe Kimono MonkeyLearn New modules Product Sentiment Analysis Extractors MonkeyLearn PyCon Startup Row event Categories Applications News 2015 MonkeyLearn LLC rights reserved Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email'),
('The inner-workings of strongly consistent enterprise read-write cache, a Hibernate case study', "Skip content Vlad Mihalcea's Blog Teaching way learning Primary Menu Menu Home Tutorials Hibernate MongoDB Spring Git Hibernate READ_WRITE CacheConcurrencyStrategy work May 25 2015vladmihalcea Introduction previous post introduced NONSTRICT_READ_WRITE second-level cache concurrency mechanism article going continue topic READ_WRITE strategy Write-through caching NONSTRICT_READ_WRITE read-through caching strategy updates end-up invalidating cache entries simple strategy may performance drops increase write operations write-through cache strategy better choice write-intensive applications since cache entries undated rather discarded database system record database operations wrapped inside physical transactions cache either updated synchronously like case TRANSACTIONAL cache concurrency strategy asynchronously right database transaction committed READ_WRITE strategy asynchronous cache concurrency mechanism prevent data integrity issues e g stale cache entries uses locking mechanism provides unit-of-work isolation guarantees Inserting data persisted entities uniquely identified entity assigned distinct database row newly created entities get cached right database transaction committed Override public boolean afterInsert Object key Object value Object version throws CacheException region writeLock key try final Lockable item Lockable region get key item null region put key new Item value version region nextTimestamp return true else return false finally region writeUnlock key entity cached upon insertion must use SEQUENCE generator cache populated EntityInsertAction Override public void doAfterTransactionCompletion boolean success SessionImplementor session throws HibernateException final EntityPersister persister getPersister success isCachePutEnabled persister getSession final CacheKey ck getSession generateCacheKey getId persister getIdentifierType persister getRootEntityName final boolean put cacheAfterInsert persister ck postCommitInsert success IDENTITY generator doesn play well transactional write-behind first-level cache design associated EntityIdentityInsertAction doesn cache newly inserted entries least HHH-7964 fixed Theoretically database transaction commit second-level cache insert one concurrent transaction might load newly created entity therefore triggering cache insert Although possible cache synchronization lag short concurrent transaction interleaved makes transaction hit database instead loading entity cache Updating data inserting entities rather simple operation updates need synchronize database cache entry READ_WRITE concurrency strategy employs locking mechanism ensure data integrity Hibernate Transaction commit procedure triggers Session flush EntityUpdateAction replaces current cache entry Lock object update method used synchronous cache updates doesn anything using asynchronous cache concurrency strategy like READ_WRITE database transaction committed after-transaction-completion callbacks called EntityUpdateAction calls afterUpdate method EntityRegionAccessStrategy ReadWriteEhcacheEntityRegionAccessStrategy replaces Lock entry actual Item encapsulating entity dissembled state Deleting data Deleting entities similar update process see following sequence diagram Hibernate Transaction commit procedure triggers Session flush EntityDeleteAction replaces current cache entry Lock object remove method call doesn anything since READ_WRITE asynchronous cache concurrency strategy database transaction committed after-transaction-completion callbacks called EntityDeleteAction calls unlockItem method EntityRegionAccessStrategy ReadWriteEhcacheEntityRegionAccessStrategy replaces Lock entry another Lock object whose timeout period increased entity deleted associated second-level cache entry replaced Lock object making subsequent request read database instead using cache entry Locking constructs Item Lock classes inherit Lockable type two specific policy allowing cache entry read written READ_WRITE Lock object Lock class defines following methods Override public boolean isReadable long txTimestamp return false Override public boolean isWriteable long txTimestamp Object newVersion Comparator versionComparator txTimestamp timeout timedout allow write return true multiplicity 0 still locked disallow write return false return version null txTimestamp unlockTimestamp versionComparator compare version newVersion 0 Lock object doesn allow reading cache entry subsequent request must go database current Session creation timestamp greater Lock timeout threshold cache entry allowed written least one Session managed lock entry write operation forbidden Lock entry allows writing incoming entity state incremented version current Session creation timestamp greater current entry unlocking timestamp READ_WRITE Item object Item class defines following read write access policy Override public boolean isReadable long txTimestamp return txTimestamp timestamp Override public boolean isWriteable long txTimestamp Object newVersion Comparator versionComparator return version null versionComparator compare version newVersion 0 Item readable Session started cache entry creation time Item entry allows writing incoming entity state incremented version Cache entry concurrency control concurrency control mechanism invoked saving reading underlying cache entries cache entry read ReadWriteEhcacheEntityRegionAccessStrategy get method called public final Object get Object key long txTimestamp throws CacheException readLockIfNeeded key try final Lockable item Lockable region get key final boolean readable item null item isReadable txTimestamp readable return item getValue else return null finally readUnlockIfNeeded key cache entry written ReadWriteEhcacheEntityRegionAccessStrategy putFromLoad method public final boolean putFromLoad Object key Object value long txTimestamp Object version boolean minimalPutOverride throws CacheException region writeLock key try final Lockable item Lockable region get key final boolean writeable item null item isWriteable txTimestamp version versionComparator writeable region put key new Item value version region nextTimestamp return true else return false finally region writeUnlock key Timing database operation fails current cache entry holds Lock object cannot rollback previous Item state reason Lock must timeout allow cache entry replaced actual Item object EhcacheDataRegion defines following timeout property private static final String CACHE_LOCK_TIMEOUT_PROPERTY net sf ehcache hibernate cache_lock_timeout private static final int DEFAULT_CACHE_LOCK_TIMEOUT 60000 Unless override net sf ehcache hibernate cache_lock_timeout property default timeout 60 seconds final String timeout properties getProperty CACHE_LOCK_TIMEOUT_PROPERTY Integer toString DEFAULT_CACHE_LOCK_TIMEOUT following test emulate failing database transaction observe READ_WRITE cache allows writing timeout threshold expires First going lower timeout value reduce cache freezing period properties put net sf ehcache hibernate cache_lock_timeout String valueOf 250 ll use custom interceptor manually rollback currently running transaction Override protected Interceptor interceptor return new EmptyInterceptor Override public void beforeTransactionCompletion Transaction tx applyInterceptor get tx rollback following routine test lock timeout behavior try doInTransaction session - Repository repository Repository session get Repository class 1L repository setName High-Performance Hibernate applyInterceptor set true catch Exception e LOGGER info Expected e applyInterceptor set false AtomicReference Object previousCacheEntryReference new AtomicReference AtomicBoolean cacheEntryChanged new AtomicBoolean cacheEntryChanged get doInTransaction session - boolean entryChange session get Repository class 1L try Object previousCacheEntry previousCacheEntryReference get Object cacheEntry getCacheEntry Repository class 1L entryChange previousCacheEntry null previousCacheEntry cacheEntry previousCacheEntryReference set cacheEntry LOGGER info Cache entry ToStringBuilder reflectionToString cacheEntry entryChange sleep 100 else cacheEntryChanged set true catch IllegalAccessException e LOGGER error Error accessing Cache e Running test generates following output select readwritec0_ id id1_0_0_ readwritec0_ name name2_0_0_ readwritec0_ version version3_0_0_ repository readwritec0_ readwritec0_ id 1 update repository set name 'High-Performance Hibernate' version 1 id 1 version 0 JdbcTransaction - rolled JDBC Connection select readwritec0_ id id1_0_0_ readwritec0_ name name2_0_0_ readwritec0_ version version3_0_0_ repository readwritec0_ readwritec0_ id 1 Cache entry net sf ehcache Element 3f9a0805 key ReadWriteCacheConcurrencyStrategyWithLockTimeoutTest Repository 1 value Lock Source-UUID ac775350-3930-4042-84b8-362b64c47e4b Lock-ID 0 version 1 hitCount 3 timeToLive 120 timeToIdle 120 lastUpdateTime 1432280657865 cacheDefaultLifespan true id 0 Wait 100 ms JdbcTransaction - committed JDBC Connection select readwritec0_ id id1_0_0_ readwritec0_ name name2_0_0_ readwritec0_ version version3_0_0_ repository readwritec0_ readwritec0_ id 1 Cache entry net sf ehcache Element 3f9a0805 key ReadWriteCacheConcurrencyStrategyWithLockTimeoutTest Repository 1 value Lock Source-UUID ac775350-3930-4042-84b8-362b64c47e4b Lock-ID 0 version 1 hitCount 3 timeToLive 120 timeToIdle 120 lastUpdateTime 1432280657865 cacheDefaultLifespan true id 0 Wait 100 ms JdbcTransaction - committed JDBC Connection select readwritec0_ id id1_0_0_ readwritec0_ name name2_0_0_ readwritec0_ version version3_0_0_ repository readwritec0_ readwritec0_ id 1 Cache entry net sf ehcache Element 305f031 key ReadWriteCacheConcurrencyStrategyWithLockTimeoutTest Repository 1 value org hibernate cache ehcache internal strategy AbstractReadWriteEhcacheAccessStrategy Item 592e843a version 1 hitCount 1 timeToLive 120 timeToIdle 120 lastUpdateTime 1432280658322 cacheDefaultLifespan true id 0 JdbcTransaction - committed JDBC Connection first transaction tries update entity associated second-level cache entry locked prior committing transaction first transaction fails gets rolled back lock held next two successive transactions going database without replacing Lock entry current loaded database entity state Lock timeout period expires third transaction finally replace Lock Item cache entry holding entity disassembled hydrated state Conclusion READ_WRITE concurrency strategy offers benefits write-through caching mechanism need understand inner workings decide good fit current project data access requirements heavy write contention scenarios locking constructs make concurrent transactions hit database must decide synchronous cache concurrency strategy better suited situation Code available GitHub enjoyed reading article re looking forward getting instant email notifications latest posts consider following blog ads Share Like Like Loading Related Categories Hibernate Java Tags caching concurrency control hibernate Hibernate training Hibernate tutorial read-write Post navigation Hibernate NONSTRICT_READ_WRITE CacheConcurrencyStrategy work 2 thoughts Hibernate READ_WRITE CacheConcurrencyStrategy work Bram_80 says May 26 2015 1 28 pm reasonable value net sf ehcache hibernate cache_lock_timeout production 60000ms seems lot Reply vladmihalcea says May 26 2015 1 37 pm agree 60 seconds probably long transactions rather short couple seconds sufficient accommodate longest transaction Reply Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Twitter GitHub LinkedIn Google Plus Newsletter I'm writing High Performance Hibernate book Subscribe follow progress Follow Blog via Email Enter email address follow blog receive notifications new posts email Join 933 followers Search Agile Anniversary Architecture Asciidoctor Awards Conference FlexyPool Git Hibernate Java JavaScript JOOQ JVM Leadership Learning Linux Management MongoDB NoSQL Python Scalability Scrum Spring Spring Integration SQL Testing Transactions UML Unix Workshop Archives May 2015 4 April 2015 5 March 2015 4 February 2015 4 January 2015 5 December 2014 5 November 2014 4 October 2014 4 September 2014 6 August 2014 4 July 2014 5 June 2014 5 May 2014 4 April 2014 6 March 2014 4 February 2014 5 January 2014 7 December 2013 8 November 2013 7 October 2013 9 September 2013 1 Blog WordPress com Wilson Theme Follow Follow Vlad Mihalcea's Blog Get every new post delivered Inbox Join 933 followers Build website WordPress com d bloggers like"),
('Blocking and asynchronous operations without timeout are broken', 'Musing Mortoray Programming Language Design Search Blocking asynchronous operations without timeout broken 25 Monday May 2015 Posted mortoray CodeProject Defective Language Programming Leave comment TagsProgramming time waiting something happen reading disk locking mutex need timeout Without timeout run risk operation never actually completing program completely hanging unfortunate many languages still APIs lacking timeouts typical file hang File code like abundant d surprised non-trivial server programs code 1 2 handle open some_file text handle read may obvious type code hang file local disk generally expect quick response never expect disk simply respond problem abstraction case file never certain file really doesn matter open doesn accept URLs drive could network mount may pipe could cloud block device things result hung read calls Everywhere default IO function potential block includes writing functions anything writes also wait endlessly buffer flush connection re-establish Meta-information functions like stat also require timeout function waits something also timeout goes beyond IO includes locking functions mutexes assumption must always whatever re waiting may never actually happen timeout must applied default merely available feature default timeout also short period time short enough unusual delay trigger forces programmers think happens cases dealing timeout consciously extending Asynchronous clear timeout applies blocking asynchronous calls equally certainly helpful hanging async operation doesn block processing activities still results operation never making progress usually leads external process never getting response waiting Bandwidth need consider definition timeout well common definition simply period time nothing happens many APIs especially network sockets timeouts triggered data exchanged think valid Consider situation low bandwidth little practical difference hung connection one sending data 1B one timeout seems wrong Streaming operations minimum bandwidth requirements certain speed maintained simply fail Total timeout Many HTTP libraries silly comes timeout handling find different parameters DNS lookup initial connection exchange headers document exchange one thing provide actually want total timeout want specifiy upper limit time start HTTP request time document fully retrieved really care request failed expect large document streaming d prefer give upper limit negotiations phase bandwidth requirement document phase ve unfortuantely seen either options HTTP library excuses unfortuante libraries designed around failures default Perhaps 20 years ago could forgiven even trivial devices multitasking network enabled acceptable takes one minor hiccup render programs completely inoperable simple rule waiting event assume may never happen need always need advanced error handling way fail gracefully often enough Simply hanging nothing rarely helpful like explore languages compilers follow Twitter always ideas things uncover something special d like hear want arrange presentation feel free contact RedditTwitterEmailMoreFacebookPocketLinkedInTumblrGoogleLike Like Loading Related Post navigation Previous post Next post Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Author Leaf programming language Follow meon Twitter Follow Blog via Email Enter email address follow blog receive notifications new posts email Recent Posts wild code grows Blocking asynchronous operations without timeout broken Debugging binary searching code revisions bug error fault irrelevance classification swipingly good time edge gestures HTTP cache headers betray privacy Fast build turnaround time essential Cohesion coupling good measures quality Nobody cares code Using hack stifling perfectionist moving Measuring finger mouse velocity release time Complexity theory isn required programmer Blog WordPress com Chateau Theme Follow Follow Musing Mortoray Get every new post delivered Inbox Join 779 followers Build website WordPress com Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email d bloggers like'),
('Frame technology is a language-neutral floor wax and dessert topping', "Frame technology software engineering Wikipedia free encyclopedia Jump navigation search Frame technology FT language-neutral e processes various languages system manufactures custom software 1 reusable machine-adaptable building blocks called frames FT used reduce time effort errors involved design construction evolution large complex software systems Fundamental FT ability stop proliferation 2 similar subtly different components issue plaguing software engineering programming language constructs subroutines classes templates generics add-in techniques macros generators failed provide practical scalable solution number implementations FT exist Netron Fusion specializes constructing business software proprietary XVCL general-purpose open-source implementation FT Paul G Bassett invented first FT order automate repetitive error-prone editing involved adapting generated hand-written programs changing requirements contexts substantial literature exists 3 4 5 6 7 8 9 10 explains FT facilitate aspects software life-cycle including domain modeling requirements gathering architecture design construction testing documentation fine tuning evolution Independent comparisons FT alternative approaches 11 confirm time resources needed build maintain complex systems substantially reduced One reason FT shields programmers software inherent redundancies FT reproduced COTS object-libraries equivalent XVCL frame libraries two-thirds smaller simpler 2 6 custom business applications routinely specified maintained Netron FusionSPC frames 5 15 size assembled source files 7 Contents 1 Frames 1 1 main commands 1 2 Component relationships 2 Context scoping 3 Specification frames templates 4 Frame-based domain-specific languages 5 Frame engineering 6 Footnotes Frames edit two informal descriptions followed precise definition explanation frame adaptable component automated software assembly line Imagine auto factory instead specific bumpers fenders parts suit specifics car model one generic bumper one generic fender imagine generic parts could cloned shaped fit car model came line fantasy would revolutionize manufacturing impossible physical parts frames software information general frame recipe cooking program text instructions say blend ingredients chunks frame-text within ingredients frames chef frame processor carries instructions e frame commands alter add modify delete ingredients necessary suit main recipe Formally frame procedural macro consisting frame-text zero lines ordinary program text frame commands carried FT frame processor manufactures custom programs frame generic component hierarchy nested subassemblies procedure integrating subassembly frames recursive process resolves integration conflicts favor higher level subassemblies outputs custom documents typically compilable source modules main commands edit invoke frame procedure call occurs construction time constructing program texts assign list expression frame parameter construction-time variable assignment insert frame-text instead-of blocks frame-text labeled parameter expressions instantiate frame parameter construction-time expression evaluation select frame-texts processing construction-time case statement iterate frame-text varying certain frame parameters construction-time statement processor transforms frame-text replacing commands ordinary text emitting ordinary text Examples replaces invoke result processing invoked frame replaces assign nothing instantiate becomes ordinary text resulting evaluating frame parameter assigned expression concatenation strings arithmetic expressions nested frame parameters Component relationships edit Invoke sets component relationships among frames example figure 1 F J component C J subcomponent course many components may invoke subcomponent J invoking F constructing different text overall component structure forms generic semilattice 12 frame root subassembly Thus C subassembly F C components F subassembly J F C components J subassembly 13 Context scoping edit Context scoping distinguishes FT modeling construction systems frame constitutes context integrates subassembly nested subassemblies lower levels progressively context-free integrate less information Integration conflicts resolved favor context-sensitive frame assign insert parameter becomes read-only frames frame subassembly 14 figure 1 frames F C would conflict assign different values parameter p F overrides C e frame processor ignores C assignment p uses F value p F C Similarly J override F C Context-scoping matters adjustments needed fit number sub components given context explicit local context Without context-scoping adjustments mostly implicit scattered hidden within component variants variants tend proliferate causing unnecessary redundancy complexity system evolution also unnecessarily difficult error-prone Specification frames templates edit specification frame SPC entire assembly topmost hence context-sensitive frame processor starts SPC L M figure 1 order manufacture complete program subsystem principle SPC could customize every detail practice SPC small fraction entire assembly exceptions exceptions exceptions etc already handled various subassembly frames Given frame library SPCs logically entail programs construct thus SPCs replace source files primary control points routine practice use templates create SPCs create programs use SPCs manage evolve programs indefinitely practice greatly reduces number details application programmers must know manage also avoids redundancies complexities errors inherent copying editing source texts hand Debugging time shrinks well components reused hence pretested Errors tend localize SPCs least tested template archetypal SPC embedded comments explaining customize Typically small number types programs type characterized template copying filling programmers convert template SPC without remember frames need component relationships details typically need customized Frame-based domain-specific languages edit FT-based domain-specific language FT-DSL domain-specific language whose semantics expressed program code engineered frames typical FT-DSL editor translates DSL expressions frame adapt framed semantics express program-code equivalents DSL expressions SPC sitting atop subassembly specify program code customizations inexpressible domain-specific language Thus users regenerate program code altered DSL expressions prior customizations lost 15 Frame engineering edit Frame engineering applies software engineering frame technology environment includes domain analysis designing writing testing co-evolving frames along systems construct 10 Framing occurs bottom top Bottom frame engineers typically create frames unifying parameterizing groups similar program elements granularity text snippets subsystems generic equivalents top approach combines domain expertise iterative prototype refinement constrained application architectural requirements corporate standards desire evolve set reusable assets whose return greatly exceeds investment Reuse measured dividing total size frame libraries total size resulting constructs counting individual frame reuses mature frame library enhances cost-effectiveness software project stakeholders restrict attention system novelties taking bulk robust components architecture granted mature library static Frame engineers using select command evolve reusable frames indefinitely meeting new requirements without necessitating retrofits programs manufactured frames previous versions 7 Footnotes edit Software emphasized given appropriate frames FT assemble kind documents technical end-user manuals UML models test cases legal contracts bills-of-materials etc b Jarzabek Li Eliminating Redundancies 'Composition Adaptation' Meta-Programming Technique Proc European Software Eng Conf ACM SIGSOFT Symp Foundations Software Engineering ESEC FSE 03 ACM Press 2003 pp 237 246 received ACM Distinguished Paper Award P G Bassett Frame-Based Software Engineering IEEE Software July 1987 pp 9 -16 C Holmes Evens Review Frame Technology Nov 28 2003 F Sauer Metadata Driven Multi-Artifact Code Generation Using Frame Oriented Programming Workshop Generative Techniques context Model Driven Architecture Oopsla 02 2002 1 b H Basit D C Rajapakse Jarzabek Beyond Templates Study Clones STL General Implications Proc Int'l Conf Software Eng ICSE 05 ACM Press 2005 pp 451 459 b c P G Bassett Framing Software Reuse Lessons Real World Prentice Hall 1997 Jarzabek Effective Software Maintenance Evolution Reuse-based Approach Auerbach 2007 P G Bassett Case Frame-Based Software Engineering IEEE Software July 2007 pp 90 99 b P G Bassett Adaptive Components Software Engineering's Ace Hole Cutter Consortium's Agile Project Management Vol 5 5 Grossman M Mah Independent Research Study Software Reuse tech report QSM Associates 1994 semilattice generic nodes graph structure vary depending parameter values ambiguity reflects mental habit thinking subassembly one component Non-nested subassemblies reassign parameter Hand editing customizations regenerated code spurred invention FT Retrieved http en wikipedia org w index php title Frame_technology_ software_engineering oldid 662580587 Categories Source code generation Navigation menu Personal tools Create accountLog Namespaces Article Talk Variants Views Read Edit View history Search Navigation Main page Contents Featured content Current events Random article Donate Wikipedia Wikipedia store Interaction Help Wikipedia Community portal Recent changes Contact page Tools links Related changes Upload file Special pages Permanent link Page information Wikidata item Cite page Print export Create book Download PDF Printable version Languages Edit links page last modified 16 May 2015 12 39 Text available Creative Commons Attribution-ShareAlike License additional terms may apply using site agree Terms Use Privacy Policy Wikipedia registered trademark Wikimedia Foundation Inc non-profit organization Privacy policy Wikipedia Disclaimers Contact Wikipedia Developers Mobile view"),
('Firefox tracking protection decreases page load time by 44% (xpost /r/firefox)', "Monica Mozilla search user sovereignty tab sovereignty Thursday May 21 2015 Tracking Protection Firefox Web 2 0 Security Privacy 2015 Edited add wrote followup post address comments elsewhere advertising working intended paper reported incorrectly several places cookie blocking Tracking protection blocks traffic cookies paper Georgios Kontaxis got best paper award Web 2 0 Security Privacy workshop today Georgios re-ran performance evaluations top news sites decrease page load time tracking protection enabled even higher 44 Air Mozilla talk last August due prevalence embedded third party content news sites read paper paper last artifact work Mozilla since left employment beginning April believe Mozilla make progress privacy leadership needs recognize current advertising practices enable free content direct conflict security privacy stability performance concerns -- Firefox first foremost user-agent industry-agent Advertising make content free merely externalizes costs way incentivizes malicious incompetent players build things like Superfish infect 1 20 machines ad injection malware create sites require unsafe plugins take twice many resources load quite expensive terms bandwidth power stability take major force disrupt ecosystem motivate alternative revenue models hope Mozilla force Posted Monica Chew 2 29 PM Email ThisBlogThis Share TwitterShare FacebookShare Pinterest 21 comments Patrick Finch said Excellent post Monica missed Mozilla point advertising externalising costs rather making content entirely free good one Alternatives model much needed would add think advertising also helps aggregate transfer value meaning people ultimately consume content May 23 2015 7 00 Edwin said Mozilla really want something revolutionary make micropayments possible I'll gladly pay one cent per article read makes web better place think many It's really sad 20 years web it's still possible best Mozilla fight status quo like banks Visa Mastercard Found new bank lobbying Anything Please make possible May 23 2015 2 48 PM Anonymous said Thanks interesting paper Mozilla could probably use people like May 23 2015 3 22 PM Cria o said guess go config set privacy trackingprotection enabled true right May 23 2015 3 46 PM Anonymous said Thanks highlighting critical issue wrote something recently effects well https medium com InertialLemon why-are-web-pages-so-slow-c2297c475358I've also monitoring via firewall much ad-related traffic comes iOS devices Every app connecting ad tracking servers regardless whether ads present app proliferation web-based apps dessktop mobile may time start treating mitigation OS-level issue app level one fixing one browser using browser isn't going block tracking occurs today May 23 2015 5 25 PM Anonymous said Instead Mozilla sell ad space new-tab page May 23 2015 6 31 PM Anonymous said Mozilla FireFox dead GNU Linux community guys made wrong choices past year betrayed promises openness protecting users freedom May 23 2015 8 17 PM Anonymous said Advertising revenue model publishers use produce publish content It's easy make blanket statements doesn't make content free aren't space lots large publishers entire long-tail web wouldn't exist without advertising Subscriptions answer people would rather convenience free content ads pay cash content disrupting tampering websites malice towards site operators course loading less things improve performance that's simple math messing revenue streams without offering alternative greater web end badly consumers May 23 2015 8 23 PM Unknown said ublock Ghostery Block allProblem solved May 23 2015 8 54 PM Anonymous said Man ads great allow content targeted towards people could potentially afford content towards people might necessarily use product normally world already significantly divided wealth Google behind paywall Assuming someone poor even access service like Google imagine behind paywall Could afford imagine much life advantage someone wealthier would afford idealistic 'superior' ad free world alienating segregated Silicon Valley May 23 2015 9 29 PM kris weston said lol ads great ads ruination mankind corporate takeover pratically everything existence building blocks life hedge funds landlord vote monsanto im sure happy quite upsetting tbh see someone embraced programming ads great wow go watch bill hicks something May 24 2015 5 12 Anonymous said Ok illegal content provider I'm agree visitors disable ads ban usage Mozilla user-agent May 24 2015 5 33 Anonymous said Imagine cable operators disable ads programs stream May 24 2015 5 35 Anonymous said seen mentioned state outright Apple google mobile browsers forcing 44 copntent throats Mobile users-and turn causing mobile volumes spike ads forced mobile users causing purchase higher volume packages data thoughoput class action suit needs started advertisers causing rates rise even go far say 44 like 70 redirects eating bandwidth use end user malicious cash cow May 24 2015 6 36 BonzaiThePenguin said Cool guys making StartPage default search engine instead funded Yahoo deliver targeted ads political posturing May 24 2015 5 43 PM Anonymous said Bizarre post blogger track people cookie May 25 2015 2 15 Vicki Reid said cheap birthday flowers http inonlineshop co uk birthday-flowers htmlCheap Sympathy Flowers http www inonlineshop co uk Sympathy-Flowers htmlCheap New Baby Flowers http www inonlineshop co uk New-Baby-Flowers htmlCheap Anniversary Flowers http www inonlineshop co uk Anniversary-Flowers htmlCheap Romantic Flowers http www inonlineshop co uk Romantic-Flowers html May 26 2015 5 08 Anonymous said It's cute Anonymous users think ads ruining mankind use internet complain Like internet exists free everyone involved network server infrastructure content creation ownership distribution free cute want live utopia stuff exists get use nothing May 26 2015 7 48 Anonymous said Please ignore troll clearly shills IAB associated groups Also clearly someone never read HTML spec regarding priority constituencies actual reason posting though you're saying interesting you've put great thought behind I'm curious balance rather privacy invasive tech built inside walls Mozilla complex http techcrunch com 2015 05 21 mozilla-will-soon-launch-sponsored-suggested-tiles-based-on-your-browsing-history Seems like needs fierce conversations happening either aren't aren't meaningful impact May 26 2015 10 47 Anonymous said http techcrunch com 2015 05 21 mozilla-will-soon-launch-sponsored-suggested-tiles-based-on-your-browsing-history Basicly Mozilla want block Ads pages display ads People create content recieve money Mozilla takes nice May 27 2015 7 45 Anonymous said Imagine cable operators disable ads programs stream sign May 28 2015 2 12 Post Comment Newer Post Older Post Home Subscribe Post Comments Atom Blog Archive 2015 6 May 2 Advertising sustainable utopia Tracking Protection Firefox Web 2 0 Securit April 1 March 3 2014 4 November 1 September 1 August 1 July 1 2013 5 October 1 July 1 May 1 March 1 February 1 Monica Chew View complete profile Simple template Powered Blogger"),
('Lisp as the Maxwells equations of software (2012)', "Skip content DDI Data-driven intelligence Michael main blog Data-driven intelligence blog Writing Lisp Maxwell equations software Michael Nielsen April 11 2012 first day physics graduate school professor class electromagnetism began stepping board wordlessly writing four equations stepped back turned around said something like 1 Maxwell equations four compact equations little work easy understand basic elements equations symbols mean compute relevant quantities easy understand elements equations understanding consequences another matter Inside equations electromagnetism everything antennas motors circuits think understand consequences four equations may leave room come back ace exam end semester Alan Kay famously described Lisp Maxwell equations software describes revelation experienced graduate student studying LISP 1 5 Programmer Manual realized half page code bottom page 13 Lisp Maxwell Equations Software whole world programming lines put hand half page code Kay saw manual re going essay understand half page code means means Lisp Maxwell equations software However won literally work half page code Instead ll something much informative ll create modern fully executable equivalent code Furthermore make essay accessible won assume know Lisp Instead ll teach basic elements Lisp perhaps sounds over-ambitious good news easy learn basic elements Lisp Provided little facility computer programming comfort mathematics learn Lisp works minutes Frankly much easier understanding elements Maxwell equations ll start explaining subset Lisp programming language getting write Lisp code won stop showing write Lisp ve done re going write interpreter Lisp code particular ll create interpreter based beautiful Lisp interpreter written Peter Norvig contains 90 lines Python code interpreter little complex due mostly addition conveniences absent Norvig interpreter code still simple easy understand provided re comfortable reading Python code ll see benefit writing interpreter gives us running interpreter although small thing writing interpreter also deepens understanding Lisp taking would otherwise rather abstract concepts description Lisp giving concrete tangible representations terms Python code data structures making concrete formerly abstract code Lisp interpreter gives us new way understanding Lisp works Python Lisp interpreter running ll write modern equivalent code bottom page 13 LISP 1 5 Programmer Manual code essentially code page 13 considerable advantage also executable wish play code modify improve words living version Maxwell equations software Furthermore new understanding becomes easy fun exercise understand details page 13 LISP Manual second part essay based primarily two sources first chapter LISP 1 5 Manual course also essay Paul Graham postscript explains early ideas behind Lisp Incidentally LISP capitalization used LISP Manual otherwise ll use modern capitalization convention write Lisp great Norwegian mathematician Niels Henrik Abel asked become good mathematics replied studying masters pupils current essay motivated Abel admonishment programmer m beginner almost completely new Lisp essay way work detail ideas masters Alan Kay Peter Norvig Paul Graham course one takes Abel word stop reading essay instead go study works Kay Norvig Graham like certainly recommend taking time study work end essay make recommendations reading However hope essay distinct enough point view interest right hope essay makes thinking Lisp programming fun raises interesting fundamental questions course beginner essay may contain misunderstandings errors perhaps significant ones d welcome corrections pointers discussion elements Lisp next two sections ll learn basic elements Lisp enough develop executable version Alan Kay saw page 13 LISP Manual ll call dialect Lisp develop tiddly Lisp tiddlylisp short Tiddlylisp based subset programming language Scheme one popular modern dialects Lisp show bunch examples Lisp ll learn much type examples play around modifying trying ideas want download file tiddlylisp py local machine Alternately re using git clone entire code repository associated essay file tiddlylisp py Lisp interpreter whose design code ll work later essay Linux Mac start tiddlylisp interpreter typing python tiddlylisp py command line see prompt tiddlylisp re going type code examples interactive Lisp interpreter exit interpreter time hitting Ctrl-C Note interpreter isn terribly complete ll see 153 lines one way incomplete error messages aren informative spend lot time worrying errors try re Windows already Python installed ll need download suggest Python 2 7 code starting interpreter running python tiddlylisp py Note ve tested interpreter Ubuntu Linux Windows Mac first example type following code tiddlylisp interpreter tiddlylisp 2 3 5 expression typed built-in procedure represents addition operation applied two arguments case numbers 2 3 interpreter evaluates result applying 2 3 e adding 2 3 together returning value 5 prints first example extremely simple contains many concepts need understand Lisp expressions procedures arguments evaluation returning value printing ll see many illustrations ideas second example illustrating another built-in procedure time multiplication procedure tiddlylisp 3 4 12 basic story built-in procedure time representing multiplication applied numbers 3 4 interpreter evaluates expression prints value returned 12 One potentially confusing thing first two examples ve called procedures yet many programming languages procedures return value functions m using terminology standard terminology programming language Scheme dialect Lisp tiddlylisp based fact modern dialects Lisp Common Lisp operations would called functions ll stick Scheme useage talk procedures Another example illustrating slightly different type procedure tiddlylisp built-in procedure represents comparison operator tiddlylisp prints result evaluating expression compares constants 10 20 result True since 10 less 20 contrast tiddlylisp since 17 less 12 Many Lisp beginners initially confused way writing basic numerical operations We're familiar expressions 2 3 changed order 2 3 appears strange unfamiliar yet preference infix notation 2 3 prefix notation 2 3 historical accident consequence anything fundamental arithmetic Unfortunately consequence people back away Lisp simply dislike thinking unfamiliar way essay won't get deep enough Lisp see lot concrete detail prefix notation good idea However get one hint tiddlylisp interpreter much simpler using prefix style procedures really strongly dislike prefix notation challenge rewrite tiddlylisp uses infix notation operations prefix notation others you'll find interpreter becomes quite bit complex sense using prefix style everywhere makes Lisp simpler Another useful thing Lisp allows us nest expressions tiddlylisp compute value expression tiddlylisp evaluates nested expressions returning 209 11 19 207 9 23 output outer expression result evaluating course False use tiddlylisp define variables tiddlylisp define x 3 tiddlylisp x 2 6 define used define new variables also assign value variable previously defined tiddlylisp set x 4 tiddlylisp x 4 One question may slightly unusual syntax set might wonder whether exclamation mark means something special - maybe set type hybrid procedure something Actually there's complexity set single keyword like define nothing special It's tiddlylisp allows exclamation marks keyword names there's nothing special going indicated exclamation mark deeper question don't simply eleminate define make set checks whether variable defined already I'll explain little bit later don't note distinction use define define new procedures way similar use define variables Here's example showing define procedure named square I'll unpack what's going first here's code tiddlylisp define square lambda x x x tiddlylisp square 7 49 Ignore first lines see second line procedure square takes single number input returns square number first line code already know enough guess quite bit line works procedure named square defined assigned value expression lambda x x x whatever value might What's new need understand value expression lambda x x x understand let's break expression three pieces lambda x x x We'll understand three pieces separately put back together first piece expression - lambda - simply tells tiddlylisp interpreter expression defining procedure must admit first encountered lambda notation found pretty confusing 2 - thought lambda must variable argument something like it's big fat red flag tiddlylisp interpreter saying Hey procedure definition That's lambda second part expression - x - tells tiddlylisp procedure single argument we're going use temporary name x argument purposes defining procedure procedure definition started instead lambda x y would meant procedure two arguments temporarily labelled x y purposes defining procedure third part expression - x x - meat procedure definition It's evaluate return procedure called actual values arguments procedure substituted place x Taking together value expresion lambda x x x procedure single input returning square input procedure anonymous e doesn't name give name using define line tiddlylisp define square lambda x x x tells tiddlylisp define something called square whose value procedure lambda single argument x procedure returns square argument x x important point variables used defining procedures they're dummy variables Suppose wanted define procedure area would return area triangle arguments base triangle height could using following procedure definition tiddlylisp define area lambda b h 0 5 b h tiddlylisp area 3 5 7 5 would happened we'd earlier defined variable h e g tiddlylisp define h 11 tiddlylisp define area lambda b h 0 5 b h probably won't surprise learn inside procedure definition e immediately lambda b h h treated dummy variable entirely different h outside procedure definition what's called different scope continue following tiddlylisp area 3 h 16 5 area 0 5 times 3 times value h set earlier outside procedure definition point value h 11 area 3 h returns 16 5 There's variation might wonder happens use variables defined outside procedure inside procedure definition instance suppose tiddlylisp define x 3 tiddlylisp define foo lambda y x y happens evaluate foo Well tiddlylisp sensible thing interprets x defined outside procedure definition tiddlylisp foo 4 12 happens procedure next change value x fact changes foo tiddlylisp set x 5 tiddlylisp foo 4 20 words procedure definition lambda y x y x really refer variable x particular value x might given point time Let's dig bit tiddlylisp handles scope dummy variables Let's look happens define variable tiddlylisp define x 5 tiddlylisp x 5 way interpreter handles internally maintains what's called environment dictionary whose keys variable names whose values corresponding variable values interpeter sees first line add new key environment x value 5 interpreter sees second line consults environment looks key x returns corresponding value like think environment interpreter's memory data store stores details variables defined date pretty simple go along defining changing variables interpreter keeps consulting modifying environment necessary define new procedure using lambda interpreter treats variables used definition slightly differently Let's look example tiddlylisp define h 5 tiddlylisp define area lambda b b h tiddlylisp area 2 10 want concentrate procedure definition lambda b b h point interpreter chugging along modifying environment appropriate happens sees lambda though interpreter creates new environment environment called inner environment distinguished outer environment interpreter operating reached lambda statement inner environment new dictionary whose keys initially arguments procedure - case single key b - whose values supplied procedure called recap interpreter sees lambda b b h create new inner environment key b whose value set procedure called evaluating expression b h defines result returned procedure interpreter first consult inner environment finds key b key h fails find h looks instead h outer environment key h indeed defined retrieves appropriate value I've described simple example showing environments work tiddlylisp also allows us procedure definitions nested inside procedure definitions nested inside procedure definitions deal top-level tiddlylisp interpreter operates inside global environment procedure definition creates new inner environment perhaps nested inside previously created inner environment that's appropriate talk inner outer environments left confused fear stage really important gotten gist environments work shouldn't worry details still seem elusive opinion best way understand details abstract discussion instead looking working code tiddlylisp We'll get shortly move onwards armed general impression environments work procedure definitions I've described far evaluate return value single expression use expressions achieve suprisingly complex things ability nest expressions Still would convenient way chaining together expressions doesn't involve nesting way use begin keyword begin especially helpful defining complex procedures I'll give example context tiddlylisp define area lambda r begin define pi 3 14 pi r r line defining procedure called area single argument r value area r value expression begin define pi 3 14 pi r r appropriate value r substituted way tiddlylisp evaluates begin expression evaluates separate sub-expressions consecutively order appear returns value final sub-expression case sub-expression pi r r example get tiddlylisp area 3 28 26 area circle radius 3 simple example might argue makes sense avoid defining pi put 3 14 straight later expression However make intent code less clear trust find easy imagine complex cases makes even sense use multi-part begin expressions especially case since permissible split Lisp expressions multiple lines procedure definition could written define area lambda r begin define pi 3 14 pi r r mention enter tiddlylisp interpreter you'll get errors tiddlylisp interpreter stripped doesn't allow multi-line inputs However tiddlylisp allow load multi-line expressions file - try saving three lines file named area tl running file python tiddlylisp py area tl Tiddlylisp execute code defining area procedure leave interpreter type things like tiddlylisp area 3 28 26 second advantage using begin code variable pi defined inner environment associated lambda expression reason want define pi differently outside scope won't affected definition area Consider example following sequence expressions tiddlylisp define pi 3 tiddlylisp pi 3 tiddlylisp define area lambda r begin define pi 3 14 pi r r tiddlylisp area 1 3 14 tiddlylisp pi 3 words value final pi returned outer global environment inner environment created definition procedure area Earlier discussed define set wondered whether really essential difference Consider following example modify area using set instead define tiddlylisp define pi 3 tiddlylisp pi 3 tiddlylisp define area lambda r begin set pi 3 14 pi r r tiddlylisp area 1 3 14 tiddlylisp pi 3 14 see comparing final line example earlier example really significant difference define set particular define area example set check see whether inner environment contains variable named pi Since doesn't checks outer environment find variable that's set updates we'd used define instead would created completely new variable named pi inner environment leaving pi outer environment untouched final line would returned 3 instead define set gives us quite bit flexibility control environment used expense complication syntax final piece Lisp putting we've learnt together construct nontrivial example tiddlylisp includes keyword used test conditions conditionally return value different expressions Here's example showing use evaluate absolute value variable tiddlylisp define x -2 tiddlylisp x 0 x - 0 x 2 use idea define procedure abs returns absolute value number tiddlylisp define abs lambda x x 0 x - 0 x tiddlylisp abs -2 2 general form expressions cond result alt evaluate expression cond value True return value result otherwise return value alt Note expression cond result alt cond result alt course shouldn't read literally Rather placeholders expressions saw absolute value example remainder essay use use italics indicate placeholder expressions Let conclude section briefly introducing two important Lisp concepts first concept special form section discussed several built-in procedures also user-defined procedures Calls procedures always form proc exp1 exp2 proc procedure name arguments expressions expressions evaluated evaluating individual expression exp1 exp2 passing values procedure However Lisp expressions procedure calls Consider expression define pi 3 14 isn't evaluated calling procedure define arguments given value pi value 3 14 can't evaluated way pi doesn't value yet define isn't procedure Instead define example known special form examples special forms include lambda begin we'll meet later Like define none procedure instead special forms special rule evaluation second concept want briefly introduce list list one basic data structures used Lisp even gives language name - Lisp short list processing fact Lisp expressions we've seen lists expression abs 2 two-element list elements abs 2 delimited spaces parentheses complex expression define abs lambda x x 0 x - 0 x also list case first two elements define abs third element lambda x x 0 x - 0 x sublist turn sublists subsublists Later we'll see use Lisp manipulations lists nontrivial example square roots using elementary arithmetic Let's put together ideas something nontrivial We'll write short tiddlylisp program compute square roots using elementary arithmetical operations addition subtraction multiplication division idea behind program use Newton's method Although Newton's method interesting right I'm including example algorithmic elegance Instead I'm including simple beautiful example Lisp program example comes Abelson Sussman's book Structure Interpretation Computer Programs Here's Newton's method computing square roots works Suppose positive number x whose square root wish compute start making guess square root guess We're going start arbitrarily choosing 1 0 initial value guess principle positive number According Newton's method we'll get improved guess computing guess x guess 2 e taking average guess x guess repeat averaging process enough times we'll converge good estimate square root Let's express ideas Lisp code We'll top starting high level gradually filling details procedures need start absolute top level define sqrt lambda x sqrt-iter 1 0 x sqrt-iter guess x value to-be-defined procedure sqrt-iter takes guess guess square root x keeps improving guess it's good enough estimate square root mentioned start arbitrarily choosing guess 1 0 core algorithm definition sqrt-iter define sqrt-iter lambda guess x good-enough guess x guess sqrt-iter improve guess x x sqrt-iter takes guess checks see whether it's yet good-enough approximation square root x sense made precise sqrt-iter done returns guess otherwise applies sqrt-iter improved guess improve guess x supplied applying Newton's method Incidentally way I've written sqrt-iter it's another example multi-line tiddlylisp expression it's possible enter tiddlylisp interpreter However enter part file sqrt tl along definition sqrt procedures we'll define We'll later use tiddlylisp execute file sqrt tl fill details need understand good-enough improve work Let's start good-enough simply checks whether absolute value square guess within 0 00001 x define good-enough lambda guess x defined absolute value procedure abs squaring procedure square define abs lambda x That's code need good-enough improve simply implement Newton's method define improve lambda guess x average guess x guess average defined obvious way define average lambda x y 0 5 x y write whole program follows define average lambda x y 0 5 x y define improve lambda guess x average guess x guess define square lambda x x x define abs lambda x Save lines file sqrt tl run using python tiddlylisp py sqrt tl Tiddlylisp execute code defining procedures leave interpreter type tiddlylisp sqrt 2 0 1 41421568627 indeed pretty good approximation true square root 1 4142135 writing overall program sqrt tl I've reversed order lines compared initial explanation reason I've done worth discussing see program sqrt tl actually first piece Lisp code ever worked though detail natural way think problem computing square roots Newton's method order explained working top-down fashion starting broad problem gradually breaking attack problem parts first time wrote code assumed needed explain ideas Lisp bottom-up fashion defining procedures like average improve procedure definitions include previously defined procedures meant reversing order code I've shown Taking approach bugged doesn't seem like natural way think implementing Newton's method least problem top-down approach seems natural exploratory programming you'd start defining sqrt sqrt-iter experiment decided reverse order progam reflects natural thinking order define sqrt lambda x sqrt-iter 1 0 x define sqrt-iter lambda guess x good-enough guess x guess sqrt-iter improve guess x x define good-enough lambda guess x Somewhat surprise ran fine Actually code slightly different since using Common Lisp point tiddlylisp tiddlylisp works well It's apparently okay define procedure terms procedure isn't defined later upon close examination code tiddlylisp turns makes perfect sense came surprise Later examine code tiddlylisp I'll set problem asking explain it's okay re-order code think program square root beautiful program course programming languages square root built it's exactly notable elegant program Indeed square root built version Lisp it's trivially possible add square root tiddlylisp like it's simple natural expression Newton's method Peter Deutsch said Lisp programs come close executable mathematics Problems author general point programming language design seems like would often helpful able define procedures terms procedures yet defined languages make possible advantages bring programming language able disadvantages elements Lisp began introduction Lisp focusing elementary arithmetical operations put together could give concrete example Lisp action - square root example last section - good way getting feel Lisp works we're going understand Lisp Maxwell's equations software also need understand Lisp deals expressions lists I'll describe operations section describe operations want discuss distinction haven't drawn much attention That's distinction expression 1 2 value expression case 3 feed valid tiddlylisp expression tiddlylisp interpreter evaluates expression returns value first learning Lisp I'd often get trouble failed keep clear distinction expression value Let give example kind confusion I'd get built-in Lisp procedure called atom defined atom exp returns True value expression exp atomic - number example anything isn't list - returns False otherwise Note exp placeholder expression discussed earlier shouldn't read literally identifier exp I'd look example like atom 5 trouble figuring evaluated True I'd get trouble expression like atom 1 2 I'd look think must return False expression 1 2 atomic it's list Unfortunately it's true expression 1 2 atomic it's irrelevant value atom exp determined whether value exp atomic - since value 1 2 3 You'll much happier Lisper always keep clear distinction expressions value expressions course distinction expressions values appears programming languages reason felt foolish understood causing confusion makes easy make kind mistake Lisp expressions value expressions lists that's write something like atom 1 2 there's real question atom checking whether expression 1 2 atomic it's it's list whether value expression - 3 - atomic yes need pretty careful keep clear meant help I'll pretty pedantic distinction follows writing value exp explicitly distinguish value expression Note however it's quite common people less pedantic informal something like x 2 may well described adding variable x variable y explicit adding value variable x value variable y Alright admonishment way let's turn attention defining final set elementary operations we'll need tiddlylisp Returning expression value quote exp returns expression exp value without evaluating exp clearly demonstrated example tiddlylisp quote 1 2 1 2 opposed value 1 2 course 3 Another example reinforce point quote returns expression literally without evaluating tiddlylisp define x 3 tiddlylisp quote x x value x course 3 Note also quoting doesn't evaluate nested subexpressions e g tiddlylisp quote 1 2 3 1 2 3 quote also used return lists aren't valid Lisp expressions e g tiddlylisp quote 1 2 3 1 2 3 It's worth emphasizing 1 2 3 isn't valid Lisp expression since 1 neither procedure special form - enter 1 2 3 tiddlylisp interpreter give error quote lets us use list 1 2 3 data example could use store 1 2 3 variable tiddlylisp define x quote 1 2 3 tiddlylisp x 1 2 3 way quote lets us work lists data structures Lisp quote computer programming languages don't anything like reason Lisp Lisp allows treat code data data code example object 1 2 treated code e Lisp expression evaluated we've current discussion 1 2 also potentially treated data e list three objects ability treat code data footing wonderful thing means write programs manipulate programs also creates problem need able distinguish expression treated data treated code quote way distinguishing two It's similar way languages use escape characters deal special strings quote way saying Hey follows treated data evaluated Lisp code quote lets us escape Lisp code take expression 1 2 turn data quote 1 2 way quote allows us define Lisp expressions whose values arbitrary Lisp expressions we've focused using Lisp simple arithmetic operations result haven't needed quote get Lisp-as-Maxwell's-equations we're going increasingly focused using Lisp manipulate Lisp code result we'll making frequent use quote reason it's helpful introduce shorthand quote Lisps conventional shorthand use 'exp denote quote exp e exp Lisp expression value 'exp expression exp Unfortunately using shorthand 'exp complicated parsing tiddlylisp interpreter wanted decided instead use different emphasize unconventional shorthand quote exp namely q exp examples quote shortened tiddlylisp q 1 2 1 2 tiddlylisp define x 3 tiddlylisp q x x tiddlylisp q 1 2 3 1 2 3 Testing whether value expression atomic noted atom exp returns True value expression exp atomic otherwise returns False We've already discussed following example tiddlylisp atom 1 2 True it's illuminating see tandem following example illustrates also use quote tiddlylisp atom q 1 2 False first example returns True 1 2 atomic value 3 second example returns False value q 1 2 1 2 list thus atomic way mention atom built-in procedure dialect Lisp tiddlylisp based Scheme I've built atom tiddlylisp we'll see analogous operation used many times code page 13 LISP 1 5 Programmer's Manual course atom procedure easily defined Scheme purposes understanding code page 13 seemed direct simply include atom built-in tiddlylisp Testing whether two expressions evaluate atom empty list eq exp1 exp2 returns True values exp1 exp2 atom empty list eq exp1 exp2 returns False otherwise Note exp1 exp2 value atomic empty list eq exp1 exp2 returns False example tiddlylisp eq 2 1 1 True tiddlylisp eq 3 1 1 False tiddlylisp eq q 1 2 q 1 2 False atom explanation eq quite standard Scheme instead closely matches function eq defined LISP 1 5 Programmer's Manual Getting first item list car exp returns first element value exp provided value exp list Otherwise car exp undefined example tiddlylisp car q 2 3 tiddlylisp car 2 3 first two behaves expected value q 2 3 list 2 3 car returns first element second though car defined tiddlylisp returns error message I've elided reason returns error message value 2 3 5 list car undefined similar way suppose try tiddlylisp car 1 2 3 get error message reason car applied value 1 2 3 considered Lisp expression course value undefined since 1 neither procedure special form right way quote list first tiddlylisp car q 1 2 3 1 see quote used make clear tiddlylisp we're dealing data code evaluated Getting rest list cdr exp returns list containing first element value exp course value exp must list otherwise cdr exp undefined example tiddlylisp cdr q 1 2 3 2 3 According Wikipedia names car cdr origin pretty esoteric facts early implementations Lisp details don't much matter - car stands contents address part register cdr stands contents decrement part register - wanted make point could reasonably wondering Earth names come mnemonic find useful distinguishing two focus difference names two procedures course middle letter - d - keep mind comes d alphabet car extracts element list comes remainder list given us cdr taste mnemonics may vary - don't like mine it's still worth taking minute two come trick remembering distinguishing car cdr course little practice get used won't need mnemonic first it's helpful Appending item start list Provided value exp2 list cons exp1 exp2 returns list containing value exp1 first element followed elements value exp2 example tiddlylisp cons 1 q 2 3 1 2 3 Testing whether expression evaluates empty list null exp returns True exp evaluates empty list otherwise returns False example tiddlylisp null cdr q 1 True since cdr q 1 returns empty list Conditionals cond p1 e1 pn en starts evaluating expression p1 p1 evaluates True evaluate expression e1 return value evaluate p2 True return value e2 none pj evaluates True cond expression undefined That's Lisp we're going need write version Lisp-as-Maxwell's-equations e version code page 13 LISP Manual fact we'll see shortly it's need - included extra features could work examples like sqrt also simply fun make tiddlylisp richer interesting language play course I've described merely subset variations chosen dialect Lisp Scheme important missing ideas learn Lisp Scheme please consult suggestions reading end essay interpreter Lisp we've worked basic elements Lisp let's write simple Lisp interpreter using Python interpreter we'll write based Peter Norvig's lispy interpreter highly recommend read explanation I've given program we'll discuss separate name - tiddlylisp - make easy refer separately Norvig's interpreter please keep mind code we're discussing Norvig's However we're going examine code different angle Norvig we're going take bit bottom-up computer's-eye view looking code executes We'll look code piece piece putting together Let's start interactive interpreter run start implement Python procedure called repl meaning read input evaluate expression print result evaluation loop back beginning also know read-eval-print loop REPL Here's repl procedure together procedure handling errors occur import traceback def repl prompt 'tiddlylisp ' prompt-read-eval-print loop True try val eval parse raw_input prompt val None print to_string val except KeyboardInterrupt print nExiting tiddlylisp n sys exit except handle_error def handle_error Simple error handling repl load print error occurred Here's Python stack trace n traceback print_exc core repl try clause we'll get works shortly look note user presses Ctrl-C raises KeyboardInterrupt exception causes program exit error occurs try block -- say due syntax error Lisp expression parsed due bug tiddlylisp - exception raised Tiddlylisp doesn't deal well errors - simply announces error occurred prints Python stack trace may give hints what's gone wrong obviously long way short truly informative error handling printing stack trace tiddlylisp simply returns prompt type error handling could easily improved we're going invest effort direction Let's look try clause begins taking input prompt passing function parse converts string entered user internal representation e data structure that's convenient Python program work string Here's example shows works parse 7 12 - 8 6 7 12 - 8 6 words nested Lisp lists become Python sublists things like procedures numbers become elements Python list We'll look shortly parse implemented let's finish understanding repl works output parse passed function eval evaluates internal representation expression entered user Provided error occurs result returned val However val format internal representation need convert internal representation back printable Lisp expression using to_string point we've got three functions understand details parse eval to_string I'll explain order starting parse to_string since they're extremely similar we'll get eval Alright let's understand parse works Without ado here's code explanation see Symbol str def parse Parse Lisp expression string return read_from tokenize def tokenize Convert string list tokens return replace ' ' ' ' replace ' ' ' ' split def read_from tokens Read expression sequence tokens len tokens 0 raise SyntaxError 'unexpected EOF reading' token tokens pop 0 ' ' token L tokens 0 ' ' L append read_from tokens tokens pop 0 pop ' ' return L elif ' ' token raise SyntaxError 'unexpected ' else return atom token def atom token Numbers become numbers every token symbol try return int token except ValueError try return float token except ValueError return Symbol token parsing easy understand tokenize first inserts spaces either side parentheses splits string around spaces returning list tokens e non-space substrings read_from takes list removes parentheses instead nesting sublists indicated original parenthesis structure finally atom turns tokens Python ints floats Symbols strings definition appropriate That's parse tiddlylisp little powerful parse would need complex example allowed strings first-class objects language would work tokenize splitting around spaces since would risk splitting string separate tokens kind thing that'd fun include extended version tiddlylisp I've included problem later section don't need first version Let's look to_string works It's much simpler quickly undoing steps taken parsing isa isinstance def to_string exp Convert Python object back Lisp-readable string isa exp list return str exp else return ' ' ' ' join map to_string exp ' ' words internal representation expression list return appropriate stringified version takes care fact may ints floats shall see Booleans internal representation list return whatever get applying to_string elements list appropriate delimiting whitespace parentheses point main thing need complete tiddlylisp eval function Actually that's quite true discussed earlier tiddlylisp also keeps track global environment possibly one inner environments store variable procedure names values eval going make heavy use environments helps look first environments defined They're pretty simple environment bunch keys representing names variables procedures environment corresponding values keys values variables procedures environment also keeps track outer environment caveat global environment outer environment set Python's None environments easily implemented subclass Python dictionaries class Env dict environment dict 'var' val pairs outer Env def __init__ self params args outer None self update zip params args self outer outer def find self var Find innermost Env var appears return self var self else self outer find var see modifications dictionary class 1 environment also keeps track outer environment 2 environment determine whether variable procedure name appears list keys doesn't looks see it's outer environment result find method returns innermost environment variable procedure name appears Note incidentally environment doesn't distinguish variable procedure names Indeed we'll see tiddlylisp treats user-defined procedures variables way procedure variable happens take value lambda expression value Tiddlylisp starts operating particular global environment must defined program We'll creating instance class Env calling function add built-in procedure definitions variables def add_globals env Add built-in procedures variables environment import operator env update ' ' operator add '-' operator sub ' ' operator mul ' ' operator div ' ' operator gt ' ' operator ge ' Incidentally tiddlylisp's version add_globals decided strip many built-in procedures Norvig includes lispy's global environment - it's instructive look Norvig's code add_globals see easy add built-in procedures tiddlylisp want exploratory programming tiddlylisp probably copy Norvig's additional built-in procedures perhaps add us though procedures enough One notable feature global environment variables named True False evaluate Python's Boolean True False respectively isn't standard Scheme Lisps I've done ensures use strings True False get appropriate internal representation global environment set understand eval works code extremely simple simply enumerating different types expressions might evaluating reading modifying environment appropriate It's worth reading rereading code detail understand exactly eval works also comments end Here's code isa isinstance def eval x env global_env Evaluate expression environment isa x Symbol variable reference return env find x x elif isa x list constant literal return x elif x 0 'quote' x 0 'q' quote exp q exp _ exp x return exp elif x 0 'atom ' atom exp _ exp x return isa eval exp env list elif x 0 'eq ' eq exp1 exp2 _ exp1 exp2 x v1 v2 eval exp1 env eval exp2 env return isa v1 list v1 v2 elif x 0 'car' car exp _ exp x return eval exp env 0 elif x 0 'cdr' cdr exp _ exp x return eval exp env 1 elif x 0 'cons' cons exp1 exp2 _ exp1 exp2 x return eval exp1 env eval exp2 env elif x 0 'cond' cond p1 e1 pn en p e x 1 eval p env return eval e env elif x 0 'null ' null exp _ exp x return eval exp env elif x 0 'if' test conseq alt _ test conseq alt x return eval conseq eval test env else alt env elif x 0 'set ' set var exp _ var exp x env find var var eval exp env elif x 0 'define' define var exp _ var exp x env var eval exp env elif x 0 'lambda' lambda var exp _ vars exp x return lambda args eval exp Env vars args env elif x 0 'begin' begin exp exp x 1 val eval exp env return val else proc exp exps eval exp env exp x proc exps pop 0 return proc exps Mostly self-explanatory allow draw attention Norvig deals anonymous procedure definitions using lambda first examined code wondered he'd cope expected would quite complex see extremely simple lambda expressions evaluate appropriate anonymous Python function new environment modified addition appropriate variable keys values Beautiful Tiddlylisp essentially complete point It's convenient finish program providing two ways running tiddlylisp either interactive interpreter mode e REPL loading tiddlylisp program stored separate file start REPL we'll simply run python tiddlylisp py load execute file we'll run python tiddlylisp py filename execution we'd like dropped REPL inspect results experiments main complication need load tiddlylisp code split multiple lines merging lines number opening closing parentheses match Here's code - it's best start bottom code immediately __name__ __main__ import sys def load filename Load tiddlylisp program filename execute start repl error occurs execution stops left repl Note load copes multi-line tiddlylisp code merging lines number opening closing parentheses match print Loading executing f open filename r program f readlines f close rps running_paren_sums program full_line paren_sum program_line zip rps program program_line program_line strip full_line program_line paren_sum 0 full_line strip try val eval parse full_line val None print to_string val except handle_error print nThe line error occurred n break full_line repl def running_paren_sums program Map lines list program list whose entries contain running sum per-line difference number ' ' parentheses number ' ' parentheses count_open_parens lambda line line count -line count paren_counts map count_open_parens program rps total 0 paren_count paren_counts total paren_count rps append total return rps __name__ __main__ len sys argv 1 load sys argv 1 else repl completes code tiddlylisp grand total 153 lines non-comment non-whitespace code one big block commented slightly reordered see pieces fit together tiddlylisp py Based Peter Norvig's lispy http norvig com lispy html copyright Peter Norvig 2010 Adaptations Michael Nielsen See http michaelnielsen org ddi lisp-as-the-maxwells-equations-of-software import sys import traceback Symbol Env classes Symbol str class Env dict environment dict 'var' val pairs outer Env def __init__ self params args outer None self update zip params args self outer outer def find self var Find innermost Env var appears return self var self else self outer find var def add_globals env Add built-in procedures variables environment import operator env update ' ' operator add '-' operator sub ' ' operator mul ' ' operator div ' ' operator gt ' ' operator ge ' ' prompt-read-eval-print loop True try val eval parse raw_input prompt val None print to_string val except KeyboardInterrupt print nExiting tiddlylisp n sys exit except handle_error error handling def handle_error Simple error handling repl load print error occurred Here's Python stack trace n traceback print_exc startup command line __name__ __main__ len sys argv 1 load sys argv 1 else repl Problems Modify tiddlylisp procedure applied number arguments e g 1 2 3 evaluates 6 Earlier implemented square root procedure tiddlylisp add directly tiddlylisp using Python math module's sqrt function earlier implementation sqrt procedure discussed ordering lines code whether it's okay define procedure terms yet-to-be-defined procedure Examine code tiddlylisp explain it's okay procedure sqrt defined terms procedure sqrt-iter isn't defined later Try thing variables e g try running define x y followed define y 1 work Modify tiddlylisp applied one argument - procedure simply negates e g - 2 returns -2 - still computes differences applied two arguments possible write pure tiddlylisp procedure minus minus x returns -x minus x y returns x-y discussion introduced cond stated cond p1 e1 pn en undefined none expressions p1 pn evaluate True Tiddlylisp return case think better way dealing situation add support strings tiddlylisp first examined Norvig's code lispy surprised much learned code course expected learn quite bit - beginner Lisp - learned greatly exceeded expectations might writing interpreter deepen understanding programming language think answer understand abstractions Consider way first explained concept Lisp environments early essay gave general discussion concept related several examples working usual way cope abstractions learning teaching language make abstractions concrete working code examples illustrates consequences abstractions problem although show examples abstraction remains ephemeral Writing interpreter way making programming language's abstractions concrete show million examples illustrating consequences Lisp environment none quite concrete flavour code Python Lisp interpreter code shows explicitly environment represented data structure manipulated commands define writing interpreter way reifying abstractions programming language interpreted Problems gave example environment Lisp abstraction made concrete understand code interpreter Another example abstraction errors code improve tiddlylisp's error handling get something informative Python stack trace something goes wrong One suggestion identify two classes error may occur tiddlylisp programs modify interpreter catches gracefully handles error classes printing informative error messages Peter Norvig's webpage describing interpreter commenters take task writing interpreter Python Here's example give flavour comments code looks nice think implementing Lisp Interpreter Python kind cheating Python high-level language get much free Norvig replies right -- relying many features Python call stack data types garbage collection etc next step would show compiler sort assembly language think either Java JVM Python byte code would good targets We'd also need runtime system GC show compiler PAIP Paradigms Artificial Intelligence book commenter Norvig right sense there's also sense Python interpreter achieves something would achieved program compiled Lisp Java JVM assembler target closer bare metal That's programming languages Python one closest ordinary human language writing Lisp interpreter Python exceptionally clear way explaining Lisp works human doesn't yet understand core concepts Lisp Insofar guess Norvig's intention believe code interpreter primarily intended read humans fact also read computer design constraint fundamental purpose 3 seems kind comment arises really three natural variations question explain Lisp three variations interesting worth answering three different answers first variation explain Lisp person doesn't yet know Lisp I've argued good answer question work examples write simple Python interpreter second variation explain Lisp machine That's question commenter Norvig's blog asking answer question nothing beats writing Lisp interpreter compiler works close bare metal say assembler requiring deal explicitly memory allocation garbage collection there's also third variation question that's best explain Lisp someone already understands core concepts Lisp sounds paradoxical doesn't person definition already understand Lisp it's paradoxical Consider following experience many people learning teaching mathematics best way explain mathematical idea someone new idea using old language old way looking world like explaining Lisp writing Python interpreter person grasped transformative new mathematical idea often deepen understanding re-examining idea within new way looking world re-examination help crystallize deeper understanding similar way writing Lisp interpreter Python may good way explaining Lisp person doesn't yet understand Lisp someone grasps core ideas Lisp may find Python interpreter little clunky explain Lisp within framework Lisp One answer question use Lisp write Lisp interpreter It's task turn Lisp Lisp write Lisp interpreter Lisp Let's think back Alan Kay saw bottom page 13 LISP Manual Although it's written different notation we've used Lisp code fact it's core Lisp interpreter written Lisp procedure evalquote takes Lisp expression input returns value expression section we're going use tiddlylisp write analogue evalquote we'll change name eval course procedure really full interpreter - won't read-eval-print loop one thing - it's difficult extend code full interpreter requires additions tiddlylisp reason follows I'll refer eval procedure interpreter even though it's accurate say it's core interpreter haven't made extension full interpreter partly don't want lengthen already long essay mostly want stick theme Maxwell's equations software reasons I've also limited eval interpreting subset tiddlylisp omitting arithmetical operations concentrating instead procedures manipulating lists treatment section based beautiful essay postscript Paul Graham explains original designer Lisp John McCarthy paper introduced Lisp essay Graham writes fully executable Lisp interpreter one modern dialects Lisp Common Lisp I've based much code Graham's Perhaps main difference treatment Graham's eval written run Common Lisp eval executable tiddlylisp interpreter Lisp we've written lots help Peter Norvig even though code similar perspective quite diferent think gain something different perspective code we'll write longer see page 13 LISP Manual reason code page 13 actually self-contained made use several procedures defined earlier LISP Manual need include procedures final result still little page code Let's start defining helper procedures exp returns True expression exp evaluates False otherwise returns False example tiddlylisp atom q 1 2 True tiddlylisp eq 1 - 2 1 False Here's tiddlylisp code define lambda x x False True append exp1 exp2 takes expressions exp1 exp2 whose values lists returns list formed concatenating lists example tiddlylisp append q 1 2 3 q 4 5 1 2 3 4 5 Here's tiddlylisp code append define append lambda x y null x y cons car x append cdr x y pair exp1 exp2 returns two-element list whose elements value exp1 value exp2 tiddlylisp pair 1 2 1 2 tiddlylisp pair 1 2 1 3 1 Here's tiddlylisp code pair define pair lambda x y cons x cons y q Note use pair somewhat unconventional - usual approach Lisp use list exp1 exp2 exp3 construct list whose values values respective expressions reason haven't done tiddlylisp doesn't allow us define Lisp procedures variable number arguments Note also procedure pair I've defined confused one Scheme's standard procedures pair different purpose won't use current essay Problems modify tiddlylisp list exp1 exp2 exp3 indeed return list whose values values respective expressions I'll introduce class helper procedures concatenations two applications car cdr example procedure cdar applies car first followed cdr cdar exp value cdr car exp notation cdar mnemonic whose key elements middle two letters d indicating cdar get apply reverse order cdr car might wonder it's reverse order - answer reverse order corresponds visual syntactic order order left-to-right procedures appear expression cdr car exp another example procedure caar defined caar exp value car car exp eval it'll helpful use several procedures define caar lambda x car car x define cadr lambda x car cdr x define cadar lambda x cadr car x define caddr lambda x cadr cdr x define caddar lambda x caddr car x next helper procedure called pairlis pairlis exp1 exp2 takes expressions exp1 exp2 whose values lists length returns list formed pairing values corresponding elements example tiddlylisp pairlis q 1 2 3 q 4 5 6 1 4 2 5 3 6 Here's tiddlylisp code pairlis define pairlis lambda x y null x q cons pair car x car y pairlis cdr x cdr y We'll call list pairs produced pairlis association list gets name final helper procedure assoc procedure takes association list treats lookup dictionary easiest way explain means example tiddlylisp define pairlis q 1 2 3 q 4 5 6 tiddlylisp 1 4 2 5 3 6 tiddlylisp assoc 2 5 words assoc looks key 2 first entry one pairs list value finds pair returns second element pair Stated abstractly suppose expression exp1 value appears first entry one pairs association list value exp2 assoc exp1 exp2 returns second entry pair explanation code assoc extremely simple simpler even pairlis define assoc lambda x y eq caar y x cadar y assoc x cdr y won't explain assoc works you're looking good exercise applying caar similar procedures it's worth spending time carefully understand assoc works helper procedures place write equivalent code page 13 LISP Manual includes core procedure eval together couple extra helper procedures evcon evlis Here's code define eval lambda e cond atom e assoc e atom car e cond eq car e q car car eval cadr e eq car e q cdr cdr eval cadr e eq car e q cons cons eval cadr e eval caddr e eq car e q atom atom eval cadr e eq car e q eq eq eval cadr e eval caddr e eq car e q quote cadr e eq car e q q cadr e eq car e q cond evcon cdr e True eval cons assoc car e cdr e eq caar e q lambda eval caddar e append pairlis cadar e evlis cdr e define evcon lambda c cond eval caar c eval cadar c True evcon cdr c define evlis lambda m cond null m q True cons eval car m evlis cdr m examine eval works want give examples eval action want follow along examples first loading program defining eval tiddlylisp full source typing examples interpreter understand use eval examples need clear meaning arguments e Lisp expression whose value Lisp expression want evaluate eval Lisp expression whose value association list representing environment particular first element pair name variable procedure second element value variable procedure I'll often refer environment Suppose example wanted use eval evaluate expression car q 1 2 We'll assume we're evaluating empty environment variables extra procedures defined we'd need pass eval expressions values car q 1 2 quoting values tiddlylisp eval q car q 1 2 q 1 see get right result 1 explained detail build expression eval q car evaluated hadn't gone explanation expression would appeared quite complicated lots quoting going reason eval evaluating expression value another expression much evaluation going it's wonder there's many q's floating around working carefully examples becomes transparent Here's example showing use variables environment tiddlylisp eval q cdr x q x 1 2 3 2 3 Unpacking quoting see it's evaluating expression cdr x environment variable x whose value 1 2 3 result course 2 3 Here's example showing use procedure defined environment tiddlylisp eval q cddr q 1 2 3 4 5 q cddr lambda x cdr cdr x 3 4 5 words environment stores procedure cddr whose value lambda x cdr cdr x eval returns result applying cddr expression whose value 1 2 3 4 5 course 3 4 5 also use eval define evaluate anonymous procedure case one effect cadr tiddlylisp eval q lambda x car cdr x q 1 2 3 4 q 2 significant drawback eval pretty limited Lisp vocabulary see running tiddlylisp eval q eq 1 1 q first line looks like perfectly valid Lisp - fact perfectly valid Lisp problem eval doesn't recognize 1 - level sophistication we're working really understands lists variables procedures tries treat 1 variable procedure look environment 1 isn't environment there's error message Fixing problem modifying eval isn't terribly difficult 4 However stay close LISP Manual I'll leave kludge get around issue add 1 key environment example use tiddlylisp eval q eq 1 1 q 1 1 True tiddlylisp eval q eq 1 2 q 1 1 2 2 False exactly expected didn't see problem earlier examples eval simply involved list manipulations didn't require us evaluate numbers 1 Incidentally here's amusing variation kludge tiddlylisp eval q eq 1 2 q 1 1 2 1 True words tell interpreter emphatically enough 1 2 start believe put eval paces let's add bundle tests basic functionality It's exhaustive test suite least checks basic procedures working expect don't need read following test code exhaustive detail although read least first lines get feeling what's going Note lines need add something like 1 2 environment order eval able evaluate occurred example define assert-equal lambda x y x y define assert-not-equal lambda x y assert-equal x y assert-equal eval q x q x test-value q test-value assert-equal eval q y q y 1 2 3 q 1 2 3 assert-not-equal eval q z q z 1 2 3 q 1 2 3 assert-equal eval q quote 7 q q 7 assert-equal eval q atom q 1 2 q False assert-equal eval q eq 1 1 q 1 1 True assert-equal eval q eq 1 2 q 1 1 2 2 False assert-equal eval q eq 1 1 q 1 1 True assert-equal eval q car q 3 2 q q 3 assert-equal eval q cdr q 1 2 3 q q 2 3 assert-not-equal eval q cdr q 1 2 3 4 q q 2 3 4 assert-equal eval q cons 1 q 2 3 q 1 1 2 2 3 3 q 1 2 3 assert-equal eval q cond atom x q x-atomic atom y q y-atomic q True q nonatomic q x 1 y 3 4 q x-atomic assert-equal eval q cond atom x q x-atomic atom y q y-atomic q True q nonatomic q x 1 2 y 3 q y-atomic assert-equal eval q cond atom x q x-atomic atom y q y-atomic q True q nonatomic q x 1 2 y 3 4 q nonatomic assert-equal eval q lambda x car cdr x q 1 2 3 4 q 2 tiddlylisp perhaps easiest way use test code append bottom file define eval load file memory tests run automatically everything working properly tests evaluate True eval work Looking back code see it's big cond statement whose value determined various conditions evaluate True cond statement starts cond atom e assoc e understand accomplishes helpful remember we're interested value e e Let's use e' denote value e e e' Lisp expression actually want evaluate using eval condition check whether e' atomic returns value corresponding variable procedure environment exactly we'd expect Let's look next line big outer conditional statement atom car e stage know e' isn't atomic since already checked e' must list line checks see whether first element e' atom multiple possibilities could special form quote built-in procedure car else procedure that's defined environment check possibilities case evaluate another nested conditional statement checks different cases instance first line nested conditional checks see we're applying procedure car proceeds appropriately eq car e q car car eval cadr e words first symbol e' car extract whatever expression passed car using cadr e evaluate expression using eval cadr e finally extract first element using car eval That's exactly we'd expect car rest nested conditional statement works along similar lines check final line interesting deserves comment True eval cons assoc car e cdr e line evaluated expression e' start special form built-in procedure instead starts name procedure defined environment understand returned note car e retrieves name procedure assoc car e retrieve procedure environment cons assoc car e cdr e appends arguments procedure whole thing evaluated It's quite simple elegant Moving back outer cond statement final condition follows eq caar e q lambda eval caddar e append pairlis cadar e evlis cdr e occurs evaluating quoted expression form lambda x exp first line simply checks indeed seeing lambda expression caddar e extracts expression exp body lambda expression evaluate context environment modified appending new variable names extracted cadar e using pairlis pair values evaluated using evlis work it's quite simple neat - fact speaks marvellous elegance design presented LISP Manual ultimately due John McCarthy won't escaped attention Lisp eval similar eval wrote earlier Python Tiddlylisp somewhat different dialect Lisp eval interprets implementation recognizably similar matter taste think Lisp implementation elegant It's true Lisp code superficially little complex - relies concepts outside everyday experience procedures caar cadar makes possessing greater conceptual economy using concepts car cdr cond write interpreter understands concepts Here's full code Lisp interpreter tiddlylisp append test code given save single file eval tl define caar lambda x car car x define cadr lambda x car cdr x define cadar lambda x cadr car x define caddr lambda x cadr cdr x define caddar lambda x caddr car x define lambda x x False True define append lambda x y null x y cons car x append cdr x y define pair lambda x y cons x cons y q define pairlis lambda x y null x q cons pair car x car y pairlis cdr x cdr y define assoc lambda x y eq caar y x cadar y assoc x cdr y define eval lambda e cond atom e assoc e atom car e cond eq car e q car car eval cadr e eq car e q cdr cdr eval cadr e eq car e q cons cons eval cadr e eval caddr e eq car e q atom atom eval cadr e eq car e q eq eq eval cadr e eval caddr e eq car e q quote cadr e eq car e q q cadr e eq car e q cond evcon cdr e True eval cons assoc car e cdr e eq caar e q lambda eval caddar e append pairlis cadar e evlis cdr e define evcon lambda c cond eval caar c eval cadar c True evcon cdr c define evlis lambda m cond null m q True cons eval car m evlis cdr m It's instructive compare eval Kay saw page 13 LISP 1 5 Programmer's Manual Obviously we've written longer half-page However mentioned earlier half-page omitted code helper procedures caar append defined earlier LISP Manual direct comparison code eval evcon evlis procedures compare code LISP Manual differences jump obvious LISP Manual's evalquote apply eval combined one procedure form organization adopted Paul Graham's eval makes much easier see going outer cond particular outer cond simple structure 1 expression we're tring evaluate atom return value otherwise 2 expression must list check see first element atom case must special form procedure evaluated appropriately inner cond otherwise 3 must dealing lambda expression Condition 3 interesting syntax we're using condition step 3 could simply expressed True eq caar e q lambda since it's remaining possibility would sense simplify speed code However would also make harder understand intent code Something may note present LISP Manual missing eval special form label label used LISP Manual give names procedures procedure definitions could refer recursively It's couple lines add back haven't done you'd like it's fun challenge add functionality back I've given problem Problems could add facility eval procedure definitions refer you're trouble problem get hint looking code page 13 LISP Manual complete solution problem may found Paul Graham's essay roots Lisp nice little interpreter However many limitations even compared tiddlylisp can't basic arithmetic doesn't cope integers much less complicated data types doesn't even way defineing variables doesn't return modified environment Still already contains many core concepts Lisp really executable counterpart Alan Kay saw page 13 LISP 1 5 Manual learn interpreter Lisp Lisp intellectual exercise it's cute beyond Let's think analogous question Python e writing Python function return value Python expressions sense solving problem trivial one-liner since Python built-in function called eval capable evaluating Python expressions however eliminated eval similar functions Python Well Python version eval would much complicated Lisp eval Python much less regular language Lisp makes much complicated deal Python code contrast Lisp extremely simple syntax designed manipulate code data reflected simplicity interpreter Beyond code eval beautiful expression core ideas Lisp written Lisp It's true eval implements incomplete version Lisp little elaboration add support arithmetic advanced control structures - everything needed make essentially complete basic Lisp need little poetic license say Maxwell's equations electromagnetism sense look compact little program understand consequences understand Lisp Lisp universal means inside lines code computer - everything Space Invaders computer models climate Google search engine sense elegant little program really Maxwell's equations software Problems Outline proof eval q exp returns value exp environment expressions exp environments underlying Lisp interpreter correct little theorem considered formal way stating eval contains Lisp reason ask outline proof various elements statement aren't defined well need make rigorous result still compelling outline proof possible Extend code given eval implement full read-eval-print loop require extend tiddlylisp cope input output perhaps sort looping worked eval tl easy work first chapter LISP 1 5 Programmer's Manual Download LISP manual work first chapter including code page 13 Problems author possible modify Lisp-in-Lisp interprets tiddlylisp Note require modification tiddlylisp Acknowledgements Thanks Jen Dodd many helpful discussions Footnote 1 I'm paraphrasing since 17 years ago believe I've reported essence comments correctly I've taken one liberty supplying set examples antennas motors circuits since don't recall examples gave Incidentally comments contain common error took several years sort thinking Maxwell's equations actually don't completely specify electromagnetism need augment one extra equation Lorentz force law perhaps unfair characterize error since it's common useage equate Maxwell's equations electromagnetism I've doubt professor aware nuance Nonetheless useage common it's correct really need Lorentz force law well nuance creates slight quandary essay title essay suggests explores famous remark made Alan Kay called Maxwell's equations software presume making remark Kay following common useage equating consequences Maxwell's equations whole electromagnetism quandary one hand don't wish perpetuate useage hand think Kay's formulation stimulating elegant I'll adopt useage admonishment read Maxwell's equations synonomous Maxwell's equations plus Lorentz force law set five equations really specify whole classical electromagnetism 2 first encountered lambda Python Lisp believe would perplexed reason even I'd first encountered Lisp 3 hat tip Abelson Sussman famously wrote programs must written people read incidentally machines execute 4 simplest solutions think 1 give eval ability determine key environment 2 give eval ability recognize numbers approaches seem also require making modifications tiddlylisp reading Much Alan Kay's writing may found website Viewpoints Research Institute also recommend browsing list recommended reading Lisp enjoys plethora insightful beautifully written books essays many freely available online essay course based principally Peter Norvig's essay basic Lisp interpreter lispy I've also drawn ideas followup essay Norvig's describes sophisticated Lisp interpreter essays accompanying code marvellously elegant well worth working Norvig's works also worth time first three chapters Norvig's book Paradigms Artificial Intelligence Programming excellent introduction Common Lisp principal inspiration current essay Paul Graham's essay Roots Lisp postscript file explains John McCarthy's early ideas Lisp essay may viewed attempt remix ideas Norvig's Graham's essays attempt better understand Alan Kay's remark Lisp-as-Maxwell's-Equations also recommend Graham's book Lisp contains excellent discussion Lisp macros many subjects book seems print thanks Graham publisher Prentice Hall text entire book freely available online Note still working Lisp yet read completion true books mention Seibel Abelson Sussmann Although Lisp marvellous book it's written people new Lisp gain familiarity suggest working first three chapters Norvig's book mentioned that's available take look Peter Seibel's book Practical Common Lisp It's freely available link gives easily readable introduction Common Lisp Finally must recommend wonderful book Abelson Sussman Structure Interpretation Computer Programs Among things it's introduction Scheme dialect Lisp it's much it's think programming It's famous book long time avoided looking I'd somehow picked impression little dry started reading found impression completely false utterly gripped Much Lisp Paradigms Artificial Intelligence Programming also quality Abelson Sussmann's book freely available online Interested Please subscribe blog follow Twitter may also enjoy reading new book open science Reinventing Discovery Uncategorized 37 Comments Misha permalink Book form Jacques Chester permalink Consider publishing Kindle book could easily see paying dollar privilege well-laid copy Michael Nielsen permalink Thanks suggestion hadn considered idea ll certainly keep idea mind future essays consider one stavros permalink really easy http www leanpub com free ten minutes Give shot Nick Chaiyachakorn permalink didn start throwing copies Jackson heads people m suspicious Michael Nielsen permalink broke tradition fact use Jackson Darius Bacon permalink couple problems might enjoy 1 Change Lisp system multiple people use cooperate without undue vulnerability Give user separate global environment way send Lisp values Alice run Bob code Carol data without risking party privacy integrity http mumble net jar pubs secureos explores wrote example interactions https github com darius consp blob master tests scm 2 Modify lis py Tiddlylisp represent data lower-level form pair type tag value example cons pair might become pair index index offset array pairs problem ll post answer add simple garbage collector clean SICP chapter 5 also gets Michael Nielsen permalink seem like nice problems problem 1 wonder recent work homomorphic encryption would help solution problem 2 would nice basis improving tiddlylisp e g making arithmetic conformant Scheme standard notions exact arithmetic moment tiddlylisp simply uses Python standard numerical types operators correspond well Scheme approach Darius Bacon permalink homomorphic encryption d like know answer mind interpreter obey basic invariants build higher-level invariants care top Basically calling procedure affect data environment plus arguments passed properties care might data structure never gets clobbered money conserved user vote like exploiting conservation laws Maxwell equations Hewitt Baker called basic rule locality law hopefully easier engineer approach hasn followed much languages designed code access global mutable state default re kind screwed start hear EcmaScript Harmony designed ideas mind though m told similar ideas work web thinking URL object reference etc want Alice vote might mail value define vote lambda choice really-vote choice set vote f keeping really-vote close vest excellent protecting integrity less useful privacy adversaries typically observe covert channels messages encoded resource usage Maybe homomorphic encryption come didn much time problem 2 today ll post tomorrow Darius Bacon permalink Actually send example lambda choice vote choice oops Posting secure-coding examples midnight good way maximize educational value Darius Bacon permalink version lower-level data representation still needing work https github com darius sketchbook blob master lispy lllis py Paul McJones permalink URL http www softwarepreservation org projects LISP book LISP 201 5 20Programmers 20Manual needs pdf end Michael Nielsen permalink Paul Already caught thanks Arne Hanssen permalink Great post really like way use quote Alan Kay post think also worth mentioning Allan Kay problems concept special forms McCarthy Lisp evaluator Alan Kay says deep flaws logical foundations mean pure language supposed based functions important components lambda expressions quotes conds functions instead called special forms Lisp Kay saw promise metastructures actual universal model computation led Alan Kay invention Smalltalk programing language 5 keywords true false nil super self Fadi E permalink still problem us using language LISP program beautiful language ever essence programming languages yet spurned favor Java others shame Enrico Spinielli permalink see generate formulae LaTeX think would benefit using MathJax http www mathjax org posts e need generate images anymore scale font page Also really enjoyed post would signal another nice minimalist lisp implementation http piumarta com software lysp Ian Piumarta reasearcher Kay VPRI Also work Maru http piumarta com software maru -develops goes mathemathical essentials software Thanks Gareth permalink nice work Michael d add Little Schemer suggested reading list peculiar effective least introduction thinking functionally Ralph Moritz permalink beautifully written essay d love available PDF Bystroushaak permalink Thank ve reading article month finally finished today Thanks ve finally realized mathematicians means beauty talk math Michael Nielsen permalink Bystroushaak Thankyou much generous thoughtful compliment m glad enjoyed essay Al permalink Hi Michael currently reading book Quantum computation quantum communication enjoy reading update book latest greatest findings field Also Lisp like Lisp functional programming language agree Maxwell equations software May say Lambda Calculus foundation functional degree non-functional languages Maxwell equations software even saying going far Software engineering FAR simple underlying theory May theory computation Turing machines etc way think modern programming languages like Haskel much better capable lisp Also suggest computational version quantum computing book using Mathematica Maple symbolic computing package Mathlab also would great software engineer currently taking Quantum Computation courses online Prof Vazirani Coursra cooperate creating symbolic package QC QCOMM thanks Al Glen Kaukola permalink repl shouldn loop go inside try block ve mucking code seems keyboard exception isn always caught Glen Kaukola permalink Yeah nevermind m filling stubs get go Jan Stette permalink wanted say thank fantastic post one best pieces writing software ever come across ve spent time working points covered written summary blog http www janvsmachine net 2013 07 writing-simple-lisp-interpreter-in-scala html case anyone interested Michael Nielsen permalink Thanks Jan kind words know Scala looks like nice implementation Franklin Chen permalink Lisp also tremendous part education programmer especially studied SICP altered life d like mention SICP something else came along also changed entire mindset programmer discovery statically typed functional languages felt much like Scheme added whole new level expression ML dialects Standard ML OCaml Haskell m going make bold claim Lisp Maxwell equations 19th century formulation ML Haskell Maxwell equations expressed using differential forms therefore fundamental physicist know mean Michael Nielsen permalink Thanks comment Franklin ve never used ML Haskell etc really try sound fascinating Konrad permalink nice post Michael best keep writing Trackbacks Pingbacks Interesting reads Separallel Lisp Maxwell equations software blog 'irr Functional Programming Lisp Maxwell equations software James's Musings Lisp Maxwell equations software OMY Implementing Programming Languages Javascript JsConf Argentina Angel Java Lopez Blog Alexander Kruel Computer Science Programming Books Resources Python Links News Resources 6 Angel Java Lopez Blog Interprete Lisp Python Ok panico Language Start-up Late Bound Comments closed Follow Michael Subscribe blog Michael's main blog Follow Michael Twitter places web GitHub Delicious Delicious research links book project Delicious research links last book Google Plus Books Reinventing Discovery New Era Networked Science Errata Quantum Computation Quantum Information projects Essays TEDxWaterloo video open science Quantum computing determined Polymath wiki Recent Posts backpropagation algorithm works Reinventing Explanation Bitcoin protocol actually works Neural Networks Deep Learning first chapter live Bloom filters work way Recent CommentsRich Bitcoin protocol actually worksKaitlyn correlation doesn imply causation Kaitlyn correlation doesn imply causation learned Build Peace Jonathan Stray Build Peace correlation doesn imply causation learned Build Peace Jonathan Stray Build Peace correlation doesn imply causation LinklogOSI Internet Wasn - IEEE SpectrumHow TCP IP won OSI Interesting part discussion openness means exactly advantageous process open Lester Dent's Master Plot FormulaMore Moorcock vein It's easy imagine reaction critic holding nose writing formula turn around regarding Dent plausibly Moorcock student theoretician structure that's pretty powerful point view course word-by-word Dent poor Write Book Three Days Lessons Michael MoorcockFascinating intrinsically commentary commentary first part interest people desire easy way write accurately written also clearly genuine interest part many guy know don't storytelling may Gossip PhilosophyKevin Kelly interviews Brian Eno Slow get going fascinating Eno proposes process product says it's ease seduction means often gets things first talks putting Africa computers generally makes many interesting comments Susan Sontag interviewConveys well much force personality intellect Sontag brought writing DocumentariesVisual Storytelling Digital Video DocumentaryA brief skim suggests good basic guide making documentaries Great Ecstasy Woodcarver Steiner - Werner HerzogDocumentary Wolfgang Steiner one world's top ski-jumpers 1970s spine documentary sequence extraordinary shots Steiner's jumps taken pair high-speed cameras Inge Druckrey Teaching SeeA reminder diversity life passion learning insight people pour calligraphy font design design generally Indie Game Movie 2012 - IMDbStriking level emotional commitment uncertainty turmoil part creators Step Liquid 2003 Remarkable survey cutting edge surfing see origins tow-rope surfing surfers pulled jet skis waves big paddle use hydrofoil designs put board foot two _above_ wave even use weather stations Search Archives April 2014 January 2014 December 2013 November 2013 September 2012 August 2012 June 2012 April 2012 March 2012 February 2012 January 2012 July 2011 June 2011 Copyright 2015 Titan Theme Theme Foundry"),
('# Finding mutual friends with OpenMPI and map-reduce', "Mateusz Kaczanowski Personal BlogCreating software love it's care strive better every day HOME CONTACT SVN QUESTIONS Categories Android development ARM AS3 AIR FLEX development C CUDA Golang Linux development Miscellaneous Perl Cgi programming Web technologies Finding mutual friends OpenMPI map-reduce Mateusz Kaczanowski ARM C Linux development Web technologies May 25 2015 0 Comment 0 List contents 1 Preface 2 Goal 3 OpenMPI cluster 4 Twitter user data 5 Logic done 6 Implementation 7 Makefile 8 Compile run 9 Summary 10 Demo 1 Preface Embedded devices RaspberryPI enough power running hadoop jobs really complex peace software Instead trying adapt decided use lightweight solution OpenMPI map-reduce MPI designed distributed computations run map-reduce framework Let 2 Goal Using Twitter users data re going find mutual friends mutual subscribers pair users make faster use OpenMPI map-reduce framework Cluster contains 4 odroid u3 machines witch 8Gb flash emmc memory 2 OpenMPI cluster Repeat steps node 1 Install OpenMPI could take 30min wget http www open-mpi org software ompi v1 8 downloads openmpi-1 8 1 tar gz tar -zxvf openmpi-1 8 1 tar gz cd openmpi-1 8 1 configure --prefix usr local --enable-mpirun-prefix-by-default --enable-static make sudo make install 2 Install mrmpi wget http www sandia gov sjplimp tars mrmpi tar gz tar xzvf mrmpi tar gz cd mrmpi- cd src make mpicc make install 3 Enable access via SSH master node odroid0 ssh-keygen -t dsa ssh-copy-id mpiuser odroid1 Slave 1 ssh-copy-id mpiuser odroid2 Slave 2 4 Login machine confirm everything setup correctly 4 Twitter user data first download extract data wget https snap stanford edu data twitter_combined txt gz gunzip -d twitter_combined txt gz file contains 1768149 edges 81306 nodes would wasteful read whole file every time data needed HDFS storing single file Single file split parts stored across nodes Segments also redundant operate low-end embedded ARM devices rather won use HDFS Instead may split file N parts copy nodes might use scp rsync even nfs split file split -l 10000 twitter_combined txt tsplit mkdir data mv tsplit data end node odroid0-3 access data directory N files 10000 lines 5 Logic done map reduce may find tons articles google simplest explanation works presented picture image source Using map reduce operations going present data form B - D Z F G D Z F G mutual friends B tuple order follow steps 1 Transform data form - Friend list e g D Z E 2 Perform Cartesian product D - D Z E Z - D Z E E - D Z E 3 Reduce tuples form D - D Z E Z E F G 4 Intersect friends lists D - Z E 5 Save output IMHO hadoop API far simpler use OpenMPI uses extra operations addition map reduce sort explained collate method MapReduce object aggregates KeyValue object across processors converts KeyMultiValue object gather method MapReduce object collects key value pairs KeyValue object spread across processors form new KeyValue object subset nprocs processors 6 Implementation notes according code 1 Input data form 1 2 1 3 1 4 2 1 2 3 2 FriendTuple structure used key 3 Value formed array integers value 0 arr_length 4 Output may written file OUTPUT_TO_FILE 1 send memcached OUTPUT_TO_FILE 0 5 enable printing keys screen set PRINT_OUTPUT 1 include mpi h include stdio h include stdlib h include string h include sys stat h include mapreduce h include keyvalue h include sstream include libmemcached memcached h define MAX b b b define MIN b b b define PRINT_OUTPUT 0 define OUTPUT_TO_FILE 0 using namespace MAPREDUCE_NS typedef struct int f1 f2 FriendTuple void fileread int char KeyValue void void transform_user_friends char int char int int KeyValue void void transform_intersect char int char int int KeyValue void void first_map uint64_t char int char int KeyValue void void swap int int int cmpfunc const void const void int find_intersection int int int int int void output uint64_t char int char int KeyValue void void set_key char const char void set_key FriendTuple int int memcached_st memc void initialize_memcached memcached_server_st servers NULL memcached_return rc memcached_server_st memcached_servers_parse char server_strings memc memcached_create NULL servers memcached_server_list_append servers 192 168 4 106 11211 rc rc memcached_server_push memc servers rc MEMCACHED_SUCCESS fprintf stderr Couldn't add server n memcached_strerror memc rc int main int narg char args MPI_Init narg args int nprocs MPI_Comm_rank MPI_COMM_WORLD MPI_Comm_size MPI_COMM_WORLD nprocs narg 1 0 printf Syntax mfriends file1 file2 n MPI_Abort MPI_COMM_WORLD 1 initialize_memcached MapReduce mr new MapReduce MPI_COMM_WORLD mr- verbosity 1 mr- timer 1 mr- memsize 1 mr- outofcore 1 MPI_Barrier MPI_COMM_WORLD double tstart MPI_Wtime 0 printf 1 Map form - B C D n mr- map narg-1 args 1 0 1 0 fileread NULL int nfiles mr- mapfilecount mr- collate NULL mr- reduce transform_user_friends NULL MPI_Barrier MPI_COMM_WORLD double tstop MPI_Wtime 0 printf 2 Map form B - B C D n mr- map mr first_map NULL 0 printf 3 Reduce form B - B C D B D E n mr- collate NULL mr- reduce transform_intersect NULL OUTPUT_TO_FILE char fname output txt FILE fp fopen fname w fp NULL printf ERROR Could open output file MPI_Abort MPI_COMM_WORLD 1 mr- gather 1 mr- map mr output void fp fclose fp delete mr 0 printf Time process d files d procs g secs n nfiles nprocs tstop-tstart MPI_Finalize void fileread int itask char fname KeyValue kv void ptr struct stat stbuf int flag stat fname stbuf flag 0 printf ERROR Could query file size n MPI_Abort MPI_COMM_WORLD 1 int filesize stbuf st_size FILE fp fopen fname r char text new char filesize 1 int nchar fread text 1 filesize fp text nchar ' 0' fclose fp const char whitespace n f r 0 char id strtok text whitespace char value strtok NULL whitespace int id1 int id2 id id1 atoi id id2 atoi value kv- add char id1 sizeof int char id2 sizeof int id strtok NULL whitespace value strtok NULL whitespace delete text void transform_user_friends char key int keybytes char multivalue int nvalues int valuebytes KeyValue kv void ptr size_t t_block_len sizeof int nvalues 1 int t_block new int t_block_len int t_len t_block 0 int t_friends t_block 1 t_len nvalues int values int multivalue int 0 t_len t_friends values kv- add key keybytes char t_block t_block_len sizeof int delete t_block void set_key char key const char value memcached_return rc rc memcached_set memc key strlen key value strlen value time_t 0 uint32_t 0 rc MEMCACHED_SUCCESS fprintf stderr Couldn't store key n memcached_strerror memc rc PRINT_OUTPUT printf M_SET KEY VALUE n key value void set_key FriendTuple ft int fl int len char key 100 int cx snprintf key 100 m_ d_ d ft- f1 ft- f2 cx 0 cx 100 std stringstream int 0 len std to_string fl 1 len len 0 11111 const char value str c_str set_key key value else fprintf stderr Couldn't add key m_ d_ d n ft- f1 ft- f2 void transform_intersect char key int keybytes char multivalue int nvalues int valuebytes KeyValue kv void ptr FriendTuple ft FriendTuple key int t_block int t_len int t_len2 int t_friends int t_friends2 nvalues 1 1 user u1 u2 u2 u1 t_block int multivalue t_len t_block 0 t_friends t_block 1 t_block int multivalue valuebytes 0 t_len2 t_block 0 t_friends2 t_block 1 int res_block new int MIN t_len t_len2 1 arr Length intersection int intersection_array res_block 1 int intersection_array_len res_block 0 intersection_array_len find_intersection t_friends t_len t_friends2 t_len2 intersection_array OUTPUT_TO_FILE kv- add key keybytes char res_block intersection_array_len 1 sizeof int else set_key ft intersection_array intersection_array_len delete res_block void output uint64_t itask char key int keybytes char value int valuebytes KeyValue kv void ptr FILE fp FILE ptr FriendTuple ft FriendTuple key int t_block int value int t_len t_block 0 int t_friends t_block 1 mutual friends fprintf fp d d ft- f1 ft- f2 int j 0 j t_len j fprintf fp d t_friends j fprintf fp n PRINT_OUTPUT printf d d ft- f1 ft- f2 int j 0 j t_len j printf d t_friends j printf n int find_intersection int a1 int s1 int a2 int s2 int iarr int 0 j 0 k 0 s1 j s2 a1 a2 j else a1 a2 j j else iarr k a1 j k return k int cmpfunc const void const void b return int - int b void swap int int b b int tmp b b tmp Pair B - B C D void first_map uint64_t itask char key int keybytes char value int valuebytes KeyValue kv void ptr int t_block int value int t_len t_block 0 int t_friends t_block 1 qsort t_friends t_len sizeof int cmpfunc Executed diff procs FriendTuple ft memset ft 0 sizeof FriendTuple int 0 t_len ft f1 int key ft f2 t_friends swap ft f1 ft f2 kv- add char ft sizeof FriendTuple char t_block valuebytes 7 Makefile CC mpicc -m64 CPP mpic -m64 CCFLAGS -g -O -std gnu 11 -Wall -I src LINK mpic LINKFLAGS -g -O -lmemcached USRLIB src libmrmpi_mpicc SYSLIB mfriends mfriends mfriends o USRLIB LINK LINKFLAGS mfriends o USRLIB SYSLIB -o mfriends clean rm o mfriends o cpp CPP CCFLAGS -c 8 Compile run np number processes host hosts IPs target machines make mpirun --allow-run-as-root -np 16 --host odroid0 odroid1 odroid2 odroid3 mfriends data 9 Summary Test conducted 4 machines odroid u3 running max 4 processes Results procs time 1 623 784 2 562 679 3 202 538 4 179 679 5 197 639 6 262 464 7 56 529 8 34 286 9 31 052 10 31 041 11 28 649 12 26 256 13 23 924 14 23 61 15 22 775 16 21 538 Total time process 421000 tuples 16 cores 4 machines equals 21 538 Results last reduce operations collected master node saved disk IMHO quite good result expected fairly worse performance 10 Demo Tags C hadoopmap reducempimutual friendsopen mpi Building ARM cluster Part 3 Docker fleet etcd Distribute containers Related Articles Bilinear interpolation nvidia CUDA C 02 Feb 2013 POSTSCOMMENTSTAGS POSTSCOMMENTSTAGS POSTS Finding mutual friends OpenMPI map-reduce Building ARM cluster Part 3 Docker fleet etcd Distribute containers Building ARM cluster Part 2 Create write system image goback Building ARM cluster Part 1 Collecting wiring powering devices One-wire DS1820 thermometer BeagleBone Black libmicrohttpd COMMENTSRadek Novotn BeagleBone Black C GPIO library beginnersMateusz Kaczanowski Building ARM cluster Part 3 Docker fleet etcd Distribute containers Alexey Raga Building ARM cluster Part 3 Docker fleet etcd Distribute containers Christian Schmitt Build dynamic DNS service GO James Howard BeagleBone Black C GPIO library beginners TAGSAndroid Android-x86 Archlinux ARM Asus X53SJ Audio Authorisation BeagleBoneBlack bilinear Binary Tree C cpp cuda Cyanogenmod Debian DSDT Flex FLV gcc Graphiz Grok HTC Magic iATKOS ML2 interpolation Kernel Kext Kibana Linux LogStash MacOs MacOs X nsight parallel Perl PHP QProcess Qt4 Repo Tool sdl Tags Valgrind Video Virtualbox YouTube Zend AMF Social bar Social bar Latest demo Latest demoComing soon Links Blogroll Adobe Open Source Arch Mobile Linux Cyanogenmod Listwy Przypod ogowe MyDevil Pawe Dubi ski XdaDevelopers Proudly powered WordPress Theme DW Minion DesignWall"),
('Baeldung Weekly Review 21', "Navigation Baeldung Java Spring Web Development tutorials HomeMain MenuStart HereRESTPERSISTENCESECURITYAboutMarketing ExperimentsFull ArchiveWrite Baeldung Return Content Baeldung Weekly Review 21 Eugen Paraschiv May 22 2015 Weekly Review you're new may want get Spring Development Report Thanks visiting usually post Dev stuff Twitter - follow Follow baeldungAt beginning 2014 decided track reading habits share best stuff Baeldung 2014 quite year covering week review ve lot reading make sure cover curate stuff value actually worth reading Let know comments re finding reviews interesting useful go 1 Spring Java Java 8 Spring 4 Adoption Going m running poll see Java 8 Spring 4 getting adopted across industry takes couple seconds vote please Testing Angular Application Angular JS Spring Security Part VIIIThis installment covers testing single page Angular Spring app Jasmine run tests locally wire CI environment m sure ll give one try sooner rather later Publish Software Artifacts Maven CentralNice practical overview steps follow releasing artifact Maven Central Also worth reading Hibernate NONSTRICT_READ_WRITE CacheConcurrencyStrategy work Akka samples scala Spring Java 9 Track 2016 Java 8 Replace traditional loops IntStreams Java 8 Concurrency Tutorial Atomic Variables ConcurrentMap Make Mistake Developing SPIWebinars presentations Reactive Application Design High Volume Multi-dimensional Temporal Data Series Groovy Vampires Combining Groovy REST NoSQL moreTime upgrade Spring Social 1 1 1 Released Spring Social 1 1 2 Released Spring Batch 3 0 4 RELEASE available IntelliJ IDEA 14 1 4 EAP 141 1192 Available Log4j 2 3 released NetBeans 8 1 New Noteworthy Spring Apache Hadoop 2 2 RC1 released2 Technical Graphite vs Grafana Build Best Monitoring Architecture ApplicationThe lay land monitoring solutions sending data receiving displaying nicely Graphite nice tool ve making extensive use past truth damn ugly especially play around Kibana High Availability Mere MortalsThis must-read haven spent years Ops work Keep things simple provide good base build 3 Musings Hire 0x EngineersI always like pragmatic thinking practical advice Also worth reading Low Cost Legacy Help4 ComicsAnd favorite Dilberts week Cure Optimism Must Find Antidote Whiner5 Pick WeekEarlier year introduced Pick Week section Weekly Review re already email list got pick already hope enjoyed share review unlock right Time another solid podcast lots great take-aways especially recent episodes Business Freelancing Podcast Get 3 Spring eBooks Download 3 eBooks - Build App Right Way CLICK DOWNLOAD FREE COPY Build Web App Spring prototype 90 quickly Privacy Policy hate SPAM promise keep email address safe Caching Spring New eBook REST Services Spring Join 9 500 engineers SPAM CATEGORIESSpringJavaGuavaSecurityRESTPersistenceHttpClientJacksonMavenExceptionsTestingWeekly Review SERIESJava Back Basics TutorialJackson JSON TutorialHttpClient 4 TutorialREST Spring TutorialSpring Persistence TutorialSecurity Spring BAELDUNGAbout BaeldungMeta BaeldungThe Full ArchiveWrite BaeldungThe GalleryCoding Illustrations"),
('Three Virtues - According to Larry Wall, the original author of the Perl programming language, there are three great virtues of a programmer; Laziness, Impatience and Hubris', "Three Virtues According Larry Wall 1 original author Perl programming language three great virtues programmer Laziness Impatience Hubris Laziness quality makes go great effort reduce overall energy expenditure makes write labor-saving programs people find useful document wrote don't answer many questions Impatience anger feel computer lazy makes write programs don't react needs actually anticipate least pretend Hubris quality makes write maintain programs people won't want say bad things 1 Quoted Programming Perl 2nd Edition O'Reilly Associates 1996"),
('Linux kernel initialization. Part 10. Last steps.', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 692 Star 6 091 Fork 383 0xAX linux-insides Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Permalink branch master Switch branches tags Branches Tags master Nothing show Nothing show linux-insides Initialization linux-initialization-10 md 0xAX May 24 2015 Create linux-initialization-10 md 1 contributor Users contributed file 0xAX Raw Blame History 474 lines 360 sloc 30 183 kb Kernel initialization Part 10 End linux kernel initialization process tenth part chapter linux kernel initialization process previous part saw initialization RCU stopped call acpi_early_init function part last part Kernel initialization process chapter let's finish call acpi_early_init function init main c see following code ifdef CONFIG_X86_ESPFIX64 init_espfix_bsp endif see call init_espfix_bsp function depends CONFIG_X86_ESPFIX64 kernel configuration option understand function name something stack function defined arch x86 kernel espfix_64 c prevents leaking 31 16 bits esp register returning 16-bit stack First install espfix page upper directory kernel page directory init_espfix_bs pgd_p init_level4_pgt pgd_index ESPFIX_BASE_ADDR pgd_populate init_mm pgd_p pud_t espfix_pud_page ESPFIX_BASE_ADDR define PGDIR_SHIFT 39 define ESPFIX_PGD_ENTRY _AC -2 UL define ESPFIX_BASE_ADDR ESPFIX_PGD_ENTRY PGDIR_SHIFT Also find Documentation arch x86_64 mm unused hole ffffff0000000000 - ffffff7fffffffff 39 bits esp fixup stacks unused hole we've filled page global directory espfix pud next step call init_espfix_random init_espfix_ap functions first function returns random locations espfix page second enables espfix current CPU init_espfix_bsp finished work see call thread_info_cache_init function defined kernel fork c allocates cache thread_info size less PAGE_SIZE THREAD_SIZE PAGE_SIZE void thread_info_cache_init void thread_info_cache kmem_cache_create thread_info THREAD_SIZE THREAD_SIZE 0 NULL BUG_ON thread_info_cache NULL endif already know PAGE_SIZE _AC 1 UL PAGE_SHIFT 4096 bytes THREAD_SIZE PAGE_SIZE THREAD_SIZE_ORDER 16384 bytes x86_64 next function thread_info_cache_init cred_init kernel cred c function allocates space credentials like uid gid etc void __init cred_init void cred_jar kmem_cache_create cred_jar sizeof struct cred 0 SLAB_HWCACHE_ALIGN SLAB_PANIC NULL credentials read Documentation security credentials txt Next step fork_init function kernel fork c fork_init function allocates space task_struct Let's look implementation fork_init First see definitions ARCH_MIN_TASKALIGN macro creation slab task_structs allocated ifndef CONFIG_ARCH_TASK_STRUCT_ALLOCATOR ifndef ARCH_MIN_TASKALIGN define ARCH_MIN_TASKALIGN L1_CACHE_BYTES endif task_struct_cachep kmem_cache_create task_struct sizeof struct task_struct ARCH_MIN_TASKALIGN SLAB_PANIC SLAB_NOTRACK NULL endif see code depends CONFIG_ARCH_TASK_STRUCT_ACLLOCATOR kernel configuration option configuration option shows presence alloc_task_struct given architecture x86_64 alloc_task_struct function code work even compiled x86_64 Allocating cache init task see call arch_task_cache_init function fork_init void arch_task_cache_init void task_xstate_cachep kmem_cache_create task_xstate xstate_size __alignof__ union thread_xstate SLAB_PANIC SLAB_NOTRACK NULL setup_xstate_comp arch_task_cache_init initialization architecture-specific caches case x86_64 see arch_task_cache_init allocates space task_xstate represents FPU state sets offsets sizes extended states xsave area call setup_xstate_comp function arch_task_cache_init calculate default maximum number threads set_max_threads MAX_THREADS default maximum number threads define FUTEX_TID_MASK 0x3fffffff define MAX_THREADS FUTEX_TID_MASK end fork_init function initalize signal handler init_task signal- rlim RLIMIT_NPROC rlim_cur max_threads 2 init_task signal- rlim RLIMIT_NPROC rlim_max max_threads 2 init_task signal- rlim RLIMIT_SIGPENDING init_task signal- rlim RLIMIT_NPROC know init_task instance task_struct structure contains signal field represents signal handler following type struct signal_struct first two lines see setting current maximum limit resource limits Every process associated set resource limits limits specify amount resources current process use rlim resource control limit presented struct rlimit __kernel_ulong_t rlim_cur __kernel_ulong_t rlim_max structure include uapi linux resource h case resource RLIMIT_NPROC maximum number process use RLIMIT_SIGPENDING - maximum number pending signals see cat proc self limits Limit Soft Limit Hard Limit Units Max processes 63815 63815 processes Max pending signals 63815 63815 signals Initialization caches next function fork_init proc_caches_init kernel fork c function allocates caches memory descriptors mm_struct structure beginning proc_caches_init see allocation different SLAB caches call kmem_cache_create sighand_cachep - manage information installed signal handlers signal_cachep - manage information process signal descriptor files_cachep - manage information opened files fs_cachep - manage filesystem information allocate SLAB cache mm_struct structures mm_cachep kmem_cache_create mm_struct sizeof struct mm_struct ARCH_MIN_MMSTRUCT_ALIGN SLAB_HWCACHE_ALIGN SLAB_PANIC SLAB_NOTRACK NULL allocate SLAB cache important vm_area_struct used kernel manage virtual memory space vm_area_cachep KMEM_CACHE vm_area_struct SLAB_PANIC Note use KMEM_CACHE macro instead kmem_cache_create macro defined include linux slab h expands kmem_cache_create call define KMEM_CACHE __struct __flags kmem_cache_create __struct sizeof struct __struct __alignof__ struct __struct __flags NULL KMEM_CACHE one difference kmem_cache_create Take look __alignof__ operator KMEM_CACHE macro aligns SLAB size given structure kmem_cache_create uses given value align space see call mmap_init nsproxy_cache_init functions first function initalizes virtual memory area SLAB second function initializes SLAB namespaces next function proc_caches_init buffer_init function defined fs buffer c source code file allocate cache buffer_head buffer_head special structure defined include linux buffer_head h used managing buffers start bufer_init function allocate cache struct buffer_head structures call kmem_cache_create function previous functions calcuate maximum size buffers memory nrpages nr_free_buffer_pages 10 100 max_buffer_heads nrpages PAGE_SIZE sizeof struct buffer_head equal 10 ZONE_NORMAL RAM 4GB x86_64 next function buffer_init - vfs_caches_init function allocates SLAB caches hashtable different VFS caches already saw vfs_caches_init_early function eighth part linux kernel initialization process initialized caches dcache directory-cache inode cache vfs_caches_init function makes post-early initialization dcache inode caches private data cache hash tables mount points etc details VFS described separate part see signals_init function function defined kernel signal c allocates cache sigqueue structures represents queue real time signals next function page_writeback_init function initializes ratio dirty pages Every low-level page entry contains dirty bit indicates whether page written set Creation root procfs preparations need create root proc filesystem call proc_root_init function fs proc root c start proc_root_init function allocate cache inodes register new filesystem system err register_filesystem proc_fs_type err return wrote dive details VFS different filesystems chapter see chapter VFS we've registered new filesystem system call proc_self_init function TOfs proc self c function allocates inode number self proc self directory refers process accessing proc filesystem next step proc_self_init proc_setup_thread_self setups proc thread-self directory contains information current thread create proc self mounts symllink contains mount points call proc_symlink mounts NULL self mounts couple directories depends different configuration options ifdef CONFIG_SYSVIPC proc_mkdir sysvipc NULL endif proc_mkdir fs NULL proc_mkdir driver NULL proc_mkdir fs nfsd NULL defined CONFIG_SUN_OPENPROMFS defined CONFIG_SUN_OPENPROMFS_MODULE proc_mkdir openprom NULL endif proc_mkdir bus NULL proc_mkdir tty NULL return proc_mkdir tty ldisc NULL end proc_root_init call proc_sys_init function creates proc sys directory initializes Sysctl end start_kernel function describe functions called start_kernel missed improtant generic kernel initialization stuff depend different kernel configurations taskstats_init_early exports per-task statistic user-space delayacct_init - initializes per-task delay accounting key_init security_init initialize diferent security stuff check_bugs - makes fix architecture-dependent bugs ftrace_init function executes initialization ftrace cgroup_init makes initialization rest cgroup subsystem etc Many parts subsystems described chapters That's Finally passed long-long start_kernel function end linux kernel initialization process runned first process yet end start_kernel see last call - rest_init function Let's go ahead First steps start_kernel rest_init function defined source code file start_kernel function file init main c beginning rest_init see call two following functions rcu_scheduler_starting smpboot_thread_init first rcu_scheduler_starting makes RCU scheduler active second smpboot_thread_init registers smpboot_thread_notifier CPU notifier read CPU hotplug documentation see following calls kernel_thread kernel_init NULL CLONE_FS pid kernel_thread kthreadd NULL CLONE_FS CLONE_FILES kernel_thread function defined kernel fork c creates new kernel thread see kernel_thread function takes three arguments Function executed new thread Parameter kernel_init function Flags dive details kernel_thread implementation see chapter describe scheduler need say kernel_thread invokes clone need know create new kernel thread kernel_thread function parent child thread use shared information filesystem start execute kernel_init function kernel thread differs user thread runs kernel mode two kernel_thread calls create two new kernel threads PID 1 init process PID 2 kthread already know init process Let's look kthread special kernel thread allows init different parts kernel create another kernel threads see output ps util ps -ef grep kthradd alex 12866 4767 0 18 26 pts 0 00 00 00 grep kthradd Let's postpone kernel_init kthreadd go ahead rest_init next step created two new kernel threads see following code rcu_read_lock kthreadd_task find_task_by_pid_ns pid init_pid_ns rcu_read_unlock first rcu_read_lock function marks beginning RCU read-side critical section rcu_read_unlock marks end RCU read-side critical section call functions need protect find_task_by_pid_ns find_task_by_pid_ns returns pointer task_struct given pid getting pointer task_struct PID 2 got kthreadd creation kernel_thread next step call complete function complete kthreadd_done pass address kthreadd_done kthreadd_done defined static __initdata DECLARE_COMPLETION kthreadd_done DECLARE_COMPLETION macro defined define DECLARE_COMPLETION work struct completion work COMPLETION_INITIALIZER work expands definition completion structure structure defined include linux completion h presents completions concept Completions code synchronization mechanism provide race-free solution threads must wait process reached point specific state Using completions consists three parts first definition complete structure DECLARE_COMPLETION second call wait_for_completion call function thread called continue execute wait thread call complete function Note call wait_for_completion kthreadd_done beginning kernel_init_freeable wait_for_completion kthreadd_done last step call complete function saw kernel_init_freeable function executed kthreadd thread set kthreadd set see three following functions rest_init init_idle_bootup_task current schedule_preempt_disabled cpu_startup_entry CPUHP_ONLINE first init_idle_bootup_task function kernel sched core c sets Scheduling class current process idle class case void init_idle_bootup_task struct task_struct idle idle- sched_class idle_sched_class idle class low priority tasks tasks runned processor run anything besides tasks second function schedule_preempt_disabled disables preempt idle tasks third function cpu_startup_entry defined kernel sched idle c calls cpu_idle_loop kernel sched idle c cpu_idle_loop function works process PID 0 works background Main purpose cpu_idle_loop usage idle CPU cycles one process run process starts work one process idle scheduling class set current task idle call init_idle_bootup_task function idle thread useful work checks active task switch static void cpu_idle_loop void 1 need_resched chapter scheduler moment start_kernel calls rest_init function spawns init kernel_init function process become idle process time look kernel_init Execution kernel_init function starts call kernel_init_freeable function kernel_init_freeable function first waits completion kthreadd setup already wrote wait_for_completion kthreadd_done set gfp_allowed_mask __GFP_BITS_MASK means already system running set allowed cpus mems CPUs NUMA nodes set_mems_allowed function allow init process run CPU set_cpus_allowed_ptr set pid cad Ctrl-Alt-Delete preparation booting CPUs call smp_prepare_cpus call early initcalls do_pre_smp_initcalls initialization SMP smp_init initialization lockup_detector call lockup_detector_init initialize scheduler sched_init_smp see call following functions - do_basic_setup call do_basic_setup function kernel already initialized moment comment says finally start real work do_basic_setup reinitialize cpuset active CPUs initialization khelper - kernel thread used making calls userspace within kernel initialize tmpfs initialize drivers subsystem enable user-mode helper workqueue make post-early call initcalls see openinng dev console dup twice file descriptors 0 2 do_basic_setup sys_open const char __user dev console O_RDWR 0 0 pr_err Warning unable open initial console n void sys_dup 0 void sys_dup 0 using two system calls sys_open sys_dup next chapters see explanation implementation different system calls opened initial console check rdinit option passed kernel command line set default path ramdisk ramdisk_execute_command ramdisk_execute_command init Check user's permissions ramdisk call prepare_namespace function init do_mounts c checks mounts initrd sys_access const char __user ramdisk_execute_command 0 0 ramdisk_execute_command NULL prepare_namespace end kernel_init_freeable function need return kernel_init next step kernel_init_freeable finished execution async_synchronize_full function waits asynchronous function calls done call free_initmem release memory occupied initialization stuff located __init_begin __init_end protect rodata mark_rodata_ro update state system SYSTEM_BOOTING system_state SYSTEM_RUNNING tries run init process ramdisk_execute_command ret run_init_process ramdisk_execute_command ret return 0 pr_err Failed execute error d n ramdisk_execute_command ret First checks ramdisk_execute_command set kernel_init_freeable function equal value rdinit kernel command line parameters init default run_init_process function fills first element argv_init array static const char argv_init MAX_INIT_ARGS 2 init NULL represents arguments init program call do_execve function argv_init 0 init_filename return do_execve getname_kernel init_filename const char __user const __user argv_init const char __user const __user envp_init do_execve function defined include linux sched h runs program given file name arguments pass rdinit option kernel command line kernel starts check execute_command equal value init kernel command line parameter execute_command ret run_init_process execute_command ret return 0 panic Requested init failed error d execute_command ret pass init kernel command line parameter kernel tries run one following executable files try_to_run_init_process sbin init try_to_run_init_process etc init try_to_run_init_process bin init try_to_run_init_process bin sh return 0 way finish panic panic working init found Try passing init option kernel See Linux Documentation init txt guidance That's Linux kernel initialization process finished Conclusion end tenth part linux kernel initialization process tenth part last part describes initialization linux kernel wrote first part chapter go steps kernel initialization started first architecture-independent function - start_kernel finished launch first init process system missed details different subsystem kernel example almost cover linux kernel scheduler see almost anything interrupts exceptions handling etc next part start dive different kernel subsystems Hope interesting questions suggestions write comment ping twitter Please note English first language really sorry inconvenience find mistakes please send PR linux-internals Links SLAB xsave FPU Documentation security credentials txt Documentation x86 x86_64 mm RCU VFS inode proc man proc Sysctl ftrace cgroup CPU hotplug documentation completions - wait completion handling NUMA cpus mems initcalls Tmpfs initrd panic Previous part Jump Line Go Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('IO Stock - Marketplace for Developers: Sell your library programmed in any language', 'Toggle navigation Sign Join Marketplace Developers Developers Developers power create amazing code code useful others time capacity create time share code profit Sell libraries programmed language simple clear license Code Fun Profit love code much want project stay alive supporting Get paid already Register Featuring nLogger nLogger high performance Node js logging library print messages module name current line number know called print messages color print parameters message configured file Read WinkDotNet WinkDotNet allows NET Framework developers using compatible language control devices exposing Thermostat LightBulb Lock Switch WinkHub interfaces Wink API Read NET MVC 5 Starter Kit Web Developers Jump start NET application MVC 5 Starter Kit starter template saves many hours work includes features needed core web app functionality Start coding custom features application without wasting time building basic user account features like account registration login forgot password email templates update profile web security manage users roles Read Add Library 2014 - 2015 IO Stock - Rights Reserved Follow us Terms Service Privacy Policy Improve IO Stock Contact'),
('If Eventual Consistency seems hard, wait till you try MVCC', "Xaprb Stay Curious Home Posts Essential Books Regex Toolkit Staying Secure Online Ultimate Notebook Ultimate Pen 2015 Baron Schwartz Contact moc brpax norab Twitter LinkedIn Powered Hugo RSS Feed Xaprb Eventual Consistency Seems Hard Wait Till Try MVCC Mon Dec 8 2014 Programming Databases sound familiar One great lies NoSQL databases re simple Simplicity done wrong makes things lot harder complicated develop operate Programmers operations staff end reimplementing badly things database Nobody argued line reasoning vigorously trying defend relational databases especially darkest years ca 2009-2010 NoSQL still meant SQL DAMMIT sorts NoSQL databases sprouting massively overhyped valid arguments NoSQL false economy simplicity arguments relational databases complexity hold true truth database really simple Databases lot functionality behaviors even simple databases require deep knowledge use well reliability correctness performance important Eventual Consistency Hard Eventual consistency hard work developers bear extra burden suppose Dynamo paper best source cite Dynamo targets design space always writeable data store requirement forces us push complexity conflict resolution reads order ensure writes never rejected next design choice performs process conflict resolution done data store application conflict resolution done data store choices rather limited One trivially quote context argue bunch database logic ends reimplemented application read time everywhere read occurs Indeed sometimes extreme occur use cases might actually need check reconcile conflicting updates every single read find lots examples type complexity similar systems Riak documentation lofty-sounding phrases like causal context dotted version vectors sound like one would need PhD use system doesn challenged way many NoSQL advocates would respond tradeoffs necessary distributed systems perhaps bring CAP Theorem Jepsen forth kinds topics similar Schroedinger Cat double-slit experiments whatnot Relatively ignorant people like bring around pool table argue try sound smart without knowing much Distributed systems hard denying better way Simple Relational Systems Anyway distributed systems theory eventual consistency enough make long simplicity good old relational database isn Everyone knows servers massively powerful days favorite relational database choice claimed capable scaling vertically incredibly large-scale applications keep simple Let talk word simplicity Simplicity relational systems achieved concurrency Add concurrency complexity distributed systems comes home roost distributed concurrent fundamentally solving problems fact unless re running single-writer single-reader database single-core server maybe even m sure actually distributed system inside server Everything distributed Sorry I'm impressed serializable isolation via single writer mutex Preetam Jinka PreetamJinka November 25 2014 Concurrent operation isn nice-to-have systems given way many relational systems handle concurrency nifty little thing called Multi-Version Concurrency Control MVCC way simpler eventual consistency Sarcasm alert works little like four standard transaction isolation levels kinds constraints tradeoffs defines kinds bad inconsistent behaviors aren allowed happen REPEATABLE READ isolation level lot people consider ideal get read snapshots let see unchanging view database time Even changing underneath implemented keeping old row versions longer needed isolation levels READ COMMITTED bad protect developer complexity underlying implementation allow true ACID experience 1 true ACID experience Atomicity Consistency Isolation Durability Back REPEATABLE READ isolation level approved Holy See really simple Everything appears like user system developer work database logically re supposed think transactions happening concurrently Clearly much better eventually consistent databases right Rabbit-Hole MVCC Unfortunately relational databases MVCCs far utopia reality MVCC way complex ve described MVCC ACID properties intertwined complex ways first problem comes ACID properties four properties almost universally misunderstood almost bad CAP theorem look definitions every single time always wind asking difference Consistency Isolation definitions seem like one halfway consistent way think isolation 2 Next isolation levels Every database implements differently lot disagreement right way implement isolation levels must issue standards written standards leave lot unspecified databases pretty opinionated contrast PostgreSQL says emphasis mine reason PostgreSQL provides three isolation levels sensible way3 map standard isolation levels multiversion concurrency control architecture MySQL via InnoDB InnoDB supports transaction isolation levels described using different locking strategies enforce high degree consistency default REPEATABLE READ level operations crucial data ACID compliance important relax consistency rules READ COMMITTED even READ UNCOMMITTED situations bulk reporting precise consistency repeatable results less important minimizing amount overhead locking SERIALIZABLE enforces even stricter rules REPEATABLE READ used mainly specialized situations XA transactions troubleshooting issues concurrency deadlocks glance sounds like MySQL InnoDB asserts four levels sensibly implemented contradiction PostgreSQL documentation ll dig later moment enough note InnoDB MVCC behavior similar Oracle PostgreSQL still docs say things like somewhat Oracle-like isolation level respect consistent nonlocking reads experience know Microsoft SQL Server locking multiversion concurrency model different yet least four different implementations different behaviors haven even gotten databases example Jim Starkey failed Falcon storage engine MySQL going use pure MVCC contradistinction InnoDB mixed MVCC whatever means Falcon naturally also quirks MVCC implementation Let dig implementations bit see really situation InnoDB MVCC InnoDB MVCC works high level keeping old row versions long re needed able recreate consistent snapshot past transaction originally saw locking rows modified least four different scenarios explore one isolation level various edge cases Quirks let call obvious case look REPEATABLE READ default designed let select set rows repeatedly see rows every subsequent select long keep transaction open docs say consistent reads within transaction read snapshot established first read Sounds elegant beautiful turns ugly really really fast locking reads SELECT UPDATE LOCK SHARE MODE UPDATE DELETE statements locking depends whether statement uses unique index unique search condition range-type search condition unique index unique search condition InnoDB locks index record found gap search conditions InnoDB locks index range scanned using gap locks next-key locks block insertions sessions gaps covered range hell happened abstraction leaked problem due several logical necessities implementation details solely one MVCC model trying balance bunch things going concurrently logical contradictions go away matter sophisticated implementation going edge cases handled special exceptions behavior implementation details leak inevitably seeing One logical necessities example modify latest version row eventually least try update old version version contained consistent snapshot re going get trouble eventually one truth conflicting versions data aren allowed presented user eventual consistency reason various kinds operations cause confront hard questions implementation disallow updating rows snapshot out-of-date version e version reality diverged latest version latest version latest committed version latest uncommitted version latest mean recently updated clock time update transaction highest sequence number vary isolation levels implementation allows updating rows out-of-date supposing previous points resolved happens leak isolation level hence breaking consistency within transaction fail transaction allow updating old version fail commit time happens transaction fails fail presented user InnoDB used deadlock roll back whole transaction later changed roll back failed statement Fundamentally going run problems resolved various levels confusion complexity also note InnoDB actually tries go beyond SQL standard standard allows phantom reads REPEATABLE READ InnoDB uses next-key locking gap locking avoid bring REPEATABLE READ closer SERIALIZABLE without obnoxious locking implied SERIALIZABLE PostgreSQL thing ve barely scratched surface complexities InnoDB handles transactions locking isolation levels MVCC kidding large amount documentation official manual much requires serious study understand beyond lot officially documented example blog post one InnoDB authors explains various performance optimizations impact index operations might seem unrelated every access InnoDB makes data interact MVCC rules implements implications locking deadlocks Locking complex topic InnoDB list goes Works PostgreSQL Sensibly apparently - Well seriously lot less experience PostgreSQL quite clear PostgreSQL documentation writers could find lots support claim attempting implement four standard isolation levels least way InnoDB sensible PostgreSQL documentation unlike MySQL documentation largely limited single page Read cursor isolation docs Oracle PG InnoDB PG docs clear others probably Tech writing hard markcallaghan markcallaghan October 31 2014 First PostgreSQL uses READ COMMITTED default means SELECT rows within transaction wait another transaction modifies commits SELECT ll see changes Whether OK decide worth noting lot people run MySQL InnoDB way lots bugs special behaviors end making isolation levels unusable various reasons various features used MySQL think Mark Callaghan tweet embedded largely true even PostgreSQL docs clear things hard parse first part excerpt contradict second part Emphasis mine SELECT query without UPDATE SHARE clause sees data committed query began never sees either uncommitted data changes committed query execution concurrent transactions effect SELECT query sees snapshot database instant query begins run However SELECT see effects previous updates executed within transaction even though yet committed Also note two successive SELECT commands see different data even though within single transaction transactions commit changes execution first SELECT Even PostgreSQL apparently less complicated MVCC implementation thorny questions careful reading meaning becomes clear see improve way issue remains subtle topics inherently require close attention detail One elegantly put points documentation page remark Consistent use Serializable transactions simplify development MySQL PostgreSQL Many systems implement type MVCC per name rely multiple versions records rows deal various conflicts multiple versions various ways complex less behavior developer sees heavily influenced underlying implementation developers deal re going use one systems competently must know intricacies saw consulting MySQL users Many developers including written applications fall afoul MVCC implementation rules results Performance problems Availability problems Deadlocks errors Bugs Horrible subtle bugs way app uses database systems m aware avoid problems use strategies single-writer designs contrary proponents say generally scale well Many MyISAM reinvented database developers understand MyISAM doesn scale Back Eventual Consistency contrast nightmare complexity m sure eventual consistency really hard developers deal developers always need aware exact behavior implementation re writing relational ve studied quite eventually consistent databases although ll admit ve spent career elbows deep InnoDB seems hard believe Cassandra Riak really complex develop InnoDB use cases serve well Eventually consistent easy ridicule though one favorites Eventually consistent FiveWordTechHorrors Stewart Smith stewartsmith December 11 2013 get joke wait ll come best worlds transactional behavior strong ACID properties high concurrency etc etc claim FoundationDB example asserts possible implementation fully serializable calling isolation levels weak e true I-as-in-ACID haven yet used FoundationDB comment though always impressed ve read since ready assert distributed system know better simpler eventually consistent datastores since certainly know InnoDB MVCC implementation full complexities right probably position readers two viable choices seem single-node MVCC multi-node eventual consistency think MVCC simpler paradigm two Notes tweet puns acid-cat meme pictures paragraph shall disappointed Pun intended Also note PostgreSQL used provide two isolation levels documentation used make comment sensible thing quite clear whether meant imply sensible way implement MVCC sensible way implement PostgreSQL MVCC Pic credits Puzzle Alice Schroedinger Cat Spiral Watch Comments"),
('Medium.com - When the heck did learning to code become cool?', "Request storySign Sign upKen Mazaika May 219 minNext storyNext storyThe author chose make story unlisted means people link see sure want share Yes show sharing optionsWhen heck learning code become cool Share Twitter Share FacebookWhen heck learning code become cool sucks beginner today like became software engineer Internet scale back good-old-days AOL spamming physical mailboxes CDs may appreciate drastically becoming software developer changed Although Internet made lives collectively easier dynamic learning program totally different starting heck learning code become cool teaching program high school attitude people Ken sucks football kind glamorous rock star prevalence social media epic rise companies like Instagram tech celebrities like Zuckerburg never cooler software developer world views developers 90's today re reading may still believe say certain circles cool say code believe bunch talks YouTube watch people brag awesome code audience actually listening impressed image developers changed members general public feel embarrassed telling people program computers living anymore beginners looking become software developers face whole slew problems never face Problem 1 NEED Learn HTML9 Responsive BoilerStrap JS whatever JS Framework trending today HackerNews lot hype next latest greatest programming fad lot progress made programming world general silver-bullet single technology someone learn immediately cure problems Beginners often encouraged start digging solutions problems understand yet hype cause someone try learn things like Virtual DOM Shadow DOM even understand regular DOM beginners starting isn lot talk learning crawl learn walk instead lot latest greatest fad seasoned web developer love playing new technologies come know important use right tool job Beginners often feel like learning fit square-peg round-hole fastest way level coding skills grand scheme things learning latest trend isn important Nobody really saying explicitly community Problem 2 Fundamentals Aren SexyHere list things probably never see trend HackerNews seldom put job postings Data Structures Linked Lists Trees Depth First Search Floyd Cycle Detection Algorithm However also list stuff comes incredibly frequently technical interviews disconnect UnderbackJS whatever listed job postings today leave beginners thinking need chase catch latest trend get job get solid foundation really matters Learn Code Community much echo-chamber confuse beginners Unfortunately people years experience communicating seasoned developers realize say likely taken context beginners experienced developers time care solid foundation analytical skills rather experience specific tools trade hired many solid engineers learned specific technologies job knowing specific stuff generally overrated Problem 3 People kind Know NowI wrote seriously bad code first jobs web developer Frameworks coming everyone developing either PHP CGI whole framework thing relatively new started relatively equal footing everyone else made every mistake book second job web development asking questions like heck unit test Live learn developer little bit afraid know lot code wrote long ago starting still alive wild people writing web applications many years developed lot best practices one hand means code reviews communicating code people get speed possible people learn community took decade figure-out short period time comparison flip side bit overwhelming try fully grok nuances community currently talks Things like Monoliths great Microservices friend Microservices overrated Monoliths back vogue Turbolinks community 10 years baggage re lugging around makes easy us context world past hopefully beginners today never muck-through big shitty monolith similar building 2008 Problem 4 People Still Idea re ok starting normal compare people general bad idea hard compare someone much experience causes beginners often think going learn everything need know still feel like lot need learn answer course hard one fully appreciate nobody ever learns everything ever need ever happens re learning something new every day time look new challenging set problems tackle Watching talks Aaron Patterson dives Ruby C source code using RubyVM InstructionSequence figure happens hood journey implements routing rails finite automata instead regexes still melts face Watching talks good reminder clueless inner workings lot things Problem 5 important lessons programming need learn messing things big time ve never made mistake brought mission-critical software component screech halt ve never really gun fix things case still lessons learn Non-technical people walking desk tell problem already know teaches lot Especially busy desperately trying Books teach kinds lessons Problem 6 Systems Gotten ComplexHere example things gotten complex Ruby Rails 2008 order site live Internet needed spin server configure components apache mongrel today Today git push heroku master Boom Good go sounds like things easier ever side effects complexity systems abstracted away quickly come Take example back 2008 2008 get image uploading working project needed around 5 lines code model request would copy multi-part form data file system hard-drive worked like charm even production apache setup properly todayToday takes one line code model integrating something like carrierwave paperclip stuff need get file uploading working one line kind magic gets job done Unless re heroku heroku nice scales horizontally easily us causes using filesystem image uploading fail case means re heroku probably use AWS storage layer pretty easy setup AWS need click around UI sign need enter credit card ll verify phone number calling won bill first gigabyte Promise create user group policy roles clicking around 10 pages Amazon site create bucket get Amazon API credentials Oh yeah app probably GitHub public repo means API keys want check-in checkout figaro gem real great way store things computer environment variables environment variables ask Let tell incremental steps right direction made things bit tricky get handle Rails optimized usability learnablilty building real apps real world complicated great thing feeling bit overwhelmed stuff part learning process days retrospect starting biggest problem much bravado lack self-awareness much maturity actually mattered Today opposite true people starting often view people years experience like people mastered arcane black magic see senior developers similar viewed parent 5 year old adults super-powers d never get ways path becoming solid software engineer People starting need little light illuminating right path keeping track m lucky able help people looking enter world software engineering find right path go super proud solving problems like FizzBuzz leveling solve traditional CS challenges like Depth First Search Algorithms Reversing Linked Lists complicated Rails Apps like chess app team m code mentor theFirehoseProject incredibly rewarding experience take aspiring web developers wing help beginners transition new career web development Even though situation beginners face breaking world development radically different situation faced learning process afraid break stuff browser support video tag liked post would mean lot press recommend button RecommendRecommendedBookmarkBookmarkedShareMoreBlockedUnblockFollowFollowingKen MazaikaPublished May 21 rights reserved author"),
('CQRS Command = GOF Command?', 'CQRS Event Sourcing Want learn CQRS Event Sourcing blog packed step-by-step articles give head start CQRS Command GOF Command Oh irony DDD community advocates unambiguous language yet even terms heavily overloaded Whether stackoverflow like DDD CQRS google group like clear CQRS command Gang Four Command Pattern differences best use ll cover post CQRS Command GOF CommandClick TweetThe Command Pattern Gang Four StyleThe GOF Command Pattern falls Behavioural grouping group patterns describes mechanisms communication classes objects case object used express request holds necessary information common mechanism execute interface looks like Command Pattern UMLHere example command design pattern c public interface ICommand void Execute Good Use Case Pattern Matt Honeycutt suggests elegant use case course plurasight Build Application Framework ASP Net MVC 5 uses command pattern rather ingeniously Let explain many times needed certain tasks run certain common times application example setup code start application Maybe need something done request error one thing us code happens need series things run Enter GOF command pattern Rather create interface called ICommand CQRS app get confusing Matt suggests course naming command interface definitions need run Note Matt refers Tasks example IRunAfterEachRequestIRunAtStartUpIRunOnErrorFor ideas see GitHub repo https github com MattHoneycutt Fail-Tracker tree master FailTracker Web Infrastructure TasksI used approach applications like GOF command single void Execute function point use DI framework choice get startup commands application start execute one mean simple way ensure startup task handled uniform way easy add new tasks class one reason change sample Global asax cx file ve used service locator pattern see anti-pattern think elegant way handle type task public class WebApiApplication System Web HttpApplication protected void Application_Start AreaRegistration RegisterAllAreas WebApiConfig Register GlobalConfiguration Configuration FilterConfig RegisterGlobalFilters GlobalFilters Filters RouteConfig RegisterRoutes RouteTable Routes BundleConfig RegisterBundles BundleTable Bundles Run startup tasks foreach var startUpTask ServiceLocator Kernel GetAll amp amp amp lt IRunAtStartUp amp amp amp gt startUpTask Execute case curious register startup class inject kernal like kernel Bind IRunAtStartUp MessageSecurity kernel Bind IRunAtStartUp ConflictResolver CQRS Command differs CQRS command message represents action cannot executed Rather route handler Messages CQRS system also immutable immutability fact route commands gives pattern power flexibility else send command wire queue even re-route Commands generally made simple types easy serialise log dependencies worry CQRS Commands represent actions identified domain Click TweetCommands represent actions identified domain form part lexicon ubiquitous language Naming command careful process intention revealing also understandable domain experts Think beauty using well named commands create kind domain specific language DSL get right gain deep understanding domain turn helps architect better system beauty using well named CQRS commands create kind domain specific language Click TweetFor background naming commands check Gabriel Schenker post LosTechies DDD Special scenarios part 2 Typical CQRS Command Look Like Every application domain requires differing shaped commands However certain fields come fairly often example typical CQRS command public class ExampleCommand Command public readonly Guid AggregateId public readonly int Version public readonly Guid UserId public ExampleCommand Guid aggregateId int version Guid userId Guid processId base processId AggregateId aggregateId Version version UserId userId inherits Command Command Inherits Message Sounds complicated Well really Message placeholder interface used convenience group messages together command hand often common elements experience Aggregate Id command runs specific aggregate identify aggregate via unique id Version command usually carry version timestamp ensures executed aggregate correct state wouldn example want get enable disable command mixed tend use simple integer ensure events create back command carry version enables detect concurrency conflicts Process Correlation Id using Event Sourcing approach want include correlation id allows trace events back specific starting command becomes particularly important process managers Saga trigger actions initial starting command Without form correlation id become difficult trace ripples caused initial command User Id depending domain command often carry user id user id person issuing command useful make convention every command carries userid makes logging security much easier implement One word caution user id may user id command convention make sure stick meaning got sorts confusion built system handled user accounts assumed cases user id referred account changing didn rather id issuer ConclusionFrom write think clear GOF command different beast CQRS command highlight broader issue careful using DDD assume know particular term means read Get copy Blue Book read threads lively DDD CQRS google group always learn let terminology bite ass Share GoogleTwitterRedditEmailLinkedInPrintRelated Posted 25 May 2015 Daniel DDD Tagged command cqrs design pattern gang-of-four gof pattern 4 Comments 4 thoughts CQRS Command GOF Command Rhys L Bartels-Waller says 26 May 2015 2 13 amIn case Process Manager Saga triggering command would use ID userId property Reply Daniel says 26 May 2015 1 56 pmGood question sometimes make sense dedicated system id way differentiate user system initiated actions would explicitly set id case rather use Guid Empty example Guid Empty default value could get set non-logged user tries issue command even possible system alternative carry forward id initiating user However prefer first option always find initiating user process id Reply Rhys L Bartels-Waller says 28 May 2015 12 30 amSo maybe better name commander type id properties Type class string representation id GUID expressive userId pointed problem since multiple meanings different contextsReply Dew Drop May 26 2015 2021 Morning Dew says 26 May 2015 1 11 pm CQRS Command GOF Command Daniel ReplyLeave Reply Cancel reply Every Developer Know CQRS Event Sourcing Using Find Search Recent Posts CQRS Command GOF Command Send Emails Right Way CQRS System Upgrade CQRS Events Without Busting Event Stream Business Rules Break 4 Secrets Inter-Aggregate Communication Event Sourced System Aggregate Root Build One CQRS Event Sourcing 100 Provable Audit Log Possible Hint Event Sourcing ll Show ArchivesMay 2015March 2015February 2015December 2014November 2014October 2014September 2014July 2014May 2014April 2014September 2013August 2013April 2013 CategoriesArchitectureBackendDDDElmahjavascriptProductivitySoftware PracticesUncategorized Copyright Learn CQRS Event Sourcing 2015 WordPress theme Ryan Hellyer Want learn aboutCQRS Event Sourcing Yes lets taught Greg Young everything knows Close Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email'),
('Auto-vectorisation and parallelisation in Winter', "weblog Nicholas Chapman Auto-vectorisation parallelisation WinterPosted 24 May 2015I reached interesting milestone functional programming language Winter - Winter auto-parallelisation auto-vectorisation even time Auto-parallelisation means code automatically executed parallel multiple threads Auto-vectorisation means vector SIMD instructions automatically used instead scalar instructions means e g 4 8 multiplications done one instruction Taking Winter code applies function input array generating result array def square float x float x x def main array float 268435456 array float 268435456 b array float 268435456 map square We're using large array size get decent measurable amount work assembly inner loop looks like LBB2_3 vector body Inner Loop Header Depth 1 vmovaps rdx rax ymm0 vmovaps 32 rdx rax ymm1 vmovaps 64 rdx rax ymm2 vmovaps 96 rdx rax ymm3 vmulps ymm0 ymm0 ymm0 vmulps ymm1 ymm1 ymm1 vmulps ymm2 ymm2 ymm2 vmulps ymm3 ymm3 ymm3 vmovaps ymm0 rcx rax vmovaps ymm1 32 rcx rax vmovaps ymm2 64 rcx rax vmovaps ymm3 96 rcx rax subq -128 rax addq -32 r10 jne LBB2_3 nice code LLVM good job see 4 256-bit memory loads done parallel 4 256-bit 8-element multiplications done parallel 4 stores done code runs memory speed 5 7 GB case machine Even much sloppier inner loop still run memory speed little work per element Resulting perf measurements JITed code elapsed 0 187149 JITed bandwidth 5 73737 GiB C ref elapsed 0 196158 C ref bandwidth 5 47385 GiB JITed Winter code C code memory limited run similar speeds Taking another example work done per array element def f float x float pow x 2 2 def main array float 268435456 array float 268435456 b array float 268435456 map f pow pretty slow function 100 cycles allows us see influence auto-parallelisation Winter auto-parallelises map function dividing array slices passing slice worker thread actual work done auto-parallelisation disabled results follows pow x 2 2 single threaded map JITed code elapsed 6 32286 JITed bandwidth 0 169819 GiB C ref elapsed 1 90434 C ref bandwidth 0 563838 GiB reason C version faster Visual C vectorises pow function whereas LLVM doesn't filed bug report auto-parallelisation enabled pow x 2 2 multi threaded map JITed code elapsed 1 35347 JITed bandwidth 0 793327 GiB C ref elapsed 1 94178 C ref bandwidth 0 552969 GiB see highlighted result program runs 4 67x faster roughly would expect using 8 threads 8 logical cores considering 4 hyperthreading cores changes winter code required use parallelisation it's completely automatic - proof-of-concept auto-vectorisation auto-parallelisation Winter code robust yet - got working weekend think it's quite promising result also shows think functional programming languages fast faster optimised multithreaded C code Edit Discussion reddit comment feedback blog post Please email Back content Nicholas Chapman"),
('Source code for LiteOS - lightest OS for smart homes by Huawei', 'Skip content Sign Sign repository Explore Features Enterprise Blog Watch 64 Star 79 Fork 45 OIOTC Liteos Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP http www oiotc cc index php m project 1 commit 1 branch 0 releases 1 contributor branch master Switch branches tags Branches Tags master Nothing show Nothing show Liteos Initial commit latest commit cce86f3776 HuaWeiLiteOS authored Apr 23 2015 Permalink Failed load latest commit information LICENSE Initial commit Apr 23 2015 README md Initial commit Apr 23 2015 README md Liteos Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try'),
('How the @#$% do I program the Parallella?', 'BOARD GET STARTED DOCS PARALLELLA MANUAL PARALLELLA SCHEMATIC EPIPHANY REFERENCE MANUAL E16G301 DATASHEET SOFTWARE PRE-BUILT UBUNTU EPIPHANY SDK SOURCES PARALLELLA EPIPHANY SDK COPRTHR SDK LINUX U-BOOT COMMUNITY FORUM WIKI BLOG US FAQ LICENSES UNIVERSITY PROGRAM BUY AMAZON US DIGI-KEY US INT L RS COMPONENTS INT L BOARD GET STARTED DOCS PARALLELLA MANUAL PARALLELLA SCHEMATIC EPIPHANY REFERENCE MANUAL E16G301 DATASHEET SOFTWARE PRE-BUILT UBUNTU EPIPHANY SDK SOURCES PARALLELLA EPIPHANY SDK COPRTHR SDK LINUX U-BOOT COMMUNITY FORUM WIKI BLOG US FAQ LICENSES UNIVERSITY PROGRAM BUY AMAZON US DIGI-KEY US INT L RS COMPONENTS INT L program Parallella Andreas Olofsson May 25 2015 Uncategorized One Comment 0 15 Since Parallella Kickstarter campaign 2012 one question get program thing always phrased like get point parallel programming hard never going become fluent parallel programming without coding pick card card Let parallel programming Thanks incredible open source work come Parallella community last year major parallel programming models supported MPI Message Passing Many said couldn done David Richie Brown Deer Technology effective standard MPI message passing interface running Epiphany Blog post 2D FFT Example Academic Paper OpenMP Threading Thanks heroic efforts Parallel Processing Group University Ioannina Greece OpenMP 4 0 support Parallella Please try Download OpenCL Threading SIMD Brown Deer Technology continued work OpenCL infrastructure updated latest Epiphany SDK latest version aptly named Freewill available Download ERLANG Message Passing Community member Merk Fleming implemented native Erlang interface Epiphany along heterogeneous programming within Erlang Heterogeneous software hardware future encouraging Mark contributed code new Parallel Architectures Library Blog Post Sources COPRTHR STDCL Threading effective coprocessor thread alternative Brown Deer Technology lets expose parallelism available POSIX like manner Epiphany suitable programming model GPU SIMD centric OpenCL programming model Download Sources BSP Bulk Synchronous Parallel BSP programming model invented Leslie Valiant Bill McColl resurrected Epiphany thanks Jan-Willem Buurlage others University Utrecht Netherlands Sources BASIC Community member Nick put together Epiphany BASIC parallel neat simple way get going parallel programming Forum Thread Sources addition know people working Haskell Occam APL Forth Andreas Andreas OlofssonFounder CEO AdaptevaComputer architect chip designer philosopher optimist husband father 4 runner One Comment Help us build world efficient Supercomputer Parallella says May 25 2015 6 58 pm program Parallella Reply Leave Reply Cancel Reply Name Email Website Available 99 US Next Post Ten Reasons Buy Parallella Ten Reasons Buy Parallella 2014 Parallella Rights Reserved'),
('HTTPLang a Scripting Language for Making HTTP Requests', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 9 Star 223 Fork 12 Max00355 HTTPLang Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP scripting langauge HTTP routines 7 commits 1 branch 0 releases 3 contributors Python 100 0 Python branch master Switch branches tags Branches Tags master Nothing show Nothing show HTTPLang Merge pull request 4 Lucretiel patch-1 Don't use readlines prefer lazy iteration latest commit f92b3334f3 Max00355 authored May 26 2015 Permalink Failed load latest commit information examples delete commit history May 25 2015 httplang Don't use readlines prefer lazy iteration May 26 2015 gitignore Made python module May 26 2015 README md Made python module May 26 2015 requirements txt Added requirements May 26 2015 setup py Made python module May 26 2015 README md HTTPLang scripting language makes writing HTTP request routines simpler Here's thing don't like using urllib make HTTP requests Python curl gets messy Requests okay wanted another solution find process stupidly complicated handling cookies nightmare enough decided start project HTTPLang hopefully kind solution problem simulating browser programatically HTTPLang allows make POST GET requests easily makes handling cookies sessions breeze making POST requests simple It's scripting language dedicated 100 writing HTTP request routines could called another program end goal HTTPLang little helper larger program trying HTTP request stuff trying write script logs website changes field something Instead trying figure complicated library doesn't really want anyway write quick HTTPLang script less lines code Whether helpful people don't know know could use something like Installation Clone repo Run python setup py install Usage httplang file http Documentation Important Note HTTPLang strict things like spaces Make sure code matches spacing exactly shown examples errors Examples set URL http google com GET show HTML set URL http somesite com set POSTDATA username myUsername password myPassword POST login set COOKIE TMPCOOKIE GET usercp set URL https site com set POSTDATA username test POST members login set COOKIE TMPCOOKIE getvalue NAME formhash show VALUE Commands getvalue Gives ability pull value tag useful getting values forms upon form submisson Supported attributes find NAME ID set Gives ability set variables available language URL POSTDATA COOKIE USERAGENT POSTDATA special setting POSTDATA must use format fieldname value fieldtwo value2 multiple words spacing much match exactly shown example fieldname value field2 value2 would work due spacing Gives ability make requests GET POST URL must set requests error raised POST request POSTDATA variable must set error raised gives ability call varaibles limited use used show set set POSTDATA setting value field available variables URL POSTDATA COOKIE USERAGENT TMPCOOKIE HTML STATUS show Gives ability print variables Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Creating, updating and merging branches in SVN', "popularCalling Web Method C without Service ReferenceCalling Web Service without WSDL Web ReferenceRails vs Django vs Play Battle frameworksWebClient vs HttpClient vs HttpWebRequestUsing custom domain Rails application HerokuCreating updating merging branches SVN Tagsc coding decisions democracy entrepreneurship experience free-and-open games idea kindness minimalism mobile novel operating-system personal php play-framework poesia relationships review ruby-on-rails school social story tutorial utilities web-dev Categories Announcement 2 Life 21 Photography 1 Technology 25 Thoughts 3 Work 4 Writing 17 Newsletter Free monthly subscription Twitter Facebook Google Plus Flickr Github Search Widgets Connect Search Diogo Nunes Geeky Gecko TechnologyCreating updating merging branches SVN 25 May 2015Diogo Nunescoding tutorial Leave comment know branches re used read first Creation First make sure project follows standard SVN folder structure e trunk tags branches folders code resources dependencies everything else might need compile version software live inside trunk folder creating branch perform update trunk folder commit pending changes using Tortoise SVN green checkmark overlay appear folder re ready branch trunk Select trunk folder Click hold right mouse button drag branches done correctly cascade menu appear Select SVN Copy rename versioned item ll asked name new folder actually re naming branch Use convention like maybe feature-Ticket12345 something human-readable fix-CrashAfterEmptyInput like use prefixes feat features fix bug corrections ui user interface tweaks time full copy trunk folder branches your-branch-name add SVN right-click commit forget ignore build-generated files Usage branch parallel copy trunk branch isolated trunk changes vice-versa Feel free develop wild stuff branch time anyone checkout trunk folder order commit build something won get affected changes team individual may work branch re working alone worry locking files two developers working branch locks work trunk Keep mind locks made trunk affect branches locks vice-versa conclusion may lock commit update regular trunk Keep up-to-date starts getting interesting tricky Remember isolation trunk branches dis advantage Sometimes need update branch developments made trunk However want create new branch lose work commits already branch Example re working translating application Someone commits trunk new forms forms need translated created branch didn exist branch receive new forms commits without ruining work Updating branch recent version trunk called merge SVN git calls process rebasing newcomers may cause confusion since merge also definitively integrate branch trunk Right re actually merging anything definitively re updating like trunk Ensure branch uncommitted changes Right-click branch folder want update parent branches folder Select TortoiseSVN Merge wizard window appear Select Merge range revisions Next URL merge type URL trunk folder select revisions since want update branch revisions trunk since last update Next merge options ll probably want leave defaults press Test merge TortoiseSVN give preview actions applied merge add remove update conflict without changing local remote files re comfortable press Merge point local branch merge latest developments trunk may want run couple tests guarantee SVN auto-merge didn break anything merge produced conflicts manually resolve MUST test code involved conflicts ll thank later branch continues equally awesome merge Great time commit branch continue work TortoiseSVN even suggest commit message concatenation messages commits finished merging often merge trunk less code ll merge time thus reducing probability complexity conflicts Integrating branch trunk time come developed tested awesome feature branch almost complete isolation time merge equally awesome lines code trunk process basically updating branch except time re updating trunk commits branch Ensure trunk uncommitted changes finished working branch finished updating branch latest version trunk stars aligned Right-click trunk folder Select TortoiseSVN Merge wizard window appear Select Merge range revisions Next URL merge type URL specific branch folder select revisions Next merge options leave defaults Press Merge Like updating branch local trunk merge branch developments Since trunk run necessary tests commiting commiting new trunk may safely delete branch find bug create new branch repeat process Conflicts Conflicts flavor life Imagine Lord Rings without ugly orcs Uruk-Hais pretty tasteless right conflict happens someone else edit line code differently next time try merge code sources conflict arise since SVN doesn know line code use right line colleague cases manually resolve conflict means reviewing file conflict happened choose version legit example made change trunk different change line branches tried merge branch trunk happened SVN tried best merge files ended two conflicting files Time put gloves click Edit conflict TortoiseSVN open 3-pane window local version mine repository version merged file preview Focus conflicts navigating using Previous Next conflict arrows look Merged pane bottom SVN telling line lblRepo Text you're TRUNK removed replaced well SVN needs help deciding two possible candidates see pane left Mine pane right either right-click line full press Use block button located Ribbon allow specify block code use case decided Use text block mine since merge ll trunk message want keep resolve file conflicts press Save close window return SVN dialog box decided edit conflict except time ll click Resolved Rinse repeat remaining files conflicts Remember test code manual merge Conclusion Mission accomplished started green window blue developers working trunk never disturbed intermediate unstable commits thanks power branches last step delete branch code already trunk revision history SVN longer need Delete avoid confusions later Sharing caringShare Facebook Opens new window Click share Tumblr Opens new window Click share Twitter Opens new window Click share Reddit Opens new window Click email friend Opens new window Standard Platform WordPress Design Ryu Content Diogo Nunes Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email"),
("'Diffie-Hellman Key Exchange' in plain English", "current community chat blog Information Security Information Security Meta communities Sign log customize list stack exchange communities Stack Exchange sign log tour help Tour Start quick overview site Help Center Detailed answers questions might Meta Discuss workings policies site Information Security Questions Tags Users Badges Unanswered Ask Question Take 2-minute tour Information Security Stack Exchange question answer site Information security professionals It's 100 free registration required Diffie-Hellman Key Exchange plain English vote 53 vote favorite 47 someone explain Diffie-Hellman Key Exchange plain English read non-tech news page twitter implemented technology allows two persons exchange encrypted messages top non-secured channel true cryptography key-exchange asymmetric share improve question edited Dec 22 '13 20 01 AviD 34 4k1381151 asked Nov 24 '13 1 10 user15119 8 Wikipedia pictorial explanation Ramchandra Apte Nov 24 '13 15 17 1 YouTube nice easy video explaination TheRookierLearner Nov 26 '13 4 35 already answered significant detail site somewhere I'll look link KnightOfNi Jun 9 '14 15 40 add comment 5 Answers 5 active oldest votes vote 74 vote accepted Diffie-Helman way generating shared secret two people way secret can't seen observing communication That's important distinction You're sharing information key exchange you're creating key together particularly useful use technique create encryption key someone start encrypting traffic key even traffic recorded later analyzed there's absolutely way figure key even though exchanges created may visible perfect forward secrecy comes Nobody analyzing traffic later date break key never saved never transmitted never made visible anywhere way works reasonably simple lot math see public key crypto trapdoor function used discrete logarithm problem traditionally used xy mod p business general process modified use elliptic curve cryptography well even though uses underlying principles public key cryptography asymmetric cryptography nothing ever encrypted decrypted exchange however essential building-block fact base upon asymmetric crypto later built basic idea works works like come two prime numbers g p tell pick secret number don't tell anyone Instead compute ga mod p send result back We'll call since came thing we'll call secret number b computed number B compute gb mod p send result called B take number sent exact operation that's Ba mod p operation result sent Ab mod p magic answer get step 5 number got step 4 it's really magic it's math comes fancy property modulo exponents Specifically ga mod p b mod p gab mod p gb mod p mod p gba mod p examine closer means you'll get answer matter order exponentiation one order never know secret number used get result never know number used still arrive result result number stumbled upon step 4 5 shared secret key use password AES Blowfish algorithm uses shared secrets certain nobody else nobody us knows key created together share improve answer edited Nov 25 '13 17 23 answered Nov 24 '13 7 28 tylerl 45 7k1278146 4 DH public key asymmetric crypto encryption CodesInChaos Nov 24 '13 12 15 think it's worth mentioning reason secure unlike normal log x modular log x thought hard compute Otherwise could log_g log_g B get b BlueRaja - Danny Pflughoeft Nov 24 '13 19 25 2 think might also want add g prime generator primitive root p TheRookierLearner Nov 26 '13 4 40 3 TheRookierLearner answer simplified explanation DH quite important details omitted simplicity shouldn't considered implementation tutorial tylerl Nov 26 '13 5 57 add comment vote 18 vote Diffie Hellman algorithm used establish shared secret two parties primarily used method exchanging cryptography keys use symmetric encryption algorithms like AES algorithm simple Let's assume Alice wants establish shared secret Bob Alice Bob agrees prime number p base g advance example let's assume p 23 g 5 Alice chooses secret integer whose value 6 computes g mod p example value 8 Bob chooses secret integer b whose value 15 computes B g b mod p example B value 19 Alice sends Bob Bob sends B alice obtain shared secret Alice computes B mod p example Alice obtains value 2 obtain shared secret Bob computes b mod p example Bob obtains vlaue 2 algorithm secure values b required derive transmitted across wire share improve answer answered Nov 24 '13 2 35 Terry Chia 27 4k869135 1 example Nacib Neme Feb 6 18 54 It's nice could've also quoted it's Wikipedia Waffle's Crazy Peanut May 4 2 50 add comment vote 11 vote answers excellent job explaining maths behind key exchange you'd like pictorial representation nothing beats excellent paint analogy shown Diffie Hellman key exchange Wikipedia entry Image public domain share improve answer answered Jun 9 '14 14 30 Duncan 22127 add comment vote 5 vote want simpler plain English explanation DH readily understood even non-technical people double locked box analogy Alice puts secret box locks padlock key open ships box Bob Bob receives box puts second padlock key ships back Alice Alice removes lock ships box Bob second time Bob removes lock opens box access secret Alice sent Since box always least one lock transit Eve never opportunity see what's side steal secret cryptographic key used encrypting remainder Alice Bob's communications share improve answer answered Nov 24 '13 15 41 Dan Neely 688511 call plain English explanation love man user15119 Nov 24 '13 16 31 3 plain English doesn't describe Diffie-Hellman describes Three-pass protocol significantly different properties DH example requires three passes whereas DH requires single pass CodesInChaos Nov 24 '13 18 21 add comment vote 3 vote Diffie helman mathematical algorithm exchange shared secret two parties shared secret used encrypt messages two parties Note diffie helman provide authentication two parties share improve answer answered Nov 24 '13 1 20 Lucas Kauffman 35 9k467129 lacks explanation wish could explain little bit user15119 Nov 24 '13 2 11 4 wanted english explanation without math Lucas Kauffman Nov 24 '13 8 56 case HTTPS connection authentication handled SSL certificate framework certain communicating intended parties verification trust handshake negotiation SSL connection expensive terms overhead DH algorithm allows parties securely negotiate symmetric key encryption decryption much efficient k1DBLITZ Nov 25 '14 15 53 add comment Answer draft saved draft discarded Sign log Sign using Google Sign using Facebook Sign using Stack Exchange Post guest Name Email Post guest Name Email discard posting answer agree privacy policy terms service asked 1 year ago viewed 30482 times active 3 months ago Blog Stack Overflow Andela partner provide education beyond borders Linked 0 DH unbreakable facts leads strong DH Related 7 prime number large enough large Diffie-Hellman AES-256 9 1024bit Diffie Hellman key exchange secure 4 Diffie-Hellman key exchange shared base key 'p' known B protected Eve 1 Diffie-Hellman key-exchange securing prime base 2 Main difference Yahalom Needham-Schroeder key exchange protocols 3 would give encryption key one person 4 Diffie-Hellman key exchange 1 Authenticated Diffie Hellman Key Exchange 1 Diffie Hellman exchange public key signature 2 Diffie-Hellman key exchange best way securely exchange SSH keys Hot Network Questions Help determining whether transformation linear Phrase mean fully prepared pgsql select distinct multiple columns Travel Portugal Cologne Germany photon energies conserved general relativity Tikz picture lima huge symbol door Truth realm Neon Genesis Evangelion Opening roll Insight person telling truth broken window difference Multiple robots swarm robots jet fighter missiles descend ascend display pie chart expected wanted evaluate normative requirements new device design electric sparks appear blue purple correct word 'learnful' 13-year-old son made foolish wasteful donation teach wrong Ubuntu provide Multiverse repository Deleting files maintenance plan use use Clint entranced Wanda Maximov Age Ultron Right left representing good bad worth - chest nickels half chest dimes Formula comparing cell fixed date always returns false Unable pedal high gears hot questions question feed tour help blog chat data legal privacy policy work advertising info mobile contact us feedback Technology Life Arts Culture Recreation Science Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix Linux Ask Different Apple WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce 14 Photography Science Fiction Fantasy Graphic Design Seasoned Advice cooking Home Improvement Personal Finance Money Academia 10 English Language Usage Skeptics Mi Yodeya Judaism Travel Christianity Arqade gaming Bicycles Role-playing Games 21 Mathematics Cross Validated stats Theoretical Computer Science Physics MathOverflow 7 Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design logo 2015 stack exchange inc user contributions licensed cc by-sa 3 0 attribution required rev 2015 5 28 2614 Information Security Stack Exchange works best JavaScript enabled"),
('Microservices: Its not (only) the size that matters, its (also) how you use them', "Services Database Performance Problems Microservices High Performance SOA Cloud Salvation Simplified Technical Setup Master Data Management Lean Agile Works Technologies Model Driven Development Domain Driven Design NoSQL SOA REST CQRS Architecture PRINCE2 Unified Process Scrum Blog Resources us Team References Contact Event Subscription Menu Services- Database Performance Problems- Microservices High Performance SOA- Cloud Salvation- Simplified Technical Setup- Master Data Management- Lean Agile WorksTechnologies- Model Driven Development- Domain Driven Design- NoSQL- SOA- REST- CQRS- Architecture- PRINCE2- Unified Process- ScrumBlogResourcesAbout us- Team- References- Contact- Event Subscription Microservices size matters also use part 1 February 25 2014 Categories Enterprise Architecture Event Driven Architecture Microservices SOA Software Development System Integration Tags EDA ESB integration micro services MSA REST SOA SOAP WebService Jeppe Cramon Danish version http qed dk jeppe-cramon 2014 02 24 microservices-det-er-ikke-kun-stoerrelsen-det-er-vigtigt-det-er-ogsaa-hvordan-du-bruger-dem-del-1 Part 2 Microservices size matters also use Part 3 Microservices size matters also use Part 4 Microservices size matters also use Part 5 Microservices size matters also use finally come exciting development hinted SOA Hierarchy organic growth blog post SOA synchronous communication data ownership coupling examined 4 Tenets Service Orientation specifically focused service boundaries autonomy problems due synchronous 2 way communication Services knowledge hand well prepared topic blog post subject title indicates micro services many ways response monolithic architectures SOA Micro Services also lack clear definition thing people seem agree Micro services small individually deployable Rule thumb says Micro services weigh around 10-100 lines code languages minimal ceremony excl Frameworks libraries although last point disputed among purists Number lines code opinion horrible measuring stick determining whether micro service correct size matter good service Good guidelines designing micro services terms scope size integration form use seems lacking Without guidelines becomes difficult separate wheat chaff one could easily tempted claim layered SOA anti pattern see diagram also meets micro service size rule thumb know people tempted cross micro services list say without looking closely micro services therefore never come near designing proper micro services services within classic layered SOA real micro services layered SOA also micro service architecture Entity Data Services thin services roughly purpose Repository Data Access Object classic layered OO code Entity service thin shell top typically relational database Depending programming language framework Repository exposed REST Web Services could implemented using 10 approx 300 lines code Micro service size rule compliance CHECK Task services thin services coordinating orchestrating calls multiple Entity services Depending framework library extent data conversion Task service implemented using 10 1000 lines code Micro service size rule compliance CHECK check Process Services thin semi thin Services coordinate calls multiple Task Entity services typically require bit work often need handle data conversion compensations case update failure support long running transactions Depending framework library e g BPEL ESB process service implemented using 100 several thousand lines code Micro service size rule compliance approximately CHECK discussed SOA synchronous communication data ownership coupling synchronous 2 way communication used layered SOA deeply problematic terms service responsibilities delineation service autonomy need compensation process task services alone imposes lot complexity Another problem contractual temporal stability single service nothing little works Latency time service called answer received typically high since re communicating many services network protocol Based solely rule Micro Services categorized containing lines code could boldly claim Entity Task Process Services also micro services clearly shows use lines code determine whether service micro service matter good service lousy decompose services even make really small micro services let communicate 2 ways latency suffer tremendously focal point micro services exclusively size use usage patterns hard imagine star chart service calls application calls service turn calls lot little reusable services potentially calls another service calls services etc Circular calls real problem usage pattern Micro Services star synchronous 2 way communication diagram Service call services calling services etc attempt decompose services made small e g responsible handling data attributes easily creates challenge individual services need talk accomplish task re jealous data functionality One goals service orientation ensure reuse ensure highest possible recycling Make service small reused many different contexts possible logic fine problem every time reuse also increase coupling One goals service orientation ensure loose coupling easily change services keep business technical demands SOA synchronous communication data ownership coupling discussed synchronous 2 way communication leads pretty hard forms coupling desirable Communication-related coupling data logic always service Layered coupling business-related-security persistence service Temporal coupling service operate unable communicate services depends upon Coupling tendency creating cascading side effects service changes contract becomes something dependent services must deal service unavailable services depend upon service also unavailable service fails data update services involved coordinated process update also deal failed update process coupling error occur service received message performed update example client could another service performing call service Since communication 2 way client sends Request message Service service receives Request performs kind processing example updating database completing processing service sends Response message back client indicate result processing communication occurs network e g HTTP call message Queue network slow less reliable in-memory calls used monolithic applications client runs timeout another network IO error typically two reasons Either Request message reach service turn update database Request arrived service updated database Response message never made back client Lack Reliable Messaging means client know service performed job leaves client problem try ask service job performed retry wasn performed blindly retry call try compensate give Last reaction tends predominant solution client tries call service operation must implemented handle one call request message job still perform job e g database update known idempotent call service part series update calls multiple services larger consistency problem becausee use distributed transactions handle coordination updates saw SOA synchronous communication data ownership coupling compensation logic necessarily trivial simple implement using 2 way communication Transactional compensation synchronous 2 way integration Imagine extreme micro-service architecture service responsible one attribute e g first name last name street name street number zip code city etc design latency time huge problem stability terrible coordination compensation problem big must missing something guide us better service design next blog post look integrate services distributed context see affects service granularity way integrate services look forward comments questions ideas Share Click share Twitter Opens new window Share Facebook Opens new window Click share LinkedIn Opens new window Click share Pocket Opens new window Click share Google Opens new window Click share Tumblr Opens new window Click share Pinterest Opens new window Click share StumbleUpon Opens new window Click share Reddit Opens new window Click email friend Opens new window Click print Opens new window Comments Ricardo March 11 2014 05 46 Hi Jeppe good articles well written raising SOA challenges concerns nothing new people realise interested see end journey excellent arguments solutions Hopefully waiting responsible Integration Team one biggest investment bank Brazil deployed ESB 2 year ago months running almost 300 integrations delivered believes real SOA oriented approach Canonical data models focus reuse Soa Governance Team cannot deny observations topics totally coherent taken consequences yet becoming harder growing looking forward next post Reply Mav3656 July 17 2014 14 43 Thank lot articles good job congratulations keep going clear well argued clever relevant Reply Paulo Merson May 5 2015 22 18 Great post got several admirers organization comments 1 think LOC discussion microservices white noise main issues microservices try address related deployability runtime qualities mainly service autonomy case size really matters size runtime element corresponds executing service guess service logic call classes util kind functionality access database validation access control transaction demarcation logging etc code present runtime maintainability point view LOC count matter even important whether code clean code Maintainability aka modifiability less runtime quality attribute implementation attribute aspect size services really matter runtime memory utilization much orchestration platforms created mechanisms dehydration others created technical solutions patterns minimize amount memory service requires processing amount time active issue also focus service statelessness principle service design Thomas Erl et al 2 Picking one thing LOC say process services LOC vary 100 several thousands depending framework e g BPEL use BPEL likely modeled process service visually LOC case LOC count BPEL XML script 3 say ensure highest possible recycling Make service small reused many different contexts possible understand small LOC count makes service reusable reusability primarily result modeling services enterprise focus carefully designing contracts 4 Towards end say must missing something guide us better service design following posts give excellent ideas service-oriented design focusing improving autonomy want add body knowledge help service design addition DDD directly applicable SOA systems general several published SOA design patterns distributed systems patterns 8 principles service orientation Erl et al mentioned previously think 8 principles give good mechanism design assessment example neglect service statelessness may end services make server crawls neglect standardization contracts may hinder interoperability may need lots transformation logic represent implementation cost performance overhead neglect service discoverability especially enterprise may produce well-designed service good runtime qualities e g high autonomy others around organization may end recreating logic never found service although agree design ideas proposed series posts want emphasize bigger picture principles patterns right solution always one highest autonomy job architect evaluate tradeoffs 5 Suggestion second figure micro services star add circular call figure help make point circular calls real problem Reply Trackbacks postMicro services Det er ikke kun st rrelsen der er vigtigt det er ogs hvordan du bruger dem - Del 1 Jeppe Cramon Micro services size matters also use part 2 TigerTeam Lean Thinking News 2014-03-15 Klaus' Korner Microservices size matters also use part 3 TigerTeam Lean Thinking Microservices size matters also use part 4 TigerTeam Lean Thinking Coordinating Microservices Playing Well Others Form Follows Function Making Taming Monoliths Form Follows Function Microservices size matters also use part 5 TigerTeam Lean Thinking Leave Reply Click cancel reply Notify follow-up comments email Notify new posts email Recent Posts Microservices size matters also use part 5 Video slides Microservices SOA reminded supposed deliver talk Microservices size matters also use part 4 Microservices size matters also use part 3 Microservices size matters also use part 2 Recent CommentsPaulo Merson Microservices size matters also use part 5Paulo Merson Microservices size matters also use part 4Paulo Merson Microservices size matters also use part 3Paulo Merson Microservices size matters also use part 2Paulo Merson Microservices size matters also use part 1Categories Agile 7 Code Generation 6 CQRS 11 Domain Driven Design 10 Enterprise Architecture 12 Event Driven Architecture 10 Event Sourcing 3 Functional Programming 1 Java 8 1 Microservices 6 Model Driven Development 7 SOA 11 Software Development 18 Sparx Enterprise Architect 3 System Integration 15 UML 5 Recent Posts March 1 2015 Microservices size matters also use part 5 December 1 2014 Video slides Microservices SOA reminded supposed deliver talk June 5 2014 Microservices size matters also use part 4 April 23 2014 Microservices size matters also use part 3 March 13 2014 Microservices size matters also use part 2 Categories Agile 7 Code Generation 6 CQRS 11 Domain Driven Design 10 Enterprise Architecture 12 Event Driven Architecture 10 Event Sourcing 3 Functional Programming 1 Java 8 1 Microservices 6 Model Driven Development 7 SOA 11 Software Development 18 Sparx Enterprise Architect 3 System Integration 15 UML 5 Latest Tweets RT rickygervais sex marriage isn't gay privilege It's equal rights Privilege would something like gay people paying tax Li 2 days agoRT rohit_x_ Key key key point monolithic 'pretend complexity doesn't exist' approach vs micro services adrianco gluecon http co 7 days agoRT dgomesbr TigerTeamDK thank great series soa ddd microservices etc7 days ago dgomesbr hi Diego You're welcome Thanks kind words cc jeppec7 days agoRT xtext Half slide decks sessions XtextCON 2015 added website already http co EIlByeQbny7 days ago Follow TigerTeamDK Copyright 2008-2015 - TigerTeam ApS Theme v 1 4 4 Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email"),
('RethinkDB reviewed by a MongoDB fan', "Features Docs Blog Changelog Roadmap License Log Demo Buy RethinkDB reviewed MongoDB fan using MongoDB almost projects since 2012 last year name RethinkDB frequently pops lots Mongo related discussions - direct competitor better almost drop replacement RethinkDB hit version 2 0 according creators production ready decided give go share findings MongoDB Experience using MongoDB last 3 years JSON storage database medium large datasets biggest MongoDB database 17GB 2 million documents storing crawling data I've using Amon well storing huge amounts various unstructured metrics consider MongoDB first choice storing analyzing datasets 2GB RethinkDB - First Impressions RethinkDB repositories popular distros Installation simple straight forward process One thing would like mention - default RethinkDB doesn't start automatically system boot make config tweaks enable functionality RethinkDB great documentation - detailed well written enough examples every command Overall - great first impressions instance running less 5 minutes Client Libraries people behind RethinkDB provide official libraries Python Javascript Ruby also community provided libraries popular languages like Go PHP etc Using easy using official libraries - well documented guess execute particular command RethinDB create databases tables manually raise exception already exist Compared MongoDB could inconvenience - one things find appealing MongoDB fluid interaction databases use db collections db collection 'metrics' - database collection doesn't exists created fly Performance Metrics MongoDB get metrics almost anything importance like db size db stats collection size db collection stats slow queries db 'system_profile' find etc single command worse case scenario - couple lines code time writing RethinkDB doesn't expose programmatically performance metrics like table db index size slow queries Admin Interface Continuing point lack performance metrics - mention Admin panel RethinkDB comes web app check state instance - existing databases tables sharding status number documents nice chart shows number reads writes real time admin panel really well designed little disappointed data explorer expect able click table see rows inside - like tools Mongo MySQL PostgreSQL etc case - get command prompt auto complete far ideal haven't found good better third party Admin UIs could potential niche keep mind data browsing could cumbersome MongoDB vs RethinkDB Benchmarks comes favorite part - comparing MongoDB RethinkDB head head Please keep mind professional benchmarks created small script executing CRUD operations compared results want - take look source also run benchmarks server dev machine following instructions readme Let's get started first basic operations every DB Inserts lot tweaks testing every single time RethinkDB slower compared MongoDB 100 000 documents MongoDB ended taking 37MB storage 124MB RethinkDB MongoDB - db collection stats Rethink doesn't give programatic access stats data ls -lh var lib rethinkdb instance1 data instead metrics_document table_name django_session cumulative_pct_reads 69 859 cache_hit_rate 90 2000000000000028 last_update '' reads 51 index_hit_rate 37 5 size 1 MongoDB mongo_connection MongoClient host 'mongodb localhost' mongo_db mongo_connection 'rethinkvsmongo' mongo_collection mongo_db 'metrics' mongo_collection ensure_index 'last_update' pymongo DESCENDING background True range 0 100000 data metrics_document copy Puts memory overhead data 'last_update' unix_timestamp mongo_collection insert data RethinkDB r connect localhost 28015 db database_name repl r db_create 'rethinkvsmongo' run r db 'rethinkvsmongo' table_create 'metrics' run r table 'metrics' index_create 'last_update' run range 0 100000 metrics_document 'last_update' unix_timestamp r table 'metrics' insert metrics_document durability 'hard' run MongoDB 100 000 documents RethinkDB 100 000 documents durability 'hard' RethinkDB 100 000 documents durability 'soft' Average 16573ms 16 5sec 207573ms 207sec 66639ms 66sec Min 16747ms 197515ms 65394ms Max 17204ms 219420ms 67584ms Updates data 'size' random_int 'reads' random_int 'cache_hit_rate' random_int MongoDB range 0 100000 mongo_collection update last_update random_timestamp set data RethinkDB range 0 100000 r table table_name filter last_update random_timestamp update data durability 'hard' run MongoDB 100 000 documents RethinkDB 100 000 documents durability 'hard' RethinkDB 100 000 documents durability 'soft' Average 21899ms 22sec 61449ms 61 seconds 61784ms 61sec Min 21830ms 60969ms 61784ms Max 23984ms 63922ms 62114ms Read Find Update 27 05 2015 - Results updated reflect comment coffeemug CRUD operations RethinkDB it's best reading filtering documents Still slow compared MongoDB MongoDB range 0 100000 mongo_collection find_one last_update random_timestamp RethinkDB range 0 100000 r table table_name filter last_update random_timestamp run MongoDB 100 000 documents RethinkDB 100 000 documents Average 15193ms 15sec 42939ms 42sec Min 15137ms 43815ms Max 16112ms 44856ms going rerun tests future point least clear going choose Rethink Mongo faster RethinkDB Specific Features interactions RethinkDB go RQL Rethink Query language feels like mix Python Underscore js RQL filter results like database also lightweight manipulations results possibly reducing amount boilerplate code Apart least doesn't bring something truly revolutionary table - already things SQL database like Postgres Mongo well r table 'users' filter lambda user user 'age' 30 run to_json Streaming changes one feature separates RethinkDB MongoDB SQL NoSQL database sell use recommend RethinkDB sentence would RethinkDB great JSON DB backend real-time web mobile apps r table 'chat' orderBy 'last_update' changes one convenient ways built real-time apps use Firebase db back-end Firebase nice simple powerful also cloud recently acquired Google - least doesn't make reliable choice apps would write support years come RethinkDB could viable Firebase alternative - offers similar functionality open source well funded r http r http 'https api github com repos rethinkdb rethinkdb stargazers' r http consume API's directly database manipulate store results great feature app relies lot external API's want reduce boilerplate code Conclusion spending almost week experimenting RethinkDB think project great potential especially reall time web mobile apps consuming API's developers want minimize db related boilerplate code Directly compared MongoDB - point obviously less mature slower RethinkDB Pros JSON storage Real-Time Web Mobile apps - could great Firebase alternative Consuming API's r http Reducing boilerplate code integrated manipulation functions RethinkDB Cons Slow compared MongoDB Admin UI needs improvements - browsing data cumbersome lack third party Admin UIs Third party libraries documented really hope enjoyed post please let know comments think RethinkDB would like see detailed posts future Hi Martin Rusev creator Amon blog want share journey experience ever growing world DevOps hope articles could help make informed decisions cloud provider technology stack improve devops skills follow adventures twitter martin_rusev github martinrusev Tweet Get latest devops posts delivered inbox free One email whenever new post published 100 privacy never spam Please enable JavaScript view comments powered Disqus comments powered Disqus Amon Amon self-hosted monitoring tool helps monitor servers apps fraction cost Learn Author Hi martin_rusev creator Amon blog want share DevOps experience hopefully help improve Unix skills become efficient managing servers Subscribe Get latest posts delivered free via Email Latest Blog 28 05 2015 Scaleway vs DigitalOcean deploying web apps ARM server 25 05 2015 RethinkDB reviewed MongoDB fan 19 05 2015 learned year using Ansible extensively 29 04 2015 Amon 3 4 released Bringing Amon plugins whole new level 25 03 2015 3 months Google Compute Cloud Impressions 18 03 2015 simple guide creating Debian Packages 18 02 2015 Amon 3 0 released past future Amon 07 11 2014 Deploying web apps Docker 10 07 2014 Web Developer's Guide Docker Stay informed first hear new Amon releases offers 2011 - 2015 Martin Rusev Questions Support License"),
('SQL SERVER: Conditional selects', 'Code Drug Coding tips blatherings someone whose lucky enough get paid code Menu Skip content HomeAbout 12Mar2015 SQL SERVER Conditional selects Posted Database SQL SQL SERVER davidrothbauer recent project needed come way return information one two tables based whether value first column null situations like SELECT CASE statement best option syntax SELECT CASE condition return true ELSE return false END important know use SELECT CASE selects CLAUSES sql statement full query person address null table provide address table b would use syntax CLAUSE SELECT name Name SELECT CASE address NULL b address ELSE address END Address users INNER JOIN userdata b UID b UID ads Share TwitterTumblrLinkedInFacebookGoogleEmailPrintRedditLike Like Loading Related CASE SELECT Conditional Select Database Programming SQL SQL SERVER 2 Comments Post navigation PHP Function display array contents optional exit Dealing Meditech Dates including Clinical formats SQL Meditech iPeople Echo SQL Server 2 thoughts SQL SERVER Conditional selects Chris May 27 2015 2 38 considered using COALESCE case provides n-ary shorthand choosing first non-null list expressions LikeLike Reply davidrothbauer May 27 2015 11 56 Thanks suggestion Someone mentioned Reddit thread first ve heard long time since ve done much SQL Server new projects work brought back m sure ve read COALESCE work though actual queries quite complex look thought 1 suggestion LikeLike Reply Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Seach Posts Search Recent Posts PHP BREAK CONTINUE Nested Routines loops switch statements makes programmer good Javascript Function returns status specified Facebook API permission Full Stack Programmer PHP LDAP Get Active Directory Groups useful things Recent Comments davidrothbauer SQL SERVER Conditional Chris SQL SERVER Conditional VS2012 C Get IPV4 Finding Console Windo Archives May 2015 April 2015 March 2015 February 2015 December 2014 November 2014 October 2014 September 2014 July 2014 May 2014 April 2014 March 2014 Categories NET Active Directory Asides C Database Flow Control HL7 iPeople Echo Javascript JQuery Meditech Mirth Integration PHP Programmer Sanity Preservation Programming Basics SQL SQL SERVER Uncategorized Web Design Meta Register Log Entries RSS Comments RSS WordPress com Follow Blog via Email Enter email address follow blog receive notifications new posts email Join 17 followers Blog WordPress com Adelle Theme Follow Follow Code Drug Get every new post delivered Inbox Build website WordPress com Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email d bloggers like'),
('Future of Mono for Unreal Engine', 'Mono-ue Future Mono Unreal Engine Miguel de Icaza miguel xamarin com Wed May 20 19 03 27 UTC 2015 Previous message Mono-ue Compiling first objects Next message Mono-ue Future Mono Unreal Engine Messages sorted date thread subject author Hello guys noticed experience setup Mono Unreal Engine pleasant involves compiling code source involves specific version Unreal long tedious installation process Unreal EULA hostile third party vendors prevents us creating kind integrated experience would like Based anticipate continue develop bindings Mono Unreal Engine point Miguel -------------- next part -------------- HTML attachment scrubbed URL http lists ximian com pipermail mono-ue attachments 20150520 30fb9872 attachment html Previous message Mono-ue Compiling first objects Next message Mono-ue Future Mono Unreal Engine Messages sorted date thread subject author information Mono-ue mailing list'),
('Node.js and io.js to merge under Node.js Foundation', "Toggle navigation Features In-Depth Buyer Guide SD Times 100 Special Report Sponsored Content SD Times Magazine Subscribe Download Issue Back Issues Working Editors Guest View Guidelines SD Times 100 Guide Advertise Learning Center White Papers Webinars Industry Profiles Events AnDevCon Big Data TechCon InterDrone SPTechCon Wearables TechCon Job Board Job Seekers Employers Code Watch Programming interview problemsThe future JavaScript almost nowTwenty years Java creator eyesGuest View next app build doesn need iOS AndroidGoogle Microsoft combine TypeScript AtScript Angular 2Java turns 20Analyst Watch Smartwatches Already obsolete Features In-Depth Buyer Guide SD Times 100 Special Report Sponsored Content SD Times Magazine Subscribe Download Issue Back Issues Working Editors Guest View Guidelines SD Times 100 Guide Advertise Learning Center White Papers Webinars Industry Profiles Events AnDevCon Big Data TechCon InterDrone SPTechCon Wearables TechCon Job Board Job Seekers Employers Thu May 28 - Tale Ted Dunning Apache Incubator ever-curious Big Logentries new analytics language makes power log data Couchbase partners Metanautix integrate NoSQL SQLSmartBear integrates AppDynamics AlertSite UXM performance monitoring platform Node js io js merge Node js Foundation Latest News Published May 14th 2015 - Rob Marvin Article Tags io js JavaScript Node js open source runtime V8 Node js io js forks open-source JavaScript runtime platform announced official plans merge development Node js Foundation merger put vote GitHub io js developer Mikeal Rogers initially proposed merger February io js technical committee voted approve merger yesterday According Rogers team continue releasing io js versions convergence takes place merger complete io js working groups technical committee join Node js Foundation renamed titles Related future JavaScript almost Rogers said biggest reason merger makes sense foundation open governance structure nearly identical io js something io js team plans improve upon merger process writing documentation improved documentation policies made improvements Rogers wrote new converged node project begin io js master port changes Node js first release target merger also comes heels Node js project lead TJ Fontaine announcing stepping project leaving Joyent Going forward Node js Foundation govern project collaboratively Node js io js communities io js fork Node js gained popularity December January based open governance allowing faster decision-making current Chrome V8 engine compatibility faster support JavaScript features coming changes ECMAScript 6 Node js Foundation established help Linux Foundation back February important organizational structure stewardship questions hashed Node Summit soon Rogers confirmed merger approval tweet io js TC voted join Node Foundation Mikeal Rogers mikeal May 13 2015 Subscribe SDTimes Rob Marvin Rob Marvin covered software development technology industry Online Social Media Editor SD Times since July 2013 2013 graduate Newhouse School Public Communications Syracuse University dual degrees Magazine Journalism Psychology Rob enjoys writing everything features entertainment news culture current work covering software development industry Reach Twitter rjmarvin1 View posts Rob Marvin Related Articles Tale Ted Dunning Apache Incubator ever-curious Big Data scientist Oculus acquires Surreal Vision Sencha releases Ext JS 6 beta Bash Data Platform SD Times news digest May 27 2015 Java turns 20 Qt framework celebrates 20th anniversary 2 Comments Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code del datetime em q cite strike strong Free eNewsletters SDTimes News Monday Android Developer News Big Data Tech Report SPTech Report InterDrone News 7 Trending Stories 1 Code Watch Programming interview problems 2 future JavaScript almost 3 Twenty years Java creator eyes 4 Guest View next app build doesn need iOS Android 5 Google Microsoft combine TypeScript AtScript Angular 2 6 Java turns 20 7 Analyst Watch Smartwatches Already obsolete Toggle navigation SD TimesAbout Us Contact Us Privacy Policy Site Map Advertise Subscribe Job Board Follow SDTimes Tweets sdtimes Subscribe SD Times Download Current Issue Download Back Issues Subscribe SD Times print magazine Ready SD Times magazine It's clicks away Subscribe 2015 BZ Media LLC Subscribe Contact Us Site Map Privacy Policy Ad close seconds Continue site HTML Snippets Powered XYZScripts com"),
('Understanding PowerVR GPUs via Metal', "Hacks Life Friday May 22 2015 Underestanding PowerVR GPUs via Metal previous post suggested OpenGL OpenGL ES APIs don't always fit underlying hardware One way understand read GPU hardware documentation - AMD pretty good posting hardware specs e g ISAs register listings etc also read extensions see IHV trying bend API closer hardware see NVidia's big pile bindless bindless ways studying hardware time consuming practical don't 3-d graphics full time Recently flood new low-level close-to-the-hardware APIs metal Apple PowerVR Mantle AMD GCN Vulkan Khronos everything DirectX 12 Microsoft desktop GPUs provides us another way understanding hardware look graphics API would look like rewritten match today's hardware Let's take look Metal APIs see tell us PowerVR hardware Mutability Expensive texture Metal referenced via MTLTexture object Note properties get dimensions API change size Instead fill new MTLTextureDescriptor use make brand new MTLTexture object graphics terms texture immutable change contents image can't change object way underlying hardware resources shader instructions associated texture altered win driver go use MTLTexture whatever true texture last time used still true always Compare OpenGL OpenGL bind texture id new texture - different dimensions maybe totally different type Surprise OpenGL - 2-d texture used cube map anything change time OpenGL track mutations re-check validity bound state draw Commands Assembled Command Buffers Queued GPU OpenGL commands actually get GPU OpenGL way involves fair amount witchcraft make OpenGL context current thread issue function calls OpenGL API Later stuff happens never call glFlush glFinish kind swap command maybe commands never execute That's definitely hardware works Metal gives us view underlying implementation every modern GPU I've able find command processing works GPU follows pretty much design driver fills command buffer - block memory GPU commands typically bytes tell GPU GPU commands don't match source API - typically commands draw calls setting registers GPU might driver queues completed command buffers GPU run kind order GPU might DMA command buffer space might read system memory Metal exposes directly MTLCommandBuffer represents single command buffer MTLCommandQueue queue you're done encoding want GPU operate turns fair amount CPU time driver spends goes converting OpenGL commands command buffers Metal exposes via specific MTLCommandEncoder subclasses see work directly issue OpenGL commands encoder built context discovered via current thread commands sent command buffer allocated fly really push API hard OpenGL implementations block random locations context's encoder can't get command buffer OpenGL context also access queue internally queue buffer 1 fills 2 call one glFlush glFinish swap commands might start executing call flush - buffer isn't full OpenGL leave around waiting commands One last note race condition CPU writing commands GPU reading handled buffer one place time whether it's CPU encoding commands GPU executing - true Metal GLES encoding commands GPU started yet Normally problem - queue ton work GPU always long todo list non-ideal case GPU latency matters e g want answer fast possible OpenGL ES might issue flush GPU start - OpenGL get new command buffer GL spec language glFlush ensuring commands complete finite time - flush command buffer sitting waiting driver add GPU Work Start End Rendering Surface sure read 1000 times PowerVR GPUs tiled deferred renderers means rasterizing fragment shading done tiny 32x32 pixel tiles screen one time tile size might different - haven't found good reference rendering pass GPU iterates tile surface renders everything rendering pass intersects tile PowerVR GPUs designed way function without high-speed VRAM tied high-bandwidth memory bus Normal desktop GPUs use ton memory bandwidth that's source power consumption PowerVR GPUs tiny amount on-chip video memory tile surface loaded cache fully shaded multiple primitives saved back shared memory e g surface means driver understand bounded set drawing operations occur single surface book-ended start end driver also understand life-cycle rendering pass need load surface memory modify clear draw results actually need saved probably need color buffer you're done drawing maybe depth buffer depth used hidden surface removal skip saving memory Optimizing start end surface rendering pass saves ton bandwidth Metal lets specify rendering pass work explicitly MTLRenderPassDescriptor describes surfaces render exactly want loaded stored explicitly specify surface loaded memory cleared whatever fastest also explicitly store surface use FSAA resolve discard get command encoder render MTLRenderCommandEncoder pass MTLRenderPassDescriptor describing pass book-ended surfaces involved can't answer question Compare OpenGL ES bind new surface drawing driver must note doesn't know want pass started track drawing operation implicitly load surface memory well clear operation start clearing Lots book-keeping Entire Pipeline Grafted Onto Shader OpenGL encourages us think format vertex data part vertex data use glVertexAttribPointer tell OpenGL vertices read VBO view vertex fetching misleading glVertexAttribPointer really wraps two different bits information get raw vertex data need know VBO binding base pointer fetch interpret data need know data type stride whether normalization desired trend recent years GPUs vertex fetch software part vertex shader rather fixed function hardware registers fetch Moving vertex fetch software win hardware already support fast streamed cached reads compute applications fixed function transistors thrown overboard make room shader cores desktop blending still fixed function Power VR blending write-out framebuffer done shader well really good explanation blending hasn't gone programmable desktop read Since currently rendered tile cached chip PowerVR see arguments latency bandwidth desktop don't apply making blend-in-shader reasonable idea sum two facts shader actually contains bunch extra code generated driver front back Metal exposes directly single object MTLRenderPipelineState object wraps actual complete GPU pipeline extra stuff included wouldn't know OpenGL Like GPU objects pipeline state immutable created separate MTLRenderPipelineDescriptor object see descriptor pipeline locks vertex fragment functions also vertex format anti-aliasing properties rasterization Color mask blending color attachment descriptor that's part pipeline Every time change vertex format even pretend changing vertex base pointer glVertexAttribPointer every time change color write mask change blending you're requiring new underlying pipeline built GLSL shader Metal exposes actual pipeline allowing greater efficiency X-Plane example always tie blending state shader pipeline pretty good fit there's summary it's GLES doesn't quite match PowerVR chip see mismatch looking Metal almost cases driver work make GLES fit hardware inferring guessing semantics application I'll one post series looking Mantle terrifying things we've never worry running OpenGL AMD's GCN architecture Technically real API objects ObjC protocols lighter-weight struct-like entities objects I'll call objects - client code might well fact API-created objects protocols stops trying alloc init Besides saving bus bandwidth technique also saves shading ops renderer ha access entire rendering pass fills tile re-order opaque triangles perfect front-to-back rendering leveraging early Z rejection Posted Benjamin Supnik 9 14 PM Email ThisBlogThis Share TwitterShare FacebookShare Pinterest Labels Metal OpenGL 3 comments Rys Sommefeldt5 23 2015 3 06 AMCool piece Tile size 32x32 guessed vertex fetch isn't quite software fixed function hardware driven shader It's directly programmable fetch it's close enough ReplyDeleteBenjamin Supnik5 23 2015 8 06 AMHi Rys Thanks correction - haven't seen hardware guide PVR I'm little surprised Gen-6 hw isn't software since compute capable cheersBenReplyDeleteRys Sommefeldt5 24 2015 4 40 AMNo problems We're publishing architecture guide soon hopefully NDA I'm 100 sure big help folks trying figure what's going meantime wrote piece front-end including tiler might handy http blog imgtec com powervr a-look-at-the-powervr-graphics-architecture-tile-based-renderingReplyDeleteAdd commentLoad Older Post Home Subscribe Post Comments Atom Contributors Chris Benjamin Supnik Blog Archive 2015 8 May 1 Underestanding PowerVR GPUs via Metal April 2 March 2 February 1 January 2 2014 1 December 1 2013 11 October 2 August 2 July 1 May 1 April 1 March 3 January 1 2012 11 December 2 November 4 October 1 July 1 April 1 February 2 2011 40 December 1 September 2 August 5 June 2 May 11 April 3 March 4 February 6 January 6 2010 57 December 7 November 13 October 3 September 3 August 3 July 1 June 1 May 1 April 3 March 2 February 11 January 9 2009 50 December 5 November 5 October 3 September 7 August 5 July 6 June 2 April 7 March 2 February 2 January 6 2008 41 December 9 November 3 October 5 September 2 August 2 July 2 May 4 April 5 March 3 February 2 January 4 2007 31 December 3 September 1 July 1 June 6 April 5 March 2 February 8 January 5 2006 39 December 4 November 2 October 2 September 2 August 5 June 1 May 7 April 3 March 1 February 5 January 7 2005 8 December 6 August 2 Labels algorithms 13 Android 1 ATI 2 Bonjour 1 BrickSmith 5 C 3 C 42 CGAL 24 COM 1 Computational Geometry 22 CSS 1 CVS 1 CVS Voodoo 1 Debugging 17 Design 6 Email 1 Facepalm 1 Game Development 1 gcc xcode lion mac osx 1 GDB 1 GIS 3 GLSL 23 Heap 1 Humor 2 iis 1 Installers 1 iphone 3 LDraw 3 Liking 1 Linux 13 Lua 1 LuaJIT 1 Macintosh 18 MediaWiki 3 Memory Management 4 Metal 1 mod_rewrite 1 Modeling 1 Networking 1 NVidia 3 Objective C 1 OpenAL 2 OpenGL 104 OS X 4 OSM 1 Performance 36 Plugins 1 Quotes 13 Rants 23 Services 1 Software Development 2 SQL 1 SSE 3 STL 8 Things Might Wrong 1 Threading 21 Tips 3 Unicode 1 Visual Studio 1 Vulkan 1 WinDBG 3 Windows 18 Wordpress 4 X-Code 5 X-Plane 8 X-Plane Scenery Tools 5 XML 2 ZeroConf 1 Links Larry Osterman's WebLog Old New Thing X-Plane Scenery Blog Simple template Powered Blogger"),
('Communicating XML concisely using Swift', 'zedstar org Main menu Skip content HomeContactSoftware Search Communicating XML concisely using Swift May 24 2015 john background plenty XML haters great quote XML like violence doesn solve problem aren using enough spent quite bit time working Lisp-like languages used feeling syntax-fuelled hate However send across wire XML something concise overly bothered syntax use XML JSON S-expressions whatever long decent parsers numerous attempts invent new markup language abstract syntax represent kinds data comes concisely transferring data network adopt two approaches send everything one message separate data need communicate structure types still allow data reconstructed receiver could take chunk markup apply text compression send binary across network could send minimal amount data encoded binary relies schema protocol reconstruct latter advantage allowing schema used multiple times different sets data long conform schema means send less data take advantage fast encode decode cycles processing schema startup using optimised version time encode decode also provides added benefit allowing validation take place encode decode something text compression clue ASN 1 led way approach powerful complex made tool support challenging Google Protocol Buffers follows similar approach less abstract syntax provide easier way map data types programming languages XML world many attempts compressing verbose markup end EXI emerged standard approach However think design also flawed opinion EXI suffers problems ASN 1 overly complex implement means struggle find credible implementations outside enterprise computing also think makes sense try invent general serialisation approach XML many caveats point give employ text compression instead decided make XML serialisation tool wanted recognise limitations Packedobjects based ASN 1 represented subset XML Schema limited set data types enough write network protocols deliberately restricted XML Schema control things like order data way data repeated example think makes much sense support set data type machines pretty good generating things order time Going mobile working restricted platforms mobile embedded devices end tool support believe XML well want support parsing schema language efficiently probably options Libxml2 great job quickly parser everywhere example pocket right iPhone decided see Packedobjects would perform iOS wrapped current API high-level interface worked strings rather expose lower-level Libxml2 doc type API porting process fairly quick painless built example program take XML files Packedobjects repository ran get performance metrics Result decoding 1000 encodes decodes screenshots show results running 5th gen iPod example available try quite big discrepancy encoding decoding speed performance overall pleased tool performs devices tried adding support 64bit encoding decoding soon see impact iPhone 6 Size matters One thing avoided talking post key metric encoding size Rather believe say need pick data set try type data work Packedobjects outperforms approaches tried would classify data highly structured dominated string data types kind data might originate Internet Things IoT sensor networks network management Posted packedobjects xml Tagged packedobjects swift XML Post navigation Previous Leave Reply Cancel reply must logged post comment Categories General Handhelds nanonote nibble packedobjects sound Clashing Rocks thumbtribes twitter Uncategorized xml Latest Posts Communicating XML concisely using Swift Nibble running Pi 2 2 2 TFT NibbleKiosk controlling chromium sound nibble io XML DTMF packedobjects XML compression Dingoo A320 XML Compression libpackedobjects XML Compression Scheme TCR update Clashing Rocks Archives May 2015 March 2015 August 2014 March 2014 January 2013 December 2012 September 2012 March 2012 January 2012 August 2011 January 2011 September 2010 August 2010 May 2010 April 2010 February 2010 December 2009 November 2009 September 2009 June 2009 May 2009 March 2009 January 2009 November 2008 October 2008 September 2008 August 2008 June 2008 May 2008 March 2008 February 2008 January 2008 December 2007 November 2007 October 2007 September 2007 August 2007 July 2007 June 2007 Popular Posts Bluetooth logging Twitter btlogger Hyper Estraier Xpdf tarball iPhone geotwitta Guile Ben NanoNote thumbtribes design changes First GPS micro blog post Scripting Guile Openmoko OpenMoko GPS gpsd Nokia 770 Groking Guile FFI zedstar org'),
('Rust Playground', 'RunASMLLVM IRShortenGistModeDebugReleaseChannelStableBetaNightlyConfigure editor Keyboard bindings Ace Emacs Vim Theme fn main println Hello world'),
('Twelve-Factor Logging', "Ideas Software Musings writing code - - Goings Twelve-Factor Logging 25th May 2015 Tomas Brambora ve developing node js web servers quite yet still one thing confuses earth logging frameworks complicated Consider winston Great logging library big complex transports settings Twelve-Factor Manifesto states app shouldn concern logs stored ve always thought spot mix concerns log stdout let dedicated log handler piece deal details logs actually go let another piece deal log searching projects use winston ever use default console transport default logger outside application remote_syslog2 process running daemon routing logs Papertrail also logs get filtered queried way want log something app focus whats less hows log I'd thrilled know m tomasbrambora Twitter Facebook Google Subscribe RSS 2015 Ideas Software Proudly published Ghost"),
('Free-List Memory Pool of fixed-size objects in C99', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 2 Star 17 Fork 3 djoldman fmpool Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Free-List Memory Pool fixed-size objects C99 9 commits 1 branch 0 releases 2 contributors C 86 6 Makefile 13 4 C Makefile branch master Switch branches tags Branches Tags master Nothing show Nothing show fmpool Merge branch 'mtbakerguy-master' latest commit 5780439078 David Newman authored May 25 2015 Permalink Failed load latest commit information bin bin directory May 24 2015 test makefile changes tests example don't support zero sized pool May 25 2015 LICENSE initial commit May 24 2015 Makefile makefile changes tests example don't support zero sized pool May 25 2015 README md Add unit functional tests May 24 2015 fmpool h makefile changes tests example don't support zero sized pool May 25 2015 README md Free-List Memory Pool C99 header library provides efficient type-generic code allocate heap memory OS user-defined number objects Achieved magic C macros free lists library built situations programs repeatedly call malloc calloc new etc small data structures followed closely free delete pool created getting pointer pool unused object costs couple machine instructions Boost memory pools others overkill sometimes Limitations Memory pools statically-sized Inspired computer game particles Try make bin perftest Example include fmpool h define point struct x y coordinates doubles typedef struct Point_s double x double y Point_t macro initializes fmpool functions take Point_t structs arguments - compile-time FMPOOL_INIT Point_t define NUM_POINTS 16 int main create pool - requests memory OS fmpool_t Point_t Pool Pool fmpool_create Point_t NUM_POINTS grab pointers allocated memory pool Point_t PointArray NUM_POINTS NULL size_t 0 NUM_POINTS Point_t Point fmpool_get Point_t Pool Point PointArray Point release points back pool size_t 0 NUM_POINTS - 5 fmpool_free Point_t PointArray Pool destroy pool done - releases memory OS fmpool_destroy Point_t Pool return 0 Details FMPool requests contiguous block memory creation fmpool_create Afterwards pointers unused objects provided fmpool_get Objects released back pool fmpool_free subsequently re-requested finished memory released back OS fmpool_destroy Functions fmpool_create TYPE NUM Creates new memory pool new pool NUM objects type TYPE Return Values success returns pointer new fmpool failure returns NULL pointer fmpool_destroy TYPE POOL Frees memory associated POOL Return Values Returns value mimics C99 standard fmpool_get TYPE POOL Grabs unused object pool Return Values success returns TYPE pointer failure returns NULL pointer fmpool_free TYPE OBJ POOL OBJ controlled POOL sets unused zero memory Return Values success returns true failure returns false License MIT License Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('How to: Log electricity usage from a CurrentCost EnviR  Part 1', "Robin's Blog Log electricity usage CurrentCost EnviR Part 1 May 24 2015 borrowing CurrentCost electricity usage meter local library re area Eastleigh library loan one free decided buy one d found useful trying reduce electricity usage benefit buying one opposed borrowing one could start connecting computer logging data one borrowed didn come connection cable bought CurrentCost EnviR meter eBay around 15 impressed easy get data computer Plug USB port Linux server cable provided also bought separately necessary even made Check serial device USB-to-serial adaptor built-in cable coming running dmesg checking final lines output similar command work OS X Windows able check Device Manager see COM port number assigned case dev ttyUSB0 Test using serial communication program example Linux ran sudo minicom -D dev ttyUSB0 -b 57600 last argument essential sets baud rate correctly device Windows something like Hyperterminal could used find get nice XML string back something like msg src CC128-v1 48 src dsb 00008 dsb time 21 36 48 time tmpr 23 8 tmpr sensor 0 sensor id 00077 id type 1 type ch1 watts 00419 watts ch1 msg fairly self-explanatory reference src model number CurrentCost dsb days since birth long since turned CurrentCost started collecting data time self-explanatory tmpr temperature degrees C ch1 multiple sensors attached CurrentCost tells one watts current power usage Watts ve written Python code read XML serial connection parse data return ll need install pyserial untangle handy XML parsing library simple small bits XML first using pip DOCTYPE html html head meta http-equiv Content-type content text html charset utf-8 title Server Error middot Gist title style type text css media screen body background f1f1f1 font-family HelveticaNeue-Light Helvetica Arial sans-serif text-rendering optimizeLegibility -webkit-font-smoothing antialiased container margin 100px auto width 600px text-align center color 4183c4 text-decoration none visited color 4183c4 hover text-decoration none h1 letter-spacing -1px line-height 60px font-size 60px font-weight 100 margin 0px text-shadow 0 1px 0 fff p color rgba 0 0 0 0 5 margin 20px 0 40px ul border-top 1px solid ccc list-style none margin 20px 0 padding 20px 0 li display table-cell font-weight bold width 1 style head body div class container h1 OH NOES 404 h1 p seem missed em gist em em gist em looking p ul id error-suggestions li href https github com contact Contact Support li li href https status github com Status Site li li href https twitter com github github li ul p img src https github s3 amazonaws com media maint-logo png alt GitHub p div body html next part series ll show linked data Graphite make lovely plots quick taster current dashboard click larger view Categorised Computing Home Automation Linux OSX Programming Python Windows 2 Comments Angel says May 26 2015 6 35 pm Hi Robin Looking connect EnvirR FreeNAS server found blog really love simple made plan set jail host collector database even small web server show graphs like meteo station really really hate current cost web service much simple free see main channel 5 believe way expensive show five channel data pretend charge way go little freenas box Keep rest article let set nice server depend third parties Regards Angel Robin Wilson says May 26 2015 7 39 pm Really glad like article thanks comment next part coming early next week Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code del datetime em q cite strike strong Search Categories Academic 61 GIS 30 Publications 2 Remote Sensing 33 Computing 32 Computer Help 10 Linux 8 OSX 11 Windows 9 Essays 2 Home Automation 1 21 Humour 3 Lessons learnt 2 Meta 1 Software 10 bib2coins 1 Py6S 8 Programming 52 C 3 IDL 5 LaTeX 3 Python 27 R 10 Reviews 15 Books 12 Technology 3 Short Interesting Things 4 TOK-related 5 2015 Robin's Blog powered WordPress Entries RSS Comments RSS"),
('Why You Should Never Use MongoDB', "Home Hi Conference Talks Sarah MeiCommentsPosts Conference Proposal Missing Prevent Inappropriate Presentations Never Use MongoDB Disclaimer build database engines build web applications run 4-6 different projects every year build lot web applications see apps different requirements different data storage needs ve deployed data stores ve heard probably haven ve picked wrong one times story one times picked originally discovered wrong recovered happened open source project called Diaspora project Diaspora distributed social network long history Waaaaay back early 2010 four undergraduates New York University made Kickstarter video asking 10 000 spend summer building distributed alternative Facebook sent friends family hoped best hit nerve another Facebook privacy scandal dust settled Kickstarter raised 200 000 6400 different people software project didn yet single line code written Diaspora first Kickstarter project vastly overrun goal result got written New York Times turned bit scandal chalkboard backdrop team photo dirty joke written one noticed actually printed NEW YORK TIMES fallout actually first heard project result Kickstarter success guys left school came San Francisco start writing code ended office working Pivotal Labs time one guys older brothers also worked Pivotal offered free desk space internet course access beer fridge worked official clients day hung work contributed code weekends ended staying Pivotal two years end first summer though already minimal working definition implementation distributed social network built Ruby Rails backed MongoDB lot buzzwords Let break Distributed social network ve seen Social Network know everything need know Facebook web app runs single logical server lets stay touch people log Diaspora interface looks structurally similar Facebook screenshot Diaspora user interface feed middle showing friends posts random stuff along sides one ever looked main technical difference Diaspora Facebook invisible end users distributed part Diaspora infrastructure located behind single web address hundreds independent Diaspora servers code open source want stand server server called pod database set users interoperate Diaspora pods database set users Pods different sizes communicate without central hub pod communicates others HTTP-based API set account pod ll pretty boring follow people follow users pod also follow people users pods someone follow another pod posts update happens 1 update goes author pod database 2 pod notified API 3 update saved pod database 4 look activity feed see post mixed posts people follow Comments work way single post comments might people pod post author might people pods Everyone permission see post sees comments would expect everyone single logical server cares technical legal advantages architecture main technical advantage fault tolerance important fault tolerant system every office one pods goes doesn bring others system survives even expects network partitioning interesting political implications example re country shuts outgoing internet prevent access Facebook Twitter pod running locally still connects people within country even though nothing outside accessible main legal advantage server independence pod legally separate entity governed laws wherever set pod also sets terms service post content without giving rights unlike Facebook Diaspora free software gratis libre sense term people run pods care deeply sort thing architecture system Let look architecture within single pod Rails app pod Ruby Rails web application backed database originally MongoDB ways codebase typical Rails app visual programmatic UI Ruby code database ways anything typical internal structure one Diaspora pod visual UI course website users interact Diaspora API used various Diaspora mobile clients part pretty typical also used federation technical name inter-pod communication asked Romulans access point got bunch blank looks Sigh distributed nature system adds layers codebase aren present typical app course MongoDB atypical choice data storage vast majority Rails applications backed PostgreSQL less often days MySQL code Let consider kind data re storing Think Word Means Think Means Social data information network friends friends activity Conceptually think network undirected graph center friends radiate around us Photos rubyfriends com Thanks Matt Rogers Steve Klabnik Nell Shamrell Katrina Owen Sam Livingston-Grey Josh Susser Akshay Khole Pradyumna Dandwate Hephzibah Watharkar contributing rubyfriends store social data re storing graph topology well activity moves along edges quite years received wisdom social data relational store relational database re wrong alternatives folks say graph databases natural m going cover since graph databases niche put production folks say document databases perfect social data mainstream enough actually used let look people think social data fits naturally MongoDB PostgreSQL MongoDB Stores Data MongoDB document-oriented database Instead storing data tables made individual rows like relational database stores data collections made individual documents MongoDB document big JSON blob particular format schema Let say set relationships like need model quite similar project come Pivotal used MongoDB best use case ve ever seen document database root set TV shows show many seasons season many episodes episode many reviews many cast members users come site typically go directly page particular TV show page see seasons episodes reviews cast members show one page application perspective user visits page want retrieve information connected TV show number ways could model data typical relational store boxes would table d tv_shows table seasons table foreign key tv_shows episodes table foreign key seasons reviews cast_members tables foreign keys episodes get information TV show re looking five-table join could also model data set nested hashes set information particular TV show one big nested key value data structure Inside TV show array seasons also hash Within season array episodes hash MongoDB models data TV show document contains information need one show example document one TV show Babylon 5 got title metadata got array seasons season hash metadata array episodes turn episode metadata arrays reviews cast members basically huge fractal data structure Sets sets sets sets Tasty fractals data need TV show one document fast retrieve information even document large TV show US called General Hospital aired 12 000 episodes course 50 seasons laptop PostgreSQL takes minute get denormalized data 12 000 episodes retrieval equivalent document ID MongoDB takes fraction second many ways application presented ideal use case document store Ok social data Right come social networking site one important part page activity stream activity stream query gets posts people follow ordered recent posts nested information within photos likes reshares comments nested structure activity stream data looks similar looking TV shows Users friends friends posts posts comments likes comment one commenter like one liker Relationship-wise whole lot complicated TV shows like TV shows want pull data right user logs Furthermore relational store data fully normalized would seven-table join get everything Seven-table joins Ugh Suddenly storing user activity stream one big denormalized nested data structure rather join every time seems pretty attractive 2010 Diaspora team making decision Etsy articles using document stores quite influential although ve since publicly moved away MongoDB data storage Likewise time Facebook Cassandra also stirring lot conversation leaving relational databases Diaspora chose MongoDB social data zeitgeist unreasonable choice time given information could possibly go wrong really important difference Diaspora social data Mongo-ideal TV show data one noticed first TV shows box relationship diagram different type TV shows different seasons different episodes different reviews different cast members None even sub-type another type social data boxes relationship diagram type fact green boxes type Diaspora users user friends friend may user may distributed system whole layer complexity m skipping today way commenters likers may also users type duplication makes way harder denormalize activity stream single document different places document may referring concept case user user liked post activity stream may also user commented different post Duplicate data Duplicate data represent MongoDB couple different ways Duplication easy option information friend copied saved like first post separate copy saved comment second post advantage data present everywhere need still pull whole activity stream back single document kind fully denormalized stream document looks like copies user data inlined Joe stream copy user data including name URL top level stream underneath contains Jane post Joe liked Jane post likes Jane post separate copy Joe data see attractive data need already located need also see dangerous Updating user data means walking activity streams appear change data different places error-prone often leads inconsistent data mysterious errors particularly dealing deletions hope another approach take problem MongoDB familiar relational background Instead duplicating user data store references users activity stream documents approach instead inlining user data wherever need give user ID users IDs store user ID every place previously inlining data New IDs green MongoDB actually uses BSON IDs strings sort like GUIDs make samples easier read m using integers eliminates duplication problem user data changes one document gets rewritten However ve created new problem ve moved data activity streams longer construct activity stream single document less efficient complex Constructing activity stream requires us 1 retrieve stream document 2 retrieve user documents fill names avatars missing MongoDB SQL-style join operation ability write one query mashes together activity stream users stream references MongoDB doesn ability end manually mashup application code instead Simple Denormalized Data Let return TV shows second set relationships TV show lot complexity boxes relationship diagram different entities entire query denormalized one document duplication references document database links documents requires joins social network however nothing self-contained time see something looks like name picture expect able click go see user profile posts TV show application doesn work way re season 1 episode 1 Babylon 5 expect able click season 1 episode 1 General Hospital Link Documents started ugly MongoDB joins manually Diaspora code knew first sign trouble sign data actually relational value structure going basic concept document data store Whether re duplicating critical data ugh using references joins application code double ugh links documents ve outgrown MongoDB MongoDB folks say documents many ways mean things print piece paper hold document may internal structure headings subheadings paragraphs footers doesn link documents self-contained piece semi-structured data data looks like ve got documents Congratulations good use case Mongo value links documents actually documents MongoDB right solution certainly right solution social data links documents actually critical data system social data isn document-oriented mean actually relational Word people say social data isn relational actually mean mean one two things 1 Conceptually social data graph set tables absolutely true actually concepts world naturally modeled normalized tables use structure efficient avoids duplication get slow know fix 2 faster get data social query denormalized single document also absolutely true social data relational store need many-table join extract activity stream particular user gets slow tables get bigger However well-understood solution problem called caching Base Conf Oxford earlier year gave talk version post Neha Narula great talk caching recommend watch posted case caching front normalized data store complex well-understood problem ve seen projects cache denormalized activity stream data document database like MongoDB makes retrieving data much faster problem cache invalidation two hard problems computer science cache invalidation naming things Phil Karlton turns cache invalidation actually pretty hard Phil Karlton wrote SSL version 3 X11 OpenGL knows thing two computer science Cache Invalidation Service cache invalidation hard Cache invalidation knowing piece cached data date needs updated replaced typical example see every day web applications backing store typically PostgreSQL MySQL front caching layer typically Memcached Redis Requests read user activity stream go cache rather database directly makes fast Typical cache backing store setup Application writes complicated Let say user two followers writes new post first thing happens part 1 post data copied backing store completes background job part 2 appends post cached activity stream users follow author pattern quite common Twitter holds recently-active users activity streams in-memory cache append someone follow posts something Even smaller applications employ kind activity stream typically end see seven-table join Back example author changes existing post update process essentially create except instead appending cache updates item already happens step 2 background job fails partway Machines get rebooted network cables get unplugged applications restart Instability constant line work happens ll end invalid data cache copies post old title copies new title hard problem cache always nuclear option Always option _ always delete entire activity stream record cache regenerate consistent backing store may slow least possible backing store skip step 1 cache MongoDB cache backing store behind become inconsistent eventually consistent plain flat-out inconsistent time point options even nuclear one way regenerate data consistent state Diaspora decided store social data MongoDB conflating database cache Databases caches different things different ideas permanence transience duplication references data integrity speed Conversion figured accidentally chosen cache database Well million dollar question ve already answered billion-dollar question post ve talked used MongoDB vs designed used ve talked though information obvious Diaspora team failed research adequately choosing stuff wasn obvious MongoDB docs tell good without emphasizing good natural projects result took us six months lot user complaints lot investigation figure using MongoDB wrong way nothing take data MongoDB move relational store dealing best could inconsistent data uncovered along way data conversion export MongoDB import MySQL straightforward mechanical details see slides Base Conf 2013 Damage eight months production data turned 1 2 million rows MySQL spent four pair-weeks developing code conversion pulled trigger main site two hours downtime acceptable project pre-alpha could reduced downtime budgeted eight hours downtime two actually seemed fantastic BAD Epilogue Remember TV show application perfect use case MongoDB show one document perfectly self-contained references anything duplication way data become inconsistent three months development still humming along nicely MongoDB One Monday weekly planning meeting client told us new feature one investors wanted looking actors episode show wanted able click actor name see person entire television career wanted chronological listing episodes different shows actor ever stored show document MongoDB containing nested information including cast members actor appeared two different episodes even show information stored places way tell aside comparing names whether person implement feature needed search every document find de-duplicate instances actor user clicked Ugh minimum needed de-dup maintain external index actor information would invalidation issues cache See Going client expected feature trivial data relational store would first tried convince PM didn need failed offered cheaper alternatives linking IMDB search actor name company made money advertising though wanted users stay site rather going IMDB feature request eventually prompted project conversion PostgreSQL lot conversation client realized business saw lots value linking TV shows together envisioned seeing shows particular director involved episodes shows released week one among things ultimately communication problem rather technical problem conversations happened sooner taken time really understand client saw data wanted probably would done conversion earlier less data easier Always Learning learned something experience MongoDB ideal use case even narrower television data thing good storing arbitrary pieces JSON Arbitrary context means care inside JSON even look schema even implicit schema TV show data document blob whose interior make absolutely assumptions RubyConf weekend ran Conrad Irwin suggested use case used MongoDB store arbitrary bits JSON come customers API reasonable CAP theorem doesn matter data meaningless interesting applications data isn meaningless ve heard many people talk dropping MongoDB web application replacement MySQL PostgreSQL circumstances good idea Schema flexibility sounds like great idea time actually useful structure data value implicit schema meaning things expecting JSON MongoDB wrong choice suggest taking look PostgreSQL hstore apparently faster MongoDB anyway learning make schema changes really aren hard even large tables Find Value re picking data store important thing understand data connections business value lies know yet perfectly reasonable choose something won paint corner Pushing arbitrary JSON database sounds flexible true flexibility easily adding features business needs Make valuable things easy End Thanks reading Let sum feel comments post November 11th 2013 Tags diaspora mongodb postgresql Category Uncategorized 121 comments Never Use MongoDB Older Comments 1 2 3 Graham Pritchard November 14 2013 10 16 Enjoyed article much expert field personally grappling organisations best manage data consolidation multiple disconnects internal web-based sources utilise semantics triple stores deliver customer insight etc happened upon MarkLogic XML Platform whose functionality may able manage scenario outlined Would someone please confirm MarkLogic hope wouldn suggest rushing back relational motherland yet Tegiri Nenashi November 14 2013 10 44 Mongo DB last decade greatest NoSQL minds currently working NoSQL standard CODASQL Jerome November 14 2013 3 33 pm look Riak m saying ditch away RDBMS use Riak instead feels like document store except links objects relatively easy write map reduce queries follow links e start user Alice fetch friends older 25 go things liked type movie get actors movies country Germany return resulting set definitely recommend look day like general idea MongoDB put shortcomings Art Kagel November 14 2013 6 27 pm love article development databases 30 years always latest greatest thing Everyone thinks invented something new JSON tag value records something used 80s set aside real databases became common Sara agree points approach Make sure understand problem ask probing questions choose tools appropriately think sums would mention fairly new alternative using document store relational database Informix one early enterprise quality relational databases recently release new version v12 10 xC2 supports JSON BSON data native type within relational database framework fully supports MongoDB APIs application written MongoDB protocol simply pointed Informix server work application gain advantages relational database consistent store backup procedures ACID compliance enterprise quality replication full sharding support massive scaleability fine grained locking concurrency control top IBM engineers Informix IBM product extended JSON type support documents 2GB size MongoDB limits documents 16MB relevant sample projects existing development environments want branch semi-structured data Informix fully supports integration relational JSON data clients MongoDB API relational API clients Relational tables queried directly engine return JSON data MongoDB clients Even general SQL passed using sql method resulting tupples returned stream JSON documents Collections queried using SQL users elect return either full JSON documents parse documents return relational columns instead even join JSON collections relational tables server supports relational integrity constraints triggers JSON collections means develop hybrid applications user relational tables good collections data schema needs flexible rapid development well documents Informix isn open source community supported completely free edition Informix Innovator Edition startups single developers students Chris Travers November 15 2013 1 42 Great article often tell people DB like MongoDB CouchDB etc often place high velocity high variability data pipelines way RDBMS essence use buffer information pending processing processed inserted relational db flexibility also use caching layer way one share processes need However lessons past database wise hard-won discarding favor shiny new tech rarely wise said things RDBMS DBA take popularity NoSQL example LedgerSMB project seek encapsulate db behind stored procedures using conventions make application-discoverable enables many best features NoSQL db terms keeping extensibility relational store Dennis November 15 2013 9 02 Thanks entertaining reading think explained situation clearly even newbies could understand However soon began describing tv_shows database ideal use case document database thought user wants see shows actor exact problem social network m glad see acknowledged later article really shocked team didn foresee feature would wanted eventually think lesson really probably aren going foresee everything want data front chose relational database high confidence ll able overcome Carlos November 15 2013 10 42 believe documents could planned differently forbidden reference multiple document inside MongoDB relationships mysql normalization optimizes storage based datatypes natural constrain schema less approaches optimize based access relationships minimization absolute elimination Correct indexing sharding strategies make relationships even faster way schema less may even design intensive traditional relational design simply absolute right way store given set data depends entirely intend access enjoyed post made think matters despite agreeing conclusions would still recommend good read Nils Wiersema November 15 2013 7 19 pm Thanks fantastic article Nice story Diaspora read well worth tonight Googling efforts growing doubts using MongoDB backing storage system game server know database players inventories big persistent activity stream data relations wrapped well-defined schema anyway document-oriented database far right tool job consider PostgreSQL However really liked ease inserting modifying simple POJO MongoDB MongoDB attractive super easy working straight box Jongo ORM www jongo org etc Hibernate simple Bookmarked share friends thanks Simon November 16 2013 9 59 Great article ve working data many years often find even simplest data problems turn extremely complex investigated detail work mostly BI often thinking complex questions need ask data times realise need differentiate use relational principles describe data practical use RDBMS data described relational terms analytical process normalising data extremely enlightening However implementation choice could still document-centric key-value RDBMS graph based others advantages disadvantages open limitations tools use article great example better implementation choices make result One important roles responsibility professionals choosing best tool job support specific tools near-religious zealotry industry good whatsoever root cause many failed projects systems final point also open-minded combine tools suggest use different technologies data cache transactional store reality today single tools everything real skill short supply today true architect Someone break core business problem discrete technology components broad open minded view tool best component seems well way fulfilling role IMH re longer Ruby programmer lega November 17 2013 2 08 pm 2 retrieve user documents fill names avatars store names avatars client side session period time fill activity streams client side often need one query server side Gokul November 19 2013 2 14 Thanks discussing detail exact conundrums spent lot time decide decided re-architect system document stores gone hybrid direction unstructured data processing worried placed document store processed structured data stored mapped relational tables references document decision seemed intuitive time started solution design felt vindicated strengthened article Thanks Skitted November 19 2013 2 23 Hello Awesome article thank sharing Regarding MongoDB add Diaspora decission go MongoDB might wrong wrong definition Choice database always decision pros cons depending amount need joins might still better choosing MongoDB app handle joins case 7 Join SQL statements depends many joins reduce within Mongo speed differences Regarding problem MongoDB beeing Cache totally agree something inform improve side also something DBA aware already avoided features mongodb currently supports Cheers Skitted bseddon November 19 2013 4 34 couple year ago became involved project part social developers taken upon use MongoDB mantra include social data relational store relational database re wrong disaster developers web developers none formal training computer science chose MongoDB type hype good use cases MongoDB flagship story time use Craigslist replacement main relational engine MySQL backup store Apparently users recall past adverts may held backup store Craigslist database schema changes occasionally bad enough takes long time update main database real killer changing backups using MongoDB could eliminate need change schema backups Perfect great use case boring work-a-day story social exciting really put using MongoDB used English major justify application used Relational databases backed LOT math theory implemented brightest engineers m looking justification use technology want hear someone knows write great code solid understanding underlying theory scan well poetic convey sound explanation benefit easy model hierarchical data relational database using separate tables levels hierarchy inflexible Hierarchical data within relational databases exists every major not-so-major organization world customer analytic stuff Hierarchical vast quantities web developers back end systems d never know god forbid ask someone Ivan November 19 2013 5 17 Hi Sarah Thanks brave highlight implementation work planned wondering anyone project gone steps fleshing ERD UML models data prior database selection code implementation personal opinion feel latest generation dev folks forgotten hard work late Edgar Codd Dave Johnson November 19 2013 6 46 Thank informative article recently read book Seven Databases Seven Weeks MongoDB one dbs discussed author writes Mongo built scale run stand-alone built data consistency partition tolerance sharding data cost one part collection lost whole thing compromised good querying collection countries contains western hemisphere Mongo deals implicit sharding weakness simple manner duplication rarely run single Mongo instance production rather replicate stored data across multiple services would help one data integrity issues encountered points regarding relationships documents whether initially planned later requested really hit home Thanks work lot interest NoSQL technologies data geospatial nature seen lot 40 years progress made rdbms ported NoSQL world geospatial available technologies still limitations point data used situations like cell phone user wanting find Starbucks within 5 mile radius MongoDb Solr great easier decide shard point data shard lines polygons cover varying geographic extents division data best done data ingested redone data added typically off-line data store later hot-swapped master Thanks post informative Paolo Umali November 19 2013 7 27 Call noob need document-style store json field MySQL table store json ll make sure need relationships json field Keef66 November 19 2013 5 31 pm particular format schema JSON extension well-formed XML schema even doesn Good one Anonymous Coward November 20 2013 2 59 Correct m wrong TL DR post seems use non-relational store relational data IMO obvious _are_ relational stores provided service cloud roll roll mongo either Granted relational cloud services dead slow compared plain mysql deployed single machine cost pay huge data OTOH 1 2E6 rows doesn look like lot IME mysql serve data quite well long indexes fit mem see problem data doesn seem relational classical sense mean heavily relational potentially without strict schema Therefore even better fit d look object database rather stay mysql object database might yield even better fit know absolutely dread schema updates production Leander Conradie November 20 2013 3 54 Right Document databases new kids block Lotus Notes early 90 Notes lead designer instrumental design CouchDb Mongo main competitor maintaining system years developed Notes came realize actual value discipline structure schema imposes problem absence formal schema schema emergent property reflected code used manipulate database years cruft customer requests changes becomes difficult mess clear specification stores bit wishy washy leads big unmaintainable mess link rot maintenance nightmare underestimate years years development went query optimization relational databases think ruby VB Python PHP script mashing data going outgun seven-table join get high horse competing millions man-hours gone development current relational databases stand way going outgun Read book database implementation query optimization see really goes good RDBMS Jeffery Ullman Principle Data knowledge base Systems Volume II Chapter 1 might good eye opener Normalization curse way atomize data basic constituents Reassembling data form want join perhaps inefficient run time also means queries suffer Tyrrany Dominant Decomposition good article good see someone points Mongo CouchDB Riak lot things be-all end-all tools Polyglot way forward use multiple data structures average program optimized different use cases datastore cache Julia Sheehy November 20 2013 9 02 Absolutely BRILLIANT Thank thank thank thank thank would take ages articulated shiny-new-tool-obsessed VP thankfully left taken bleeding-edge-technology- addiction departure best-use cases every tool like exceptional gadgets many kitchens serve select needs see MongoDb held spotlight even novice seven years experience see limited well advised avoid taking contract update maintain MongoDb application abandoned original author Whew Gonna go thank person Even failed MongoDB based legacy application everyone department opted let die rewrite PHP Oracle back end Bob Grommes November 21 2013 6 26 followed NoSql general MongoDB particular great interest thing keeps holding back experience TV show database never reliably anticipate possible future value may discovered even within pie JSON seemingly external value relationships know won encounter client request rightly perceive trivial discover use document database rendered Manhattan project make happen really afraid 7 table joins every day applications currently support SQL quite efficient highly tunable Older Comments 1 2 3 Howdy I'm Ruby JavaScript developer based San Francisco Tweets Upcoming talks Archives February 2015 September 2014 July 2014 April 2014 November 2013 September 2013 September 2011 February 2011 December 2010 November 2010 September 2010 July 2010 June 2010 May 2010 April 2010 February 2010 January 2010 October 2009 September 2009 August 2009 July 2009 June 2009 May 2009 April 2009 Copyright 2015 Sarah Mei - Rights ReservedPowered WordPress Atahualpa"),
('Who Came First: The Source Code Or The Compiler?', "Mattias Geniar Web Open Source PHP Security DevOps Automation Works Nucleus mattiasgeniar Twitter Follow mattiasrss get RSS feed Twitter timeline Published Monday May 11 2015 Skip content PresentationsProjectsSponsorship AdvertisementContactArchives Mattias Geniar Monday May 11 2015 Came First Source Code Compiler Let's get philosophical second dilemma came first chicken egg old one still debate modern scientific perspective chicken came first genetic recombination produced first chicken occurred germ-line cells non-chicken ancestor Another literal answer egg general came first egg-laying species pre-date existence chickens others chicken came first seeing chickens merely domesticated red junglefowls Chicken egg philosophical question imagine following scenario compiling gcc compiler source Download gcc source code Configure different options gcc Compile gcc source using gcc compile gcc source requires gcc first place installation docs describe configuring native system either cc gcc must path must set CC environment running configure Otherwise configuration scripts may fail gcc configuration try compile gcc without gcc binary present build indeed fail configure checking build system type x86_64-unknown-linux-gnu checking host system type x86_64-unknown-linux-gnu configure error usr local src gcc_test gcc-5 1 0' configure error acceptable C compiler found PATH See config log' details Chicken egg equivalent software engineering 1 1 Yes know ways around struck funny comparison philosophical Software Engineer question Came First Source Code Compiler https co MwjUnzQuEE ma ttias mattiasgeniar May 11 2015 like content help spread awareness sharing social network choice Thanks 23SHARESTwitterFacebookGoogleRedditBufferDeliciousLinkedinWhatsappDiggStumbleuponTumblr Mattias Geniar Web Open Source PHP Security DevOps Automation Works Nucleus Published Monday May 11 2015 Social Box sign updates via Twitter Facebook Twitter regularly talk technology tweet interesting stories Topics don't necessarily make blog Facebook contains steady update blogposts lightweight stories Follow mattiasgeniar ma ttias Write Comment Cancel Reply Write Comment care markup comment use following HTML tags code command lt code command highlighting pre text pre pre-formatted code multi-line black background white letters example pre tag blockquote text blockquote quoted text quoted example None needed course it's optional Comment Name Email Website Don't-flood-my-mailbox protection add 3 plus 10 Notify follow-up comments email Notify new posts email Maroun Baydoun Monday May 11 2015 believe compilers came first first compiler probably written assembly enabled compilation first programming language compilers could written higher-level programming languages Reply Maroun Mattias Geniar Monday May 11 2015 used compilers written assembly wrote compiler code C turn got compiled already existing binary compiler Inception Reply Mattias Philip Paeps Monday May 11 2015 Remember C ISO ANSI standard assembler difficult write simple C compiler remember finding dmr first primeval C compilers somewhere Bell Labs website long ago seem able find right m sure find look around bit Reply Philip Mattias Geniar Monday May 11 2015 cool links received feedback article PDF Reflections Trusting Trust 1984 https www ece cmu edu ganger 712 fall02 papers p761-thompson pdf IBM 1401 http en wikipedia org wiki IBM_1401 Reply Mattias Write Comment Search Subscribe updates Enter email address subscribe blog receive notifications new posts email Join 58 subscribers Email Address Recent CommentsTrouble Custom Fonts Kindle Paperwhite First GenerationMattias Geniar Custom Fonts Kindle Paperwhite First GenerationTrouble Custom Fonts Kindle Paperwhite First GenerationJ G Miller Ground rules compiling applications sourceSuggested reads May 23rd 2015 home kOoLiNuS Defence WordPressTweet Parade 21-2015 - Best Articles Last Week gonzoblog Defence WordPressAlastair Defence WordPressChris Howard Defence WordPressBruce Lawson personal site Reading list Defence WordPressLaurence Cope Defence WordPressLaurence Cope Defence WordPressMarc Brooks Defence WordPressStefanie Defence WordPressWeekly Links 22 meshedsociety com Defence WordPress HTTP PROTOCOL STACK HTTP SYS MS15-03 luxferrer Remote Code Execution Via HTTP Request IIS Windows"),
('All You Can Optimize on Your Website in a Single Report', "Home Features Pricing us Blog Login EN FR browser support JavaScript DareBoost can't run properly Boost sales fast website Improving Web Performance never easy Website Speed Quality Test Free Desktop Mobile location 67 ofonline shoppers quoteslow loading times top reasonthey'd abandon purchase Take control web performance Simply strongly Features Pricing us FAQ Glossary Blog Contact Get informed discover impacts issues raised web performance 2014 DareBoost - Website performance quality Legal notice En - Fr using Services agree Terms Conditions updated 2014 05 09"),
('Julia Summer of Code 2015', 'julia source downloads docs packages blog community learning teaching publications jsoc juliacon JuliaCon 2015 June 24th - 28th Massachusetts Institute Technology Cambridge Massachusetts tickets sale list talks information Julia Summer Code 2015 23 May 2015 JSoC organizers Thanks generous grant Moore Foundation happy announce 2015 Julia Summer Code JSoC administered NumFocus realize announcement comes quite late summer internship process hoping fund six projects duration JSoC 2015 June 15-September 15 Last date submitting applications June 1 Stipends match Google Summer Code GSoC 5500 summer plus travel support attend year JuliaCon MIT amazing work last year GSoC includes Juno IDE Interact jl package GLPlot hope support another round fun useful projects looking project first find mentor may want contact favorite core developer package author look previously proposed projects Mentors looking evidence experience using Julia contributing open source projects expected expert proposed project area fact JSoC could great opportunity explore entirely new subject re already contributor Julia Julia package want get paid continue existing project okay case still ask find mentor familiar field work mentor looking student advertise project Post julia-users relevant community forums Keep mind project proposals concrete flexible enough adapt interests broad range potential applicants mentor student agreed project send email juliasoc googlegroups com feedback approval ask done June 1st latest yes soon Note use student broad sense Participation open accordance applicable regulations Participants need demonstrate student status formal way Contact juliasoc googlegroups com questions regarding eligibility Happy coding'),
('OCaml Modules: Think Immutable Singletons', 'See need fill need Menu Skip content HomeGithubLinkedInStackoverflowPersonal OCaml Modules Think Immutable Singletons OCaml module language pretty confusing first second possibly third glance may tempted think modules used like objects Actually OCaml modules little simpler make transition OCaml easiest think modules immutable Singleton objects Javascript typical see constructs like function Person name name name Person prototype getName function return name 1234567 function Person name name name Person prototype getName function return name fine good instantiate object MyClass reality course creating new object shares prototype MyClass var person new Person C Alexander assert person getName C Alexander 12 var person new Person C Alexander assert person getName C Alexander think modules OCaml Instead module OCaml might look like Javascript function Person name return name name Person getName function person return person name 1234567 function Person name return name name Person getName function person return person name variation Person singleton could access variable getName create new person get name little differently result var person Person Pinker assert Person getName person Pinker 12 var person Person Pinker assert Person getName person Pinker write OCaml module Person struct type name string let get_name name name string name let create name string name name end let person Person Person create R Pike assert Person get_name person R Pike 12345678 module Person struct type name string let get_name name name string name let create name string name name end let person Person Person create R Pike assert Person get_name person R Pike Beginning get picture perhaps want default argument write Person Javascript function Person name name J Nash return name name name Person getName function person return person name 12345678 function Person name name J Nash return name name name Person getName function person return person name important thing notice expectation ever changing name Default arguments work similarly OCaml module Person struct type name string let default_name string J McCarthy let get_name name name string name let create name string default_name name name end let person Person Person create assert Person get_name person J McCarthy 123456789 module Person struct type name string let default_name string J McCarthy let get_name name name string name let create name string default_name name name end let person Person Person create assert Person get_name person J McCarthy Hopefully sheds little using modules OCaml basically serve namespace related methods types variables used instantiate objects used encapsulate methods May 24 2015Phil Post navigation Writing Strong Cover Letters Hosting Static Content Google Drive Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code class title data-url del datetime em q cite strike strong pre class title data-url span class title data-url Notify follow-up comments email Notify new posts email Search Recent Posts OWebl Gets Support Mime Types Hosting Static Content Google Drive OCaml Modules Think Immutable Singletons Writing Strong Cover Letters Stop Waiting Inspiration Recent Commentsk OCaml Build Process ExampleTim Eaton Stop Waiting Inspirationlets Haverford AdieuOrangeTux HTTP Protocol Unix SocketsRon Aaron Introduction Stack-based Languages ForthArchives May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 Categories Business Character Marketing Non-Technical OCaml Personal Technical Uncategorized Meta Register Log Entries RSS Comments RSS WordPress org Proudly powered WordPress Theme Syntax Automattic'),
('Logic, variables, loops, maths and more  Python (part 2) - Making a lottery game with random numbers and random generated codes', "Menu Home Search Skip content pta2002 Game Development Programming General Coding Python Logic variables loops maths Python part 2 Posted 8 Days Ago pta2002 part 2 tutorial kind thingy Yeah let go continuing work last tutorial well making lottery game random numbers random codes else statements continuation last time showed code work exactly Well first take look conditions Checks value equals another Checks value equal another Please note also replace expressions expressions also use Tests value less another Tests value greater another Tests value less equal another Tests value greater equal another good want something condition fails else Beautiful also test another condition first fails elif else Great one last thing want check variable certain value another variable certain value Sure make ifception like ifceptions keyword called us Something like Please note multiple ands one statement also run least one checks valid think kinda ready make program let go making kind lottery multiple values mean example 1 2 win Cool make new file called lottery py open IDE using PyCharm first want create variable number Simple right num 3 want take user input console Let present input function talk functions later function take parameter prompt displayed user store value user inputs variable let adapt number use input function pretty simple num input 'Please input number 1 10 ' also going turn input integer num int input 'Please input number 1 10 ' run problem int function won work input string crash game Let present Error Handling talk detail later try teach works get try try name expression would something like try except type try try get error code except run take apply code try num int input 'Please input number 1 10 ' except Oh quick note thing sharp sign comment Comments ignored Python anyways run problem need repeat code use loop easiest way use function let talk functions Functions Finally Functions functions Functions blocks code call using one line mean practice def say_hi print 'Hi ' call like def say_hi print 'Hi' say_hi made first function Great run code see Hi console function basically useless might help solve problem one thing parameters Parameters help functions become err dynamic Anyway mean pass variable function work use look like def say_something thing print thing say_something HELLO WORLD want pass multiple parameters separate commas def say_two_things thing1 thing2 print thing1 print thing2 say_two_things Bananas Watermelons Oh functions also return things returned value stored variable later use def sum num1 num2 return num1 num2 print sum 2 2 knowledge solve problem Let see Solving little problem would solve little problem Recursion google Besides fact Google wanting tell typed wrong bizarre reason basically something like def recursion recursion yeah function calling fix little problem use recursion start turning function def get_number try num int input 'Please input number 1 10 ' return num except Oh note won run code except fix def get_number try num int input 'Please input number 1 10 ' return num except print 'Please input number ' get_number basically input number print text telling type number run function also need check value 1 10 let use statements def get_number try num int input 'Please input number 1 10 ' num 10 num 1 return num else print 'Your number 1 10 ' get_number except print 'Please input number ' get_number checking number less equal 10 greater equal 10 function get_number function basically done Well want generate two random numbers Making Random Numbers know going generate pseudo-random number enough going gonna make something like encryption use true random numbers read randomness generate pseudo-random number simply call random number using Python module simply put extension library called random probably better ones since one built-in use use module need import import need go top file add line import random Yes simple access random module Awesome create new function called get_numbers return two numbers let create import random def get_number try num int input 'Please input number 1 10 ' num 10 num 1 return num else print 'Your number 1 10 ' get_number except print 'Please input number ' get_number def get_numbers Code goes actually easy generate random numbers Python using random module works use random randint function pass number start inclusive number end inclusive little example print random number 1 10 import random print random randint 1 10 case produced number 3 looks random enough Oh way WARNING pseudo-random numbers might enough games never used encrypting private data get random user input like keystrokes mouse motion use service like random org uses atmospheric noise generate numbers warning ready go gonna make function return two numbers explain later Let call gen_numbers def get_numbers Code goes create two variables called num1 num2 assigned random number 1 10 use random randint function let go def get_numbers num1 random randint 1 10 num2 random randint 1 10 function generating random numbers However returning Since gonna changing values use tuple tuple array group data cannot changed create tuple separate values variable commas Like tuple 1 2 3 4 5 access value need add square brackets variable name put index Like tuple 1 2 3 4 5 print tuple 0 accessing value number 0 remember computers start counting 0 get number 1 let go return values def get_numbers num1 random randint 1 10 num2 random randint 1 10 return num1 num2 get_numbers function done going make main function call Let create def main Main function main OK pretty easy let call two functions inside def main userNum get_number num1 num2 get_numbers See get_numbers function assign values touple different variables num1 equal first number returned get_numbers function num2 equal second value returned get_numbers function userNum variable equals number user entered need add small introduction game create variables need print small introduction def main print 'Lottery ' userNum get_number num1 num2 get_numbers Ok way let check user input let add check create variables def main print 'Lottery ' userNum get_number num1 num2 get_numbers userNum num1 userNum num2 Give user prize statement testing userNum either num1 num2 Simple right going give user prize prize little randomly generated password-like string text use random module test works simply print won console full code looks like import random def get_number try num int input 'Please input number 1 10 ' num 10 num 1 return num else print 'Your number 1 10 ' get_number except print 'Please input number ' get_number def get_numbers num1 random randint 1 10 num2 random randint 1 10 return num1 num2 def main print 'Lottery ' userNum get_number num1 num2 get_numbers userNum num1 userNum num2 print 'You won ' main remembered nice tell user winning numbers loses let add def main print 'Lottery ' userNum get_number num1 num2 get_numbers userNum num1 userNum num2 print 'You won ' else print 'Winning numbers ' str num1 ' ' str 2 using str function convert integer string Cool lot testing finally managed win lottery tell works let go generate random string think agree main file getting bit big let create new file called prize py hold everything prize talk little bit multiple files access another file need import example want access foo py bar py need import foo bar py Like import foo Notice need add py extension Python handle won work add Please note modules file Python need directory PyCharm need files root project work Let pretend variable called derp foo py want access bar py Simple add name module followed dot followed name variable Like import foo noob foo derp applies functions import foo foo doSomething know let import prize module lottery py file import prize import random def get_number try num int input 'Please input number 1 10 ' num 10 num 1 return num else print 'Your number 1 10 ' get_number except print 'Please input number ' get_number def get_numbers num1 random randint 1 10 num2 random randint 1 10 return num1 num2 def main print 'Lottery ' userNum get_number num1 num2 get_numbers userNum num1 userNum num2 print 'You won ' else print 'Winning numbers ' str num1 ' ' str 2 main need generate code prize py create new function called gen_code def gen_code Generate code generate code need use random module However need use class random module talk classes later anyway import class module need import class module looks like import foo class bar class bar import bar wan import classes module need replace class name asterisk stuff import want import one class module separate class names commas stuff import foo bar way generate random codes make simple import everything random module add line top code random import def gen_code Generate code Cool access every class random module imported like simply call function like file like random import print randint 1 1000 need generate code actually lines code However also need import string module since won need use classes import using regular way random import import string def gen_code Generate code inside gen_code function create variable possible characters code type would bit long string think string module comes string module provides variables contain characters using ascii_letters upper lowercase letters variable digits numbers variable let gen_code method create new variable called char assign value string ascii_letters string digits combined def gen_code chars string ascii_letters string digits simple define length code Instead hardcoding function let pass parameter Update gen_code function looks like def gen_code length chars string ascii_letters string digits access length variable inside method Cool right generate random code take look Loops Loops come variety ways recursion covered loops pretty simple loop block code tell stop loop run certain condition true loop loop code specific amount times length list many times want Let take loop loops first think simplest Let pretend making game want code run variable false use recursion would slow hard loops example game variable determines game stop running false game keep running equals true game stop loop looks like exitGame False exitGame Run game quick note exitGame boolean either True False used directly statements Cool loop loop specific amount times loop lists example Let talk lists little bit Lists list group variables need type create list like run code IDLE numbers 1 2 3 4 5 6 7 8 9 10 zero access value like tuples numbers 3 4 also make multidimensional lists talk later add value list using append function like numbers append one numbers 1 2 3 4 5 6 7 8 9 10 'zero' 'one' use knowledge continue learning loops Back loops get way go back loops loop loop item list also used looping specific number times Let take look loop x list print x code print every item list called list Python automatically assign corresponding value list x loop specific number times use range function really know works guessing generate integer list numbers ranging 0 number entered minus 1 meaning contain number elements passed Anyway one looks like x range 10 print 10 output following 0 1 2 3 4 5 6 7 8 9 see useful future Cool one last thing would like mention loops integrate within loops though best way would making example let imagine Billy Python homework assign values 1 10 list using loop goes best three lines code list x range 10 list append x 1 prints list gets desired output 1 2 3 4 5 6 7 8 9 10 teacher tells good job challenges using one line code still using loops Billy smart knows exactly using list comprehension Simply put list comprehension allows execute logic inside lists recommend make complex logic technique useful making simple operations back Billy homework said knows exactly uses list comprehension code looks like list x 1 x range 10 prints list gets output 1 2 3 4 5 6 7 8 9 10 teacher congratulates live happily ever exactly going Well let break apart First creating list Simple interesting happens first thing see square bracket x 1 x variable yet Next loop simply declaration loop body Basically Python appending x loop next true Since loop always true used statement turned false variable would appended Since creating variable x loop code work fine Let pretend big fan bananas want array word banana five times Well guess use list comprehension well first create banana variable assign value banana Run code IDLE banana 'banana' Ok simple make listFullOfBananas list use list comprehension fill bananas listFullOfBananas banana x range 5 listFullOfBananas 'banana' 'banana' 'banana' 'banana' 'banana' see got list full bananas Cool huh course silly examples list comprehension actually useful Let get lottery done Back lottery game want open prize py file try remember Oh right generating random codes let get done generate random code using choice function inside random module choice function picks random character string using also use list comprehension strings join function update gen_code method look like def gen_code length chars string ascii_letters string digits code '' join choice chars _ range length return code calling variable loop _ won using naming convenience already explained list comprehension let tell join adds two strings together Since string basically character array code work using list comprehension returning Simple let create win function called win random import import string def gen_code length chars string ascii_letters string digits code '' join choice chars _ range length return code def win WON want go back lottery py file change line code def main print 'Lottery ' userNum get_number num1 num2 get_numbers userNum num1 userNum num2 prize win else print 'Winning numbers ' str num1 ' ' str 2 let go back win function print Win message code use code things later way made gonna make easy code function Like def win code gen_code 10 print 'You won code ' print code using 10 length code SUPER safe number possible combinations according computer 8 392993658683402e 17 Yeah lot part 2 wrote 4000 words add part 1 written 6000 words tutorials case wondering looks like win Lottery Please input number 1 10 1 won code 4o4bPxXm0J Chances look different looks like loose Lottery Please input number 1 10 1 Winning numbers 4 2 yeah still think code probably take look databases sending emails want code download licensed GNU General Public License Share tutorial found interesting make sure warn errors tutorial example noticed calling lists arrays whole time Please tell would want cover next let go publish 4436 word masterpiece Partilhar isto TwitterFacebookGoogleLike Like Loading programming Python tutorial Post navigation Making games Python PyGame One comment pta2002 3 Days Ago Wow 66 views great thing Make sure check feedback LikeLike Reply Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Top Posts PagesLogic variables loops maths Python part 2 Create free website blog WordPress com Eighties Theme Follow Follow pta2002 Get every new post delivered Inbox Build website WordPress com d bloggers like"),
('Introducing Wahoo: A Fishshell Framework', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 3 Star 36 Fork 5 bucaran wahoo Code Issues Pull requests Wiki Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Wahoo Fishshell Framework http git io wahoo 19 commits 3 branches 0 releases 4 contributors Shell 100 0 Shell branch master Switch branches tags Branches Tags add-pyenv master readme-docs-edits Nothing show Nothing show wahoo Merge pull request 19 bitdeli-chef master Add Bitdeli Badge README latest commit 72e1495b1b bucaran authored May 28 2015 Permalink Failed load latest commit information db Adding pyenv registry May 27 2015 lib Wahoo Framework May 25 2015 pkg wa Adding pyenv registry May 27 2015 themes default Wahoo Framework May 25 2015 gitignore Wahoo Framework May 25 2015 travis yml Wahoo Framework May 25 2015 DOC md Wahoo Framework May 25 2015 LICENSE Wahoo Framework May 25 2015 README md Add Bitdeli badge README May 28 2015 bootstrap sh Wahoo Framework May 25 2015 init fish Wahoo Framework May 25 2015 README md Wahoo Fishshell Framework Install Usage Contributing Docs Wiki Screencasts Wahoo all-purpose framework decentralized package manager fishshell looks configuration packages It's light fast easy use Packages plugins libraries themes it's Wahoo Install Requires sudo install fish dependencies curl -L git io wa sh wa help sudo don't need use sudo already fish installed use Homebrew starting scratch need sudo order install fish dependencies change system's default shell Usage command preceded wa e g wa help update Update framework using Git Updates constructive Unstaged changes stashed reapplied pulling updates upstream Similarly committed changes repo rebased master get package Install one themes packages Discover packages wa get themes wa use without arguments package already installed Wahoo update list List packages registry wa get without arguments use theme Apply theme theme installed Wahoo download registry list available themes type wa use remove package Remove theme package Packages listening uninstall events called package removed disk allow custom cleanup resources etc See Documentation new pkg theme name Create new name directory WAHOO_CUSTOM themes pkg WAHOO_PATH themes pkg fails copy starting template new package template packages themes default fish_prompt fish regular packages it's created fly submit package Current directory must git source control remote origin Create new branch add- package name local fork Wahoo add new entry local registry WAHOO_PATH db using PWD git remote origin haven't forked Wahoo forks project GitHub updates local clone remote origin upstream Finally GitHub's repository opened preferred browser submit PR prefer roll simply add new file package name pkg theme name theme remote URL WAHOO_PATH db submit PR See Documentation help Display help page console version Display version Contributing start using Wahoo handle fish configuration think something missing make theme find bug consider creating PR Consult documentation learn create packages License MIT Jorge Bucaran et al Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Mach7: C++ pattern matching library', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 35 Star 449 Fork 34 solodon4 Mach7 Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Pattern-matching library C 353 commits 1 branch 0 releases 2 contributors C 45 6 TeX 32 3 HTML 18 7 Makefile 1 3 Batchfile 1 1 Haskell 0 3 0 7 C TeX HTML Makefile Batchfile Haskell branch master Switch branches tags Branches Tags master Nothing show Nothing show Mach7 Added building recent versions Visual Studio update sources due compiler errors tracked issue 19 latest commit 3e723b95cd solodon4 authored May 28 2015 Permalink Failed load latest commit information code Added building recent versions Visual Studio May 28 2015 media Added slides C 2014 talk Sep 17 2014 gitignore Added make check functionality Makefile mimic build bat check - Dec 9 2014 LICENSE Minor fixes use markup external licelse file Apr 8 2015 README md Minor fixes use markup external licelse file Apr 9 2015 README md Mach7 Pattern Matching C Yuriy Solodkyy Gabriel Dos Reis Bjarne Stroustrup Abstract Pattern matching abstraction mechanism greatly simplify source code Commonly pattern matching built language provide better syntax faster code correctness guarantees improved diagnostics Mach7 library solution pattern matching C maintains many features patterns Mach7 user-definable stored variables passed among functions allow use open class hierarchies Mach7 Example Fibonacci numbers demonstrates use patterns built-in types Mach7 Fibonacci numbers int fib int n var int m Match n Case 1 return 1 Case 2 return 1 Case 2 m return sqr fib m 1 - sqr fib m-1 Case 2 m 1 return sqr fib m 1 sqr fib m EndMatch Lambda calculator demonstrates use pattern matching decompose objects nested patterns Lambda calculator struct Term virtual Term struct Var Term std string name struct Abs Term Var var Term body struct App Term Term func Term arg Term eval Term var const Var v var const Term b Match Case C Var return match0 Case C Abs return match0 Case C App C Abs v b return eval subs b v Otherwise cerr error return nullptr EndMatch also used demonstrate relational matching several arguments bool operator const Term left const Term right var std string var const Term v f Match left right Case C Var C Var return true Case C Abs v C Abs v return true Case C App f C App f return true Otherwise return false EndMatch return false prevent control path warning Next example demonstrates library deal efficiently type-safe manner non-polymorphic classes like boost variant well void print const boost variant double float int v var double d var float f var int n Match v Case C double d cout double d endl break Case C float f cout float f endl break Case C int n cout int n endl break EndMatch Breve syntax thing Mach7 offer - generated code faster Visitors detailed set examples look code prepared CppCon 2014 presentation implemented using visitors well pattern matching simple enough help get started Mach7 project Building sources Using GCC 4 4 later Clang 3 3 later make - builds exe files cpp files current directory make timings - builds combinations encodings syntax benchmarks skeleton cxx timing purposes make syntax - builds combinations configuration flags supported library make sure nothing omitted make test - runs exe files current folder Using Visual C 2010 later Mach7 uses build bat script build examples unit tests come script assumes cpp file standalone program find up-to-date list supported commands running build bat Syntax build pgo tmp ver filemask cpp build syntax timing cmp doc clean test check Commands supported far build pgo tmp ver filemask cpp - build given C files build - Build examples using recent MS Visual C compiler installed build syntax - Build supported library options combination syntax variations build timing - Build supported library options combination timing variations build cmp - Build executables comparison languages build doc - Build Mach7 documentation build clean - Clean built examples build test - Run built examples build check - Run examples correct_output files check output Modifiers pgo - Perform Profile-Guided Optimization produced executables tmp - Keep temporaries ver - Use specific version Visual C compiler source code ver one following - 2010 - Visual C 10 0 - 2012 - Visual C 11 0 - 2013 - Visual C 12 0 following batch files sub-commands directly since integrated build bat test-pm-timing bat - builds combinations encodings syntax benchmarks skeleton cxx timing purposes make timings Visual C test-pgo bat - compiles performs profile-guided optimizations files passed arguments test-pm bat - builds sources varying amount derived classes virtual functions test-pm-daily bat - builds files test suite test-pm-daily-pgo bat - builds files test suite performs profile-guided optimizations ttt bat - converts summary outputs latex definitions used performance table Talks Accept Visitors CppCon 2014 September 12 2014 Bellevue WA slides video Mach7 Design Evolution Pattern Matching Library C C 2014 May 14 2014 Aspen CO slides video Publications Y Solodkyy G Dos Reis B Stroustrup Open Pattern Matching C Extended Abstract Proceedings 2013 companion publication conference Systems programming applications software humanity SPLASH '13 ACM New York NY USA pp 97-98 pdf slides notes poster project Y Solodkyy G Dos Reis B Stroustrup Open Pattern Matching C Proceedings 12th international conference Generative programming concepts experiences GPCE '13 ACM New York NY USA pp 33-42 pdf slides notes poster project Y Solodkyy Simplifying Analysis C Programs Ph D Thesis Texas M University August 2013 slides Y Solodkyy G Dos Reis B Stroustrup Open Efficient Type Switch C Proceedings ACM international conference Object Oriented Programming Systems Languages Applications OOPSLA '12 ACM New York NY USA pp 963-982 pdf slides notes poster extras project License Mach7 licensed BSD License Support Please contact Yuriy Solodkyy yuriy solodkyy gmail com questions regarding Mach7 Known bugs limitations library yet suitable multi-threaded environment Lock-free version vtbl-map works following files crash GCC 4 4 5 Fedora 13 box extractor cpp shape2 cpp shape4 cpp shape5 cpp shape6 cpp shape cpp numbers cpp category cpp exp cpp delete test cases anyways up-to-date list known issues see Mach7 Issues Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
("'Nomadic Code School' Is Kind of a Good Idea", "Sections Machines Discoveries Space Futures Gaming Earth Videos en de es nl pt VICE Channels Share Tweet Motherboard Motherboard Watch Sections Machines Discoveries Space Futures Gaming Earth Latest Videos Documentaries Interviews Machines Discoveries Space Futures Gaming Earth Follow Newsletter Image Luke Ma Flickr 'Nomadic Code School' Kind Good Idea Written Michael Byrne Editor May 23 2015 06 00 EST Nomadic Code School presents cross beach resort vacation wilderness adventure camp learn-to-code incubator future-scripters looking something beyond offerings hundreds mostly frontend development-focused camps currently offered across country one soon able learn code amazing places amazing people NCS hasn't properly launched yet still sign-up-for-more-information phase According website NCS currently scouting potential locations inaugural session Matt Lea company's founder CTO Townsquare told destinations consideration include India Turkey Italy Three weeks Vermont expect learning-wise start basics literally creating first web page via text editor Next learn fronted building variety browser based apps Finally dig back end build server side apps using NodeJS ExpressJS MongoDB learn host Amazon Web Services Would believe actually kind like least wish idea one thing grounds hate Nomadic Code School though that's kind started pricetag completely brutal resident certifiably amazing place literal minutes best whitewater kayaking mountain climbing skiing windsurfing continental US I'm able study computer engineering pretty great university work pretty great company thanks entirely internet It's bad It's also India whatever deep lifelong believer amazing places NCS' offering three week coding bootcamps exotic locations throughout world certain resonance Hell second degree recreation management sort hard explain say I'm well-qualified park ranger I'm recreator think lot better amazing place certainly I'm outside constantly outside kinds things hiking climbing kayaking sure helps learn problem solve bazillion studies confirming outdoor activity good mental health 2011 metastudy example found exercising natural environments led greater feelings revitalization positive engagement decreases tension confusion anger depression increased energy sure there's something quite boutique coding retreats expensive programming bootcamps general way seem designed reinforce status quo within industry rewarding rewarded that's really NCS Though likely won't cheap prices subject change Lea said including travel food including housing three week course looking around 10 15 thousand estimate 12 week program like 30 000 Mostly think you'd learn whole lot learn better surrounded environment far removed possible day-to-day grind rather airport hotel meeting room least you've got coin first place three weeks spend new career dunno Topics programming coding coder nomadic code school matt lea javascript culture tech Comment Share Share facebook Share twitter Google plus Tumblr Reddit Stumbleupon Recommended What's 'Cinematic' Programming Language Kosovo's Bootstrapped Hackerspace Needs Help Spent Day Learning Hack Alongside Wall Street's Financial Consultants New York Times Pinterest Hidden Message Developers Make Human Brain Python App Translates Photos Stories Connect Motherboard Popular Superintelligent AI Ignore Humans Instead Destroying Us Inflatable Plane Would Float Like Leaf Venus Atmosphere Porn Watching Six Men Spent 520 Days Locked Room See Could Live Mars Comments Please enable JavaScript view comments powered Disqus comments powered Disqus 2015 Vice Media LLC Motherboard Motherboard Contact Privacy Policy Terms Use"),
('TextBlob: Simplified Text Processing & NLP', "Navigation index modules next TextBlob 0 9 0 documentation TextBlob Simplified Text Processing Release v0 9 0 Changelog TextBlob Python 2 3 library processing textual data provides simple API diving common natural language processing NLP tasks part-of-speech tagging noun phrase extraction sentiment analysis classification translation textblob import TextBlob text ''' titular threat Blob always struck ultimate movie monster insatiably hungry amoeba-like mass able penetrate virtually safeguard capable of--as doomed doctor chillingly describes it-- assimilating flesh contact Snide comparisons gelatin damned it's concept devastating potential consequences unlike grey goo scenario proposed technological theorists fearful artificial intelligence run rampant ''' blob TextBlob text blob tags 'The' 'DT' 'titular' 'JJ' 'threat' 'NN' 'of' 'IN' blob noun_phrases WordList 'titular threat' 'blob' 'ultimate movie monster' 'amoeba-like mass' sentence blob sentences print sentence sentiment polarity 0 060 -0 341 blob translate es 'La amenaza titular de Blob ' TextBlob stands giant shoulders NLTK pattern plays nicely Features Noun phrase extraction Part-of-speech tagging Sentiment analysis Classification Naive Bayes Decision Tree Language translation detection powered Google Translate Tokenization splitting text words sentences Word phrase frequencies Parsing n-grams Word inflection pluralization singularization lemmatization Spelling correction Add new models languages extensions WordNet integration Get pip install -U textblob python -m textblob download_corpora Ready dive Go Quickstart guide Guide License Installation Installing Upgrading PyPI conda Source Get bleeding edge version Migrating older versions 0 7 1 Tutorial Quickstart Create TextBlob Part-of-speech Tagging Noun Phrase Extraction Sentiment Analysis Tokenization Words Inflection Lemmatization WordNet Integration WordLists Spelling Correction Get Word Noun Phrase Frequencies Translation Language Detection Parsing TextBlobs Like Python Strings n-grams Get Start End Indices Sentences Tutorial Building Text Classification System Loading Data Creating Classifier Classifying Text Classifying TextBlobs Evaluating Classifiers Updating Classifiers New Data Feature Extractors Next Steps Advanced Usage Overriding Models Blobber Class Sentiment Analyzers Tokenizers Noun Phrase Chunkers POS Taggers Parsers Blobber TextBlob Factory Extensions Available extensions API Reference Blob Classes Base Classes Tokenizers POS Taggers Noun Phrase Extractors Sentiment Analyzers Parsers Classifiers Blobber File Formats Wordnet Exceptions Project info Changelog Authors Contributing guidelines TextBlob Python 2 3 library processing textual data provides consistent API diving common natural language processing NLP tasks part-of-speech tagging noun phrase extraction sentiment analysis Useful Links TextBlob PyPI TextBlob GitHub Issue Tracker Stay Informed Donate find TextBlob useful please consider supporting author donation helps move TextBlob forward Quick search Enter search terms module class function name Copyright 2014 Steven Loria"),
('The Rust Programming Language Book', 'Toggle navigation 1 Introduction 2 Getting Started 2 1 Installing Rust 2 2 Hello world 2 3 Hello Cargo 3 Learn Rust 3 1 Guessing Game 3 2 Dining Philosophers 3 3 Rust inside languages 4 Effective Rust 4 1 Stack Heap 4 2 Testing 4 3 Conditional Compilation 4 4 Documentation 4 5 Iterators 4 6 Concurrency 4 7 Error Handling 4 8 FFI 4 9 Borrow AsRef 4 10 Release Channels 5 Syntax Semantics 5 1 Variable Bindings 5 2 Functions 5 3 Primitive Types 5 4 Comments 5 5 5 6 loops 5 7 loops 5 8 Ownership 5 9 References Borrowing 5 10 Lifetimes 5 11 Mutability 5 12 Structs 5 13 Enums 5 14 Match 5 15 Patterns 5 16 Method Syntax 5 17 Vectors 5 18 Strings 5 19 Generics 5 20 Traits 5 21 Drop 5 22 let 5 23 Trait Objects 5 24 Closures 5 25 Universal Function Call Syntax 5 26 Crates Modules 5 27 const static 5 28 Attributes 5 29 type aliases 5 30 Casting types 5 31 Associated Types 5 32 Unsized Types 5 33 Operators Overloading 5 34 Deref coercions 5 35 Macros 5 36 Raw Pointers 5 37 unsafe 6 Nightly Rust 6 1 Compiler Plugins 6 2 Inline Assembly 6 3 stdlib 6 4 Intrinsics 6 5 Lang items 6 6 Link args 6 7 Benchmark Tests 6 8 Box Syntax Patterns 6 9 Slice Patterns 6 10 Associated Constants 7 Glossary 8 Academic Research Rust Programming Language Welcome book teach Rust Programming Language Rust systems programming language focused three goals safety speed concurrency maintains goals without garbage collector making useful language number use cases languages aren good embedding languages programs specific space time requirements writing low-level code like device drivers operating systems improves current languages targeting space number compile-time safety checks produce runtime overhead eliminating data races Rust also aims achieve zero-cost abstractions even though abstractions feel like high-level language Even Rust still allows precise control like low-level language would Rust Programming Language split seven sections introduction first Getting started - Set computer Rust development Learn Rust - Learn Rust programming small projects Effective Rust - Higher-level concepts writing excellent Rust code Syntax Semantics - bit Rust broken small chunks Nightly Rust - Cutting-edge features aren stable builds yet Glossary - reference terms used book Academic Research - Literature influenced Rust reading introduction ll want dive either Learn Rust Syntax Semantics depending preference Learn Rust want dive project Syntax Semantics prefer start small learn single concept thoroughly moving onto next Copious cross-linking connects parts together Contributing source files book generated found Github github com rust-lang rust tree master src doc trpl brief introduction Rust Rust language might interested Let examine small code samples show strengths main concept makes Rust unique called ownership Consider small example fn main let mut x vec Hello world fn main let mut x vec Hello world program makes variable binding named x value binding Vec vector create macro defined standard library macro called vec invoke macros follows general principle Rust make things explicit Macros significantly complicated things function calls re visually distinct also helps parsing making tooling easier write also important used mut make x mutable bindings immutable default Rust ll mutating vector later example also worth noting didn need type annotation Rust statically typed didn need explicitly annotate type Rust type inference balance power static typing verbosity annotating types Rust prefers stack allocation heap allocation x placed directly stack However Vec type allocates space elements vector heap re familiar distinction ignore check Stack Heap systems programming language Rust gives ability control memory allocated re getting started less big deal Earlier mentioned ownership key new concept Rust Rust parlance x said vector means x goes scope vector memory de-allocated done deterministically Rust compiler rather mechanism garbage collector words Rust call functions like malloc free compiler statically determines need allocate deallocate memory inserts calls err human compilers never forget Let add another line example fn main let mut x vec Hello world let y x 0 fn main let mut x vec Hello world let y x 0 ve introduced another binding y case y reference first element vector Rust references similar pointers languages additional compile-time safety checks References interact ownership system borrowing point rather owning difference reference goes scope deallocate underlying memory d de-allocate twice bad Let add third line looks innocent enough causes compiler error fn main let mut x vec Hello world let y x 0 x push foo fn main let mut x vec Hello world let y x 0 x push foo push method vectors appends another element end vector try compile program get error error cannot borrow x mutable also borrowed immutable x push foo note previous borrow x occurs immutable borrow prevents subsequent moves mutable borrows x borrow ends let y x 0 note previous borrow ends fn main Whew Rust compiler gives quite detailed errors times one times error explains made binding mutable still cannot call push already reference element vector y Mutating something another reference exists dangerous may invalidate reference specific case create vector may allocated space three elements Adding fourth would mean allocating new chunk memory elements copying old values updating internal pointer memory works fine problem y wouldn get updated d dangling pointer bad use y would error case compiler caught us solve problem two approaches take first making copy rather using reference fn main let mut x vec Hello world let y x 0 clone x push foo fn main let mut x vec Hello world let y x 0 clone x push foo Rust move semantics default want make copy data call clone method example y longer reference vector stored x copy first element Hello reference push works fine truly want reference need option ensure reference goes scope try mutation looks like fn main let mut x vec Hello world let y x 0 x push foo fn main let mut x vec Hello world let y x 0 x push foo created inner scope additional set curly braces y go scope call push re good concept ownership isn good preventing dangling pointers entire set related problems like iterator invalidation concurrency'),
('The language of knowledge meets the language of the web', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 2 Star 8 Fork 0 jkif parser Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP SUO-KIF JavaScript parser 254 commits 1 branch 1 release 1 contributor JavaScript 100 0 JavaScript branch master Switch branches tags Branches Tags master Nothing show v1 0 0 Nothing show parser Merge pull request 3 jkif CF_v1_parser_final Cf v1 parser final CLOSES 2 YOLO Merge latest commit 1034ad5b18 Cfeusier authored May 24 2015 Permalink Failed load latest commit information lib Prepare parser module launch May 23 2015 test Prepare parser module launch May 23 2015 gitignore Prepare parser module launch May 23 2015 CONTRIBUTING md Prepare parser module launch May 23 2015 LICENSE Prepare parser module launch May 23 2015 README md Add npm release badge link readme May 24 2015 STYLE_GUIDE md Add JS style guide forked AirBnB Mar 16 2015 package json Update version 1 0 0 npm release May 24 2015 README md jKif Parser jKif Parser SUO-KIF JavaScript parser allows easily parse SUO-KIF ontologies JavaScript objects Created Clark Feusier tenure hacker residence Hack Reactor Overview Dependencies Installation Documentation API Reference Roadmap Contributing Development Requirements Installing Dependencies Running Tests License Appendix Overview jKif Parser facilitates transmission growth formal knowledge providing JavaScript access vast stores open SUO-KIF ontologies factbases Formal knowledge good computers inferred generate new knowledge guaranteed consistency given consistent input guarantee cannot made reasoning informal taxonomies constructed RDF OWL AIF resulting near uselessness machine learning purposes SUO-KIF used symbolize large formal open ontologies factbases like SUMO MILO Also easy write domain-specific facts ontologies SUO-KIF However access said open ontologies factbases restricted quality open-source parsers SUO-KIF Enter jKif Parser providing simple JavaScript access SUO-KIF thus providing JavaScript access formal ontologies factbases written SUO-KIF learn knowledge representation SUO-KIF formal ontology SUMO Jison parsers please explore appendix Dependencies Jison generates LALR 1 parser Bluebird creates Promise-interface parser methods JSONFile writes parser output file formatted JSON Installation jKif Parser available npm package Install module command-line npm install jkif-parser Require module use desired file var jkParser require 'jkif-parser' Documentation jKif Parser object provides object-oriented API parsing SUO-KIF JavaScript well utility methods handling parsed output var Parser require 'jkif-parser' API Reference parse parseFile parseFileP writeParsedToFile writeParsedToFileP parse parse suoKif string KIFNode Synchronously parses string SUO-KIF Abstract Syntax Tree represented JavaScript KIFNode Parser parse ' instance FIDDLE Dog ' Output JavaScript AST type 'KIFNode' locationData first_line 1 last_line 1 first_column 0 last_column 22 expressions type 'RelSentNode' locationData constant type 'WordNode' locationData word 'instance' argumentList type 'VariableNode' locationData variableType 'IND' variableName 'FIDDLE' type 'WordNode' locationData word 'Dog' parseFile parseFile filePath string cb function void Asynchronously parses file SUO-KIF Abstract Syntax Tree represented JavaScript KIFNode passed callback function invocation callback function receive two arguments error KIFNode AST parsed file error null parsing successful Parser parseFile 'filePathToSomeSUOKIF' function error kifNode error something kifNode AST N B side-effect function returns undefined parseFileP parseFileP filePath string Promise Asynchronously parses file SUO-KIF Abstract Syntax Tree represented JavaScript KIFNode used resolution parseFileP promise access output parsing register handler promise parsing fails error handled registering catch handler promise Parser parseFileP 'filePathToSomeSUOKIF' function kifNode something kifNode AST catch function error something error parsing fails writeParsedToFile writeParsedToFile filePath string parsed KIFNode cb function void Asynchronously writes parsed SUO-KIF file invoking supplied callback function results write operation callback function receive one argument error error null parsing successful var kifString ' exists FIDDLE CLARK instance FIDDLE Dog loves FIDDLE CLARK ' var parsed Parser parse kifString Parser writeParsedToFile 'filePath' parsed function error error file AST JSON format N B side-effect function returns undefined writeParsedToFileP writeParsedToFileP filePath string parsed KIFNode Promise Asynchronously writes parsed SUO-KIF file returning promise write operation successful promise value resolve null write operation fails register catch handler function receive error promise resolution var kifString ' exists FIDDLE CLARK instance FIDDLE Dog loves FIDDLE CLARK ' var parsed Parser parse kifString Parser writeParsedToFileP 'filePath' parsed catch function error handle error run parsed written file successfully Roadmap future jKif Parser managed repository's Issues view roadmap Contributing jKif Parser welcome contributions please read contribution guidelines submitting work development requirements instructions Development Requirements Node 0 10 x npm 2 x x Mocha Chai Jison Bluebird JSONFile Installing Dependencies Install Node bundled npm using Homebrew brew install node Install project development dependencies using npm npm install Running Tests installing dependencies tests run using following command npm test License jKif Parser - Lexical Analysis Parsing SUO-KIF JavaScript Objects Copyright C 2015 Clark Feusier cfeusier gmail com - Rights Reserved Permission hereby granted free charge person obtaining copy software associated documentation files Software deal Software without restriction including without limitation rights use copy modify merge publish distribute sublicense sell copies Software permit persons Software furnished subject following conditions copyright notice permission notice shall included copies substantial portions Software SOFTWARE PROVIDED WITHOUT WARRANTY KIND EXPRESS IMPLIED INCLUDING LIMITED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE NONINFRINGEMENT EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM DAMAGES LIABILITY WHETHER ACTION CONTRACT TORT OTHERWISE ARISING CONNECTION SOFTWARE USE DEALINGS SOFTWARE Appendix SUO-KIF SUO-KIF derived KIF Adam Pease Ian Niles construction SUMO KIF Knowledge Interchange Format Erlang-based language used formal representation interchange knowledge KIF SUO-KIF declarative semantics logically complete contra languages like Prolog SQL SUO-KIF designed primarily authoring knowledge makes amenable ontology design vanilla KIF Ontologies SUMO market-wide move informal taxonomies 'semantic web' formal ontologies new 'cognitive web' strong indicator even small sets axiomatized knowledge powerful large bodies informally structured data Formal knowledge used generate new knowledge informal specifications thing possibility inconsistency specifications provide consistent semantics concepts data meanings dependent particular inference implementation enter maching learning formal knowledge good open formal knowledge better open formal knowledge best reasoning led choose SUO-KIF origin language jKif Parser largest formal public ontology existence today Suggested Upper Merged Ontology SUMO written SUO-KIF SUMO formal ontology mapped complete WordNet lexicon SUMO domain-specific ontologies consists 25 000 terms 80 000 axioms SUMO merged millions instance facts YAGO Wikipedia Finally SUMO free owned IEEE want get SUMO hands world's engineers JavaScript seemed like logical choice target language top expose API querying manipulating SUO-KIF next library jKif release Jison Parser Generators Jison JavaScript parser generator based closely famous Yacc Bison Jison also includes lexical analyzer similar Lex Flex Jison probably well-known use generation parsers used CoffeeScript handlebars js compilers Jison like parser generators takes lexical scanner context-free grammar input spits parser used parse langauge described input grammar generated parser algorithm LALR 1 shift-reduce algorithm shifting tokens onto parse stack rule recognized point matching tokens reduced result combination action described matched rule bottom-up approach parsing keeping single look-ahead token described Back Top Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('A Sublime Text package that collects custom Gutter Themes for SublimeLinter - SalGnt/gutter-themes-for-sl', 'Skip content Sign Sign repository Explore Features Enterprise Blog Watch 1 Star 8 Fork 0 SalGnt gutter-themes-for-sl Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Sublime Text package collects custom Gutter Themes SublimeLinter 6 commits 1 branch 1 release 1 contributor branch master Switch branches tags Branches Tags master Nothing show v1 0 0 Nothing show gutter-themes-for-sl Update README md Add Contributing section latest commit 6c2dd62c3f SalGnt authored May 24 2015 Permalink Failed load latest commit information Minimal Round Add Minimal Round theme May 24 2015 Minimal Add Minimal theme May 24 2015 Rectangle Add Rectangle theme May 24 2015 LICENSE Initial commit May 24 2015 README md Update README md May 24 2015 README md Gutter Themes SL Sublime Text package collects custom Gutter Themes SublimeLinter Themes Preview Theme Error Warning Colorized Minimal Yes Minimal Round Rectangle Yes Installation Using Package Control package available Package Control Gutter Themes SL easily install using Package Control Install Package command Using Git Navigate Packages directory run command git clone https github com SalGnt gutter-themes-for-sl git Gutter Themes SL Manually Download zipped package GitHub Unzip rename folder Gutter Themes SL Find Packages directory using Preferences Browse Packages command Move Gutter Themes SL folder Packages directory Contributing Feel free contribute creation ask read official documentation making pull request also request new themes opening new issue License Gutter Themes SL package created Salvatore Gentile released MIT License MIT MIT License MIT Copyright c 2015 Salvatore Gentile Permission hereby granted free charge person obtaining copy software associated documentation files Software deal Software without restriction including without limitation rights use copy modify merge publish distribute sublicense sell copies Software permit persons Software furnished subject following conditions copyright notice permission notice shall included copies substantial portions Software SOFTWARE PROVIDED WITHOUT WARRANTY KIND EXPRESS IMPLIED INCLUDING LIMITED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE NONINFRINGEMENT EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM DAMAGES LIABILITY WHETHER ACTION CONTRACT TORT OTHERWISE ARISING CONNECTION SOFTWARE USE DEALINGS SOFTWARE Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try'),
('Hosting Static Files on Google Drive', 'See need fill need Menu Skip content HomeGithubLinkedInStackoverflowPersonal Hosting Static Content Google Drive want every Google website exact thing annoying reason First upload folder static content Google Drive right click folder click Share button click Advanced link bottom right access section click Change link right Public web save Link share Copy extract id parameter URL use tool append url http googledrive com host May 24 2015Phil Post navigation OCaml Modules Think Immutable Singletons OWebl Gets Support Mime Types Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code class title data-url del datetime em q cite strike strong pre class title data-url span class title data-url Notify follow-up comments email Notify new posts email Search Recent Posts OWebl Gets Support Mime Types Hosting Static Content Google Drive OCaml Modules Think Immutable Singletons Writing Strong Cover Letters Stop Waiting Inspiration Recent Commentsk OCaml Build Process ExampleTim Eaton Stop Waiting Inspirationlets Haverford AdieuOrangeTux HTTP Protocol Unix SocketsRon Aaron Introduction Stack-based Languages ForthArchives May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 Categories Business Character Marketing Non-Technical OCaml Personal Technical Uncategorized Meta Register Log Entries RSS Comments RSS WordPress org Proudly powered WordPress Theme Syntax Automattic'),
('Losing it All', 'Life Ops Code Ask anything Archive Found URL requested could found'),
('Introduction to Programming Using Java 7 (free book)', 'Introduction Programming Using Java Seventh Edition Version 7 0 August 2014 Author David J Eck eck hws edu WELCOME Seventh Edition Introduction Programming Using Java free on-line textbook introductory programming uses Java language instruction book directed mainly towards beginning programmers although might also useful experienced programmers want learn something Java certainly meant provide complete coverage Java language seventh edition requires Java 7 couple brief mentions Java 8 Previous versions included Java applets web pages make book applets eliminated version Earlier editions book still available see preface links download web site use computer PDF print versions textbook also available PDF includes links might best way read computer Links downloads found bottom page Readers strongly encouraged try sample programs read book download source code separately part web site using links See README file information compile run examples Search Text Although book conventional index search terms interest Note feature searches book on-line site must working on-line use Search Introduction Programming Using Java pages Containing words Containing words Short Table Contents Full Table Contents Preface Chapter 1 Overview Mental Landscape Chapter 2 Programming Small Names Things Chapter 3 Programming Small II Control Chapter 4 Programming Large Subroutines Chapter 5 Programming Large II Objects Classes Chapter 6 Introduction GUI Programming Chapter 7 Arrays ArrayLists Chapter 8 Correctness Robustness Efficiency Chapter 9 Linked Data Structures Recursion Chapter 10 Generic Programming Collection Classes Chapter 11 Advanced Input Output Streams Files Networking Chapter 12 Threads Multiprocessing Chapter 13 Advanced GUI Programming Source Code Examples Book Glossary News Errata 1996--2014 David J Eck work licensed Creative Commons Attribution-Noncommercial-ShareAlike 3 0 License license allows redistribute book unmodified form non-commercial purposes allows make distribute modified versions non-commercial purposes long include attribution original author clearly describe modifications made distribute modified work license original Permission might given author uses See license full details recent version book always available charge downloading on-line use Web address http math hws edu javanotes Downloading Links Full Web Site Download http math hws edu eck cs124 downloads javanotes7 zip zip archive contains complete copy web site usable almost computer Size 4 3 Megabytes Source Code Downloads http math hws edu eck cs124 downloads javanotes7-example-programs zip zip archive source directory web site includes source code sample programs text Note download complete web site already copy source directory See README file Size 773 Kilobytes http math hws edu eck cs124 downloads javanotes7-exercise-solutions zip zip archive containing source code end-of-chapter exercises extracted web pages contain solutions convenience included web site download See README file Size 322 Kilobytes PDF Downloads http math hws edu eck cs124 downloads javanotes7-linked pdf PDF version internal links navigation external links source code files exercise solutions resources included PDF Recommended on-screen reading Size 6 3 Megabytes 755 pages http math hws edu eck cs124 downloads javanotes7 pdf PDF version without links suitable printing PDF used printed version text except also includes appendix listing example programs glossary since would exceeded lulu com page limit Size 5 9 Megabytes 762 pages Print Copies Available Lulu com Printed versions made book available purchase printed versions print-on-demand publisher lulu com convenience would like bound printout nice form Please feel obliged buy printed version make money entire book available rather thick printed version http www lulu com content 612392 also available two parts http www lulu com content 559884 http www lulu com content 822314 Source Files Book Complete Sources complete source files used produce web site PDF versions book available download useful limited audience See end preface information link 1 August 2014 Version 7 0 released'),
('IntelliJ IDEA - 42 tips and tricks in 45 minutes', 'Home Users Groups Submit Article Voxxed Days Get Involved Contact Us Register Log Java Mobile JVM Methodology Cloud Big Data Future Presentation 42 IntelliJ IDEA Tips Tricks 45 Minutes 10 324 Views December 12 2014 voxxed 3324There many features IntelliJ IDEA re going concentrate 42 re going try show 45 minutes around 1 tip per minute need leave 3 minutes Hello Welcome Thank single one goes bad less minute per tip hoping won Filmed Devoxx France 2014 author voxxed View posts Social Network Login Get Voxxing Username Password Remember Register Sign weekly newsletter Follow Us Popular Last 24hrsLast 7 daysAll-time Java 9 Project Jigsaw May Break Code 4 671 views Even Use Java 8 Optional 2 445 views Running Java EE Applications Docker Containers Using Maven 459 views Get Docker Guide Total Newbies 220 views Company Soon-to-Be-Formerly-Known-as-Typesafe Rolls ConductR 1 0 186 views Even Use Java 8 Optional 18 238 views Java 9 Project Jigsaw May Break Code 6 408 views Get Docker Guide Total Newbies 1 078 views Java EE Node js Performance 1 008 views Running Java EE Applications Docker Containers Using Maven 985 views Even Use Java 8 Optional 20 383 views Good Microservices Architectures Spell Death Enterprise Service Bus 12 132 views Father Java Opinionated Guide Modern Java Development Part 1 9 563 views Get Docker Guide Total Newbies 8 791 views Java 9 Project Jigsaw May Break Code 6 408 views Java Mobile JVM Methodology Cloud Big Data Future Voxxed knowledge sharing platform DNA Devoxx conferences productive relation Parleys com 4th Floor 27-33 Bethnal Green Road London E16LA - UK 44 0 207 613 4688 info voxxed com Follow us Recent Posts Oracle Versus Google Four Things Consider May 28 2015 Startup Claims Official Images Docker Hub Riddled Security Holes May 28 2015 Microservices DevOps Cost Change May 28 2015 Basho Adds Spark Offerings New Data Platform May 27 2015 Going Dominate Devoxx UK May 27 2015 Tag Cloud internet things groovy IoT methodology Red Hat javascript Eclipse Android JCP Strings Threading Lambdas programming languages Java SE maven Swift java Java 8 Streams API data JavaFX devops scala ios microservices linux container oracle JSR SQL cloud google mobile jvm paas big data JDK Java 8 Parallel Streams java ee NoSQL Docker 2015 Copyright Voxxed Rights reserved'),
('/r/programmerchat -- text post only chat for programmers about programming (kind of the more serious counterpart to the awesome /r/programmerhumor)', "jump contentmy subredditsannouncementsArtAskRedditaskscienceawwblogbookscreepydataisbeautifulDIYDocumentariesEarthPornexplainlikeimfiveFitnessfoodfunnyFuturologygadgetsgamingGetMotivatedgifshistoryIAmAInternetIsBeautifulJokesLifeProTipslistentothismildlyinterestingmoviesMusicnewsnosleepnottheonionOldSchoolCoolpersonalfinancephilosophyphotoshopbattlespicsscienceShowerthoughtsspacesportstelevisiontifutodayilearnedTwoXChromosomesUpliftingNewsvideosworldnewsWritingPromptsedit subscriptionsfront-all-random gadgets-sports-gaming-pics-worldnews-videos-AskReddit-aww-Music-funny-news-movies-books-history-food-philosophy-television-Jokes-Art-DIY-space-Documentaries-Fitness-askscience-nottheonion-todayilearned-personalfinance-gifs-listentothis-IAmA-TwoXChromosomes-creepy-nosleep-GetMotivated-WritingPrompts-LifeProTips-EarthPorn-explainlikeimfive-Showerthoughts-Futurology-photoshopbattles-mildlyinteresting-dataisbeautiful-tifu-OldSchoolCool-UpliftingNews-InternetIsBeautiful-sciencemore reddit com programmerchathotnewrisingcontroversialtopgildedpromotedwant join sign create account seconds Englishlimit search r programmerchatuse following search parameters narrow results subreddit subredditfind submissions subreddit author usernamefind submissions username site example comfind submissions example com url textsearch text urlselftext textsearch text self post contentsself yes self include exclude self postsnsfw yes nsfw include exclude results marked NSFWe g subreddit aww site imgur com dogsee search faq details advanced search author subreddit remember mereset passwordloginSubmit new text postprogrammerchatsubscribeunsubscribe1 499 readers 24 users nowprogrammerchat AMA schedule Eric Lippert Friday 5 29 4pm NY time Zach Latta hackEDU coming weeks Idea AMA Discussion thread programmerchat text-submission subreddit discussion among programmers topics interest programmers Think serious counterpart awesome r ProgrammerHumor subreddit programming programmer practice conceptual programming issues specific technical programming questions e like programmers stackexchange com Stack Overflow open-ended good something's likely closed Stack Overflow open-ended opinion-based may well great sub Poll Monokai default theme subreddit Off-topic specific technical questions one right answer suitable Stack Overflow go instead come back open-ended discussions including technical programming topics link-only posts blogs articles go r programming -- feel free include links blogs articles text post part question topic discussion help wanted ads -- go r jobbit Thoughts sub Ideas thread created Ghopper21a community 8 daysmessage moderatorsMODERATORSGhopper21about moderation team get best reddit delivered weekemail subscribe 484950 Announcement first AMA Programmer blogger Eric Lippert C fame answering questions Friday 4pm NY time 1pm SF time self programmerchat submitted 1 day ago Ghopper21 - stickied post25 commentssharecancelloading 1111213What git hook wish you'd put years ago self programmerchat submitted 4 hours ago Ghopper212 commentssharecancelloading 2234How bring boss self programmerchat submitted 3 hours ago not_qqyqnz1 commentsharecancelloading 3456is cc'ing recipient manager bad self programmerchat submitted 7 hours ago username_my15 commentssharecancelloading 4456The Daily Quote 5 28 happily spending much time automating short tasks Douglas Adams self programmerchat submitted 7 hours ago Ghopper211 commentsharecancelloading 5789 Recommendation anyone ever used bug tracking software track home chores errands self programmerchat submitted 12 hours ago Amablue4 commentssharecancelloading 6232425DAE use instead comments commit messages self programmerchat submitted 21 hours ago is-this-even-a-thing10 commentssharecancelloading 7171819What good code habits learned deal bad code others self programmerchat submitted 19 hours ago fainting-goat24 commentssharecancelloading 8151617Is sensible -- stupid -- use nitpicky code style inconsistencies negative signal evaluating interns coders general self programmerchat submitted 20 hours ago Ghopper2119 commentssharecancelloading 9678What chair desk use self programmerchat submitted 20 hours ago KalamMekhar10 commentssharecancelloading 10789Any Haskell web guys using self programmerchat submitted 22 hours ago professorlamp4 commentssharecancelloading 118910The Daily Quote 5 27 15 edition write code cleverly possible definition smart enough debug self programmerchat submitted 1 day ago Ghopper215 commentssharecancelloading 12567Singleton rant self programmerchat submitted 1 day ago Ghopper2122 commentssharecancelloading 13456How important active Github profile applying jobs self programmerchat submitted 1 day ago gatorviolateur10 commentssharecancelloading 14567What kind software build job hobby language use build self programmerchat submitted 1 day ago jeans_and_a_t-shirt34 commentssharecancelloading 15161718What language wish could use production better ecosystem self programmerchat submitted 1 day ago ar-nelson21 commentssharecancelloading 16151617Are senior veteran programmers self programmerchat submitted 1 day ago dyingtosaythis10 commentssharecancelloading 17101112Media movies books comics programmers appreciate self programmerchat submitted 2 days ago ar-nelson16 commentssharecancelloading 1891011 Meta AMA discussion thread self programmerchat submitted 2 days ago Ghopper21 M 4 commentssharecancelloading 19567Equivalent new C nameof langauges self programmerchat submitted 2 days ago Ghopper2117 commentssharecancelloading 20456The Daily Perlis 5 26 15 edition Functions delay binding data structures induce binding Moral Structure data late programming process self programmerchat submitted 2 days ago Ghopper2110 commentssharecancelloading 21181920Open-Source Project Recruitment Thread self programmerchat submitted 2 days ago realfuzzhead24 commentssharecancelloading 22141516Do feel bad IDEs haven't booted single time since tried IntelliJ IDEA self programmerchat submitted 2 days ago underkuerbis13 commentssharecancelloading 23202122Vim Emacs self programmerchat submitted 2 days ago Aks9554 commentssharecancelloading 24345Touch typing important what's best way learn self programmerchat submitted 2 days ago overactor15 commentssharecancelloading 25141516Any c developers Represent self programmerchat submitted 2 days ago StartupTim33 commentssharecancelloading view next aboutblogaboutvaluesteamsource codeadvertisejobshelpsite rulesFAQwikireddiquettetransparencycontact usapps toolsAlien Blue iOS appreddit AMA appmobile betabuttons 3reddit goldreddit storeredditgiftsreddit tvradio redditUse site constitutes acceptance User Agreement Privacy Policy Genitive 2015 reddit inc rights reserved REDDIT ALIEN Logo registered trademarks reddit inc Rendered PID 24642 app-88 2015-05-28 18 12 32 339754 00 00 running 6258777 country code"),
('Replacing <noscript> with accessible, unobtrusive DOM JavaScript', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 1 Star 0 Fork 0 fmpalinkas web-accessibility-tutorials Code Issues Pull requests Wiki Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Replacing noscript accessible unobtrusive DOM JavaScript Frank M Palinkas edited page May 21 2015 1 revision Pages 3 Home Replacing noscript accessible unobtrusive DOM JavaScript Using WAI ARIA Roles JSON LD Clone wiki locally Frank M Palinkas Senior Technical Writer 2015 Introduction book ppk JavaScript Peter-Paul Koch points HTML noscript element limitation Modern user agents JavaScript enabled hide content contained within noscript tags reveal JavaScript disabled User agents support JavaScript display content within User agents partial antiquated JavaScript capabilities however interpret element correctly show content JavaScript disabled also show content never gets rendered impact accessibility content writing targeted modern standards-based compliant fully capable JavaScript user agents employing noscript element problem user agents among audience unpredictable however replacing noscript element another mechanism becomes significant article looks one solution solution behavior intended noscript element enabled antiquated partially-capable JavaScript user agents workflow follows Insert unobtrusive JavaScript hook via id attribute value parent container's opening tag Associate hook external JavaScript function sets parent-to-child relationship container content JavaScript enabled external function keeps alternative content hidden user agent cannot interpret JavaScript expressions alternative content markup revealed JavaScript disabled function longer works alternative content markup revealed ensures graceful degradation script Important Note ability hide alternative content JavaScript exist browser user agent able render content ensuring accessibility graceful degradation Building HTML Markup section we'll build HTML markup portion example head element tags web page insert script element containing path external noscript js file Create div element within body element tags contain hidden content Give opening tag div element id attribute value noscript div id noscript sets unobtrusive hook external JavaScript function noscript Place elements content hidden JavaScript enabled within div id noscript div container following HTML markup sample illustrates DOCTYPE html html lang en head title noscript_example title meta content text html charset utf-8 http-equiv Content-Type script src scripts noscript js type text javascript script head body div id noscript p Lorem ipsum dolor sit amet consectetuer adipiscing elit p ul li href Hyperlink li li href Hyperlink B li ul div body html Building unobtrusive DOM JavaScript section we'll build two main sections external JavaScript file Writing portion function parentheses place document removeChild expression tests see supported user agent supported function continue div content remain hidden supported function progresses else statement tests Declare container div element identify id value external unobtrusive hook markup Instruct parent div remove child content within Writing else portion function else parentheses place document getElementById expression test supported user agent supported function continue div content remain hidden supported function end div content revealed establishing graceful degradation script Return element id style applied Set style display none control presentation aspect child content following script contained noscript js file kept external linked web page described Building Markup section noscript js file function addLoadEvent func var oldonload window onload typeof window onload function window onload func else window onload function oldonload oldonload func var noscript addLoadEvent noscript addLoadEvent function function noscript document removeChild var div document getElementById noscript div parentNode removeChild div else document getElementById document getElementById noscript style display none Summary article demonstrates solution replaces HTML noscript element external unobtrusive JavaScript function noscript function solves problem partially-capable antiquated JavaScript user agents revealing alternative content JavaScript disabled Employing function reveals content intended ensures graceful degradation script full accessibility alternative content author Frank M Palinkas Frank American working Mountain View California Quixey Inc Senior Technical Writer Information Architect Developer authors markup presentation behavior code content using HTML5 CSS RDFa 1 1 JSON JSON-LD Schema org Dublin Core Metadata Initiative DCMI ontologies Unobtrusive DOM JavaScript technical writing incorporates web standards accessibility linked structured data semantics Frank enjoys creating web-based tutorials happily married wife Wanda two sons Gregory Andre Frank Wanda live Sunnyvale California USA article licensed Creative Commons Attribution Non Commercial - Share Alike 2 5 license Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Postgres giving MySQL a serious run for its money (HackerNews hiring trends):', "Home Archives May 2015 Highlights Analysis Data Hacker News Hiring Trends May 2015 - Tracking popular programming languages databases software development tools whoishiring discussion threads Show Top 5 Top 10 Top 20 Top 50 compare May Highlights Thursday May 21 2015 interesting trend May continuing quick rise React JavaScript library AngularJS pioneer meteoric rises React's may end faster climb top JavaScript library war zoomed past Backbone js 2nd place year since first mentiond hiring posts Programming Languages Compare JavaScript Python Ruby Java Compare C Scala Clojure Go Server-side Frameworks Compare Rails node js PHP Django JavaScript Frameworks Compare AngularJS Backbone Ember React SQL Databases Compare Postgresql MySQL SQL Server NoSQL Databases Compare Mongodb Cassandra Riak CouchDB DevOps Tools Compare Chef Puppet Ansible DevOps term Subscribe updates Tweet Top 20 Rising Falling Tech Rank Last Month Change Last Year Change Python 1 2 1 1 0 JavaScript 2 1 -1 2 0 iOS 3 4 1 5 2 Android 4 8 4 4 0 Ruby 5 5 0 6 1 Remote 6 3 -3 3 -3 Rails 7 6 -1 8 1 Full Stack 8 9 1 11 3 AngularJS 9 7 -2 9 0 node js 10 12 2 7 -3 Java 11 11 0 10 -1 AWS 12 10 -2 18 6 DevOps 13 14 1 17 4 Postgresql 14 15 1 20 6 Front End 15 18 3 16 1 passionate 16 13 -3 14 -2 React 17 25 8 68 51 Redis 18 23 5 26 8 Machine Learning 19 17 -2 15 -4 CSS 20 22 2 12 -8 Tech Mentions Rank Last Year Mentions Last Year Rank Change Microservices 9 69 0 160 91 Mesos 5 84 0 161 77 Docker 29 35 4 92 57 Computer Vision 11 62 2 115 53 React 53 17 5 68 51 Lua 5 87 1 134 47 Ember 15 49 4 90 41 MATLAB 5 89 1 130 41 RabbitMQ 13 55 4 85 30 Back End 19 45 5 74 29 Tech Mentions Rank Last Year Mentions Last Year Rank Change jenkins 1 147 5 73 -74 LAMP 1 134 8 61 -73 Scrum 4 100 7 64 -36 EC2 6 81 11 47 -34 Bash 3 103 5 71 -32 Vagrant 3 104 5 77 -27 Apache 5 88 7 62 -26 SQL Server 5 86 6 65 -21 HTML5 13 53 19 35 -18 statistics 9 68 10 51 -17 Portland web developer Ryan Williams Follow ryanwi Email ryan ryan-williams net Code GitHub"),
('Learning GO, made a simple 52 card deck.', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 1 Star 0 Fork 1 michaelbasford godeck Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP 2 commits 1 branch 0 releases 1 contributor Go 100 0 Go branch master Switch branches tags Branches Tags master Nothing show Nothing show godeck Go fmt latest commit f398fb688b michaelbasford authored May 24 2015 Permalink Failed load latest commit information LICENCE Initial commit May 24 2015 README md Initial commit May 24 2015 godeck go Go fmt May 24 2015 README md GoDeck 52 card deck implementation written Go It's licenced MIT see LICENCE file information Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Wrangling Complexity', 'Published inThe Connected CompanySign Sign upDave Gray Apr 2013 minNext storyNext storyThe author chose make story unlisted means people link see sure want share Yes show sharing optionsWrangling complexity Share Twitter Share FacebookWrangling complexityBusinesses today struggling survive thrive ever complex rapidly changing world good news lot problems addressing complexity change already solved solved people started complexity problems first place technologists solved problems Technologists started wrangling complexity anyone else wave complexity change coevolution cresting across business world first appeared technology realm computer scientists tackled complex software design problems struggled interweave multiple systems large-scale systems systems Since 1950s technologists adopted new approaches allow better address complexity ongoing change One called agile development different way work called service orientation focused bits work connected bits approaches emphasize continuous learning adaptation distributed control rather planning prediction central control specifically designed managing work fast-changing complex uncertain environments approaches function like complex adaptive systems parts system learn adapt coevolve like biological community Agile development early 1950s IBM programmers working software things like submarine control systems missile tracking systems complex could conceived built one go Programmers evolve time like cities starting simple working system could tested users gradually adding function detail iterative cycles took one six months complete 1969 IBM internal report called simply Programming Process IBM computer scientist M M Lehman described approach design process seeded formal de nition system provides rst executable functional model tested expanded sequence models develop increasing amount function increasing amount detail function executed Ultimately model becomes system iterative approach software development programmers start creating simple working seed system expand subsequent cycles user testing development become common approach software design known variety names iterative development successive approximation integration engineering spiral model many others 2001 group prominent developers codified core principles document called Agile Manifesto gave name agile seems stuck Agile small teams deliver real working software times get meaningful feedback users early possible improve product time iterative development cycles Developing software agile way allows developers rapidly respond changing requirements Agile developers believe uncertainty high thing perfect plan ahead plan likely wrong Service orientation Early computer programs written sets instructions like recipes First user otherwise worked fine simple programs software tends get complex time programs reached million lines code hit complexity ceiling started break software systems connected systems number dependencies interconnections increased point tangled web interdependent functions impossible modify adjust one place without breaking something somewhere else 1960s computer researchers started code modular reusable building blocks instead procedural instructions Computer pioneer Alan Kay named approach calling object-oriented programming thought objects like biological cells able communicate messages later explained Object orientation allowed programmers design software system interacting objects instead list instructions could modify single object without worrying complex interdependencies object could seen independent machine roles responsibilities within larger system Object-oriented programming primarily used inside large enterprises much interactions companies advent internet added another layer challenge complexity well opportunity Suddenly feasible software exchange information within business business partners suppliers customers next phase programming evolution service orientation emerged solve problem delivered way software objects interconnect internet massive scale Software services similar software objects modular functional units operate independently interact services using agreed-upon set common standards big move forward comes way interact larger world service orientation technologists agreed set standards allow service interact service web regardless service underlying technology Services made available web network made available general public defined set authorized users power service-oriented architecture service learn adapt coevolve without wreaking havoc overall system like species coevolve biological community Three principles core service-oriented design service contracts composability loose coupling Service contracts service contract simple description service including service provider needs customers rules service provider customer interact Like business contract represents agreement Business examples abound contract doesn need specified writing long parties understand agreement example service contract fast-food restaurant different sit-down restaurant agreement customers stand line order number exchange faster service sit table fast-food restaurant wait server come take order waiting long time reason fast-food works providers customers understand promise service agree work together certain way service contract specifies provider doesn specify work done advantage service hide internal complexity even change way operates long continues keep promise contract important allows service independently evolve improve operations without affecting customers services service complex likes internally long provides simple contract describing interact customers services kind complexity invisible customers example kitchen dishwashers restaurant usually visible diners stores areas storerooms shipping receiving docks obvious customers iOS operating system powers iPhones iPads hides lot internal complexity files folders apps access things Amazon customers know anything Amazon warehouses distribution systems order website sign package arrives reason hide complexity makes service easier understand use Since customers see things act make decisions buy make better faster choices Composability services combinations services example kind food service vending machine five-star restaurant must provide core services must able take orders must able take payments must able store deliver customers Every food service must make decisions things combine services services deliver value customers Common standards make services useful making connectable composable easily combined larger services example consider restaurant bar kitchen use common ordering system work together effectively Wait staff easily access bar kitchen services total charge show one bill means larger service works better convenient customer time bar kitchen services separate sense dependent exchange information also operate independently bar shuts people still order food vice versa Loose coupling Loose coupling simply means services agree use set common set rules connect long service follows rules update change modify without worry impact services system Web pages example loosely coupled one web page link another without knowing anything page beyond address rules connection case HTTP protocol common web pages opposite loose coupling tight coupling elements sides must designed complement fit one another example mobile phone companies unique interface attaching charger phone really benefit customers primary reason sell chargers drawer full perfectly-good chargers useless anyone else good reasons tight coupling Things designed work closely together deliver better performance efficiently example components car tightly coupled part designed fit smoothly integrate every part take door engine Honda attach Ford least easily car loosely coupled many elements road-and-car system good reason example pull gas station fill tank worry whether pump nozzle fit standard need put air tires worry whether air hose fit tires standard Cars tightly coupled internally loosely coupled overall system operate Service-oriented architecture works way Internally service complex wants like car needs interoperate larger system follows common set rules Standards proprietary closed Apple iOS Microsoft Windows Facebook application development platform provided managed single company open like HTTP TCP IP govern web interactions electrical sockets home Open standards defined managed technical communities sometimes evolve naturally time like standard width cars roads traced back width Roman roads determined width two horses took pull Roman chariot Regardless whether standards open closed number people businesses adopted make valuable adopted standard valuable Service contracts make services simple modular understandable easy access like building blocks Composability makes services combinable connectable Loose coupling standardized interfaces connections make work Organizing agility Agile service-oriented approaches designed complex uncertain fast-changing environments proven methods organizing systems work approaches solved complex software problems also work business example Whole Foods Market operates agile service-oriented principles Small agile autonomous teams store autonomous profit center made ten self-managed teams manage various aspects store like produce deli Teams determine staffing levels manage part store Teams responsible operating decisions within group including pricing orders point-of-sale promotion Teams buy locally stock things feel interesting local customers New hires subject peer review one-month trial team members vote two-thirds majority required keep person team Service contracts team bound service contract specifies accountable measured performance rewarded team measured managed profit center Every four weeks company calculates profitability every team every store Teams get bonuses meet exceed profit targets Ten times year regional leader executive company headquarters conducts surprise inspection gives store report card rates 300 items year company survey probe employee morale issues Composability teams also composable store composed ten teams average ten teams make store team leader participates higher-level team manages store team leaders store region make regional team six regional presidents make team manages company Loose coupling Whole Foods team operates autonomous unit control fate Performance data available teams compare performance teams store similar teams stores team historical performance Teams also access detailed financial data like product costs profits per store even others compensation bonus information look best-selling items stores compare Employees Whole Foods well-informed SEC designated employees insiders stock trading purposes data transparency builds trust fuels spirit intense competition teams stores since every team compare every team try raise ranks Whole Foods created platform makes possible company stores teams compete tune improve performance time time team autonomy make local decisions see fit improve performance every Whole Foods store carries unique mix tailored self-managed teams particular location Whole Foods agile team-based strategy allows target extremely small locations customized stores starting open small stores suburbs college towns rents lower competition less fierce Customers like system industry average sales per square foot 350 Whole Foods one top ten retailers US sales 900 per square foot higher Best Buy Zale jewelers bad grocery store Employees like Whole Foods made Fortune 100 best places work list every year since list started 1998 companies built agility businesses today designed agility mind systems tightly coupled growth driven desire efficiency rather flexibility Consider difference car road train train track car road loosely coupled car capable independent action agile complex things train track tightly coupled highly optimized particular purpose efficient moving stuff long want get train wants stop train fewer options forward back something blocking track train go around efficient flexible Many business systems tightly coupled like trains track order maximize control efficiency business environment requires today efficiency flexibility tightly coupled systems rails pointing right direction changing rails although feel necessary complex expensive sit business meetings setting goals making strategic plans arguing way rails pointing really need get train altogether embrace completely different system approach seems simple think difficult hard even think especially sitting business train going hundred miles hour feel like headed wrong direction Excerpted Connected Company Dave Gray Dave Gray Founder XPLANE author Selling VP Connected Company Gamestorming RecommendRecommendedBookmarkBookmarkedShareMoreFollowFollowingThe Connected CompanyWhat next century business look like BlockedUnblockFollowFollowingDave GrayManagement consultant Author Connected Company Gamestorming http davegrayinfo comPublished Apr 20 rights reserved author'),
('My One Piece of Advice', 'One Piece Advice could give one piece advice programmers work would Use pure functions wherever use almost exclusively pure function anyway pure function function mathematical sense mapping input output pure function doesn actually anything observable doesn talk APIs update DOM computation returns value Pure functions bread butter functional programming two important properties compared normal functions Given input arguments function always returns value Another way saying function depend information passed arguments Evaluating function produces observable side effects changing state O Given properties following function pure function getAge born const new Date const age getFullYear - born getFullYear const mDiff getMonth - born getMonth mDiff 0 mDiff 0 getDate born getDate return age - 1 return age Well doesn O mutatation ok front always return value input Let try see const birthday new Date 1988 5 5 getAge birthday returns 27 getAge birthday returns 27 Seems return value every time looks good pure right Well hang hopped time machine travelled time next year getAge birthday returns 28 Hmm input different output means function pure reason pure depends mutable information didn pass current date Making function pure pretty easy need accept current date parameter function getAge born const age getFullYear - born getFullYear const mDiff getMonth - born getMonth mDiff 0 mDiff 0 getDate born getDate return age - 1 return age doesn matter call function long call input always return value const new Date 2015 5 22 const birthday new Date 1988 5 5 getAge birthday returns 27 today 10 years time purity bother purity worth pass extra parameter Simplicity Pure functions simple take arguments return value sounds like trivial benefit hidden dependencies side-effects nightmare applications turn balls yarn precisely random functions modify state touch part system caller see Pure functions change state trigger events launch nukes return values Fewer bugs Although code completely bug-free using pure functions avoids entire class bugs call pure function many times need sure aren subtle interactions parts system aren race conditions system won end invalid state Code re-use pure functions return value means re trivial re-use need tease logic apart persistance layer add flag switch behaviour try prevent event triggered call function something result Easier test Testing pure functions simple need create complex stubs fake environments mock collaborators anything else like pass input check output Improved performance potential Pure functions always return output given input allows us use memoisation powerful optimisation results slow computations cached speed subsequent calls pure functions inherently thread-safe data either scoped function immutable take advantage multiple cores without needing worry complexities concurrency said pure functions usually less efficient CPU memory resources since copy immutable data structures rather using direct mutation However wouldn normally consider big concern unless application extremely performance sensitive take advantage parellelism fun less time spend scratching head debugger time spend creating value happier Pure functions allow reason programs efficiently spend time fun stuff much functional programming pure functions want create reliable systems pure functions foundation build upon matter language work programming functional style provides benefits whenever convenient think hard decision isn convenient John Carmack co-founder ID Software Home m Blake Haswell blakehaswell help development teams build reliable software move fast without breaking things m in-front computer m usually riding bicycle'),
('dataset: a Python library for making reading and writing to databases the same as reading and writing JSON', "Navigation index next dataset 0 6 0 documentation dataset databases lazy people Although managing data relational database plenty benefits re rarely used day-to-day work small medium scale datasets see awful lot data stored static files CSV JSON format even though hard query update incrementally answer programmers lazy thus tend prefer easiest solution find Python database isn simplest solution storing bunch structured data dataset going change dataset provides two key functions make using SQL databases Python breeze simple abstraction layer removes direct SQL statements without necessity full ORM model - essentially databases used like JSON file NoSQL store Database contents exported frozen using sophisticated plain file generator JSON CSV support Exports configured include metadata dynamic file names depending exported data exporter also used command-line tool datafreeze simple data loading script using dataset might look like import dataset db dataset connect 'sqlite memory ' table db 'sometable' table insert dict name 'John Doe' age 37 table insert dict name 'Jane Doe' age 34 gender 'female' john table find_one name 'John Doe' similar code without dataset Features Automatic schema table column written exist database created automatically Upserts Records either created updated depending whether existing version found Query helpers simple queries rows table distinct values across set columns Compatibility built top SQLAlchemy dataset works major databases SQLite PostgreSQL MySQL Scripted exports Data exported based scripted configuration making process easy replicable Contents Installation Guide Quickstart Connecting database Storing data Using Transactions Inspecting databases tables Reading data tables Running custom SQL queries Exporting data Freezefiles datafreeze command Basic Usage Example Freezefile yaml Options detail API documentation Database Table Data Export Contributors dataset written maintained Friedrich Lindenberg Gregor Aisch Stefan Wehrmeyer code largely based preceding libraries sqlaload datafreeze course re standing shoulders giants cute little naked mole rat drawn Johannes Koch managing databases Python simple reading writing JSON files Overview Quickstart Guide Freezefiles API documentation Installation Quick search Enter search terms module class function name Navigation index next dataset 0 6 0 documentation Copyright 2013-2015 Friedrich Lindenberg Gregor Aisch Stefan Wehrmeyer"),
('SWGs Dynamic World', "Raph Koster's personal website MMOs gaming writing art music books Blog Recommended posts Popular Posts Game Design Theory Fun Presentations Essays Interviews panels Snippets Laws Online World Design Online World Timeline Books Links Writing Fiction Poetry Lit Crit Music CDBaby Amazon iTunes Listen Instruments tunings Art Pencils Pen Ink Cartoons Digital Art Doodles Raph CV Contact Raph Press kit Upcoming Events Jedi Saga Designing Living Society SWG part one SWG Dynamic World Posted Raph Koster Visited 1264 times Game talk Gamemaking Tagged mmo history programming star wars galaxies swg terrain vw tech Apr 202015 post dedicated memory John Roy lead environment artist Star Wars Galaxies Help family Let math Let say need pretty big world sixteen kilometers side made tiles tile needs know texture one byte much right get 256 tiles planet though isn lot wait add variety putting colors re 3d right tint tiles slightly get variation normally three bytes apply color let instead say planet fixed list colors 256 way tile look list colors need one byte Oh 3d game heightfield need know elevation tile ll say 256 levels height way keep nice conservative three bytes per tile good need lot tiles re one meter side means planet need 16 384 make one edge need 16 384 16 384 lay whole world 268 435 456 bytes world course need ten planets one like 2 684 354 560 bytes Nobody uses bytes 2 621 440k 2 048mb 2 56 gigabytes uncompressed going fit CD mean doesn include art yet DVD drives weren yet widespread 2003 fact taking 2 5 gigs space maps unheard solution problem didn let us ship Star Wars Galaxies also unlocked everything player housing crafting giant Imperial vs Rebel battles Patent disclaimer read farther know Sony Online actually patented technology going describe someone reading technology patents stop Origins ve described abortive Privateer Online worked game like spaceflight classics intended thousands worlds going accomplished using neat quirk random numbers work computers fixed random seed early experiments see computers actually generate random numbers generate predictable numbers using seed value make results erratic constantly change seed value usually using current time millisecond something many routines used order make numbers seed take exact routine one computer another give exact seed ve used elsewhere generally speaking get back random numbers exactly order basically really cool way compress information different knowing given formula calculate pi everyone able get exact result lot easier hand around tiny formula try handing around zillion individual digits formula fits bytes individual digits take lot space planet Privateer Online used single seed picked things like sky color tile colors generated whole map one seed value enough small planet small thing lot randomness generation routines terrain sort get patterned roll gentle rolling hills going get gentle rolling hills fairly consistently spiky mountains well going everywhere got SWG stuff brain course also saw projects SOE maps meshes cases actually sourced procedural terrain generators fancy ones couldn run realtime involved day-long baking process resultant maps turned meshes meshes could run compression level-of-detail routines reduce size still way get truly big worlds Actual size isn factor course granularity world matters 16km x 16km world tiles kilometer size going take data space 16 meter 16m world also game world like Eve Online vast vast majority empty space procedurally generated little homage Douglas Adams seed value procedural galaxy number 42 matters whether change world rolled seed value exactly go carve hole without storing actual map memory leads players spend lots time debating right way measure game world size Generating worlds kind old hat harder part make world living possible one change evolve high level detail still plenty room layering tool tool actually published layman version SWG game website advance launch still find article Wayback Machine heart idea marrying Photoshop layers procedural generation screenshot tool article Shapes like ellipses circles boxes easily described mathematically say run rule re inside circle rule re outside say things like run one rule gives gentle changes use rule blend value much mountainous rule blend onto third rule grassy plains see several circle rules map never river generation though result rivers tended form loops could make Water simple water table height anything underwater also added ability insert water sheets arbitrary heights could things like river Theed top cliff Early big dreams maybe underwater play never even made onto schedule since improbable early work Tatooine showing terracing technique described give realistic example mountainous areas wanted ledges available pretty often Ledges terracing easy create say whatever mountain routine output clamped multiple something instead getting 1 2 3 4 5 6 7 8 9 d get back 1 4 8 across entire map get something looks like wedding cake plus areas dead flat Ah say run rule places ll decide places taking another rule checking high spots' get flattening happening little islands stack rules order Plains filter put mountains somewhere Mountains filter put ledges places Ledges gentle wavy one make ledges dead flat applied across entire map finally circle flat area need build say Dee ja Peak Oh used similar rules put color washes terrain textures cases came wavy grass could also come bumpmaps trees plants rocks even sorts points interest fact stack quite lot rules like still take little storage space beauty rules save little text files planet SWG usually order 16-32k text beauty something like Perlin noise terrain generator routine ask elevation result arbitrary coordinate generate terrain order dependent next met Ken Perlin inventor Perlin noise conference flew office helped optimize algorithms one tree meant could use graphical level detail played may recall terrain detail slider options capable bringing machine crawl max query elevation every coordinate draw distance lower settings instead started skipping points every one start eventually computing one every 8 16 elevations resulted less terrain tiles way could see popping moved closer heights computed changing profile mountains way way worse trees though whole forests would pop view finally generation threshold Nobody could actually run max detail get decent framerate time hope machines grew powerful d able days could probably compute entire planet put RAM beefy enough machine took marketing screenshots everything maxed stood still taking tech director Jeff Grills gave presentation AMD event challenges rendering performance read technically inclined Even many players noticed quality graphics seemed lower early shots later ones E3 demo shaders everything better lighting general drop-off big Gabe penny Arcade actually wrote post complaining players know bigger loss actually characters terrain early characters looked way cooler couldn afford draw calls something Challenges Procedural environments sameyness though rules tweaked enough actually add detail human algorithm isn bound time constraints need quite lot fine detail variation rules get back terrain really surprise Like real world fairly bland fact one classic videogame map tricks heighten slopes dramatically compared real world real world slopes much gentler 30 degrees John Roy artists used handcrafting environments trouble tool quite worked months hand-in-hand late John Roy lead environment artist tweak best practices basic understanding use rules John passed away months ago admirer eventual result Galaxies d like urge donate memorial fund family use circles boxes rules allowed artists craft specific film locations pretty huge degree accuracy call iteration trying different seeds got something matched seen film Also performance limit many rules could pile map hit hundreds would slow calculation code check every point whether influence given rule imagine hundreds point-in-circle tests every point map budgets far rule usage earliest work Theed cliffs also recall lead graphics programmer wrestled issue nice smooth blending tiles would require ton blend maps overdraw tiles stamped every tile could theory one tile eight different neighbors worked trying deal way would provide decent performance weeks remember asking didn always stamp tile textures 2 2 blocks never two tiles meeting got angry look face tile blending worked next day big issue course server needed know map info servers really great shakes mentioned Jedi post discovered servers going less powerful anticipated sort budget savings re-using old EQ servers something ended Pentium III-600s servers given player machine needed calculate everything around horizon one player server needed know terrain around every player every AI pathfinding routines could run collision checked AIs could move etc server sometimes couldn keep part AI alert radius combat radius fell dramatically beta shooting ground occasionally possible may also never got full 3d collision meaning couldn jump tiny little walls Dynamic rules content unlocked One dozens dynamic POI theaters built procedural terrain kind big experiment gave us lot headaches Many quite possibly game-impacting degree really damaging meanwhile Everquest 2 Planetside managing move forward hand-crafted mesh solutions stuck another big reason could add rules fly Rules could attached object world unlocked ability place building anywhere limited simple circles since easiest compute distance center would simple strong smoothing routine clamp everything inside circle elevation center circle d little bit fade edge circle might re-texture terrain d no-rock-flora-or-other-crap set result able player housing Players able put housing anywhere wasn disallowed Oh disallowed wrong spots fiction reasons weren allowed let people build suburbs around core cities even though absolutely obvious places let suburban sprawl happen result got fictional cities weird empty ring around filled newbie monsters followed outer ring crust player city dynamic points interest encounters spawned complete structures rather spawning monster let us theory even questlets spawn written Dynamic POIs sort didn ever make launch spawning structures along enemies certainly general spawning SWG Wasn based world based players already like random encounters D D intended anti-camping mechanism though often resulted spawns dumping building head lairs Rather spawning single creatures generally spawned creature spawner literal design spec like Gauntlet Lairs spawned creatures given population limit spawned babies intended capture taming creature handlers others adults aggro attack-on-sight peaceful creatures driven whether approaching lair everything defends home Blow lair actually killed spawn concept started clear back Ultima Online spawned orc camps complete orc wizards whatnot Unfortunately housing used clearings UO spawns eventually nowhere appear campsites Players able build camps wilderness conferred much benefit town Today Galaxies players often remember camps one social features game military bases unlocked huge chunks Galactic Civil War players unlocked enormous amount gameplay could spawn little bandit camp side mountain cliff even would create little ledge camp deleted later rule would go cliff would restored original appearance Lastly perhaps critically also unlocked ability harvesting anywhere world crucial component game economy size comparison UO pre-Trammel SWG UO invisible resources attached grass rocks everything really see three posts 1 2 3 METAL stats METAL originally steel-gray even One day hacked system used guessed fixed random seeds determine kind metal got given location attached flag resultant ore checked flag every step crafting process transferred flag ingredient next stage result colored armor many different mineral types knew wanted SWG best way use inheritance tree instead METAL Ferrous Iron Non-Ferrous Copper Designer Reece Thornton assigned system went crazy providing resource array statistics could leveraged crafting system able swamp resources underneath whole map allow players build harvesters factories anywhere following gold rushes oil booms within game tied back crafting system game economy yes combat game shaping game powerfully helping make fell like real world SWG economy crafting system deserves post write high level midst post something else end huge part living world quality Galaxies came idea shouldn necessarily know world surprising us well players Yeah lot empty frontier land supposed thickly populated handcrafted little encounters cool locations never managed despite applying small army designers offer malleability unexpected turned key asset probably saved production literally millions dollars troubles introduced might well work even better computers today without issues system presented Add shadows butterflies procedural wind blowing things fro day night cycle stars actually moved across sky pretty soon somewhere still low framerate blurred choppy could feel immersive used picture desktop years would asked picture taken quite regularly think people expected hear Arizona taken aback instead said galaxy far far away Also series Jedi Saga Temporary Enemy Flags SWG Designing Living Society part one Part Two fail Share post Click email friend Opens new window Share Facebook Opens new window Click share Twitter Opens new window Click share Google Opens new window Click share LinkedIn Opens new window Click share Reddit Opens new window Click share StumbleUpon Opens new window Click share Tumblr Opens new window Click share Pinterest Opens new window Click print Opens new window Related 41 Responses SWG Dynamic World projectbc says April 20 2015 12 17 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked virgil0211_gxff says April 20 2015 12 18 pm raphkoster Thanks played SWG years nice finally know going miss could ve TheShadyGM says April 20 2015 12 19 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked SirIsarii says April 20 2015 12 20 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked GK_Barrera says April 20 2015 12 20 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked virgil0211_gxff says April 20 2015 12 34 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked virgil0211_gxff says April 20 2015 12 35 pm raphkoster think chance might try make MMO akin SWG live Star Wars world concept Pantaro_CT9A says April 20 2015 12 36 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked upsettingshorts says April 20 2015 12 40 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked ddiakopoulos says April 20 2015 12 41 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked Bourbontank says April 20 2015 12 42 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked Atridas87 says April 20 2015 12 52 pm raphkoster convincing back Crownfall motstandet says April 20 2015 12 55 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked mysterydip says April 20 2015 12 58 pm raphkoster Definitely enjoying reading favorite part gamedev designing virtual worlds great see real examples ActiveNick says April 20 2015 1 03 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked wwwplumber says April 20 2015 1 28 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked synthsmitty says April 20 2015 1 51 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked danctheduck says April 20 2015 1 54 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked browncoatjayson says April 20 2015 2 02 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked damian_isla says April 20 2015 2 04 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked Kadan Sharpe says April 20 2015 4 39 pm Thank another awesome post Raph remembered zipping around various planets landspeeder constantly refreshing Resource Surveying screen check specific resources highest quantities setting large number harvesters clusters loved searching best resources highest yield willing dump many credits harvesters could activity think still prevalent today gameplay sense many players seek optimize efforts much gain possible wasn uncommon refreshing Surveying screen find ideal yield value given resource find number players already discovered hot spot set harvesters around Overall great lesson economics really helped facilitate trade practices types players wanting sell even consume extracted resources crafting loved overall endeavor creating terrains rulesets afforded great features embedding resources surface allowing dynamic POIs spawn somewhat suitable locations allowing plots land claimed player housing PvP bases yielded gameplay opportunities away cities gave players reason explore wasn soley quest-centric Running around planet intent advancing profession combat skills acquiring resources indulging player-created content hugely valuable great experiences playing Crafting terrain deep systemic approach like ve described something miss modern MMOs often seems content hand-placed resources static nodes disappear extracted re-instantiated timer ended games player housing instanced dimensions separated isolated rest world seems fewer games days attempt craft immersive game SOE team Galaxies probably risks involved time budget whatever CWLeahy says April 20 2015 4 59 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked Joshua Goode joshuagoode says April 20 2015 5 41 pm Thanks another awesome post Raph Bart Stewart says April 20 2015 9 56 pm end days insist resource part crafting system SWG one greatest bits game design ever believe part one key components resource-hunting game SWG Raph describes dynamically-spawning content didn require direct contact players resources always swapped always something new discover maybe one day d find Polysteel Copper like Ynesa discovered Radiant Naboo incredible stats could strike locate mother lode resource fling every harvester sell everything mined great price many big planets could much liked addition game design bits encouraged players interact directly still place us introverts massively-multiplayer game could enjoy kinds fun still contributing dynamic economy always appreciate designers SWG Thomas Eidson says April 21 2015 1 44 pm issues random number generator UO causing streaks interested finding kind random number generator SWG pleasantly surprised SWG used Mersenne Twister algorithm something used one dice rolling apps D D campaigns ran Mersenne Twister algorithm generates numbers much closer secure hardware random number generator psuedo-random number generators predicted seeds GCW update added bunch zones map used layering tool make team versus battlefields choose areas housing multiple planets spread combat load One battlefields island ocean Endor spent long time working layers got best looking beaches game made rolling dunes http deathduel com images endor_island jpg aside one group weapons fired AOE explosions lava cannon one rate fire every 0 25ms something put huge load SWG servers Players complaining lag combat began witch hunt figure causing problem turns even though load servers large problem client based particle system could emit emitters found lava cannon many weapons emitting maximum particles 256 firing sub-emitters particles believe shot trying create 40 000 particles able reduce particle emission 100x 400 particles fixed issue However 0 25ms AOE continue cause combat issues high traffic didn get around reducing firing rate left team Also time started seeing issues resource system resource given unique ID statistics databases filling automatically created resources go find solution reducing database size without impacting existing mined resources statistics snow flaked generated purge databases checking cross-referenced items remember coming long-term solution used referenced statistics tables Raph Koster says April 21 2015 2 04 pm Cleaning old resources could done simply giving half-life speak decaying Probably wouldn impacted game Battlefields actually original spec even least one half-built one markers left sand Tatooine recall Totally unsurprised hear excessive particles Thomas Eidson says April 21 2015 2 50 pm lot fun making battlefields asked put classes though incorporate quests crafters entertainers combat classes stealth construction phase crafters would build defenses offenses side didn prepare enough would disadvantage combat phase Entertainers gave special combat buffs Stealth classes could sneak sabotage offenses defenses Raph Koster says April 21 2015 2 57 pm Huh think asking entertainer stuff middle battlefields actually sort weird Getting professions non-combat conform combat stuff trying get AWAY Thomas Eidson says April 21 2015 3 02 pm didn design entertainers specific know city cantinas used quests believe remember gave buffs cantina healed troops went cantina battle design document didn expand design much rewards listed redesign prior GCW release allow customize buffs entertainer trade window players purchase customizable entertainer buffs made quite difference last couple years SWG around Raph Koster says April 21 2015 3 08 pm Cantinas used quests battlefields Interesting maybe take back picturing poor dancer running around midst something like Battle Hoth Minus snow course Joshua Goode joshuagoode says April 21 2015 3 08 pm pretty much expected see Hanse Data Runner island made never played cool spot Side note actually PvP battlefields 7 9 planets shipped believe Endor Naboo Rori x2 think Corellia Talus Tatooine Dathomir removed 1 year launch PvE battlefields one ever seemed work Rebel one Corellia Thomas Eidson says April 21 2015 3 16 pm Yeah wanted flag run island randomly chose player made target entire team supposed protect runner tests turned lot fun also kept strongest hardest kill hogging flag d used flag played lot Team Fortress time felt something wanted avoid Battle Hoth Lucas Entertainment gave voice overs wanted except Princess Leia hangar speech including Commander Veers stating Target Maximum Firepower first time AT-AT walked generators said got tingles spine spent two weeks making entire sequence characters moving around base follow script teleport lot due distances involved chalked type transporter base Someone kept moving objects way Darth Vader path world building got fed yelled team Darth Vader choke bitch umpteenth time also got make new abilities Darth Vader use battle interesting challenge make Rebels feel won even though lost every battle defend escape ships win side enough got away Raph Koster says April 21 2015 3 21 pm See sounds like sort content wanted launch Thomas Eidson says April 21 2015 3 52 pm Lucas Entertainment stopped overbearing design approval process joined team heard horror stories long turn-around times designs approved LEC employees making pointless changes designs justify jobs course tales skewed told SOE designers LEC seen putting Shoot First ability Smugglers skill tree m sure would gone None battleground pvp designs even glanced LEC know cucNotes says April 21 2015 9 03 pm RT raphkoster SWG Dynamic World http co OpAEnlwTBR another recent series SWG worked Gordie says April 22 2015 7 25 great game still played imagine using everythinggame idea could THRAX says April 23 2015 11 44 pm game still available day play private server wise anyone would still like embark journey http swgnightwing org Yivvits says April 27 2015 8 34 Raph Really enjoying posts mechanics background SWG unexpected one things made universe compelling game ever captured feeling dynamic alive d love hear resource system original ideas didn make live problems created system foresee players able make buffs armor could resist 99 damage idea decay would eventually cycle items system feel easy mass produce high stat items armor weapons point decay little effect removing economy Yivvits says April 27 2015 8 52 Actually think answered many questions another recent post thoughts would interesting hear Recommended Reading Raph Koster SWG Errant Penman says April 27 2015 9 32 SWG Dynamic World Rolan Storm says April 28 2015 8 58 pm Wow game ahead time Sorry comment form closed time Jedi Saga Designing Living Society SWG part one Meta Register Log Entries RSS Comments RSS WordPress org Disclosure Privacy Policy Tags 3d web agdc art games china community management facebook flash game business game culture game design game grammar game industry game politics game studies gdc gdca gdco gdconline indie games laws online world design legendmud metaplace metaverse metric verse muds Music richard bartle second life serious games sf social games social media speaking star wars galaxies swg theory fun ultima online uo vw business vw design vw history vw law web3d wordpress WoW Categories Art Game talk Gamemaking Misc Mailbag Open thread Music Reading Watching Writing Sunday Poem Archive 2015 Apr Mar Feb Jan 2014 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2013 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2012 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2011 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2010 Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2009 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2008 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2007 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2006 Dec Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 2005 Dec Nov Oct Aug Jul May Apr Mar Feb Jan 2004 Dec Nov Oct 2003 Sep Apr Mar 2002 Jul Mar Feb 2001 Sep Jan 2000 Dec Nov Sep Aug Jun Apr Mar Jan 1999 Nov Oct Sep Aug Jul Jun May Apr Mar Feb Jan 1998 Dec Oct Sep Aug Theory Funfor Game Design2nd editionin full color Press Excerpts Search Upcoming Events Sep 16 Wed all-day VS-Games 2015 University Sk vde Portalen VS-Games 2015 University Sk vde Portalen Sep 16 Sep 18 all-day Welcome Seventh International Conference Virtual Worlds Games Serious Applications VS-Games 2015 Sk vde Sweden Conference dates 16th 18th September 2015 VS-Games 2015 aims meet challenges View Calendar Add Add Timely Calendar Add Google Add Outlook Add Apple Calendar Add calendar Translate Recent Tweets OK 2 40am 350 pages naominovik new one Still really loving go sleep twitter com raphkoster sta 9 hours ago 50 pages naominovik new book loving 11 hours ago behind people upset w Richard Prince remixing Instagram pics remix Web2 0 rights etc case 14 hours ago Joy fridge stopped cooling threw away much food house 17 hours ago Making prototype tiles fantasy cartography game Printed label paper mounting foam sheets http co zl0gudZ64S 21 hours ago Follow Twitter Follow 1998 - 2015 Raph Koster rights reserved views expressed necessarily endorsed former current employer Suffusion theme Sayontan Sinha Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email"),
('MenuetOS 1.0 - 1.5 MB OS written entirely in assembly. Support multitasking, USB, multiple processors, a range of networking, audio devices, TV tuners, webcams and printers.', "Skip navigation UploadSign inSearch Loading Close Yeah keep Undo Close video unavailable Watch QueueTV QueueWatch QueueTV Queue Remove allDisconnect Loading Watch Queue TV Queue __count__ __total__ MenuetOS 1 0 Action - 1 5 MB OS written entirely Assembly Linux Homefront SubscribeSubscribedUnsubscribe880 Subscription preferences Loading Loading Working Add Want watch later Sign add video playlist Sign Share Report Need report video Sign report inappropriate content Sign Statistics 6 068 56 Like video Sign make opinion count Sign 57 5 Don't like video Sign make opinion count Sign 6 Loading Loading Loading Rating available video rented feature available right Please try later Published May 23 2015MenuetOS pre-emptive real-time multiprocessor Operating System development PC written entirely 32 64 bit assembly language Menuet64 released License Menuet32 GPL Menuet supports 32 64 bit x86 assembly programming smaller faster less resource hungry applications Support multitasking USB multiple processors range networking audio devices TV tuners webcams printers Running QEMU-KVM 2 3 0 256 MB RAM last x86 version looks x86_64 Sorry can't enable FullHD resolution Review content Bootloader File Manager Text Editor IRC client Chess Asm compiler Hase 3D Game Tetris Download http www menuetos net materials - http tlhp cfGoogle group - http goo gl jTZcDWYoutube channel - http goo gl AJa6WZSoundtracks - https goo gl JgJR94 Category Science Technology License Creative Commons Attribution license reuse allowed Remix video Show Show less Loading Advertisement Autoplay autoplay enabled suggested video automatically play next Next Menuet OS Preview - Tiny 1 4MB OS - Duration 7 16 quidsup 9 269 views 7 16 Play nextPlay 12 Introduction Assembly Language - Duration 1 27 02 Robert Paz 15 064 views 1 27 02 Play nextPlay MSI WS60 Laptop I'm Installing Linux Windows - Duration 12 55 Tek Syndicate 61 960 views 12 55 Play nextPlay CM Chandrababu vs YS Jagan AP Assembly 17- 03- 2015 - Duration 48 42 ABN Telugu 35 439 views 48 42 Play nextPlay MenuetOS Action - Duration 6 42 Ashraf Ali 28 153 views 6 42 Play nextPlay IBM Palm Top PC 110 action - Duration 7 48 Hidden 5 146 views 7 48 Play nextPlay AmigaOne G4 w OS4 1 - Duration 5 06 Lars Nelson 10 123 views 5 06 Play nextPlay SecurityTube net Hello World Assembly Language - Duration 24 04 TheSecurityTube 14 989 views 24 04 Play nextPlay Menuet OS - Duration 8 35 goodecarlton 7 873 views 8 35 Play nextPlay OSv Optimizing Operating System Virtual Machines - Duration 20 58 USENIX Association Videos 258 views 20 58 Play nextPlay Alternative Operating Systems - MenuetOS Menuet OS Part 1 - Duration 7 52 bigvariety ofvids 42 561 views 7 52 Play nextPlay Five Nights Springtrap's Five Nights Freddy's 3 Animation - Duration 1 48 Crazy Boris Productions 16 128 184 views 1 48 Play nextPlay Budgie DE Solus OS ex Evolve OS Full Review 1080p - Perfect Desktop GNOME Technology - Duration 33 17 Linux Homefront 751 views 33 17 Play nextPlay Wayland session GNOME 3 16 Part 3 Wayland Test Drive - Duration 17 29 Linux Homefront 2 835 views 17 29 Play nextPlay Linux Ubuntu 15 04 auf HP Proliant Server mit RDP - Duration 23 56 TheRegRunner 830 views 23 56 Play nextPlay MenuetOS floppy based OS - Duration 3 55 Electricguy 6 099 views 3 55 Play nextPlay KolibriOS inside VirtualBox VM Small View - Duration 7 24 PPnECEntireY 1 view 7 24 Play nextPlay Operating Systems Galore - Duration 1 41 anthonycargile 2 442 views 1 41 Play nextPlay GNU Linux distibution list recommended FSF - Duration 1 29 Computer 5 views 1 29 Play nextPlay MATE 1 8 2 Ubuntu 15 04 Full Review 1080p - GNOME 2 Lovers - Duration 22 24 Linux Homefront 226 views 22 24 Play nextPlay Loading suggestions Show Language English Country India Safety History Help Loading Loading Loading Press Copyright Creators Advertise Developers YouTube Terms Privacy Policy Safety Send feedback Try something new Loading Working Sign add Watch Later Add Loading playlists"),
('Hacking Starbucks for unlimited coffee', 'Home Research Blog Services Contact Us Hacking Starbucks unlimited coffee May 21 2015 Egor Homakov homakov Tweet story found way generate unlimited amount money Starbucks gift cards get life-time supply coffee steal couple millions got idea buy 3 Starbucks cards 5 starbucks com personal accounts add gift cards check balances even transfer money gift cards interesting class vulnerabilities called race condition common bug websites balances vouchers limited resources mostly money transfer money card1 card2 stateful first request POST step1 amount 1 wallet1 wallet2 saves values session second POST step2 confirm actually transfers money clears session makes exploitation harder session gets destroyed right first confirmation request second one fails protection still easy bypass use account two different browsers different session cookies Pseudo code exploit prepare transfer details sessions curl starbucks step1 -H Cookie session session1 --data amount 1 wallet1 wallet2 curl starbucks step1 -H Cookie session session2 --data amount 1 wallet1 wallet2 send 1 simultaneously wallet1 wallet2 using sessions curl starbucks step2 confirm -H Cookie session session1 curl starbucks step2 confirm -H Cookie session session2 5 failed attempts give Race condition kind vulnerability never know app vulnerable need try Many developers use poor protections like limiting number requests per IP account action making random delay using DB transactions wrong way right way pessimistic lock UPDATE clause yeah 6th request created two 5 transfers wallet1 5 dollars balance 2 cards 15 5 20 total need proof concept otherwise Starbucks guys claim bug might cache issue Let visit nearest Starbucks Market st anything 16 O_o expensive thing sandwich guess 15 16 70 concept proven let deposit 10 credit card make sure US justice system put us jail 1 70 hardest part - responsible disclosure Support guy honestly answered absolutely way get touch technical department sorry feel way Emailing InformationSecurityServices starbucks com March 23 futile answered Apr 29 trying really hard find anyone cares managed get bug fixed like 10 days unpleasant part guy Starbucks calling nothing like thanks mentioning fraud malicious actions instead Sweet could feel like idiot looking troubles could create simple bunch fake gift cards bought around world silently generate credits sell Starbucks credits online Bitcoin say 50 discount would easily make couple millions dollars unless Starbucks actually tracks gift card balances know sure wild guess bug could pretty profitable Subscribe blog via RSS Twitter email find bugs others cannot Reach us want see security audits help business questions Contact Sakurity Hacker Join us Home Research Blog Services Contact Us Social Twitter Github Angel Sakurity Ltd Hong Kong company established 2012 info sakurity com'),
('I am jealous of Swift', "skip main skip sidebar metablog Saturday May 23 2015 jealous Swift Really get everything wrong language design yet results get fawned upon obvious flaws overlooked turned opposite Language Design mean Well primarily Swift crescendo special cases stopping short general result complexity semantics complexity behaviour e bugs complexity use e workarounds - Rob Rix Features Overcomplicate Swift list Rob compiled impressively well-researched Although special cases stopping short general enough cardinal sin language design would add needlessly replacing keyword message syntax exactly point longer issue adding back abomination accidental complexity world never seen Let's see Gilad Bracha actual programming language designer say keyword syntax notation makes impossible arity error calling method dynamically typed language huge advantage keenly aware syntax unfamiliar programmers potential barrier adoption However improves usability massively Furthermore growing number programmers learning notation use Objective-C e g iOS APIs - Gilad Bracha Newspeak Language Specification 2015 Abandoning keyword syntax point time takes snatching defeat jaws victory whole new exciting level whole idea every arithmetic operation potential crash point despite fact proper numeric towers around many decades decently optimized certainly slower unoptimized Swift yet Rob example writes main culprit Swift's complexity Objective-C find somewhat mind-boggling requirement Objective-C interoperability couldn't exactly come last minute surprise foisted existing language Folks we're designing replacement language Apple's Cocoa frameworks Objective-C compatibility needs designed beginning added afterthought don't design language odds frameworks supporting discover get much cleaner design Performance situation even bizarre comes performance example here's talk titled Swift Swift opening paragraph declares Swift designed fast fast yet paragraphs slides learn debug builds often 100 times slower optimized builds don't really rival C Sorry that's sign language that's designed fast characteristics language design inherently super super slow requires leaning heavily optimizer get performance acceptable level course details bear copy semantics usually expensive need optimizer elide copies majority cases ARC built also requires optimizer effectively clairvoyant order suffer 30x regressions Apart individual issues overriding one Swift's performance model extremely opaque 100x turning optimizer optimizer heroic job optimizing code don't care use can't figure code care slow make go fast Jealousy makes little amateur language designer jealous really try get things right make sure design parsimonious guys joyfully ignore every rule book trample said book ways get language designer's guild revoke license yet almost universal fawnage Whoever said life fair always comments welcome HN Posted Marcel Weiher 12 42 PM Email ThisBlogThis Share TwitterShare FacebookShare Pinterest 3 comments smokris said really try get things right make sure design parsimonious guys joyfully ignore every rule book trample said bookYes exactly thought amateur language designer declining fawn Swift May 24 2015 9 43 Orion Edwards said I'm language designer I'm solve problems get things done kind programmer suspect many like swift lot it's qualities language design offers practical useful features Objective-C doesn't Generics type safety practical useful things major languages C Java also don't null safety tuples it's also close enough syntax conceptually wise major languages easily learned Sure it's full impurities holes seems fewer ObjC C C One major gripe well designed languages people talk Haskell Clojure whatever focus much mathematical purity side things exclusion getting regular simple everyday tasks sticking buttons dialog best designed language world can't use solve problems actually requires year's study learn it's use May 24 2015 12 06 PM Anonymous said Jack trades master none Software industry two axioms 1 Projects fail 5 years 2 New flavor last 10 years Swift trying replace C C Obj-C incorporate Functional programming time sticking Cocoa API familiarity using LLVM manage optimization ideas might listened 90s today CS graduate might well speaking foreign language Also analysis doesn't even touch fact C dominant language Obj-C conversation iPhone maintainer language since retired Apple May 24 2015 12 33 PM Post Comment Older Post Home Subscribe Post Comments Atom Followers Blog Archive 2015 4 May 1 jealous Swift April 2 March 1 2014 20 September 3 August 1 July 1 June 4 May 4 April 2 March 3 January 2 2013 11 December 1 October 1 July 2 June 2 May 1 January 4 2012 18 December 1 November 2 October 3 June 1 May 1 April 1 March 6 February 1 January 2 2011 13 December 1 July 1 April 1 March 1 February 5 January 4 2010 5 December 1 May 2 April 1 January 1 2009 15 December 3 November 4 September 1 February 1 January 6 2008 6 December 2 October 1 August 1 April 2 2007 8 November 1 October 1 September 4 August 1 May 1 Marcel Weiher View complete profile Follow mpweiher Main Site Objective-Smalltalk Github Projects"),
('Collection of awesome Java resources', "ZEEF works best JavaScript enabled enable JavaScript browser TypeSubjectCompanyPersonalPage nameCuratorSite domainTagLanguageENNLFR ui-button page Subjects Companies Curators Links Create page Login Preferred region Global selected Nederland France Java Java programming language computing platform first released Sun Microsystems 1995 lots applications websites work unless Java installed created every day Java fast secure reliable Chandra Sekhar Kakarla Java EE Application Developer Love learn work 3 4k views loading latest views 1 1k clicks loading latest clicks 248 links 31 blocks last updated 5 26 15 Compete Thanks 20 Share Follow 3 Email Suggest Java Software JDK 9 Early Access Java SE Development Kit 8 Downloads Java EE 7 Java references Java sample programs Java Practices CIS-157 OO Java Programming CIS-257 OO Java Programming II Programming Using Java cse ohio-state edu Java OO System Development Securing java comp lang java FAQ 1 Design Java java-design-patterns GitHub Examples GoF Design Patterns Java Design Patterns Design Patterns - JavaCamp Wiki Software design pattern Java Frameworks Spring Framework Javaserverfaces Vaadin Apache Struts Hibernate Play Framework Apache Tapestry Grails Framework Spark Framework Full stack web framework 2 Java Tutorials Java Tutorials Java EE Tutorial Java EE 6 Tutorial Java Tutorial Java Beginners Core J2EE Patterns Java Blogs Javarevisited BalusC Blog Arjan Tijms' Weblog Jenkov Software Development vogella Tutorials mkyong Java tutorials Javapapers Benjamin Winterberg JournalDev Java Java EE Josh's Muhammad Khojaye's Blog Zemian Blog 6 App Servers WildFly GlassFish Apache TomEE Oracle WebLogic Server JBoss EAP WebSphere Application Server Java Forums Stackoverflow com JavaRanch javacodegeeks Java dzone com Coderanch com Javaworld Programmers Stack Exchange Java Samples Java Coding Samples Java Examples Oreilly Java Sample Source Code CodingBat Java Examples Web Servers Apache Tomcat Jetty Oracle iPlanet Web Server Undertow web server Video Lectures Programming Methodology Java Brains Java Tutorial Java Collections Framework Java Tutorial Beginners Interviews Linked List Design Patterns Video Tutorial Java J2EE SOA Videos Java EE Tutorial beginners Computer Science 61B 003 Data Structrues Algorithms Programming Paradigms 8 Java Concepts Java Pass Value java serialVersionUID Lambda Expressions Java thread states Exceptions Inheritance SOAP Basics JSP Implicit Objects Examples IDEs Java NetBeans IntelliJ IDEA Eclipse Spring Tool Suite Oracle JDeveloper jEdit DrJava Java GitHub effective-java-examples GitHub Java-Design-Patterns GitHub akullpp awesome-java GitHub JavaEE Samples GitHub gaylemcd ctci GitHub arquillian-showcase GitHub jboss-eap-quickstarts Java Questions Swapping Two Numbers Logic Java Interview Questions Programming Interviews QA Java overloaded method null Reverse String Java Multi-threading Interview QA Tools Java Maven Apache Ant Apache Subversion TortoiseSVN Git Git Sourcetreeapp Jenkins CI Hudson Continuous Integration Travis CI Gradle - Build Automation SonarQube Java Eclipse Code Coverage 8 Spring Framework Spring Framework Spring MVC step-by-step Spring Questions Spring Guides spring-mvc-showcase spring-projects GitHub spring-integration-samples spring-data-jpa-examples Spring Example Github - spring-by-example Building-REST-Services-with-Spring Enterprise Spring Best Practices 4 Java Docs Java Standard Edition 8 Java Standard Edition 7 Java SE 6 Documentation JDK 5 Documentation Java 2 1 4 2 Documentation Java SE Specifications Unit Testing JUnit Mockito Arquillian powermock Selenium TestNG Jbehave DbUnit Jmockit spock EasyMock 3 Hibernate Hibernate Everything data Hibernate GitHub Hibernate Tutorial JBoss Hibernate community Spring MVC Hibernate Seam hotel booking example Hibernate ORM documentation Equals Hashcode Hash code points certain area list bucket etc internally Since different key objects could potentially hash code hash code guarantee right key found hashtable iterates area keys hash code uses key equals method find right key right key found object stored key returned combination hashCode equals methods used storing looking objects hashtable Java Web Start Code Examples Java Swing Standard Widget Toolkit Creating GUI JFC Swing Getting Started JavaFX Java SE Client Technologies Java Libraries google guava GitHub Apache Log4j 2 Logback Project Lombok JodaOrg joda-time GitHub metrics GitHub ProGuard HttpClient Apache Commons FasterXML jackson Apache Camel Apache Lucene Core 4 Open Courses MIT OpenCourseWare Home Stanford Engineering Harvard XML Java Home Computer Science Courses Courses Taught Sofia Course Gallery See Open Free Courses Saylor Computer Science ArsDigita University UC Irvine courses 4 Stackoverflow Copy object Java Thread Pool concept Java Tomcat installation Implementation Ordered Set Avoid Java Code JSP-Files Use tnsnames ora SQL Developer Composite pattern Oracle TNS names String LocalDate 1 Design Tools PlantUML Enterprise Architect Papyrus UMLET Modelio Open Source Argouml tigris Best ZEEF JSF Bauke Scholtz Spring Dafinoiu Iulian Android Nahuel Barrios AngularJS Harris Brakmic PrimeFaces Dafinoiu Iulian Web Development Eduardo Curators ZEEF Subjects Algorithms DS MIT Introduction algorithms MIT Introduction Algorithms MIT Advanced Data Structures MIT DS algorithms Programming Data Structure Computer Algorithms Data structures Binary Search Data Structures Algorithms Parallel Algorithm Sorting Algorithms Geometric Folding Algorithms 4 Client Side Front End AngularJS Backbone js Adobe Flex Sencha Touch Bootstrap HTML5 Dart Emberjs GWT Project Rust-lang JavaFX Developer Home Node js 5 Java public static void main Java Posse Java Posse 461 Java Posse 460 Java Posse 459 Java Posse 458 Java Posse 457 Java Posse 456 Java Posse 455 Java Posse 454 Thanks 20 Share Follow 3 Email Suggest Sort Curator ranking Alphabetically Popularity Share link Thanked Thanks Mail Chandra Sekhar Kakarla Flag link Confirm CancelDelete Share Social Link visitCancel Share Tweet Share Share Share Follow page Suggest Mail Chandra Sekhar Kakarla Flag link ZEEF com Home Create page Login Subjects Curators Terms Privacy Contact API ZEEF org Discover Curate Help Blog Follow us site uses affiliate links Help us improve ZEEF Feedback 2015 ZEEF - 2015 3 4 Home Subjects Curators Terms Privacy Contact ZEEF social media"),
('Crash Course on Modern Web Development, Opinionated Edition', "Developing Rails Ruby Ruby Rails everything around Part Developing stuff team Crash Course Modern Web Development Step 0 HTML CSS JS basic tools 1 2 weeks prerequisite become modern web developer good grasp tools trade HTML CSS JS foundation web HTML CSS CSS Layout Coding HTML 5 Layout Scratch Javascript Git Organize work get globally available versioned backups collaborate efficiently colleagues Learn Git 15 minutes Git Immersion GitHub Bitbucket Text editor text editors broad support tools mentioned article Therefore one use mainly personal choice Pick poison I'm using Atom vim-mode nowadays Atom Sublime Text vim Emacs Social Social profiles modern CV Join meetups find people similar interests open source share work get paid GitHub Gittip Flattr Bountysource Twitter Step 1 Learn Ruby Ruby Rails 1 2 months Ruby together Ruby Rails become staple web application development startup world API server single-page Javascript application full-fledged solution serving server-rendered web app Rails covers needs starting mid-level 1 million monthly impressions web app Ruby TryRuby RubyMonk Ruby Koans Ruby Rails Rails Getting Started Ruby Rails Tutorial Ruby Rails Screencasts One Month Rails paid Get acquainted community Talks User Groups Conferences Task Build open source web app Create new repository GitHub Check Open Source ethos licenses procedures etc Examples www opensourcerails com Gittip NewsBlur Step 2 Refine skills 2 3 months General programming Code Academy Coursera Code School paid Frontend CSS HTML5 JS Concepts Responsive design Caching Performance Browser independence Frontend frameworks EmberJS Rails integration AngularJS Rails integration Backbone Rails integration React Flux Rails integration Here's nice comparison three Backend PostreSQL NoSQL MongoDB friends Redis Sidekiq RabbitMQ Concepts Emailing Algorithms Databases Caching Security Performance Consistency Concurrency DevOps Deploying tools Capistrano Chef Vagrant Docker Sysadmin tools bash sed awk grep man curl Task Refactor optimize app Step 3 Branch alternate technology 1 2 months Clojure Elixir Go Rust Scala Task Apply app Rewrite front backend app extend new functionality using you've learned far Step 4 Dip toes unknown 1 3 months Android iOS Mac OS X C C Java Python Windows development Mono Task Expand market Extend mobile device native platform Step 5 Present Create personal page example Start blog document learnings share insights Add profile professional networks LinkedIn AngelList XING Synthesize CV Step 6 Make money Monetize creation Google Play Store Apple App Store Micro payments Bitwall Square Stripe Ads Join company Prepare interview Find company like Examples Heroku Soundcloud XING Wuaki Railslove Freelance Fiverr Elance ODesk Start thing Startups angel co Incubators accelerators Y Combinator Berlin Startup Academy Facebook groups Berlin Startups Barcelona Startup Jobs Mostly fun Email ThisBlogThis Share TwitterShare FacebookShare Pinterest Newer Post Older Post Home Subscribe Post Comments Atom Want help Ruby Rails Check gig Fiverr mparramon Fiverr Seller I'm software developer Barcelona passions programming tech music film Popular Posts Setting Atom Rails Development vein Sublime Text 3 recommendations Rails development here's Atom setup developing web apps us Crash Course Modern Web Development Step 0 HTML CSS JS basic tools 1 2 weeks prerequisite become modern web developer good grasp tools Ruby Javascript Scene Barcelona asked Reddit info Rails scene Barcelona went ahead compiled links everyone Install Ruby Rails Windows Postgres Mongo Redis Googling setting rails Windows second result erikjansson spilling half glass water Barcelona Jobs Roundup May 2015 Here's post taking look Barcelona tech job market month May 2015 Mainly focused Ruby jobs sprinkl API authentication devise_token_auth post part ongoing feature creating social network Rails modern Rails web app need API power mob Get insights PostgreSQL database PgHero PgHero ruby gem gives insights PostgreSQL database box provides info stuff like cache hit Fixtures real life part 1 came looking kind fixtures good luck way post part ongoing feature creati Get every new post inbox Developing Developing stuff React BREET Robot whole milk week's links - Programming - Meteor Raises 20M Build One JavaScript Stack Rule - Going native React introduction - React js - gu Developing Mac Mac OS X setup Web Development - Here's current setup programming web development Mac OS X recently set Macbook set write post remember w Developing Rails Barcelona Jobs Roundup May 2015 - Here's post taking look Barcelona tech job market month May 2015 Mainly focused Ruby jobs sprinkling JS ones - Photographing stuff Get 40 worth free food UberEats Barcelona - - 10 Register Uber following link get uber com invite 7c5cx invite code - 15 Add UBEREATSBCN coupon code Video games - It's scence I've posted I'm either lazy busy either way thought I'd review couple video games one actually accessory Watermark template Powered Blogger"),
('Snap: A visual drag-and-drop programming language', "Snap formerly BYOB visual drag-and-drop programming language extended reimplementation Scratch project Lifelong Kindergarten Group MIT Media Lab allows Build Blocks also features first class lists first class procedures continuations added capabilities make suitable serious introduction computer science high school college students Snap runs browser implemented using Javascript designed limit ability browser-based software affect computer it's safe run even people's projects even don't trust competence good intentions Snap presented University California Berkeley developed Jens M nig MioSoft Corporation SAP design input documentation Brian Harvey Berkeley contributions students Berkeley elsewhere material based partly upon work supported National Science Foundation Grant 1138596 opinions findings conclusions recommendations expressed material author necessarily reflect views National Science Foundation Snap 4 0 current version Try language http snap berkeley edu run button Need help Read Reference Manual Found bug Report Github repository Looking BYOB3 Download Use devices Snap Orbotix Sphero guide Connor Hudson Dan Garcia Lego NXT package Connor Hudson Nintendo Wiimote package Connor Hudson Finch Hummingbird robots package Tom Lauwers Parallax S2 robot package Connor Hudson LEAP Motion Connor Hudson Speech synthesis Connor Hudson Arduino package Alan Yorinks Arduino package Bernat Romagosa Citilab Examples New Live Tree Bill Manaris Thread Demo using call cc Fractal Fruit Tree Josh Paley Converted BYOB3 projects Vee Double Jurassic Park Math Trainer Tree Animal Game Count Change Converted Scratch projects Star Wars Game Funny Face Paint Splotches Kanon Flashlight Constraint Teachers check Beauty Joy Computing AP CS Principles course using Snap Privacy Notice research purposes site uses Google Analytics collect aggregate information e g often site used links followed collect personally identifiable information Gmail account ever Googled computer despite assurances contrary Google collect information recommend use AdBlock Plus Ghostery NoScript Privoxy protect browsing privacy first two really easy install use last two take bit effort whitelist sites trust might also consider tracking-free DuckDuckGo search engine See complete privacy policy Site layout liam4"),
('Zapcc: A faster C++ compiler', 'Home FAQ Company Join Private Beta Careers Contact Home FAQ Company Join Private Beta Careers Contact Homezapcc2015-05-28T11 53 44 00 00 Zapcc faster C compiler Zapcc Overview Zapcc clang based C compiler unique header compilation technology speeds C compilations Acceleration achieved compiling caching headers templates in-memory saving time-intensive recompilations code generation Similar pre-compiled headers steroids resulting faster build times Clang based Clang standard open source C C compiler began research project University Illinois used Apple Google Intel many others Zapcc based clang frequently updated latest svn GCC drop-in replacement Clang usually drop-in replacement gcc zapcc maintains feature Operating system support Zapcc supports Linux Ubuntu x64 14 04 later MacOS support planned Windows version released clang fully supports Visual C features specifically exception handling C standards Zapcc supports C features clang see C support clang Build systems Zapcc drop-in replacement clang gcc supports build systems Faster compilations Zapcc caches compiled headers generates code in-memory compilations resulting significant compilation speedups especially heavy templated C headers boost Eigen LLVM Sign HereJoin private beta programSign HereZapcc ReleasesComing soon Useful Linkswww ceemple comhttp clang llvm orgNext StepsZapcc making quite time getting close releasing beta version Join Private Beta Read FAQ details believe developers wait compilers Zapcc delivers exactly 2014 - 2015 Ceemple Designed Ceemple Software Ltd'),
('Nand to Tetris 1', 'Experi Experiments every Friday oskarth Home 2015 Oskar Thor n Nand Tetris 1 Dan Luu Fri May 22 2015 last weeks ve working way excellent book Elements Computing Systems - building modern computer first principles part equally excellent Nand Tetris MOOC started reading book years ago attended Recurse Center instead completing ended writing domain specific language first chapters useful exercise doubt time around intend finish whole book main reason want go book want better sense computer works get rough idea one could build one sense value proportional well serves mental model real world stack first multi part series starting first three chapters Elements Computer Systems book boolean logic boolean arithmetic sequential logic wrote collection assertions wanted diff real world Dan Luu gracious enough give great answers based expertise field answers italics highly recommended ve taken equivalent Nand Tetris course strictly necessary luck series convince embark similar project Let begin 1 boolean function usually built NAND gates conceptually accurate usually isn done practice multiple reasons mostly comes cost power performance performance aspect directly implement functions transistors efficiently NAND gates loosely think similar compilers sometimes inline functions optimizations across inlined functions property boolean function e truth table built using NAND gates called functional completeness proof quite neat Consider truth table function variables row function evaluates true represented ANDing together variables represented either true true together rows get complete representation function truth table example Xor b evaluates true either b true represent follows b b thus express boolean function using turns using De Morgan laws similar logical relationships express terms NAND Another cool thing Dan taught NAND gates usually prefered gates despite functionally complete interested read However manage get moon 60s using gates 2 Logical functions built elementary ones conceptually correct performance reasons people sometimes build logical functions directly transistors much detail Weste Harris great quick explanation see explanation isn self contained things want know funny symbol near bottom diagrams ground 0 funny line symbol top voltage 1 transistors bubble gate input PMOS transistor turns conducts input 0 good passing 1 Otherwise NMOS opposite properties Similar answer interface correct implementation naive point misleading 3 Integers represented two complement Yes 1 complement rarely used although applications superior might also interested logarithmic residue number systems make operations easier faster cost making operations slower Koren really nice text Also contrast address build nand2tetris adders commonly built using kind parallel prefix tree reduce delay e increase performance Carry-lookahead adders probably simplest form re usually fastest thing Weste Harris book mentioned lot information different types prefix trees one funny think carry-look-ahead neat optimization whereas real world slow use 4 adding integers real-world Adder overflows ignored depends error often output ALU signals overflow 5 ALU essentially real one ALU two 16-bit inputs six control bits two output flags one 16-bit output missing pipelining forwarding performance optimizations fundamentally stuff real ALU Real quotes since less real ALU although real ALUs usually implement many functions control bits etc - Also real ALU operations also take several clock cycles unlike one design 6 one master clock keeps track computer time correct designs made simple However real designs often one clock multitude reasons dealing O devices run different speeds deal see would say makes mental model incorrect would expect one clock cycle unit everything hardware uses second thought see wouldn make sense O-bound hardware parts 7 Register RAM Program Counter essentially realistic addition 16-bit input outputs following Register load bit RAM load bit n-bit address Program Counter load inc reset bit true conceptually logically However real systems register files often custom circuits built transistor level RAMs also custom chip RAMs usually SRAMs built transistors like chip logic although typically analog component unlike logic ve built chip DRAM totally different beast also normally multiple read write ports opposed one combined read write address also makes sense shared memory bit sounds scary Yet another rabbit hole go rainy day Conclusion general assertions right interface level wrong implementation level good mental model think Unless building real computer good enough conceptually could also theoretically least build computer using tools given Nand Tetris would similar Intel machine early 80s isn bad next part ll move higher stack looking machine language computer architecture assembler'),
('type hints PEP in Python is accepted', "Notice Javascript essential website interaction content limited Please turn Javascript full experience Skip content Close Python PSF Docs PyPI Jobs Community Python Network Menu Search Site GO Smaller Larger Reset Socialize Google Facebook Twitter Chat IRC Sign Sign Register Sign Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Python Python Developer's Guide PEP Index PEP 0484 -- Type Hints PEP 0484 -- Type Hints PEP 484 Title Type Hints Author Guido van Rossum guido python org Jukka Lehtosalo jukka lehtosalo iki fi ukasz Langa lukasz langa pl BDFL-Delegate Mark Shannon Discussions-To Python-Dev python-dev python org Status Accepted Type Standards Track Created 29-Sep-2014 Post-History 16-Jan-2015 20-Mar-2015 17-Apr-2015 20-May-2015 22-May-2015 Resolution https mail python org pipermail python-dev 2015-May 140104 html Contents Abstract Rationale Goals Non-goals meaning annotations Type Definition Syntax Acceptable type hints Using None Type aliases Callable Generics User-defined generic types Instantiating generic classes type erasure Arbitrary generic types base classes Abstract generic types Type variables upper bound Covariance contravariance numeric tower bytes types Forward references Union types type Version platform checking Default argument values Compatibility uses function annotations Type comments Casts Stub Files Function overloading Storing distributing stub files Typeshed Repo Exceptions typing Module Rejected Alternatives brackets generic type parameters existing uses annotations problem forward declarations double colon forms new syntax backwards compatible conventions PEP Development Process Acknowledgements References Copyright Abstract PEP 3107 introduced syntax function annotations semantics deliberately left undefined enough 3rd party usage static type analysis community would benefit standard vocabulary baseline tools within standard library PEP introduces provisional module provide standard definitions tools along conventions situations annotations available Note PEP still explicitly prevent uses annotations require forbid particular processing annotations even conform specification simply enables better coordination PEP 333 web frameworks example simple function whose argument return type declared annotations def greeting name str - str return 'Hello ' name annotations available runtime usual __annotations__ attribute type checking happens runtime Instead proposal assumes existence separate off-line type checker users run source code voluntarily Essentially type checker acts powerful linter would course possible individual users employ similar checker run time Design Contract enforcement JIT optimization tools yet mature proposal strongly inspired mypy mypy example type sequence integers written Sequence int square brackets mean new syntax needs added language example uses custom type Sequence imported pure-Python module typing Sequence int notation works runtime implementing __getitem__ metaclass significance primarily offline type checker type system supports unions generic types special type named consistent e assignable types latter feature taken idea gradual typing Gradual typing full type system explained PEP 483 approaches borrowed compared contrasted described PEP 482 Rationale Goals PEP 3107 added support arbitrary annotations parts function definition Although meaning assigned annotations always implicit goal use type hinting gvr-artima listed first possible use case said PEP PEP aims provide standard syntax type annotations opening Python code easier static analysis refactoring potential runtime type checking perhaps contexts code generation utilizing type information goals static analysis important includes support off-line type checkers mypy well providing standard notation used IDEs code completion refactoring Non-goals proposed typing module contain building blocks runtime type checking -- particular useful isinstance implementation -- third party packages would developed implement specific runtime type checking functionality example using decorators metaclasses Using type hints performance optimizations left exercise reader also emphasized Python remain dynamically typed language authors desire ever make type hints mandatory even convention meaning annotations function without annotations treated general type possible ignored type checker Functions no_type_check decorator type ignore comment treated annotations recommended required checked functions annotations arguments return type checked function default annotation arguments return type exception first argument instance class methods need annotated assumed type containing class instance methods type object type corresponding containing class object class methods example class first argument instance method implicit type class method precise type first argument cannot represented using available type notation Note return type __init__ ought annotated - None reason subtle __init__ assumed return annotation - None would mean argument-less un-annotated __init__ method still type-checked Rather leaving ambiguous introducing exception exception simply say __init__ ought return annotation default behavior thus methods type checker expected check body checked function consistency given annotations annotations may also used check correctness calls appearing checked functions Type checkers expected attempt infer much information necessary minimum requirement handle builtin decorators property staticmethod classmethod Type Definition Syntax syntax leverages PEP 3107 -style annotations number extensions described sections basic form type hinting used filling function annotation slots classes def greeting name str - str return 'Hello ' name states expected type name argument str Analogically expected return type str Expressions whose type subtype specific argument type also accepted argument Acceptable type hints Type hints may built-in classes including defined standard library third-party extension modules abstract base classes types available types module user-defined classes including defined standard library third-party modules annotations normally best format type hints times appropriate represent special comment separately distributed stub file See examples Annotations must valid expressions evaluate without raising exceptions time function defined see forward references Annotations kept simple static analysis tools may able interpret values example dynamically computed types unlikely understood intentionally somewhat vague requirement specific inclusions exclusions may added future versions PEP warranted discussion addition following special constructs defined may used None Union Tuple Callable ABCs stand-ins concrete classes exported typing e g Sequence Dict type variables type aliases newly introduced names used support features described following sections Union available typing module Using None used type hint expression None considered equivalent type None Type aliases Type aliases defined simple variable assignments Url str def retry url Url retry_count int - None Note recommend capitalizing alias names since represent user-defined types like user-defined classes typically spelled way Type aliases may complex type hints annotations -- anything acceptable type hint acceptable type alias typing import TypeVar Iterable Tuple TypeVar 'T' int float complex Vector Iterable Tuple def inproduct v Vector - return sum x y x y v equivalent typing import TypeVar Iterable Tuple TypeVar 'T' int float complex def inproduct v Iterable Tuple - return sum x y x y v Callable Frameworks expecting callback functions specific signatures might type hinted using Callable Arg1Type Arg2Type ReturnType Examples typing import Callable def feeder get_next_item Callable str - None Body def async_query on_success Callable int None on_error Callable int Exception None - None Body possible declare return type callable without specifying call signature substituting literal ellipsis three dots list arguments def partial func Callable str args - Callable str Body Note square brackets around ellipsis arguments callback completely unconstrained case keyword arguments acceptable Since using callbacks keyword arguments perceived common use case currently support specifying keyword arguments Callable Similarly support specifying callback signatures variable number argument specific type Generics Since type information objects kept containers cannot statically inferred generic way abstract base classes extended support subscription denote expected types container elements Example typing import Mapping Set def notify_by_email employees Set Employee overrides Mapping str str - None Generics parametrized using new factory available typing called TypeVar Example typing import Sequence TypeVar TypeVar 'T' Declare type variable def first l Sequence - Generic function return l 0 case contract returned value consistent elements held collection TypeVar expression must always directly assigned variable used part larger expression argument TypeVar must string equal variable name assigned Type variables must redefined TypeVar supports constraining parametric types fixed set possible types example define type variable ranges str bytes default type variable ranges possible types Example constraining type variable typing import TypeVar AnyStr TypeVar 'AnyStr' str bytes def concat x AnyStr y AnyStr - AnyStr return x y function concat called either two str arguments two bytes arguments mix str bytes arguments least two constraints specifying single constraint disallowed Subtypes types constrained type variable treated respective explicitly listed base types context type variable Consider example class MyStr str x concat MyStr 'apple' MyStr 'pie' call valid type variable AnyStr set str MyStr effect inferred type return value assigned x also str Additionally valid value every type variable Consider following def count_truthy elements List - int return sum 1 elem elements element equivalent omitting generic notation saying elements List User-defined generic types include Generic base class define user-defined class generic Example typing import TypeVar Generic TypeVar 'T' class LoggedVar Generic def __init__ self value name str logger Logger - None self name name self logger logger self value value def set self new - None self log 'Set ' repr self value self value new def get self - self log 'Get ' repr self value return self value def log self message str - None self logger info ' ' format self name message Generic base class defines class LoggedVar takes single type parameter also makes valid type within class body Generic base class uses metaclass defines __getitem__ LoggedVar valid type typing import Iterable def zero_all_vars vars Iterable LoggedVar int - None var vars var set 0 generic type number type variables type variables may constrained valid typing import TypeVar Generic TypeVar 'T' TypeVar 'S' class Pair Generic type variable argument Generic must distinct thus invalid typing import TypeVar Generic TypeVar 'T' class Pair Generic INVALID use multiple inheritance Generic typing import TypeVar Generic Sized TypeVar 'T' class LinkedList Sized Generic Subclassing generic class without specifying type parameters assumes position following example MyIterable generic implicitly inherits Iterable typing import Iterable class MyIterable Iterable Iterable Generic metaclasses supported Instantiating generic classes type erasure Generic types like List Sequence cannot instantiated However user-defined classes derived instantiated Suppose write Node class inheriting Generic typing import TypeVar Generic TypeVar 'T' class Node Generic two ways instantiate class type inferred type checker may different depending form use first way give value type parameter explicitly -- overrides whatever type inference type checker would otherwise perform x Node type inferred x Node y Node int type inferred y Node int explicit types given type checker given freedom Consider code x Node inferred type could Node isn't enough context infer precise type Alternatively type checker may reject line require explicit annotation like x Node type Node int Inferred type Node int type checker powerful type inference could look x used elsewhere file try infer precise type Node int even without explicit type annotation However probably impossible make type inference work well cases since Python programs dynamic PEP doesn't specify details type inference work allow different tools experiment various approaches may give explicit rules future revisions runtime type preserved class x Node cases behavior called type erasure common practice languages generics e g Java TypeScript Arbitrary generic types base classes Generic valid base class -- it's proper type However user-defined generic types LinkedList example built-in generic types ABCs List Iterable valid types base classes example define subclass Dict specializes type arguments typing import Dict List Optional class Node class SymbolTable Dict str List Node def push self name str node Node - None self setdefault name append node def pop self name str - Node return self name pop def lookup self name str - Optional Node nodes self get name nodes return nodes -1 return None SymbolTable subclass dict subtype Dict str List Node generic base class type variable type argument makes defined class generic example define generic LinkedList class iterable container typing import TypeVar Iterable Container TypeVar 'T' class LinkedList Iterable Container LinkedList int valid type Note use multiple times base class list long don't use type variable multiple times within Generic Also consider following example typing import TypeVar Mapping TypeVar 'T' class MyDict Mapping str case MyDict single parameter Abstract generic types metaclass used Generic subclass abc ABCMeta generic class ABC including abstract methods properties generic classes also ABCs base classes without metaclass conflict Type variables upper bound type variable may specify upper bound using bound type means actual type substituted explicitly implictly type variable must subclass boundary type common example definition Comparable type works well enough catch common errors typing import TypeVar class Comparable metaclass ABCMeta abstractmethod def __lt__ self - bool __gt__ etc well CT TypeVar 'CT' bound Comparable def min x CT y CT - CT x y return x else return y min 1 2 ok return type int min 'x' 'y' ok return type str Note ideal -- example min 'x' 1 invalid runtime type checker would simply infer return type Comparable Unfortunately addressing would require introducing much powerful also much complicated concept F-bounded polymorphism may revisit future upper bound cannot combined type constraints used AnyStr see example earlier type constraints cause inferred type _exactly_ one constraint types upper bound requires actual type subclass boundary type Covariance contravariance Consider class Employee subclass Manager suppose function argument annotated List Employee allowed call function variable type List Manager argument Many people would answer yes course without even considering consequences unless know function type checker reject call function might append Employee instance list would violate variable's type caller turns argument acts _contravariantly_ whereas intuitive answer correct case function doesn't mutate argument requires argument act _covariantly_ longer introduction concepts found Wikipedia wiki-variance show control type checker's behavior default type variables considered _invariant_ means arguments arguments annotated types like List Employee must exactly match type annotation -- subclasses superclasses type parameter example Employee allowed facilitate declaration container types covariant type checking acceptable type variable declared using covariant True rare case contravariant behavior desirable pass contravariant True one may passed typical example involves defining immutable read-only container class typing import TypeVar Generic Iterable Iterator TypeVar 'T' covariant True class ImmutableList Generic def __init__ self items Iterable - None def __iter__ self - Iterator class Employee class Manager Employee def dump_employees emps ImmutableList Employee - None emp emps mgrs ImmutableList Manager type ImmutableList Manager dump_employees mgrs OK read-only collection classes typing defined using covariant type variable e g Mapping Sequence mutable collection classes e g MutableMapping MutableSequence defined using regular invariant type variables one example contravariant type variable Generator type contravariant send argument type see Note variance affects type parameters generic types -- affect regular parameters example following example fine typing import TypeVar class Employee class Manager Employee E TypeVar 'E' bound Employee Invariant def dump_employee e E - None dump_employee Manager OK numeric tower PEP 3141 defines Python's numeric tower stdlib module numbers implements corresponding ABCs Number Complex Real Rational Integral issues ABCs built-in concrete numeric classes complex float int ubiquitous especially latter two - Rather requiring users write import numbers use numbers Float etc PEP proposes straightforward shortcut almost effective argument annotated type float argument type int acceptable similar argument annotated type complex arguments type float int acceptable handle classes implementing corresponding ABCs fractions Fraction class believe use cases exceedingly rare bytes types three different builtin classes used arrays bytes counting classes available array module bytes bytearray memoryview bytes bytearray many behaviors common though -- bytearray mutable ABC ByteString defined collections abc corresponding type typing functions accepting bytes form common would cumbersome write typing ByteString everywhere shortcut similar builtin numeric classes argument annotated type bytes arguments type bytearray memoryview acceptable situations isn't sound believe exceedingly rare practice Forward references type hint contains names defined yet definition may expressed string literal resolved later situation occurs commonly definition container class class defined occurs signature methods example following code start simple binary tree implementation work class Tree def __init__ self left Tree right Tree self left left self right right address write class Tree def __init__ self left 'Tree' right 'Tree' self left left self right right string literal contain valid Python expression e compile lit '' 'eval' valid code object evaluate without errors module fully loaded local global namespace evaluated namespaces default arguments function would evaluated Moreover expression parseable valid type hint e constrained rules section Acceptable type hints allowable use string literals part type hint example class Tree def leaves self - List 'Tree' common use forward references e g Django models needed signatures Typically model separate file methods arguments whose type involves models way circular imports work Python often possible import needed models directly File models py models b import B class Model def foo self b B File models b py models import class B Model def bar self File main py models import models b import B Assuming main imported first fail ImportError line models import models b py imported models py defined class solution switch module-only imports reference models _module_ _class_ name File models py models import b class Model def foo self b 'b B' File models b py models import class B Model def bar self 'a A' File main py models import models b import B Union types Since accepting small limited set expected types single argument common new special factory called Union Example typing import Union def handle_employees e Union Employee Sequence Employee - None isinstance e Employee e e type factored Union T1 T2 responds True issubclass checks T1 subtypes T2 subtypes One common case union types optional types default None invalid value type unless default value None provided function definition Examples def handle_employee e Union Employee None - None shorthand Union T1 None write Optional T1 example equivalent typing import Optional def handle_employee e Optional Employee - None optional type also automatically assumed default value None example def handle_employee e Employee None equivalent def handle_employee e Optional Employee None - None type special kind type Every type subtype also true builtin type object However static type checker completely different type value object type checker reject almost operations assigning variable using return value specialized type type error hand value type type checker allow operations value type assigned variable used return value constrained type Version platform checking Type checkers expected understand simple version platform checks e g import sys sys version_info 0 3 Python 3 specific definitions else Python 2 specific definitions sys platform 'win32' Windows specific definitions else Posix specific definitions Don't expect checker understand obfuscations like join reversed sys platform xunil Default argument values stubs may useful declare argument default without specifying actual default value example def foo x AnyStr y AnyStr - AnyStr default value look like options b None fails satisfy type constraint actually None modify type become Optional AnyStr cases default value may specified literal ellipsis e example literally would write Compatibility uses function annotations number existing potential use cases function annotations exist incompatible type hinting may confuse static type checker However since type hinting annotations runtime behavior evaluation annotation expression storing annotations __annotations__ attribute function object make program incorrect -- may cause type checker emit spurious warnings errors mark portions program covered type hinting use one following type ignore comment no_type_check decorator class function custom class function decorator marked no_type_check_decorator details see later sections order maximal compatibility offline type checking may eventually good idea change interfaces rely annotations switch different mechanism example decorator Python 3 5 pressure however See also longer discussion Rejected alternatives Type comments first-class syntax support explicitly marking variables specific type added PEP help type inference complex cases comment following format may used x type List Employee x y z type List int List int List str x y z type List int List int List str x 1 2 type List int Type comments put last line statement contains variable definition also placed statements statements right colon Examples type comments statements frobnicate foo type int foo int x y points type float float x y floats stubs may useful declare existence variable without giving initial value done using literal ellipsis typing import IO stream type IO str non-stub code similar special case typing import IO stream None type IO str Type checkers complain despite value None matching given type change inferred type Optional despite rule annotated arguments default value None assumption code ensure variable given value proper type uses assume variable given type type ignore comment put line error refers import http client errors 'not_found' http client NOT_FOUND type ignore type ignore comment line disables type checking rest file type hinting proves useful general syntax typing variables may provided future Python version Casts Occasionally type checker may need different kind hint programmer may know expression constrained type type checker may able infer example typing import List cast def find_first_str List object - str index next x enumerate isinstance x str get there's least one string return cast str index type checkers may able infer type index str infer object know code gets point must string cast x call tells type checker confident type x runtime cast always returns expression unchanged -- check type convert coerce value Casts differ type comments see previous section using type comment type checker still verify inferred type consistent stated type using cast type checker blindly believe programmer Also casts used expressions type comments apply assignments Stub Files Stub files files containing type hints use type checker runtime several use cases stub files Extension modules Third-party modules whose authors yet added type hints Standard library modules type hints yet written Modules must compatible Python 2 3 Modules use annotations purposes Stub files syntax regular Python modules one feature typing module may used stub files overload decorator described type checker check function signatures stub files recommended function bodies stub files single ellipsis type checker configurable search path stub files stub file found type checker read corresponding real module stub files syntactically valid Python modules use pyi extension make possible maintain stub files directory corresponding real module also reinforces notion runtime behavior expected stub files Additional notes stub files Modules variables imported stub considered exported stub unless import uses import form Function overloading overload decorator allows describing functions support multiple different combinations argument types pattern used frequently builtin modules types example __getitem__ method bytes type described follows typing import overload class bytes overload def __getitem__ self int - int overload def __getitem__ self slice - bytes description precise would possible using unions cannot express relationship argument return types typing import Union class bytes def __getitem__ self Union int slice - Union int bytes Another example overload comes handy type builtin map function takes different number arguments depending type callable typing import Callable Iterable Iterator Tuple TypeVar overload T1 TypeVar 'T1' T2 TypeVar 'T2 TypeVar 'S' overload def map func Callable T1 iter1 Iterable T1 - Iterator overload def map func Callable T1 T2 iter1 Iterable T1 iter2 Iterable T2 - Iterator could add items support two iterables Note could also easily add items support map None overload def map func None iter1 Iterable T1 - Iterable T1 overload def map func None iter1 Iterable T1 iter2 Iterable T2 - Iterable Tuple T1 T2 overload decorator may used stub files would possible provide multiple dispatch implementation using syntax implementation would require using sys _getframe frowned upon Also designing implementing efficient multiple dispatch mechanism hard previous attempts abandoned favor functools singledispatch See PEP 443 especially section Alternative approaches future may come satisfactory multiple dispatch design don't want design constrained overloading syntax defined type hints stub files meantime using overload decorator calling overload directly raises RuntimeError constrained TypeVar type often used instead using overload decorator example definitions concat1 concat2 stub file equivalent typing import TypeVar AnyStr TypeVar 'AnyStr' str bytes def concat1 x AnyStr y AnyStr - AnyStr overload def concat2 x str y str - str overload def concat2 x bytes y bytes - bytes functions map bytes __getitem__ can't represented precisely using type variables However unlike overload type variables also used outside stub files recommend overload used cases type variable sufficient due special stub-only status Another important difference type variables AnyStr using overload prior also used define constraints generic class type parameters example type parameter generic class typing IO constrained IO str IO bytes IO valid class IO Generic AnyStr Storing distributing stub files easiest form stub file storage distribution put alongside Python modules directory makes easy find programmers tools However since package maintainers free add type hinting packages third-party stubs installable pip PyPI also supported case consider three issues naming versioning installation path PEP provide recommendation naming scheme used third-party stub file packages Discoverability hopefully based package popularity like Django packages example Third-party stubs versioned using lowest version source package compatible Example FooPackage versions 1 0 1 1 1 2 1 3 2 0 2 1 2 2 API changes versions 1 1 2 0 2 2 stub file package maintainer free release stubs versions least 1 0 1 1 2 0 2 2 needed enable end user type check versions user knows closest lower equal version stubs compatible provided example FooPackage 1 3 user would choose stubs version 1 1 Note user decides use latest available source package using latest stub files generally also work they're updated often Third-party stub packages use location stub storage Type checkers search using PYTHONPATH default fallback directory always checked shared typehints python3 5 3 6 etc Since one package installed given Python version per environment additional versioning performed directory like bare directory installs pip site-packages Stub file package authors might use following snippet setup py data_files 'shared typehints python ' format sys version_info 2 pathlib Path SRC_PATH glob ' pyi' Typeshed Repo shared repository useful stubs collected typeshed Note stubs given package included without explicit consent package owner policies regarding stubs collected decided later time discussion python-dev reported typeshed repo's README Exceptions syntax listing explicitly raised exceptions proposed Currently known use case feature documentational case recommendation put information docstring typing Module open usage static type checking Python 3 5 well older versions uniform namespace required purpose new module standard library introduced called typing defines fundamental building blocks constructing types e g types representing generic variants builtin collections e g List types representing generic collection ABCs e g Sequence small collection convenience definitions Fundamental building blocks used def get key str - Union used Union Type1 Type2 Type3 Callable used Callable Arg1Type Arg2Type ReturnType Tuple used listing element types example Tuple int int str Arbitrary-length homogeneous tuples expressed using one type ellipsis example Tuple int part syntax literal ellipsis TypeVar used X TypeVar 'X' Type1 Type2 Type3 simply Y TypeVar 'Y' see details Generic used create user-defined generic classes Generic variants builtin collections Dict used Dict key_type value_type List used List element_type Set used Set element_type See remark AbstractSet FrozenSet used FrozenSet element_type Note Dict List Set FrozenSet mainly useful annotating return values arguments prefer abstract collection types defined e g Mapping Sequence AbstractSet Generic variants container ABCs non-containers ByteString Callable see listed completeness Container Generator used Generator yield_type send_type return_type represents return value generator functions subtype Iterable additional type variables type accepted send method contravariant -- generator accepts sending Employee instance valid context generator required accepts sending Manager instances return type generator Hashable generic present completeness ItemsView Iterable Iterator KeysView Mapping MappingView MutableMapping MutableSequence MutableSet Sequence Set renamed AbstractSet name change required Set typing module means set generics Sized generic present completeness ValuesView one-off types defined test single special methods similar Hashable Sized Reversible test __reversed__ SupportsAbs test __abs__ SupportsComplex test __complex__ SupportsFloat test __float__ SupportsInt test __int__ SupportsRound test __round__ SupportsBytes test __bytes__ Convenience definitions Optional defined Optional Union type None AnyStr defined TypeVar 'AnyStr' str bytes NamedTuple used NamedTuple type_name field_name field_type equivalent collections namedtuple type_name field_name useful declare types fields named tuple type cast described earlier no_type_check decorator disable type checking per class function see no_type_check_decorator decorator create decorators meaning no_type_check see overload described earlier get_type_hints utility function retrieve type hints function method Given function method object returns dict format __annotations__ evaluating forward references given string literals expressions context original function method definition Types available typing io submodule IO generic AnyStr BinaryIO simple subtype IO bytes TextIO simple subtype IO str Types available typing re submodule Match Pattern types re match re compile results generic AnyStr Rejected Alternatives discussion earlier drafts PEP various objections raised alternatives proposed discuss explain reject Several main objections raised brackets generic type parameters people familiar use angular brackets e g List int languages like C Java C Swift express parametrization generic types problem really hard parse especially simple-minded parser like Python languages ambiguities usually dealt allowing angular brackets specific syntactic positions general expressions aren't allowed also using powerful parsing techniques backtrack arbitrary section code Python we'd like type expressions syntactically expressions use e g variable assignment create type aliases Consider simple type expression List int Python parser's perspective expression begins four tokens NAME LESS NAME GREATER chained comparison b c e b b c even make example could parsed ways b c Assuming angular brackets language could interpreted either following two b c e b __getitem__ c b c e b b c would surely possible come rule disambiguate cases users rules would feel arbitrary complex would also require us dramatically change CPython parser every parser Python noted Python's current parser intentionally dumb -- simple grammar easier users reason reasons square brackets e g List int long preferred syntax generic type parameters implemented defining __getitem__ method metaclass new syntax required option works recent versions Python starting Python 2 2 Python alone syntactic choice -- generic classes Scala also use square brackets existing uses annotations One line argument points PEP 3107 explicitly supports use arbitrary expressions function annotations new proposal considered incompatible specification PEP 3107 response first current proposal introduce direct incompatibilities programs using annotations Python 3 4 still work correctly without prejudice Python 3 5 hope type hints eventually become sole use annotations require additional discussion deprecation period initial roll-out typing module Python 3 5 current PEP provisional status see PEP 411 Python 3 6 released fastest conceivable scheme would introduce silent deprecation non-type-hint annotations 3 6 full deprecation 3 7 declare type hints allowed use annotations Python 3 8 give authors packages use annotations plenty time devise another approach even type hints become overnight success Another possible outcome would type hints eventually become default meaning annotations always remain option disable purpose current proposal defines decorator no_type_check disables default interpretation annotations type hints given class function also defines meta-decorator no_type_check_decorator used decorate decorator causing annotations function class decorated latter ignored type checker also type ignore comments static checkers support configuration options disable type checking selected packages Despite options proposals circulated allow type hints forms annotations coexist individual arguments One proposal suggests annotation given argument dictionary literal key represents different form annotation key 'type' would use type hints problem idea variants notation becomes noisy hard read Also cases existing libraries use annotations would little need combine type hints simpler approach selectively disabling type hints appears sufficient problem forward declarations current proposal admittedly sub-optimal type hints must contain forward references Python requires names defined time used Apart circular imports rarely problem use means look runtime forward references problem ensuring name defined function using called problem type hints annotations per PEP 3107 similar default values evaluated time function defined thus names used annotation must already defined function defined common scenario class definition whose methods need reference class annotations general also occur mutually recursive classes natural container types example class Node Binary tree node def __init__ self left Node right Node self left left self right right written work peculiarity Python class names become defined entire body class executed solution isn't particularly elegant gets job done allow using string literals annotations time won't use though -- uses type hints expected reference builtin types types defined modules counterproposal would change semantics type hints aren't evaluated runtime type checking happens off-line would type hints need evaluated runtime course would run afoul backwards compatibility since Python interpreter doesn't actually know whether particular annotation meant type hint something else compromise possible __future__ import could enable turning annotations given module string literals follows __future__ import annotations class ImSet def add self ImSet - List ImSet assert ImSet add __annotations__ 'a' 'ImSet' 'return' 'List ImSet ' __future__ import statement may proposed separate PEP double colon creative souls tried invent solutions problem example proposed use double colon type hints solving two problems disambiguating type hints annotations changing semantics preclude runtime evaluation several things wrong idea however It's ugly single colon Python many uses look familiar resemble use colon English text general rule thumb Python abides forms punctuation exceptions typically well known programming languages use unheard English languages e g C used scoping operator different beast contrast single colon type hints reads naturally -- wonder since carefully designed purpose idea long predates PEP 3107 gvr-artima also used fashion languages Pascal Swift would return type annotations It's actually feature type hints evaluated runtime Making type hints available runtime allows runtime type checkers built top type hints catches mistakes even type checker run Since separate program users may choose run even install might still want use type hints concise form documentation Broken type hints use even documentation it's new syntax using double colon type hints would limit code works Python 3 5 using existing syntax current proposal easily work older versions Python 3 fact mypy supports Python 3 2 newer type hints become successful may well decide add new syntax future declare type variables example var age int 42 use double colon argument type hints consistency we'd use convention future syntax perpetuating ugliness forms new syntax forms alternative syntax proposed e g introduction keyword roberge Cobra-inspired requires clauses share problem double colon won't work earlier versions Python 3 would apply new __future__ import backwards compatible conventions ideas put forward include decorator e g typehints name str returns str could work it's pretty verbose extra line argument names must repeated far cry elegance PEP 3107 notation Stub files want stub files primarily useful adding type hints existing code doesn't lend adding type hints e g 3rd party packages code needs support Python 2 Python 3 especially extension modules situations annotations line function definitions makes much useful Docstrings existing convention docstrings based Sphinx notation type arg1 description pretty verbose extra line per parameter elegant could also make something new annotation syntax hard beat designed purpose It's also proposed simply wait another release problem would solve would procrastination PEP Development Process live draft PEP lives GitHub github also issue tracker issues much technical discussion takes place draft GitHub updated regularly small increments official PEPS repo peps usually updated new draft posted python-dev Acknowledgements document could completed without valuable input encouragement advice Jim Baker Jeremy Siek Michael Matson Vitousek Andrey Vlasovskikh Radomir Dopieralski Peter Ludemann BDFL-Delegate Mark Shannon Influences include existing languages libraries frameworks mentioned PEP 482 Many thanks creators alphabetical order Stefan Behnel William Edwards Greg Ewing Larry Hastings Anders Hejlsberg Alok Menghrajani Travis E Oliphant Joe Pamer Raoul-Gabriel Urma Julien Verlaguet References mypy http mypy-lang org gvr-artima 1 2 http www artima com weblogs viewpost jsp thread 85551 wiki-variance http en wikipedia org wiki Covariance_and_contravariance_ 28computer_science 29 typeshed https github com JukkaL typeshed pyflakes https github com pyflakes pyflakes pylint http www pylint org roberge http aroberge blogspot com 2015 01 type-hinting-in-python-focus-on html github https github com ambv typehinting issues https github com ambv typehinting issues peps https hg python org peps file tip pep-0484 txt Copyright document placed public domain Source https hg python org peps file tip pep-0484 txt Tweets ThePSF PSF Python Software Foundation organization behind Python Become member PSF help advance software mission Back Top Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Back Top Help General Contact Diversity Initiatives Submit Website Bug Copyright 2001-2015 Python Software Foundation Legal Statements Privacy Policy"),
('Javascript: Function that returns status for specified Facebook API permission', "Code Drug Coding tips blatherings someone whose lucky enough get paid code Menu Skip content HomeAbout 24May2015 Javascript Function returns status specified Facebook API permission Posted Uncategorized davidrothbauer m working application want use Facebook user authorization someone wary over-granting permission applications permissions want ask user going something re needed One friends list application allow user invite people administrators managers particular group want access friends list something want came following function check specific permission important remember user must grant permission access profile logged prior using function First must ensure initialize Facebook connection using application ID window fbAsyncInit function FB init appId 'your app id here' xfbml true version 'v2 2' get Facebook App ID testing called getting connected status response FB getLoginStatus code calls function function synchronous means script wait return value call store values initialization page load need FB getLoginStatus function response response status 'connected' FB api ' me' function medata stuff checkfbpermission 'email' re wondering medata object looks like id myfbidnumber email david rothbaueratmyemail first_name David gender male last_name Rothbauer link https www facebook com app_scoped_user_id myidnumber locale en_US name David Rothbauer timezone -4 updated_time 2015-04-27T21 01 49 0000 verified true function function checkfbpermission perm FB api ' permissions' function data loop child objects permission status sequentially found boolean tell return status value var found false var k data console log JSON stringify data k useful checking permission you're looking actually exists var 0 data k length var x data k found true return data k x x permission data k x perm tell script return value next object status found true else found false return 'no data' m still working best leverage Facebook user integration application post solutions think might helpful develop ads Share TwitterTumblrLinkedInFacebookGoogleEmailPrintRedditLike Like Loading Related facebook api facebook api v2 2 facebook permissions javascript Leave comment Post navigation Full Stack Programmer makes programmer good Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Seach Posts Search Recent Posts PHP BREAK CONTINUE Nested Routines loops switch statements makes programmer good Javascript Function returns status specified Facebook API permission Full Stack Programmer PHP LDAP Get Active Directory Groups useful things Recent Comments davidrothbauer SQL SERVER Conditional Chris SQL SERVER Conditional VS2012 C Get IPV4 Finding Console Windo Archives May 2015 April 2015 March 2015 February 2015 December 2014 November 2014 October 2014 September 2014 July 2014 May 2014 April 2014 March 2014 Categories NET Active Directory Asides C Database Flow Control HL7 iPeople Echo Javascript JQuery Meditech Mirth Integration PHP Programmer Sanity Preservation Programming Basics SQL SQL SERVER Uncategorized Web Design Meta Register Log Entries RSS Comments RSS WordPress com Follow Blog via Email Enter email address follow blog receive notifications new posts email Join 17 followers Blog WordPress com Adelle Theme Follow Follow Code Drug Get every new post delivered Inbox Build website WordPress com Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email d bloggers like"),
('Cryptographic Right Answers from Thomas Ptacek', "Sign GitHub account Sign Gists tqbf gist be58d2d39690c3b366ad secret Last active May 23 2015 Code Revisions 2 Stars 477 Forks 35 Embed URL HTTPS clone URL SSH clone URL clone HTTPS SSH Download Gist Updated Cryptographic Right Answers View gist be58d2d39690c3b366ad gistfile1 md Raw File suppressed Click show Encrypting data AES-CTR HMAC Use order preference 1 Nacl libsodium default 2 Chacha20-Poly1305 3 AES-GCM care you're hiding information users network three options get AEAD way want encrypt 2015 Options 2 3 morally thing stream cipher polynomial thermonuclear CRC MAC Option 2 gets native stream cipher MAC optimized general purpose CPUs Poly1305 also easier GCM library designers implement safely Option 3 's AES-GCM industry standard it's fast usually hardware accelerated modern processors implementation safety pitfalls platforms aren't accelerated Avoid AES-CBC AES-CTR block ciphers 64-bit blocks --- especially Blowfish inexplicably popular OFB mode Don't ever use RC4 comically broken Symmetric key length Use 256 bit keys Go ahead use 256 bit keys care you're using cryptography rememeber AES key far less likely broken public key pair latter key size larger you're going obsess Avoid constructions huge keys cipher cascades key sizes 128 bits Symmetric signatures use HMAC Remains HMAC care you're securing API encrypting session cookies encrypting user data medical advice using AEAD construction you're authenticating encrypting API requests don't anything complicated class crypto implementation bugs arises feed data MAC you're designing new system scratch Google crypto canonicalization bugs Also use secure compare function Avoid custom keyed hash constructions HMAC-MD5 HMAC-SHA1 complex polynomial MACs encrypted hashes CRC Hashing HMAC algorithm use SHA256 HMAC-SHA256 Remains SHA-2 care always care get away use SHA-512 256 truncates output sidesteps length extension attacks Meanwhile it's less likely you'll upgrade SHA-2 SHA-3 you'll upgrade SHA-2 something faster SHA-3 SHA-2 looks great right get comfortable cuddly SHA-2 Avoid SHA-1 MD5 MD6 Random IDs Use 256-bit random numbers Remains use 256-bit random numbers care always care dev urandom Avoid userspace random number generators havaged prngd egd dev random Password handling scrypt PBKDF2 order preference use scrypt bcrypt nothing else available PBKDF2 care accept passwords users anywhere system human-intelligible secret keys don't obsess use built elaborate password-hash-agility schemes accomodate Password Hash Competition winners they're pretty good real weakness systems don't use password hashes Avoid naked SHA-2 SHA-1 MD5 Asymmetric encryption Use RSAES-OAEP SHA256 MGF1 SHA256 bzzrt pop ffssssssst exponent 65537 Use Nacl care need encrypt kind message many different people strangers need able accept message asynchronously like store-and-forward email decrypt offline It's pretty narrow use case cryptographic right answers one you're least likely get right Don't freelance public key encryption don't use low-level crypto library like OpenSSL BouncyCastle several reasons stop using RSA switch elliptic curve software Progress attacking RSA --- really classic multiplicative group primitives including DH DSA presumably ElGamal --- proceeding faster progress elliptic curve RSA DH drag towards backwards compatibility ie downgrade-attack compatibility insecure systems Elliptic curve schemes generally don't need vigilant accidentally accepting 768-bit parameters RSA begs implementors encrypt directly public key primitive usually want accidentally designing RSA encryption usually forfeit forward-secrecy also exposes new classes implementation bugs Elliptic curve systems don't promote particular foot-gun weight correctness safety elliptic curve systems falls primarily cryptographers must provide set curve parameters optimized security particular performance level happens aren't many knobs implementors turn subvert security opposite true RSA Even use RSA-OAEP additional parameters supply things know get right use RSA use RSA-OAEP don't use RSA Avoid RSA-PKCS1v15 RSA ElGamal don't know Merkle-Hellman knapsacks avoid RSA Asymmetric signatures Use RSASSA-PSS SHA256 MGF1 SHA256 yabble babble Use Nacl Ed25519 RFC6979 care you're designing new cryptocurrency system sign Ruby Gems Vagrant images DRM scheme authenticity series files arriving random times needs checked offline secret key you're designing encrypted message transport allegations previous answer incorporated herein stated full 10 years software security assessments count none fingers number RSA-PSS users paid look RSA-PSS academic recommendation two dominating use cases within last 10 years asymmetric signatures cryptocurrencies forward-secret key agreement ECDHE-TLS dominating algorithms use cases elliptic-curve based wary new systems use RSA signatures last years major shift away conventional DSA signatures towards misuse-resistent deterministic signature schemes EdDSA RFC6979 best examples think schemes user-proofed responses Playstation 3 ECDSA flaw reuse random number leaked secret keys Use deterministic signatures preference signature scheme Avoid RSA-PKCS1v15 RSA ECDSA DSA really especially avoid conventional DSA ECDSA Diffie-Hellman Operate 2048-bit Group 14 generator 2 Probably still DH-2048 Nacl care you're designing encrypted transport messaging system used someday stranger static AES keys won't work trickiest one roughly set considerations use Nacl use Nacl don't even care Nacl use trustworthy library use Curve25519 it's modern ECDH curve best software support analysis People really beat crap Curve25519 tried get standardized TLS stronger curves none supported well Curve25519 don't implement Curve25519 port C code can't use trustworthy library ECDH DH use DH-2048 standard 2048 bit group like Colin says hardcode DH parameters don't use conventional DH need negotiate parameters interoperate implementations handshake negotiation interoperate older software consider using NIST P-256 widespread software support Hardcoded-param DH-2048 safer NIST P-256 NIST P-256 safer negotiated DH trustworthy library support NIST P-256 pitfalls P-256 probably safest NIST curves don't go -224 Isn't crypto fun threat model criminals prefer DH-1024 sketchy curve libraries threat model governments prefer sketchy curve libraries DH-1024 come find way one previous recommendations sucks DH really key agreement important crypto building block Avoid conventional DH SRP J-PAKE handshakes negotiation elaborate key negotiation schemes use block ciphers srand time Website security Use OpenSSL Remains OpenSSL BoringSSL use AWS ELBs care website website security Colin means library use make web server speak HTTPS Believe OpenSSL still probably right decision can't delegate Amazon use HTTPS elastic load balancers makes problem Avoid offbeat TLS libraries like PolarSSL GnuTLS MatrixSSL Client-server application security ship RSA keys custom RSA protocol Use TLS care previous recommendations public-key crypto relevant happens design custom RSA protocol 1-18 months afterwards hopefully sooner often later discover made mistake protocol virtually security happened Colin better example Salt Stack Salt managed deploy e 1 RSA seems little crazy recommend TLS given recent history Logjam DH negotiation attack FREAK export cipher attack POODLE CBC oracle attack RC4 fiasco CRIME compression attack Lucky13 CBC padding oracle timing attack BEAST CBC chained IV attack Heartbleed Renegotiation Triple Handshakes Compromised CAs Here's still use TLS custom transport problem Many attacks work browsers rely victim accepting executing attacker-controlled Javascript order generate repeated known chosen plaintexts attacks mitigated hardcoding TLS 1 2 ECDHE AES-GCM sounds tricky it's less tricky designing transport protocol ECDHE AES-GCM custom transport scenario don't need depend CAs self-sign certificate ship code like Colin suggests RSA keys Avoid designing encrypted transport genuinely hard engineering problem using TLS default configuration like curl using curl IPSEC Online backups Use Tarsnap Remains Tarsnap say recommendation stood test time paragonie-scott commented May 23 2015 also one Tarsnap alternative worth considering Least Authority arielb1 commented May 23 2015 NaCl's crypto_box probably easier get right TLS OpenSSL bajillion failure modes SSL backwards compatibility crappy way don't arielb1 commented May 23 2015 Also important key use pick 1 format messages authenticate Document format Version-control documentation along code uses format changes non-back-compat way pick new key try use backwards-compatible format Ensure documented messages make sense try fire person message without knowing person - timestamps nonces really help can't pick 1 format say first 16 bytes message UUID document UUID-format documentation rules using UUID Seriously don't mix secret unauthenticated things together covers 90 vulnerabilities Owner tqbf commented May 23 2015 post previously warned people go P-384 erroneous reason thought P-384 wasn't twist-secure didn't bother look Safecurves else equal --- meaning you're equally confident P-256 P-384 libraries don't timing leaks --- use stronger curve Really though avoid NIST curves better options arielb1 commented May 23 2015 Also need basic link encryption use spiped something yuvadm commented May 23 2015 What's wrong haveged tool enrich entropy pool hobarrera commented May 23 2015 also one Tarsnap alternative worth considering Least Authority lot expensive unless you're storing huge amounts data 100GiB really lot considering it's personal use Owner tqbf commented May 23 2015 thing enriching entropy pool ex3ndr commented May 23 2015 NaCl native library need pure java-implementations asymmetric encryption working environments recommend phene commented May 24 2015 would great document cited sources claims rationales I'm still wondering you've said avoid AES-CBC NemoPublius commented May 24 2015 phene AES-CBC authenticated mode author says authenticated modes way want encrypt 2015 little disappointed OCB mode even get mention Rogaway good guy agree would nice links details answers ask never understand sort colinmahns commented May 24 2015 curiosity consider LibreSSL offbeat TLS library team make OpenSSL code-base sane leonklingele commented May 24 2015 Mind adding additional information Asymmetric encryption Elliptic curves Maybe let ECC get section link safecurves cr yp curve recommendations would also helpful EDIT secret gist Give name make public Zate commented May 24 2015 amazingly helpful someone field 3 4 queries business week certain crypto situations secure large scale client server infrastructures yamashi commented May 24 2015 read http cr yp streamciphers html appears Salsa20 stronger faster AES CPU AES-NI extension think nnathan commented May 24 2015 option choose entity authentication encryption looking braindead SNMP specs life cannot understand separate passwords authentication privacy realize example provided comically bad right CodesInChaos commented May 24 2015 nitpicks NaCl authenticated encryption authenticated encryption additional data Since option 1 XSalsa20 Poly1305 it's morally thing options 2 3 stream cipher polynomial thermonuclear CRC MAC happened Colin don't recall messing transport security at-rest security via nonce reuse Neither TLS NaCl could prevented yamashi Salsa20 similar properties AES-CTR particular it's unauthenticated unless good reason use raw stream cipher you're probably better authenticated encryption NaCl's crypto_box secret_box Option 1 based Salsa20 ChaCha Option 2 Salsa20's successor arielb1 Designing secure transport protocol top crypto_box isn't easy add forward secrecy protection replay attacks ex3ndr I've ported ref10 implementation Curve25519 key exchange java since won't maintain can't recommend direct use might good starting point somebody else wants maintain Java NaCl port since ref10 great basis decent performance written portable C phene commented May 24 2015 nemopublius - reject anything ask never understand Don't conflate ignorance subject detail unwillingness incapability learning dlitz commented May 24 2015 I'd add you're creating service nix run OpenSSH users already use OpenSSH e they're developers sysadmins run service existing OpenSSH infrastructure rather setting separate service runs TLS Invoke user's regular ssh binary don't re-implement SSH protocol samson commented May 26 2015 PolarSSL managed ARM CPU manufacturers renamed mbedTLS part embedded systems software package Calling 'offbeat' little 'out there' ask Steering people towards libraries proven problems also bit problem stribika-rdonly commented May 27 2015 Hardcoded-param DH-2048 safer NIST P-256 NIST P-256 safer negotiated DH true SSH's DH-GEX protocol don't think downgraded key exchange server client use SHA256 g xy mod p g p min_dh_size preferred_dh_size max_dh_size other_stuff shared secret anyone replace either DH parameters server requirements client keys won't match SSH guide recommend Curve25519 ECDH negotiated 2048 bit DH order would prefer spread bad advice borski commented May 27 2015 wrote post year ago trying simplify differences encryption hashing people little security experience much extensive list version basically boils Use NaCl Sign free join conversation GitHub Already account Sign comment Something went wrong request Please try Status API Blog 2015 GitHub Inc Terms Privacy Security Contact"),
('Gaffer on Games | Snapshot Compression', 'x Search May 28 2015 Gaffer Games Main menu Skip content HomeGame PhysicsIntegration BasicsFix Timestep Physics 3DSpring PhysicsNetworked Physics 2004 Game NetworkingUDP vs TCPSending Receiving PacketsVirtual Connection UDPReliability Ordering Congestion Avoidance UDPDebugging Multiplayer GamesFloating Point DeterminismWhat every programmer needs know game networkingVirtual GoIntroduction Virtual GoThe Shape Go StoneTessellating Go StoneHow Go Stone Moves Rigid Body DynamicsCollision Detection Go Stone vs Go BoardRotation Inertia TensorsCollision Response Coulomb FrictionNetworked PhysicsIntroduction Networked PhysicsThe Physics SimulationDeterministic LockstepSnapshots InterpolationSnapshot CompressionState SynchronizationConclusion Snapshot Compression Hi m Glenn Fiedler welcome Networked Physics article series network physics simulation previous article sent snapshots entire simulation state 10 times per-second network interpolated snapshots reconstruct view simulation side problem low snapshot rate interpolation snapshots adds interpolation delay top network latency 10 snapshots per-second minimum interpolation delay 100ms practical minimum considering network jitter 150ms protection one two lost packets row desired delay blows 250ms 350ms acceptable amount delay games way reduce delay increase snapshot send rate Since many games update 60fps lets try sending snapshots 60 times per-second instead 10 Unfortunately comes cost increased bandwidth re sending amount data frequently also packet sent packet header overhead may sound obvious 60 packets per-second send 6X number UDP IP packet headers 10 packets per-second creates bandwidth floor cannot reduce use rule thumb calculating bandwidth packet header overhead around 32 bytes per-packet exact give idea typical magnitude Multiply 60 ll see trivial amount bandwidth nothing packet header overhead optimize everything else packet re going article work every possible bandwidth optimization think least get bandwidth control application lets set target bandwidth 256 kilobits per-second may seem like lot bandwidth perhaps network connection handle much understand networking video game physics simulation goal minimize latency ensure good network conditions player achieve necessary saturate link instead work within conservative amount bandwidth unlikely cause trouble Lets look much bandwidth re using sending uncompressed snapshots 60 times per-second browser support video tag Clearly conservative usage bandwidth bandwidth coming snapshot packet array 901 cubes nothing else clearly cube data cause high bandwidth sending per-cube expensive cube following properties quat orientation 128 bits vec3 linear_velocity 96 bits vec3 position 96 bits bool interacting 1 bit total 321 bits bits per-cube 40 125 bytes per-cube may seem like lot lets math scene 901 cubes 901 40 125 36152 625 bytes cube data per-snapshot 60 snapshots per-second 36152 625 60 2169157 5 bytes per-second Add packet header estimate 2169157 5 32 60 2170957 5 Convert bytes per-second megabits per-second 2170957 5 8 1000 1000 17 38mbps Close enough see adds Lets get started optimizing orientation largest field optimizing bandwidth efficient work order greater least potential gain possible Many people compressing quaternion think know ll pack 8 8 8 8 one 8 bit signed integer per-component Sure works bit math get much better accuracy fewer bits using trick called smallest three Since know quaternion represents rotation length must 1 therefore x 2 y 2 z 2 w 2 1 use identity drop one component reconstructing side example sent x y z could reconstruct w sqrt 1 x 2 y 2 z 2 might think need send sign bit w case negative fact make w always positive negating quaternion w negative quaternion space x y z w -x -y -z -w represent rotation want always drop component due numerical precision issues want instead find largest component abs encode index using two bits 0 3 0 x 1 y 2 z 3 w send largest component index omitting largest component sending smallest three components network hence name One final improvement v absolute value largest quaternion component next largest possible component value occurs two components absolute value two components zero length quaternion v v 0 0 1 therefore v 2 v 2 1 2v 2 1 v 1 sqrt 2 means get encode smallest three components -0 707107 0 707107 instead -1 1 giving precision number bits technique ve found minimum sufficient precision simulation 9 bits per-smallest component gives result 2 9 9 9 29 bits per-orientation originally 128 browser support video tag optimize next tie linear velocity position 96 bits experience position harder quantity compress lets start linear velocity compress linear velocity first need bound linear velocity components range need send full float found maximum speed 32 meters per-second nice power two doesn negatively affect player experience cube simulation Since really using linear velocity hint improve interpolation position sample points pretty rough compression found 32 distinct values per-meter per second squared provides acceptable precision Linear velocity bounded quantized three integers range -1024 1023 breaks follows -32 31 6 bits integer component multiply 5 bits fraction precision hate messing around sign bits add 1024 get value range 0 2047 send instead decode receive subtract 1024 get back signed integer range converting float 11 bits per-component gives 33 bits total per-linear velocity 1 3 original uncompressed size better cubes stationary take advantage write single bit rest bit 1 velocity known zero sent Otherwise compressed velocity follows bit 33 bits Cubes rest cost 127 bits cubes moving cost one bit previously 159 1 160 bits browser support video tag sending linear velocity previous article decided send significantly improved quality interpolation 10 snapshots per-second re sending 60 snapshots per-second still necessary see answer Linear interpolation good enough high send rates browser support video tag position compress ll use trick used linear velocity bound quantize game worlds reasonably big chose position bound -256 255 meters horizontal plane xy since cube simulation floor z 0 chose z range 0 32 meters need work much precision required experimentation found 512 values per-meter roughly 0 5mm precision provides sufficient precision gives position x y components -131072 131071 z components range 0 16383 18 bits x 18 bits y 14 bits z giving total 50 bits per-position originally 96 reduces cube state 80 bits 10 bytes per-cube 4X improvement Originally 40 bytes per-cube browser support video tag ve compressed position orientation ve run simple compressions reducing precision values sending reduction precision results unacceptable artifacts optimize answer yes embrace completely new technique delta compression Delta compression sounds mysterious Magical Hard Actually hard works left side sends packets right like snapshot 110 encoded relative snapshot 100 snapshot encoded relative called baseline encoding many fancy tricks basic big order magnitude win comes say Cube n snapshot 110 baseline One bit changed implement delta encoding course essential sender encodes snapshots relative baselines knows side received otherwise cannot decode snapshot Therefore handle packet loss receiver continually send ack packets back sender saying recent snapshot received snapshot n sender takes recent ack recent previous ack updates baseline snapshot value next time packet sent snapshot encoded relative recent baseline process happens continuously steady state becomes sender encoding snapshots relative baseline roughly RTT round trip time past one slight wrinkle one round trip time past initial connection sender doesn baseline encode hasn received ack receiver yet handle adding single flag packet says snapshot encoded relative initial state simulation known sides Another option receiver doesn know initial state send initial state using non-delta encoded path eg one large data block data block received delta encoded snapshots sent first relative initial baseline data block eventually converging steady state baselines RTT browser support video tag see big win refine approach lock gains re going get another order magnitude improvement like past point re going work pretty hard get number small cumulative gains reach goal 256 kilobits per-second First small improvement cube isn sent costs 1 bit changed 901 cubes send 901 bits packet even cubes changed 60 packets per-second adds 54kbps bandwidth Seeing usually significantly less 901 changed cubes per-snapshot common case reduce bandwidth sending changed cubes cube index 0 900 identifying cube need add 10 bit index per-cube identify cross-over point actually expensive send indices not-changed bits 10 bit indices cost indexing 10 n bits Therefore efficient use indices sending 90 cubes less 900 bits evaluate per-snapshot send single bit header indicating encoding using 0 indexing 1 changed bits way use efficient encoding number changed cubes snapshot reduces steady state bandwidth objects stationary around 15 kilobits per-second bandwidth composed entirely packet header uint16 sequence uint16 base bool initial plus IP UDP headers 28 bytes browser support video tag Next small gain encoded cube index relative previous cube index Since iterating across sending changed cube indices in-order cube 0 cube 10 cube 11 50 52 55 could easily encode 2nd remaining cube indices relative previous changed index e g 10 1 39 2 3 smart encode index offset able average represent cube index less 10 bits best encoding depends set objects interact spend lot time moving horizontally blowing cubes initial cube grid hit lots 1s move vertically initial state hit lots 30s sqrt 900 need general purpose encoding capable representing statistically common index offsets less bits small amount experimentation came simple encoding 1 8 1 3 4 bits 9 40 1 1 5 7 bits 41 900 1 1 10 12 bits Notice large relative offsets actually expensive 10 bits statistical game bet re going get much larger number small offsets win cancels increased cost large offsets works encoding able get average 5 5 bits per-relative index slight problem longer easily determine whether changed bits relative indices best encoding solution used run mock encoding changed cubes packet write count number bits required encode relative indices number bits required larger 901 fallback changed bits browser support video tag Next small improvement Encoding position relative offset baseline position lot different options obvious thing eg 1 bit relative position say 8-10 bits per-component components deltas within range provided bits otherwise send absolute position 50 bits gives decent encoding better think situations one position component large others small would nice could take advantage send small components using less bits statistical game best selection small large ranges per-component depend data set couldn really tell looking noisy bandwidth meter making gains captured position vs position base data set wrote text file analysis format x y z base_x base_y base_z one cube per-line goal encode x y z relative base x y z line interested download data set wrote short ruby script find best encoding greedy search best bit-packed encoding found data set works like 1 bit small per delta component followed 3 bits small -16 15 range otherwise delta component -256 255 range sent 9 bits component delta values outside large range fallback absolute position Using encoding able obtain average 26 1 bits changed position Next figured relative orientation would similar easy big win Problem unlike position range position offset quite small relative total position space change orientation 100ms much larger percentage total quaternion space tried bunch stuff without good results tried encoding 4D vector delta orientation directly recomposing largest component post delta using trick smallest 3 tried calculating relative quaternion orientation base orientation since knew w would large rotation relative identity could avoid sending 2 bits identify largest component turn would need send one bit sign w want negate quaternion best compression could find using scheme 90 smallest three good give run analysis smallest three representation found 90 orientations smallest three format largest component index base orientation 100ms ago meant could profitable delta encode smallest three format directly found would additional precision loss method reconstructing orientation base exported quaternion values typical run data set smallest three format available got work trying multi-level small large range per-component greedy search used position best encoding found 5-8 meaning -16 15 small -128 127 large One final thing position large range extended bit knowing component value small value cannot -16 15 range leave calculation exercise reader careful collapse two values onto zero end result average 23 3 bits per-relative quaternion 80 3 absolute smallest three one small win left one final analysis pass position orientation data sets noticed 5 positions unchanged base position quantized 0 5mm resolution 5 orientations smallest three format also unchanged base two probabilities mutually exclusive cube would unchanged therefore sent meaning small statistical win exists 10 cube state send one bit position changing one bit orientation changing Yes 90 cubes 2 bits overhead added 10 cubes save 20 bits sending 2 bits instead 23 3 bit orientation 26 1 bits position make providing small overall win roughly 2 bits per-cube browser support video tag many options bandwidth optimization bit work seemingly impossible fact possible took 20mbit less 0 25mbit average less 1 25 original uncompressed bandwidth far take using traditional hand-rolled bit-packing techniques find source code implementation compression techniques mentioned article possible get even better compression using different approach Bit-packing inefficient bit values equal probability 0 vs 1 matter hard tune bit-packer context aware arithmetic encoding beat result accurately modeling probability values occur data set implementation Fabian Giesen beat best bit-packed result 25 also possible get much better result delta encoded orientations using previous baseline orientation values estimate angular velocity predict future orientations rather delta encoding smallest three representation directly Chris Doran Geomerics wrote excellent article exploring mathematics quaternion compression worth reading next State Synchronization enjoying networked physics article series please consider supporting work patreon donation Patreon supporters get early access unpublished articles 23 comments Snapshot Compression charles van noland May 23 2015 11 08 pm figured achieve decent precision using 8 bits per quaternion component square component quantizing effectly produces linear mapping quaternion component lends well quantization using minimal bits uniform precision Otherwise granularity precision place pun depending orientation receiving end forced sqrt component add trade-off always computation budget bandwidth Reply Glenn Fiedler May 24 2015 9 24 great idea Perhaps could combine technique smallest three get really good results note square 0 707107 get 0 5 means smallest three technique lets DOUBLE effective bits usage vs non-smallest three encoding need send 3 4 components Reply 0BZEN May 19 2015 1 52 quaternion compression m getting maths quite right 2 bits biggest component also needs one bit sign m sure better compression algorithms pinch works quite well straight forward Would nice sample code return number bits written size_t SerialiseQuaternion float q 4 unsigned char buffer size_t buffersize stuff return number bits read size_t DeserialiseQuaternion float q 4 unsigned char buffer size_t buffersize stuff Reply Glenn Fiedler May 20 2015 10 37 pm reason need sign x y z w rotation -x -y -z -w Therefore component largest negative negate components sending making always positive Reply Steven May 15 2015 12 45 pm dealing delta compression snapshots lag client store distinct snapshots baselines well Imagine value changes 0 1 0 across three snapshots delta baseline snapshot 0 snapshot 2 shows change change client moved snapshot1 gets snapshot2 delta 0 see 2 became 0 make delta everything baseline latest snapshot Reply Glenn Fiedler May 15 2015 8 10 pm server encodes snapshots sent client relative baseline client needs baseline decode doesn guarantee client get snapshots detect changes variables made Generally speaking since quantities used interpolation mostly problem need detect changes sequence changing quantity typically used cheers Reply Steven May 20 2015 3 51 pm clarify client require specific baseline snapshot Isn state baseline snapshot encoded local state example client receives snapshot S0 ack server snapshot S0 baseline Server sends S1-delta-to-S0 client receives server receives acknowledgement S1 perhaps due lag sends S2-delta-to-S0 since received acknowledge delta include differences occurred S0 S1 well S1 S2 simply delta S0 S2 consider value going 0 1 0 S0 S2 S2-delta-to-S0 doesn consider S1 see change 0 1 0 anything since explicit baseline imagine cases client receives delta packet baseline passed due delta packet previous message client need hold onto snapshot receiving end simply Reply Glenn Fiedler May 20 2015 10 33 pm client receives deltas specify time baseline number eg X relative Y eg example set entities properties per-entity different X Y effect started world state X added changed props added created objects get Y one step cheers Reply Pingback Gaffer Games Mathematics Quaternion Compression Chris Doran Przemator April 5 2015 8 55 Dear Glenn loved articles networked physics waiting remaining ones get published would like implement 2D racing game 30 players using Box2D Enet made attempt already failed terribly trying combine networking physics tips maybe give another shot trouble putting instructions cohesive whole would love see graphical algorithmical implementation better understand things visually clear happens player fails deliver feedback within 100 ms window server predict frame n-1 key well frame n thing m struggling initial synchronisation time server client mentioned cover topic think crucial guess calculate latency based average ping period time start whole simulation Finally would make sense also use Box2D simulation client side perform rendering prediction missed frames Reply Glenn Fiedler April 6 2015 8 22 need use client side prediction wrote 2004 http gafferongames com game-physics networked-physics Reply Przemator April 9 2015 8 55 initial time synchronisation Let say racing game green light race starts best client start race given absolute moment time server client shift Reply Glenn Fiedler April 9 2015 9 09 Yep implement time synchronization game dependent Racing games highly linear motion sometimes use extrapolation bring past objects present client time FPS uses latency compensation shots counter fact client ahead time vs players world past Reply totox April 4 2015 8 23 pm know purpose last two parts article locked Reply Glenn Fiedler April 4 2015 11 08 pm Yep re public yet patreon supporters Reply Andrew March 30 2015 3 28 Great article always Stupid question science behind mean smart context-aware compression information theory Could recommend good books materials topic Reply Glenn Fiedler March 30 2015 1 24 pm would look context aware encoders arithmetic range encoders next step source code alternative encoding approaches comment section http gafferongames com 2015 03 14 the-networked-physics-data-compression-challenge Reply Andrew March 31 2015 3 33 Thanks clues Reply Pingback Gaffer Games Networked Physics Data Compression Walk-Off Krzysztof Narkowicz March 14 2015 4 21 pm Instead sending quaternions usually send Euler angles 8 bit per component results good rotation representation 1 4 degree step Euler angles tend waste bits near poles allow skip rotations stuff games skip roll strategy games usually units need yaw exploited also better delta encoding encode yaw pitch roll change optimal position rotation compression LUT could used generate good set equally spaced possible rotations positions send index Finally instead manually encoding use compressor like Oodle RAD game tools doesn send dictionary need train time time especially game patch release easily two times decreases manually encoded packet size also makes manual encoding obsolete works better without Reply Glenn Fiedler March 14 2015 5 27 pm ve tried oodle past gotten particularly good results Hand-tuned compressors like article typically give much better result experience Perhaps code protocol JSON though could big win Regarding Euler angles Maybe re win specific cases axis aligned rotations simulation rotations place think re win cheers Reply Daniel Branicki March 14 2015 12 18 pm love articles much thank much room optimization take advantage objects active outside visible game area Reply Glenn Fiedler March 14 2015 5 25 pm course skipped typical PVS relevancy checks add lot complexity get big wins think article describing techniques use reduce bandwidth required transmit set relevant objects client Reply Leave Reply Cancel reply email address published Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code del datetime em q cite strike strong Articles Game Physics Integration Basics Fix Timestep Physics 3D Spring Physics Networked Physics 2004 Game Networking UDP vs TCP Sending Receiving Packets Virtual Connection UDP Reliability Ordering Congestion Avoidance UDP Debugging Multiplayer Games Floating Point Determinism every programmer needs know game networking Virtual Go Introduction Virtual Go Shape Go Stone Tessellating Go Stone Go Stone Moves Rigid Body Dynamics Collision Detection Go Stone vs Go Board Rotation Inertia Tensors Collision Response Coulomb Friction Networked Physics Introduction Networked Physics Physics Simulation Deterministic Lockstep Snapshots Interpolation Snapshot Compression State Synchronization Conclusion Recent Posts Mathematics Quaternion Compression Chris Doran Networking Physics Programmers free view GDC Vault Virtual Go talk free watch GDC Vault Networked Physics Data Compression Walk-Off Networking Physics Programmers GDC 2015 Please support Gaffer Games Happy Holidays Titanfall Released X1 PC 360 m Back Today resigned Sony Santa Monica accepted position Respawn Entertainment Virtual Go iPad Version Work Progress Gaffer Games'),
('Rekindling Your Passion For Web Design', "Menu Search Jump content Smashing Magazine Smashing Pages Books eBooks Events Shop Email Newsletter Jobs us Impressum Categories Coding Design Mobile Graphics UX Design WordPressWP X Search Smashing Magazine Search X Books eBooks Events Shop Jobs RSS Facebook Twitter Newsletter Search Smashing Magazine Search Coding CSS HTML JavaScript Techniques Design Web Design Typography Inspiration Business Mobile iPhone iPad Android Design Patterns Graphics Photoshop Fireworks Wallpapers Freebies UX Design Usability User Experience UI Design E-Commerce WordPressWP Essentials Techniques Plugins Themes Rekindling Passion Web Design Jeremy Girard May 22nd 2015 InspirationOpinion Column 23 Comments Advertisement love web designer m incredibly thankful decided join industry many years ago Still despite love profession number times career passion waned ve found simply going motions instead fully applying work scenario likely familiar many fellow web designers called burnout Burnout real challenge face web professionals processes help us complete projects successfully also contribute us falling routine hitting autopilot work Sometimes overload work force fall routine become production line order meet deadlines times lack variety excitement lead apathy burnout far behind Whenever started experience burnout career thankfully recognized situation able work resolve problem article share found helpful rekindling passion web design Talk Peers anyone understand feelings burnout fellow web professionals likely experienced something similar may able give advice handle situation Sometimes simply talking others catalyst need break funk get excited work Attending web conference one best ways meet interact web professionals Listening presentations industry best brightest able discuss content fellow attendees lunch after-conference party always gets creative energies flowing never returned office conference full fresh ideas excited get back work course conferences happen time inexpensive attend 1 incredible amount sharing learning networking happen conference Image credit2 cannot go conference one reason another local meet-ups another way connect peers groups meet currently area check site like meetup com3 find events near consider organizing new group reaching designers agencies choosing time place meet starting meet-up group Take Break reason companies give employees vacation time time away office important part maintaining healthy work life balance point something covered previous article wrote Smashing Magazine fostering healthy non-professional relationships4 Still vacations indeed important sometimes one week away work enough remember speaking web designer collaborated projects sabbatical took back felt burning decided wanted take six months totally away job us walk away work half year planned made preparations could make happen looked hard budget made changes could save money give cushion would allow go without income time admitted difficult workable take time year working saving sabbatical surfed read books ones web design took cooking class stayed away work checking emails calling office truly took time away said wonderful time sabbatical also moment returned work full new ideas refreshed invigorated also reported new outlook work potential burnout taken steps make sabbatical happen knew ever hit wall burnout could find way take significant time get back track experiencing burnout sure use vacation time effectively time enough consider taking significant break may easy manage proper planning find way make work Teach Others six years ago began teaching website design front-end development state university took position thought would refreshing change pace would allow share knowledge experience whole new way reality got experience far exceeded expectations going teaching helped remember energy first started industry easy let weight project deadlines client problems day-to-day challenges job drown sense enthusiasm excitement working websites early days career see energy students infectious help seep back work well 5 Trends industry constantly changing teaching continuously learn catch new trends Image credit6 cannot find position teaching school still mentor new web professionals Consider adding internship program company allow web designers entering industry benefit years experience benefit enthusiasm newly chosen profession Take Passion Project us web industry truly get choose projects work work agency work projects agency closes assigned in-house resource work projects company needs completed Even run company still bills pay sometimes take projects always work d like first job web industry working company made websites small real estate companies Day day worked real estate sites imagine became pretty monotonous pretty quickly Around time began playing band7 long-time friends mine Since knew build websites became band webmaster default work able band site project obviously personally invested passionate gave outlet creativity normal work didn provide time kept passionate interested profession Good projects personal attachment absolutely help rekindle passion web design working projects help make real positive difference people lives Putting skills use service non-profit organization wonderful way Think charitable organizations area could use web design assistance large well-established well-funded charities likely marketing teams budgets smaller organizations like animal shelters church groups probably groups work really make difference apply passion profession affect positive change community 8 Try avoid routine work find new perspectives every Try think obvious things instead think things beyond Image credit9 Embark New Challenge number years ago working company produced touchscreen kiosk systems liked people worked work close six years job admit best work Projects become routine returning comfortable solutions worked past instead trying innovate grow needed change realized way could achieve change leaving company easy decision said liked job time right decision thought indeed scared also excited excitement something felt time felt great made realize right path end joined new company provided wealth new challenges including opportunity grow continue challenge future Making type change career may easy certainly wasn want rekindle passion work kind drastic change may exactly need Passion Necessary far ve spent entire article looking ways bring passion back web design work also ask question passion actually necessary work answer individual one need decide whether passion important part career needs people passion simply isn important think parents two people long successful careers health inspector medical transcriptionist enjoyed jobs worked hard certainly weren passionate didn spend nights weekends reading latest developments field honing craft liked jobs far went fine however want career 10 Ask whether passion really necessary work honest Image credit11 passion indeed important feel seen passion slipping lately hopefully ideas presented article help rekindle excitement work Keep Passion Work find passion work important part career found helpful keeping passion job intact Share methods ideas comments section il og Footnotes1 https www flickr com photos marcthiele 14442484671 album-72157644792424680 2 https www flickr com photos marcthiele 14442484671 album-72157644792424680 3 http www meetup com 4 http www smashingmagazine com 2014 05 05 fostering-healthy-non-professional-relationships 5 https www flickr com photos opensourceway 55380356186 https www flickr com photos opensourceway 55380356187 http www smashingmagazine com 2015 03 06 how-being-in-a-band-taught-me-to-be-a-better-web-designer 8 http www flickr com photos opensourceway 8250688924 9 http www flickr com photos opensourceway 8250688924 10 https www flickr com photos opensourceway 4862920379 11 https www flickr com photos opensourceway 4862920379 InspirationOpinion Column Back top Tweet itShare Facebook Jeremy Girard Jeremy Girard born six toes foot extra toes removed year old robbing super-powers ending crime-fighting career even began Unable battle forces evil instead works Director Marketing Head Web Design Development Providence Rhode Island based Envision Technology Advisors also teaches website design front-end development University Rhode Island portfolio blog Pumpkin-King com writes things Web design Related Articles Maximize Creative Energy Let Talk Machine Alone Advertising 23 Comments 1 Luke Pettway May 22 2015 2 32 pm found teaching others made love web development much started sharing links design team tips tricks website design progressed towards teaching devs SASS git something really fun helping someone learn something struggled finally clicks thrilling Another thing helps stay passionate web dev working volunteer projects especially outside comfort zone gives chance really dive something new totally unique organization helping lot small groups rescue dogs cats websites TERRIBLE able help put together better looking site huge reward knowing whenever animal gets adopted chance work helped make happen Reply 10 2 Robine May 22 2015 2 47 pm Great article Especially woman business 15 years takes extra set challenges still keep passion job questioned skills talent Luckily lot great projects going luxury saying projects appeal Reply 3 3 Lisa May 22 2015 3 16 pm Currently m really frustrated job Design always something fascinating always knew wanted living yet currently lack motivation inspiration work projects often end staring screen paper wish project done already bother anymore sure m burnt anything wish d motivation back used get excited get work new projects soon already regret work personal projects collabs fellow designers back normal enjoy playing designs learning new things simply feeling proud final product feeling actual client saddens makes wonder ve stuck webdesign design general hobby rather job really nice article uplifting read Maybe ll help get back old motivation Thank thoughts tipps topic Reply 1 4 Jeremy Girard May 22 2015 3 24 pm sounds like need determine working client rather personal project drains enthusiasm work kind clients working perhaps constraints work projects time think love working designers projects see bring client work Hopefully exercise tips presented article help get fire back Good luck Reply 2 5 Vincent Visser May 26 2015 11 03 would say find passion comes back work personal projects need look projects actually become job point going work enjoy know people bad days sometimes weeks crazy busy enjoying person change Maybe look new job spark design bought back Sometimes new company new people processes work favour Reply 0 6 OA May 28 2015 4 03 alone would go thing always surprised managed produce great solutions without heart craft think number factors contribute experience mostly result career profession criticism wears Technology also wore landscape changed much month month struggled keep least case huge factor end right job vs hobby major difference Hobbies fun new adventure relaxation jobs produce stress Jobs also great thing many people web design development starts hobby turns job completely normal feel depleted case started point ended Creative Director brand still design doesn consume Searching work drained clients drained drained web designer advice would transition new job using different skill set still capitalizing knowledge web sounds like need new adventure best Reply 0 7 Jason Utt May 22 2015 3 22 pm really enjoy said last statement web development needs job passion agree sometimes good take time get away stresses work however us always burden life finances future keep work away us entire week Reply 1 8 Jeremy Girard May 22 2015 3 33 pm always bills pay financial concerns meet working non-stop time away job recharge recipe disaster mean need spend ton money expensive vacation means need maintain balance includes working hard also getting office enjoying life Think way week away office may cost money much cost burnout lose work altogether passion gone Reply 4 9 James Brooks May 22 2015 3 55 pm talk last November dealing depression developer applies everyone though video available https james-brooks uk staffs-web-meetup-video Reply 2 10 Allen D May 22 2015 4 42 pm good started working web passion turned work tough bring passion working someone else say jobs take work Conferences weren option recharging draining wanted pursue passion projects never could find energy time grinding full day work take care family burned m honest burned years ago times way get m finally Embarking New Challenge Finishing one final Hell-project something totally different Reply 1 11 Jeremy Girard May 22 2015 6 18 pm Best luck whatever adventure lies ahead next Reply 1 12 Su May 22 2015 10 04 pm thank sharing thoughts also worked 15 years web design developing agency even long periods enthousiasm gone workwise years ve stopped following nearly social media channels newspapers tv news free time concentrated _living_ life spending helped refresh health mind change taken anything away quite opposite Still use channels times define skills Reply 4 13 Ondrae E May 25 2015 1 06 2014 DeVry Graduate B Degree Multimedia Design Development Web Graphic Design kinda lost passion online portfolio gotten corrupted lost access trying recreate one trying find web design job futile new field changing career communications technician 10 yrs Active Military 8 yrs civilian Reply 0 14 moe May 23 2015 2 26 going tuff phase freelancer hunt work never ends lake motivation worst part lake leads making fearful clients love work clients clients love work prices fair ll say low phases like less work leads work frustrating effects creativity ability make good decisions always love work working like crazy couldn figure attract clients makes lame see designers well sure good would like hear word situation burnout fire keep working freelance kepp advertising freelancer become company God help Reply 2 15 Jeremy Girard May 23 2015 3 13 pm sounds like love work pains finding new projects getting Finding work often challenge particularly draining One thought connected web professionals area meetups industry events great way expand network maybe get overflow work agencies freelancers may busier Reply 0 16 ben May 23 2015 6 35 tough get motivated sometimes Web design particular drain web design always changing always swirl web design keep design advances ll find way behind times logo print design Web designers therefore ought charge double triple web related projects totally unmotivated sometimes triple-shot Americano help temporarily Gotta gotta Reply 0 17 Jacob May 23 2015 7 57 Burnout happens kinds professionals sometimes also feel way take break come far experience taking break go long way refreshing oneself professionals find refreshed break Reply 0 18 Ondrae E May 25 2015 1 09 really truly need serious kickstart motivate get train thought designing going non related job get pay student loans motivate enough continue creative sugestions Reply 0 19 Jeremy Girard May 25 2015 1 41 pm give want successful profession work job unrelated field order pay bills may hard certainly take away time spend honing web design craft persistence pays remember point early career laid first job professional web designer company working purchased large mortgage corporation didn know us product created laid us months 9 11 attacks US economy shaky jobs hard come Despite fact Lead Web Designer company couldn find anything eventually took job pushing shopping carts parking lot Home Depot store low point humbling experience stuck kept looking jobs working web design skills months found part time position months turned full time allowed leave cart-pushing job position one stayed nearly 7 years eventually becoming Creative Director company Life always easy web designer skills demand valuable simply need find right opportunity right time way persistent never giving wish best search hope articles like one help along way Reply 1 20 Ricardo Zea May 25 2015 3 45 Burnout twin sister Frustration comes many forms case knowing m good chance get web design dev companies d love work city coworkers aspirations learn new things well accept someone bit experience different areas web design learn better professionals always question think must something wrong side think m m writing book Mastering RWD HTML5 CSS3 m participating different ways web design dev community keep date apply preach confusing TBH try mitigate frustrations article recommends going local web design developer meetups participating local workshops small conferences etc Regarding question Passion Necessary answer bet ass problem passion others may see intense end day cares think important one best good possible trying share knowledge well Thing never lose hope Reply 1 21 Jeremy Girard May 25 2015 1 42 pm sounds like right path perfect mindset Reply 0 22 Klevis Miho May 25 2015 12 03 pm Teaching others definitely great approach stay passionate things stay productive passionate things relevant job actually play band fun play classical guitar paragliding blog jog hangout friends etc Reply 0 23 Raju Barman May 25 2015 8 31 pm Thanks Jeremy Girard Excellent article Reply 0 Leave Comment Yay You've decided leave comment That's fantastic Please keep mind comments moderated rel nofollow use please use spammy keyword domain name else deleted Let's personal meaningful conversation instead Thanks dropping Click cancel reply name email Click cancel reply message Preview Back top Search Smashing Magazine Search Advertisement Advertise us Smashing Newsletter Subscribe email newsletter useful tips valuable resources sent every second Tuesday Subscribe Meet Smashing Book 5 new book real-life responsive design front-end techniques patterns actual projects it's playbook master tricky facets hurdles responsive design Save 25 today Fixing RWD issues quite easy understand exactly come Mobile Web Handbook help understand technical issues mobile deal effectively Hungry content 60 eBooks waiting discovered lovely Smashing Library guess watch Smashing Conference talks proudly hosted onMedia Temple Dedicated Servers Performance matters Smashing Job Board Graphic Designer Illustrator - BoomBoom Prints - Anywhere - FreelanceBoomBoom Prints seeking graphic designers illustrators quality family friendly art join community artists Junior Frontend Developer m f - InterNations - Munich Germany - FullTimeAt InterNations re dedicated making life easier expats 1 5 million members 390 cities around world InterNations largest gl View job openings SmashingConf isn't eighth wonder world pretty close Join us SmashingConf NYC June 15 18 SmashingConf Freiburg September 14 16 won't disappointed Smashing Book 5 smart front-end techniques real-life responsive projects Learn Smashing Library Grab published upcoming Smashing eBooks one swoop Learn Smashing Workshops Join hands-on full-day workshops run experts industry Good stuff Learn commitment quality content design community Founded Vitaly Friedman Sven Lennartz 2006-2015 Made Germany Write us Contact us Impressum"),
('6 Great Ways for Programmers to be More Effective at Work', "Keep date blog posts news subscribe newsletter Submit Thank subscribing Please check inbox confirmation letter Toggle navigation Clients Team Contact us Careers Blog twitter facebook linked-in github google 10Clouds new CTO development team consists backend frontend iOS Android developers Read Agile developmentAngularJSCase StudiesConferencesCrowdsourcingDesignEventsiOSMobileOtherProject ManagementPythonStartupsTechnicalUX twitter facebook linked-in github google Keep date blog posts news subscribe newsletter Submit 10Clouds new CTO development team consists backend frontend iOS Android developers Read Categories Agile development4AngularJS2Case Studies5Conferences6Crowdsourcing4Design5Events12iOS2Mobile3Other6Project Management4Python2Startups6Technical10UX3 Twitter Follow 10clouds Tweets 10clouds Facebook 6 Great Ways Programmers Effective Work Published 13 April 2015 Category Every programmer working style sometimes sometimes less perfect Hopefully article might contain handy tips tricks improve habits help work faster better stay less distracted topics described aren rocket science discoveries good refresh memory concepts time time 1 Stay Focused E-mails calls notifications chat messages enemies absorb attention try focus code-related problems anything going change read facebook event invitation 1-2 hours later check emails later time think important someone call start spam consider reading messages Mails ASAP subject Great acronym says possible important stop paying attention distractors humans good multitasking Sounds wrong simple example surely write email talking phone try ask constructive question keep writing mail quality one things terrible Need let help focused cannot get something called flow psychology engineers need time flow ask list elements necessary flow occur intense focused concentration present moment merging action awareness loss reflective self-consciousness sense personal control agency situation activity distortion temporal experience one subjective experience time altered experience activity intrinsically rewarding also referred autotelic experience Flow characterized lack self-awareness loss sense time complete freedom fear anxiety classified positive feeling described excited present Need pretty thorough article wiki Every time pause thinking process read incoming e-mail somewhere one panda dies 2 Importance Breaks Breaks help improve concentration ability solve problems Even short break enough stretch muscles relax talk colleagues expand horizons maybe learn something new chill clear mind studies proved people able solve problems effectively relaxed Engineering professor Barbara Oakley explained re focusing re actually blocking access diffuse mode diffuse mode turns often need able solve difficult new problem story programmers designers two teams whose work somehow related share one kitchen meet cup coffee chill One day company moves another building two teams receive brand new yet separate kitchens Sounds good Shorter breaks closer kitchen real problem teams got seriously split internal disagreements longer shared room could discuss current problems 3 Planning Day Working Hours Everyone got different life clock us night owls early birds shouldn fight us easily focus daytime others night nothing wrong work convenient beneficial employer precisely become motivated focused get flow mode easily employer happier developer delivers code structures ideas faster better quality One pros working developer majority companies flexible hours make use example start day 9 30 meetings daily newsletters HNdigest et cetera ve found like read absorb knowledge brainstorm morning good brain wakes enables get right track Around 10 00 10 30 start programming check mailbox phone calls people tend hate understand reason support around 12 30 PM check mailbox phone go eat dinner take 25 minute break clear mind 1 PM 3 PM stay focused short break without screen another 2 hours programming block ve found 6 PM productivity goes dramatically Surely simple things something day go home 10 PM go back Sublime best time whole day get revelations stay get sleepy also learned 10 10 PM best hours undertake complex tasks sketch solution project manager knows work schedule preferences win-win situation work suits best project manager knows best time meetings questions 4 Dealing Problems re programmers solve problems time However sometimes happens face extremely difficult ones Surely handle spend next hours days sorting efficient way get frustrated try really hard find solutions truth solution gets farther farther away start narrow vision Basically use methods resolving problems googling error code phrase documentation reading rubber duck trial error divide conquer reduction problem sketching paper break clear mind go another ticket finish come back problem fresh approach talk lovely mentor matter always knows answer Mostly move forward way within 20 minutes means won resolve anything best thing choose next ticket come back problematic issue later ask mentor help 5 Importance Sports Sport beneficial many ways share two important ones first one people participate marathons gym group activities etc find relatively easy speak public take exams face challenges mostly determined eager raise standards second one body low level red cells organism ability stay focused decreases easiest way increase level red cells aerobics swim run cycle activities also good brain Thanks exercise brain cells called hippocampus responsible memorizing grow Sport affects sleep ability relax People perform sport activities able fall asleep easily less likely wake night need keep mind quality sleep also important sleeping brain makes connections nerve cells People sleep long enough focus things faster 6 Great Music Smashing magazine great article case think pointless copy make references read article Hopefully list get started new improved efficient It's fair share 5073908 Norbert Sienkiewicz Software Engineer Please enable JavaScript view comments powered Disqus comments powered Disqus"),
('I created an infographic on how I learned Swift. Let me know if it sucks or not. Thanks', 'Home Getting Started ATL Podcast Home Getting Started ATL Podcast Recent Comments Archives May 2015 Recent Posts ATL 002 Interview Juni Kim Software Engineer nWay ATL 001 Overview Alpha Launch Expect Intro Written Resources Video Resources 2015 Alpha Launch'),
('Download all your Kindle notes & highlights', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 4 Star 43 Fork 7 mieubrisse kindle-highlight-scraper Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Script programmatically download Kindle highlights notes format JSON 14 commits 1 branch 0 releases 1 contributor Python 100 0 Python branch master Switch branches tags Branches Tags master Nothing show Nothing show kindle-highlight-scraper latest commit 7d2a9189b4 Kevin Today authored May 23 2015 Permalink Failed load latest commit information gitignore Initial commit May 23 2015 LICENSE md Update LICENSE md May 23 2015 README md May 23 2015 scrape_kindle_highlights py Cosmetic cleanup May 23 2015 README md Motivation provided tool provides scriptable method downloading Kindle notes JSON automated backup statistics export services etc Note official API exists information returned limited what's available Highlights link reachable Kindle homepage Installation Use Install Easy Install Run easy_install mechanize Create JSON credentials file form email gmail com password pass123 Restrict permissions creds file like Run extract_kindle_notes py -c creds json -o output json Full Usage Usage scrape_kindle_highlights py options Options -h --help show help message exit -o FILE --output FILE filepath write JSON output -s TYPE --note-sort TYPE sort notes within book recency location default recency -c FILE --cred-file FILE path JSON file containing Amazon login credentials form email email password password -e ENCODING --encoding ENCODING sets encoding use dumping JSON commonly 'utf-8' 'unicode-escape' default utf-8 -i JSON_INDENT --indent-level JSON_INDENT number indentation spaces use formatting JSON output default 4 -d --disable-key-sorting disables sorting keys JSON output Todo Refactor something that's one enormous file Use pseudo-API method scraper discovered Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Building a Simple Web Server with Sinatra', "Blog Projects Labs Resume Beer Hire Building Simple Web Server Sinatra May 22 2015 might run different scenarios need type server-side logic happen web need anything massive warrant use large frameworks like Rails Django Grails ASP Net etc haven run situations doubt let spell different instances might want proxy client-side HTTP request either avoid CORS avoid Javascript relay HTTP requests one site another formatting data along way provide simple API interact database easily render HTML pages dynamic content list goes point m trying make need exist need something like want make large project Different languages different mini-frameworks handle need today re going talking one really played role starting mini-framework movement Ruby Sinatra Sinatra Straight main site Sinatra DSL quickly creating web applications Ruby minimal effort heavy emphasis minimal effort part definition re see Getting Started get started create empty directory Inside directory create Gemfile add following gem 'sinatra' install sinatra run bundle install let create actual main app rb file require 'sinatra' get ' ' puts 'hello world' end literally need simplest web server Run app using ruby app rb Sinatra start default WEBrick server like Rails port 4567 Navigate http localhost 4567 ll see blank screen use browser navigate won see anything look server logs see hello world response Look created simple web server doesn much right re programmer job make real stuff Getting Deeper Sinatra like web frameworks concept routes order handle various HTTP request types common requests abiding RESTful architecture Currently app handles one GET request identified get method call accepts route string block handle POST PUT DELETE requests write handlers post ' post' Create post end put ' post id' Update post end delete ' post id' Delete post end defined 4 basic handlers would respond various request types post endpoint might noticed something though strange id field route string indicates parameter value access via global params variable much like Rails controller works means PUT requests post 1 post 3 would activate handler easy access unique parameter example put ' post id' post Post find params id Assuming ActiveRecord installed end Rendering Views Want render template route navigated easy get ' ' erb index end pull template found views index erb also easily swap ERB templating engine choice like Haml Slim get ' ' haml index format html5 end make sure gem required Handling JSON Responses lot reasons listed intro might want use Sinatra involve nothing graphical logic happening may even want handle JSON responses request Sinatra makes breeze call content_type method define want use JSON get ' post id' content_type json post Post find params id post attributes to_json JSON Response end easy define content_type application-level adds little complexity get choose use Sinatra Still super easy Handling Errors beat error handling Sinatra simple follows format handlers followed Let say want catch 422 error means unprocessable entity would define Unprocessable Entity error 422 error haz error end want manually throw error controller would like Unprocessable Entity get ' ' return 422 end Sinatra see return value know call 422 error code handler means probably shouldn return single integer values RESTful controllers probably anyway Deploying Heroku Last least possibly one favorite things using Sinatra fully Heroku supported means even worry manually deploying app Heroku handle everything slap free heroku domain get running right away re unfamiliar Heroku get going heroku app check Getting Started page order tell Heroku run Sinatra app need add either Procfile config ru ll choose config ru tell Heroku run rack app Procfile easy Create file root level project dir directory app rb currently require ' app' run Sinatra Application re requiring main app file wrote telling Sinatra thing commit work Git push whole repo heroku account git push heroku master watch magic happens ve created simple web server using Sinatra Heroku happy host completely free charge much Sinatra touched light basics need full blown RESTful application hooked large relational database yeah use framework geared towards handling large scale need something small medium size check Sinatra micro-frameworks Sinatra popularity inspired similar frameworks languages like Java Spark Python Flask PHP Slim bunch others using Sinatra check documentation Next time ll talk neat tools use help debug Sinatra app deploy Happy building 2015 Aaron Krauss Rights Reserved"),
('NSA in P/poly: The Power of Precomputation', "Shtetl-Optimized Blog Scott AaronsonIf take one piece information blog Quantum computers would solve hard search problemsinstantaneously simply trying possible solutions Five announcements NSA P poly Power Precomputation Even Snowden revelations remained least one big mystery NSA NSA classified 2013 budget request mentioned priority item groundbreaking cryptanalytic capabilities defeat adversarial cryptography exploit internet traffic requested increase several hundred million dollars cryptanalytic services cryptanalysis exploitation services program C whatever classified presentation slide showed encrypted data passed high-performance computing system called TURMOIL decrypts coming whatever going inside TURMOIL seemed secret even within NSA someone Snowden level wouldn access details inside NSA cryptanalytic black box quantum computer Maybe even one bought D-Wave Rimshot fast classical factoring algorithm proof P NP Commentators Internet rushed suggest far-reaching possibilities us tried pour cold water speculations pointing one could envision many scenarios little prosaic little tied details public-key crypto actually used real world na ve week new bombshell 14-author paper see also website advances exceedingly plausible hypothesis may NSA greatest cryptanalytic secret recent years One authors J Alex Halderman University Michigan best friend since junior high school ve blogged advance knowledge scoop found regular Shtetl-Optimized readers know single hardest thing world bite tongue say anything Besides Alex authors David Adrian Karthikeyan Bhargavan Zakir Durumeric Pierrick Gaudry Matthew Green Nadia Heninger Drew Springall Emmanuel Thom Luke Valenta Benjamin VanderSloot Eric Wustrow Santiago Zanella-B guelink Paul Zimmermann two Green Heninger previously turned Shtetl-Optimized authors study vulnerabilities Diffie-Hellman key exchange original still widely-used public-key cryptosystem one predates even RSA Diffie-Hellman thing Alice Bob first agree huge prime number p number g Alice picks secret sends Bob ga mod p Bob picks secret b sends Alice gb mod p Alice Bob compute ga b gb gab mod p eavesdropper listening knows p g ga mod p gb mod p one plausibly conjecture hard things alone get gab mod p Alice Bob share secret unknown eavesdropper didn use secret start cryptography far anyone knows today best way break Diffie-Hellman simply calculating discrete logarithms solving problem recovering given g h ga mod p least classical computer fastest known algorithm discrete logarithms fields prime order number field sieve NFS plausible conjectures distribution smooth numbers NFS uses time grows like exp 1 923 o 1 log p 1 3 log log p 2 3 exp logs base e yes even lower-order stuff like log log p 2 3 makes big difference practice course know running time best-known algorithm try choose key size value log p reach algorithm computing hardware today Note recent breakthrough Antoine Joux solving discrete log quasipolynomial time fields small characteristic also relied heavily sieving ideas improvements yet original discrete log problem prime fields one crucial fact understood least decade theoretical cryptographers somehow slow filter people deploy practical cryptosystems fact NFS arrange things almost discrete-logging effort depends prime number p specific numbers g h re trying take discrete log initial precomputation step massive database use speed descent step step solving ga h mod p g h pair want little like complexity class P poly single hard-to-compute advice string unlocks exponentially many inputs bit precisely one could say NFS reveals exponentiation modulo prime number sort trapdoor one-way function except trapdoor information subexponential-size given trapdoor inverting function still subexponential-time milder subexponential kicker practice large percentage clients servers use Diffie-Hellman key exchange use prime numbers p means wanted decrypt large fraction traffic encrypted Diffie-Hellman wouldn need NFS could p cache results fact singlehandedly change outlook breaking Diffie-Hellman story different depending key size log p 1990s US government insisted export-grade cryptography products sold overseas quaint concept meant key size restricted 512 bits 512-bit keys Adrian et al able implement NFS use precomputation step 7 days cluster thousand cores initial precomputation step produced 2 5GB data descent find discrete log specific g h pair took 90 seconds 24-core machine OK one still uses 512-bit keys first part Adrian et al paper demonstrates implementation issues even today force many servers downgrade 512-bit export-grade keys done stall time 90 seconds figure session key man-in-the-middle attack take impersonate server impressive example sort game computer security researchers playing long time really warmup main act d expect many servers today configured intelligently agree 1024-bit keys even Adrian et al found large fraction servers rely single 1024-bit prime many ones rely primes Adrian et al estimate single 1024-bit prime NFS precomputation would take 45 million years using single core put ominously 1 year using 45 million cores built special-purpose hardware could go almost two orders magnitude putting monetary cost hundred million dollars completely within reach sufficiently determined nation-state precomputation done terabytes output stored data center somewhere computing particular discrete log would take 30 days using 1 core mere minutes using supercomputer none assuming algorithmic advances beyond publicly known course possible NSA also algorithmic advances even modest ones could obviate need special-purpose hardware writing post back-of-the-envelope got using NFS calculating 1024-bit discrete log 7 5 million times harder calculating 512-bit discrete log extrapolating 7 days took Adrian et al 512 bits suggests might ve taken 143 840 years calculate 1024-bit discrete logs thousand cores 1 year 143 840 times many cores since almost stuff extremely parallelizable Adrian et al mention optimizations expect would improve factor 3 giving us 100 million core-years similar Adrian et al estimate 45 million core-years lower-order terms running time NFS might account remaining discrepancy Adrian et al mount detailed argument paper details NSA groundbreaking cryptanalytic capabilities learned Snowden documents match would true NSA something like way Alex put sure NSA might would like understand would ve completely feasible within cryptanalytic budget NSA would ve known would ve good codebreaking value money know weakness Diffie-Hellman key exchange done obvious solution good one use longer keys decades applied cryptographers would announce attack like theorists like would say exasperation dude fix problems one stroke like increasing key sizes factor 10 exponential polynomial know exponential win eventually go applied cryptographers explain us equal exasperation voices sorts reasons efficiency maybe biggest thing backwards-compatibility unilaterally demand 2048-bit keys millions customers using browsers understand 1024-bit keys hand given new revelations looks like really big push migrate larger key sizes theorists would ve suggested ivory towers second equally-obvious solution stop relying much prime numbers Diffie-Hellman key exchange Note reason RSA isn vulnerable particular attack inherently requires different composite number N public key practice generating new huge random prime number tends expensive taking say minutes people often rely standard primes least could use libraries millions safe primes prime given session chosen randomly third solution migrate elliptic-curve cryptography ECC far anyone knows today much less vulnerable descent attacks original Diffie-Hellman scheme Alas lot understandable distrust ECC DUAL_EC_DBRG scandal came NSA backdoored NIST elliptic-curve-based pseudorandom generators choosing particular elliptic curves knew handle maybe right lesson draw mod-p groups elliptic-curve groups seem pretty good cryptography mod-p groups less good everyone using prime numbers p primes within nation-state range elliptic-curve groups less good everyone using elliptic curves lot things seem pretty predictable hindsight many predict Many people use paper ask political questions like hasn NSA codebreaking mission usurped mission ensure nation information security Doesn 512-bit vulnerability many Diffie-Hellman implementations still face holdover 1990s export rules illustrate encryption never deliberately weakened purposes national security get issue backwards-compatibility get everyone using strong crypto People absolutely asking questions readers blog one question probably looms even larger freedom versus security openness versus secrecy etc namely question theory versus practice side said won round say useless theoretical cryptographers didn even know coveted Diffie-Hellman system could broken real world theoretical cryptographers might reply course knew ability precomputation NFS wasn NSA secret something discussed openly years someone told us Diffie-Hellman actually used much world relying primes could ve immediately spotted potential attack others might reply didn spot Perhaps right lesson draw silly debates really end piecing story together took team willing everything learning fairly difficult number theory coding simulations poring Snowden documents clues NSA budget Clear thought doesn respect boundaries disciplines theory practice Thanks much Nadia Heninger reading post correcting errors see Bruce Schneier post Matt Green post entry posted Friday May 22nd 2015 9 41 pm filed Complexity Nerd Interest follow responses entry RSS 2 0 feed leave response trackback site 80 Responses NSA P poly Power Precomputation Geoffrey Irving Says Comment 1 May 23rd 2015 12 02 lesson want bring theory practice closer together use systems fewer moving parts export side bug protocol negotiation entirely separate theoretical concerns Brian Sniffen Says Comment 2 May 23rd 2015 12 22 us notice big push move SSHv1 fresh group connection SSHv2 used fixed groups people notice said loudly SSHv2 implementations fixed years later worse theory vs practice community practice vast many meanings dense takes information penetrate wolfgang Says Comment 3 May 23rd 2015 12 59 interesting also quite silly imho 1 People pay various government agencies secretly spy us 2 actually like spied also pay researchers universities various companies figure NSA others might spy us 3 vulnerability detected upgrade browsers servers etc significant cost inevitable inefficiency democratic process clever way finance CS research pure insanity Dan Miller Says Comment 4 May 23rd 2015 1 02 part-time complexity enthusiast full-time technology professional real-world security responsibilities seems result shines light intersection lack thereof crypto- theory practice take fortuitous interdisciplinary effort 14 researchers discover combination arcane implementation trivia servers made fall back 1024-bit DH DH implementations typically use primes theoretical knowledge 1024-bit DH primes weak crypto hypothetical way real-world implementationists guard deploying infrastructure known least esoteric crypto eggheads risk successful present-day attack attainable resources Greg Maxwell Says Comment 5 May 23rd 2015 2 49 Hi Scott re making lot assumptions practicing cryptographic engineers know think aren generally correct took second find cases years ago happily telling laymen pre-computation gains discrete log level knowledge unusual precompute discrete log problem solving efficiently store results precomputation lookup _very_ well know normal engineering goal adopt parameters strong enough make even single compromise infeasable feasible linear advantages grouping 100 000 high value targets really frighteningly weak defense ve basically already lost Using different session user unique group considerable costs computation needed make sure group cryptographically useful order e g picking safe primes mod p running SEA EC groups communicating group far side Communicating random group mean effectively doubling amount communicated data re able afford extra computation bandwidth use somewhat larger _static_ group gain exponential advantage vs attacker vs using bandwidth communicate random group get best linear advantage number targets also pedestrian engineering concerns might note paper reports many users non-standard groups using groups low order turns ask software things ll wrong case EC specializing group logic allows enormous implementation speedups e g 10 fold specialized code vs generic code could used permit larger groups may make difference getting cryptography used hopefully becoming less true performance still successfully used part argument mandatory always crypto HTTP2 Perhaps suggestion big list static groups would address communications costs still implementation get right still leaves performance concerns Moreover see downgrade attacks attacks negation common attacks modern IMO overly flexible cryptosystems big list vulnerable negotiation may well case need pre-compute one trick targets using hard get right what- randomly pick per connection happens kill every connection using wrong one pick one ve compromised etc Says Comment 6 May 23rd 2015 7 02 Greg Maxwell 5 Using list primes sort give exponential advantages known list million safe primes Scott suggests takes 20 bits communicate one makes million times harder precomputation attack long primes hard enough break anyone trying break big enough want break lots seems helpful Although point doesn help care security particular computation guess would require universal adoption list storage would start get significant 2 20 x 1 024 bits 128 megabytes around size version Firefox computer Quantum Mechanic Says Comment 7 May 23rd 2015 7 33 Please quit using variable also article makes hard parse Scott Says Comment 8 May 23rd 2015 7 36 wolfgang 3 1 People pay various government agencies secretly spy us 2 actually like spied also pay researchers universities various companies figure NSA others might spy us 3 vulnerability detected upgrade browsers servers etc significant cost many many cases complicated human organization government corporation full agents conflicting agendas made sound stupid treat single rationally-deliberating individual E g people California subsidize alfalfa almond growers used California water therefore people California likely forced subsidize growers even use much water OK scratch lot pretty stupid g Says Comment 9 May 23rd 2015 7 39 discussion Hacker News Completely irrelevantly Scott web browser up-to-date Firefox Windows one piece information blog header overruns box last line disappears white background one piece information becomes Quantum computers would solve hard search problems may stronger statement wish seen making - fine Chrome haven tried browsers thing different Chrome Firefox size text header including main title smaller Chrome larger Firefox Perhaps use explicit pixel sizes header since background fixed-size image Scott Says Comment 10 May 23rd 2015 7 57 Greg Maxwell 5 normal engineering goal adopt parameters strong enough make even single compromise infeasable feasible linear advantages grouping 100 000 high value targets really frighteningly weak defense ve basically already lost reflection re right giant list primes would best stopgap measure currently upgrade 1024 2048 bits backwards-compatibility reasons switch around 1024-bit primes use Knowledgeable commenters currently situation widely-used protocols Ultimately increasing key size called obvious solution also best solution one whose advantages swamp everything else asymptotic limit solving real world problems Entertaining Research Says Comment 11 May 23rd 2015 8 13 details post better understood work cryptography probably However Amir Says Comment 12 May 23rd 2015 9 12 least IPSEC standard defines 3 DH groups modulo primes one 768 bit one 1024 bit one 1536 bit However vendor-specific extensions always used know VPN vendors define groups set default re default VPN nodes come vendor won used Scott Says Comment 13 May 23rd 2015 9 16 g 9 OK tried move text upwards let know looks better browser Amir Says Comment 14 May 23rd 2015 10 33 accurate complexity class title would something like L 1 232 L 1 923 since actual complexities descent precomputation steps NFS assuming standard number-theoretic assumptions Scott Says Comment 15 May 23rd 2015 10 46 Amir 14 Yup jonas Says Comment 16 May 23rd 2015 1 32 pm something ve wanted ask post seems like good occasion know factoring large composite integers finding discrete logarithm modulo large prime broken efficiently using quantum computer using Shor algorithm quantum polynomial time mention post number field sieve algorithm fastest known classical algorithm discrete logarithms problem likely also fastest factoring large composite numbers inherent connection makes us expect two problems similar someone found faster randomized classical algorithm one problems likely also one problem elliptic curves connected Douglas Knight Says Comment 17 May 23rd 2015 2 04 pm Jonas understanding somewhat mysterious factoring discrete logarithm prime fields analogous algorithms Elliptic curves seem analogous structure exploited Thus one use small elliptic curves popular However lots classes elliptic curves extra structure exploited usually comparing multiplicative group fields applying QS NFS easy imagine new classes discovered future Indeed easy imagine NSA already class Suite B curves chose specifically vulnerable Job Says Comment 18 May 23rd 2015 2 05 pm Maybe real trapdoor finding exploit given implementation lower average-case complexity breaking encryption scheme cases easy deliberately introducing surfacing hidden vulnerability e g heartbleed OpenSSL increase average-case complexity exploit-finding Joshua Zelinsky Says Comment 19 May 23rd 2015 2 06 pm interesting idea large primes used practical implementation Diffie-Hellman make guess would guessed people set server select large prime server Actually given wonder point advantages whatsoever using Diffie-Hellman key exchange rather using RSA everything someone involved practical end explain using DH still makes sense Scott Says Comment 20 May 23rd 2015 2 37 pm Jonas 16 Yeah ask excellent question wish better answers available Empirically progress factoring discrete log algorithms tracked almost perfectly particular instances one explain example Shor algorithm handles anything whatsoever reducible order-finding abelian hidden subgroup problem factoring discrete log bit massaging currently reduction factoring discrete log vice versa Andy H Says Comment 21 May 23rd 2015 3 24 pm Given amount resources invested hack versus relative simplicity fix aren better things NSA invest spycraft much less U government things aren borderline evil Scott Says Comment 22 May 23rd 2015 3 38 pm Andy 20 indeed something like might given amazing access much world encrypted data years would hard obtain otherwise well worth hundred million dollars would ve cost standpoint Whether US government things course broader question people ought asking asking post-Snowden Scott Says Comment 23 May 23rd 2015 5 52 pm Quantum Mechanic 7 OK italicized variables William Hird Says Comment 24 May 23rd 2015 6 39 pm Andy 20 Maybe question asking de-facto policy NSA regardless President runs Congress NEVER allow public entity matter use encryption doesn weakness back-door exploit Rahul Says Comment 25 May 24th 2015 2 40 third solution migrate elliptic-curve cryptography ECC far anyone knows today much less vulnerable descent attacks original Diffie-Hellman scheme elliptic curve cryptography studied long hard Diffie Hellmam people tried exploit hard Perhaps migrated ECC motivation exploits would rise would find analogous flaws Rahul Says Comment 26 May 24th 2015 2 52 exploit pervasive Logjam site report 8 top million websites vulnerable currently mean rest using 512 bit keys protected ways Even hypothetical hundreds million infrastructure would let common 1024-bit group broken 17 top million domains seem vulnerable top million seems lot sites base assessment sites us care secure traffic least top segment one million sites might way less vulnerable 8 17 En vrac Le blog de Balise Says Comment 27 May 24th 2015 2 55 NSA P poly Power Precomputation un billet agr able lire sur les derniers v nements autour du fait que Diffie-Hellman est en pratique moins r que ce qu il pourrait devrait tre en th orie avec quelques calculs divers sur le concept et donc si la NSA-ou-autre-agence-gouvernementale voulait faire leur prendrait combien de moyens temps etc en anglais NSA decrypt ciphers 1024 bit keys Mahdix Says Comment 28 May 24th 2015 4 01 complete story story today's secure network data transfers e g enter credit card number website done based protocols using Diffie-Hellman algorithm algorithm's implementation uses fixed numbers input parameters NSA supposedly pre-calculated different computation results single common used parameter using set pre-calculated data plus several hundred CPU cores decrypt text encrypted using 1024 bit keys use 2048 bit keys able currently client server applications pre-configured use type key Says Comment 29 May 24th 2015 4 30 Professor post serious really think Factoring discrete log P Poly Scott Says Comment 30 May 24th 2015 7 06 28 even read post know factoring discrete log P poly rate think anyone knows anything like today conjecture NSA might exploiting precomputation vaguely analogous P poly precomputation post-computation would still take subexponential time post-computation would milder subexponential pre-computation calculations suggest combination could put 1024-bit discrete logs within range feasibility million dollars Also precomputations would depend exact value p input size log p none assuming algorithms aren already known Scott Says Comment 31 May 24th 2015 7 12 Rahul 25 Firstly believe 8 figure refers sites vulnerable 512-bit downgrade attack e one Adrian et al could demonstrate using computing resources easily available academics much larger percentage websites would vulnerable 1024-bit attack one within range nation-state secondly attack affects 8 top million sites already seems like big deal 80 000 sites re talking enough e g criminal enterprise make killing exploiting Joshua Zelinsky Says Comment 32 May 24th 2015 8 58 28 bring actual issue phrase terms computational complexity would want know good name following class m going call NSA language L NSA instances consist two strings x y polynomial time algorithm determining membership x y L given x f x y Additionally insist f x computed PSPACE natural actual computational class Rahul Says Comment 33 May 24th 2015 10 03 Logjam site assesses internet browser clients Chrome Opera Internet Explorer vulnerable attack fix yet Scott Says Comment 34 May 24th 2015 10 26 Rahul 31 Well says weakdh org Make sure recent version browser installed check updates frequently Google Chrome including Android Browser Mozilla Firefox Microsoft Internet Explorer Apple Safari deploying fixes Logjam attack si Says Comment 35 May 24th 2015 1 19 pm wonder NSA thinks paper saying trouble us best academics safe Unfortunately idea one truth priori probability 0 5 Yuval Levental Says Comment 36 May 24th 2015 1 22 pm Unrelated http www bbc com news world-us-canada-32865248 matt Says Comment 37 May 24th 2015 1 39 pm pre-computation done efficiently quantum computer course qc could whole computation qc qc available time limited resource might worth pre-computing qc using classical computers rest Scott Says Comment 38 May 24th 2015 1 54 pm Yuval 34 tragedy ve often gotten uneasy m taxi weaving madly traffic reflect driver every day must know right agreed months ago contribute essay P vs NP book famous open problems John Nash editing would ve first interaction counting seeing around IAS cafeteria know happen book RIP Scott Says Comment 39 May 24th 2015 1 57 pm si 33 Even NSA differs important ways paper described paper finally spurs people switch 2048-bit keys hard see wouldn cause trouble NSA Scott Says Comment 40 May 24th 2015 2 02 pm matt 35 Well output precomputation already subexponential size indeed depending tradeoffs want output large exp 1 923 o 1 log p 1 3 log log p 2 3 comparable entire running time precomputation far obvious quantum computer would speed certainly couldn polylog p time best could shave lower-order terms Says Comment 41 May 24th 2015 2 43 pm Scott 29 Sorry looked title impulsive posting read posting though case think Integer factoring DLog P Poly reasonable possibility also like pigs shall fly Either Integer factoring DLog P Poly seem affect complexity classes general could every OWF inverted P Poly reasonable possibility Scott Says Comment 42 May 24th 2015 3 01 pm 39 factoring discrete log P poly P matter say TIME nlog n regard within realm possibility far anyone knows specific problems solution wouldn cause wider collapse complexity classes disastrous structural consequences hand think safe say algorithm would constitute depend revolutionary advance number theory also strongly disagree people claim must fast classical factoring algorithm d say simply know right number field sieve something like close optimal improvable smaller subexponential also perfectly reasonable possibilities arbitrary OWFs efficiently invertible d regard much surprising almost surprising P NP final remark doubt great deal difference uniform nonuniform cases e P P poly questions Says Comment 43 May 24th 2015 3 08 pm Scott 42 Thank much Says Comment 44 May 24th 2015 3 33 pm Sorry regarding last line doubt great deal difference uniform nonuniform cases e P P poly background reading seem getting poly length string could hard seems NP P Poly would still reasonable speculate P NP right mean strength pigs shall fly seems collapse PH Pi_2 Sigma_2 Remaining problems could still hard seem significant difference P P Poly problems polynomial hierarchy Bram Cohen Says Comment 45 May 24th 2015 3 39 pm Using multiple different primes incurs huge amounts problems specific primes weak number ways possibly novel ways generally much lower performance ones selected specifically efficient implementations Selecting fresh primes opportunistic encryption particular would nightmare susceptibility potential new attacks Standard primes big advantages specifically studied weaknesses implementation tricks even standards https tools ietf org html rfc3526 others beat making points earlier pointed one thing really needed increasing sizes Joshua Zelinsky Says Comment 46 May 24th 2015 4 21 pm 44 NP P poly doesn imply P NP NP P poly would almost shocking finding P NP found NP P poly d fundamentally reevaluate entire approach things degree confidence P NP would put aside carefully examined proof NP P poly understood exactly coming limitations technique Rahul Says Comment 47 May 24th 2015 5 05 pm practical downsides going really large yet single prime large would key make NFS precomputation feasible even state entity lots resources whatever hardware scale rates foresee say next decade Scott Says Comment 48 May 24th 2015 10 30 pm Rahul 47 back-of-the-enveloped got taking 2048-bit discrete log using NFS billion times harder taking 1024-bit discrete log means d talking 45 quadrillion core-years seems plausibly beyond current range human civilization without serious algorithmic advance David Says Comment 49 May 24th 2015 11 20 pm Hopefully ll soon see enhancements IKEv1 IKEv2 support site-generated DH groups one stuck Group 5 1536 bits TLS beats IPSEC supporting custom group generation Rahul Says Comment 50 May 25th 2015 12 09 Scott 48 Interesting found link online seems say Google using 2048 bit keys almost two years sure Diffie Hellman keys discussing http www computing co uk ctg news 2285984 google-updates-ssl-certificates-to-2048bit-encryption client browsers already fixed work 2048 bit keys implementation aspects confusing e g move 2048 bit keys need changes server client ends servers need change anonymous Says Comment 51 May 25th 2015 1 22 disclosure recent interview Terence Tao related matter http www smh com au good-weekend terence-tao-the-mozart-of-maths-20150306-13fwcv html Perhaps inadvertently assisted refining choice NFS polynomials BlackSails Says Comment 52 May 25th 2015 8 20 think NSA using attack likely NSA functioning quantum computer Scott Says Comment 53 May 25th 2015 8 45 BlackSails 52 Without question Alon Rosen Says Comment 54 May 25th 2015 12 32 pm true theoretical cryptographer know DH Key-Exchange least say https jonkatz wordpress com 2010 05 12 what-do-we-know Rahul Says Comment 55 May 25th 2015 3 06 pm Wasn rather irresponsible publish major browsers chance announce fix patch ve searched lot Chrome even see development thread yet Couldn guys waited announced John Alicia Nash 1928 1933 2015 G del's Lost Letter P NP Says Comment 56 May 25th 2015 4 35 pm new Logjam attack Diffie-Hellman key exchange excellently covered Scott Aaronson echoes faults RSA implementations likewise fail diversify prime fred Says Comment 57 May 25th 2015 4 48 pm question regarding discrete logarithm E g solve 3 m 13 modulo 17 solution m 4 use brute force check k 17 13 3 m m 1 m 2 m 3 m N many powers 3 would consider know sure solution e N Jay Says Comment 58 May 25th 2015 5 27 pm Rahul 55 d take huge ressources exploit random folk could read mails tomorrow morning hand information NSA could soon decrypt information happen collect relevant Tommaso G Says Comment 59 May 25th 2015 7 44 pm elliptic-curve groups less good everyone using elliptic curves see problem expert elliptic curves AFAIK curves suitable crypto use relatively sparse standardized e g NIST NSA Suite B reason curves complex objects endless categories different properties many vulnerable one attack another see e g http safecurves cr yp also possible generate random curves testing crypto suitability involves expensive computation doubt easier generating large safe prime DH use Scott Says Comment 60 May 25th 2015 7 53 pm Rahul 55 Adrian et al whole section paper Section 6 Disclosure Response notified companies fix 512-bit vulnerability going public companies Jay 58 pointed disclosure isn really relevant 1024-bit vulnerability since one requires nation-state-level resources exploit relevant nation-states probably know already would take years develop capability Disclosing affected parties going public give chance fix whatever vulnerability found standard practice computer security community people pretty careful Rahul Says Comment 61 May 25th 2015 11 32 pm Scott 60 go weakdh org warns Warning web browser vulnerable Logjam tricked using weak encryption update browser triggered 512-bit vulnerability 1024-bit vulnerability impression browser rolled fixes yet even 512 bit downgrade exploit Sniffnoy Says Comment 62 May 26th 2015 12 13 Fred See Fermat little theorem generally Euler totient theorem generally Lagrange theorem Amir Says Comment 63 May 26th 2015 5 47 fred 57 specific problem solving modulo 17 generator 3 steps needed 16 3 16 1 smaller solution start brute-force m 0 hardest case would 3 15 6 complexity actually depends choice generator course textbook basic number theory proves Fermat little theorem follows bases optimal d need N-1 steps brute-force working modulo prime N bg Says Comment 64 May 26th 2015 8 40 Scott 31 attack affects 8 top million sites already seems like big deal 80 000 sites re talking enough e g criminal enterprise make killing exploiting reminds hedge funds consistently amazing returns mostly hire cryptographers know reality pattern recognition abilities ve always wondered could something else going behind scenes dimethylethylhexabutylpeptopeyotine derivative Says Comment 65 May 26th 2015 1 30 pm point machines get faster breaking encryption also handle higher bit encryption Furthermore people sensitive data willing upgrade Sometimes upgrades require hardware-level op codes new algorithms theory less interesting engineering point view things need scale properly fred Says Comment 66 May 26th 2015 3 36 pm Amir 63 Sniffnoy 62 thanks wonder working modulo N requires N exponentiations follow QM algorithm Shor also requires N simultaneous state superpositions work MarkH Says Comment 67 May 26th 2015 8 02 pm Bram Cohen 45 far know q prime p 2q 1 also prime multiplication group mod p less secure setting Diffie-Hellman group size e modulus length bits simple verify p test primality test p-1 2 primality verification somewhat costly barrier creating big list safe primes one-time check server domain uses custom prime aware properties multiplication group moduli materially alter cost computing discrete logs using publicly known algorithms comment suggests know several criteria security p Would kindly enlighten Amir Safavi Says Comment 68 May 27th 2015 1 06 Clear thought doesn respect boundaries disciplines theory practice fred Says Comment 69 May 27th 2015 8 37 Reading d think NSA hasn actually recruited theoretical practical cryptographers US academia possible m sure alternatives would Self-taught geniuses hackers Captured aliens Roswell crash site reading John Nash RIP came across declassified letters sent NSA http www gwern net docs 1955-nash typical member US academia work side NSA patriotism etc opposed full time Scott Says Comment 70 May 27th 2015 10 09 fred 69 typical certainly happens lots mathematicians done consulting work NSA NSA often campuses trying recruit also prestigious summer research program undergrads grad students often recruit people uphill battle since excellent researchers tend like tell everyone discovered might moral qualms working especially post-Snowden believe NSA still single largest employer mathematicians world Raoul Ohio Says Comment 71 May 27th 2015 11 50 Re 70 NSA mathematics Ph D Starbucks philosophy Ph D Says Comment 72 May 27th 2015 3 53 pm Raoul Ohio 71 objects theory CS phds physics phds Joshua Zelinsky Says Comment 73 May 27th 2015 7 49 pm Scott going blog Aram Harrow recent work improved quantum error correcting codes Scott Says Comment 74 May 27th 2015 8 14 pm Joshua 73 Could give link Joshua Zelinsky Says Comment 75 May 27th 2015 8 40 pm Sorry looks like result old Paper http arxiv org abs 1411 3334 listed November 2014 looks like getting picked general press e g http phys org news 2015-05-protocol-virtually-errors-quantum-memory html blog already point missed C Says Comment 76 May 27th 2015 8 51 pm Hi Scott thoughts http arxiv org abs 1505 06506 Scott Says Comment 77 May 27th 2015 10 06 pm C 76 Sorry one looks covered second question FAQ Joshua Zelinsky Says Comment 78 May 27th 2015 10 36 pm C 76 Scott glance paper claims ve proven NP coNP However address anywhere ve gotten around fact oracles NP coNP discuss relativization major red flag Scott Says Comment 79 May 27th 2015 11 33 pm Joshua 75 d somehow missed paper looks great m sorry anything intelligent say right Rahul Says Comment 80 May 28th 2015 4 29 University student reaction NSA trying recruit CS Departments Dow recruiters got Chemistry Departments back 70 Dow used manufacture Napalm Halliburton recruiters got Bush era Leave Reply Name required Mail published required Website Shtetl-Optimized proudly powered WordPress Entries RSS Comments RSS"),
("Great explanation of the Discrete Cosine Transform and it's use in JPEG compression", "Skip navigation UploadSign inSearch Loading Close Yeah keep Undo Close video unavailable Watch QueueTV QueueWatch QueueTV Queue Remove allDisconnect Loading Watch Queue TV Queue __count__ __total__ JPEG DCT Discrete Cosine Transform - Computerphile Computerphile SubscribeSubscribedUnsubscribe389 443 Subscription preferences Loading Loading Working Add Want watch later Sign add video playlist Sign Share Report Need report video Sign report inappropriate content Sign Statistics 80 484 2 095 Like video Sign make opinion count Sign 2 096 8 Don't like video Sign make opinion count Sign 9 Loading Loading Loading Rating available video rented feature available right Please try later Published May 22 2015DCT secret JPEG's compression Image Analyst Mike Pound explains compression works Colourspaces https youtu LFXN9PiOGtY JPEG 'files' Colour https youtu n_uNPbdenRs Computer Changed Everything Altair 8800 https youtu 6LYRgrqJgDc Problems JPEG COMING SOONUpside Trees Huffman Encoding https youtu umTbivyJoiI Colourspaces https youtu LFXN9PiOGtY JPEG isn't file format - JPEG pt1 https youtu n_uNPbdenRs Upside Trees Huffman Encoding https youtu umTbivyJoiI Problems JPEG COMING SOON Computer Changed Everything Altair 8800 https youtu 6LYRgrqJgDc http www facebook com computerphilehttps twitter com computer_phileThis video filmed edited Sean Riley Computer Science University Nottingham http bit ly nottscomputerComputerphile sister project Brady Haran's Numberphile http www bradyharan com Category Education License Standard YouTube License Show Show less Loading Advertisement Autoplay autoplay enabled suggested video automatically play next Next JPEG 'files' Colour JPEG Pt1 - Computerphile - Duration 7 18 Computerphile 71 647 views 7 18 Play nextPlay Colourspaces - Computerphile - Duration 7 31 Computerphile 55 190 views 7 31 Play nextPlay Difficult Program Compute - Computerphile - Duration 14 56 Computerphile 300 777 views 14 56 Play nextPlay Turing's Enigma Problem Part 1 - Computerphile - Duration 19 00 Computerphile 164 986 views 19 00 Play nextPlay ARM Processor - Sowing Seeds Success - Computerphile - Duration 13 20 Computerphile 66 440 views 13 20 Play nextPlay Digital image processing p010 - Discrete Cosine Transform DCT - Duration 25 33 Alireza Saberi 21 315 views 25 33 Play nextPlay Electronic Voting BAD Idea - Computerphile - Duration 8 21 Computerphile 279 340 views 8 21 Play nextPlay Supercomputer Milky Way - Computerphile - Duration 8 02 Computerphile 52 076 views 8 02 Play nextPlay Raul Fraile GZIP compression works JSConf EU 2014 - Duration 24 20 JSConf 2 657 views 24 20 Play nextPlay Crowd Altair - Lifting Lid - Computerphile - Duration 9 00 Computerphile 29 555 views 9 00 Play nextPlay Elegant Compression Text LZ 77 Method - Computerphile - Duration 8 43 Computerphile 130 574 views 8 43 Play nextPlay Arduino Hardware - Computerphile - Duration 7 14 Computerphile 61 420 views 7 14 Play nextPlay Indie Games Fourth Dimension - Computerphile - Duration 10 00 Computerphile 64 129 views 10 00 Play nextPlay Upside Trees Huffman Trees - Computerphile - Duration 11 07 Computerphile 91 822 views 11 07 Play nextPlay Internationalis z ing Code - Computerphile - Duration 8 18 Computerphile 132 631 views 8 18 Play nextPlay End Moore's Law - Computerphile - Duration 9 39 Computerphile 160 355 views 9 39 Play nextPlay Compression - Computerphile - Duration 7 38 Computerphile 171 222 views 7 38 Play nextPlay Capturing Digital Images Bayer Filter - Computerphile - Duration 6 06 Computerphile 63 922 views 6 06 Play nextPlay 3d X-Ray Images - Computerphile - Duration 9 46 Computerphile 41 897 views 9 46 Play nextPlay Lecture - 17 Lossy Image Compression DCT - Duration 56 25 nptelhrd 37 222 views 56 25 Play nextPlay Loading suggestions Show Language English Country India Safety History Help Loading Loading Loading Press Copyright Creators Advertise Developers YouTube Terms Privacy Policy Safety Send feedback Try something new Loading Working Sign add Watch Later Add Loading playlists"),
('CodeNode.Datalayer - A Complete ADO.NET Wrapper', 'Trending Java 9 Top 5 fea Example External Externalizable interface 7 differences Se CodinGeek JavaJava StringsJava OalgorithmsOOPSHow Menu CodeNode Datalayer Complete ADO NET Wrapper RahulGarg May 23 2015 NET Comments data layer one important component application pretty good options take care requirement like ADO NET LinqToSql Entity Framework Entity Framework one used ORM currently ADO NET still maintained charm still valid choice accessing database NET applications believe dev folks still need complete fast easy use ADO NET wrapper decided create one Although claim replacement ORM developed small module named CodeNode Datalayer targated provide access often used features ADO NET boosting developer productivity post complete code classes visit github repository find Nuget code details links Nuget Packages Packages LinkSource Code CodeNode RepositoryThis module divided followings categories RequestProviderNullSafeDataReaderExtensionsAttributeRequest part contains three classes DataRequest responsible command name command type list parameters var request new DataRequest getUserById CommandType StoredProcedure DataParameter class defines attributes SQL parameter name type direction size etc define parameter attach request object request Params Add new DataParameter userId 123 see Params LIst DataParameter DataRequest attach many parameter required stored procedure also provide parameter direction case required request Params Add new DataParameter Id 11 ParameterDirection InputOutput DataBulkRequest class used case bulk insert required support attributes like destination table time batch size etc public DataBulkRequest DataTable source string destinationTable int timeOut int batchSize source destinationTable imeOut BatchSize batchSize var bulkRequest new DataBulkRequest sourceDatatable Users 500 1000 Provider part contains two classes BaseDataProvider base class data provider mainly responsible setting connection string connection-string name DefaultConnection need provide otherwise pass name constructor DataProvider one important parts module provide code functions ADO NET described connection-string name DefaultConnection directly use Otherwise need provide connection-string name var provider new DataProvider var provider new DataProvider MyAppConnectionStringName contains following methods INullSafeDataReader ExecuteDataReader DataRequest request internally calls INullSafeDataReader ExecuteDataReader DataRequest request CommandBehavior behavior CommandBehavior CloseConnection returns instance NullSafeDataReader INullSafeDataReader ExecuteDataReader DataRequest request CommandBehavior behavior Returns instance NullSafeDataReader object ExecuteScalar DataRequest request Return object returned SQL successful execution int ExecuteNonQuery DataRequest request Returns result ExecuteNonQuery ExecuteNonQueryForOutParameter DataRequest request string parametName use method expects output parameter ExecuteNonQuery Suppose expecting output value type string parameter name EmailId Please make sure EmailId exist parameter request Params direction marked ParameterDirection InputOutput ParameterDirection Output required var email provider ExecuteNonQueryForOutParameter string request EmailId DataSet ExecuteDataSet DataRequest request returns object dataset used 1 result set expected DataTable ExecuteDataTable DataRequest request returns object data table void ExecuteBulkCopy DataBulkRequest request method useful bulk insert required NullSafeDataReader wraps SqlDataReader provide null safe methods means got integer DbNull form database convert default value 0 case integer value types remove necessity define Nullable model directly map NullSafeDataReader Model Extensions Currently folder contains one class rest extension classes moved CodeNode Extension project NullSafeDataReaderExtention really ease life map models result provided ExecuteDataReader method contains two public methods public static MapToObject INullSafeDataReader dataReader bool useMapColumnAttribute false public static List MapToList INullSafeDataReader dataReader bool useMapColumnAttribute false think little explanation required Suppose SQL table need retrieve data fill c models need create c POCO UserTable public class User public int Id get set public string Name get set public string EmailId get set public string Address get set public decimal Income get set created procedure find user CREATE PROCEDURE dbo getUserById userId int BEGIN SELECT Id Name EmailId Address Income Users Id userId END complete call would Public User GetUser int id var dataProvider new DataProvider var request new DataRequest getUserById CommandType StoredProcedure request Params Add new DataParameter userId id using var dataReader dataProvider ExecuteDataReader request return dataReader MapToObject User var myUser GetUser 11 Suppose stored procedure returns list users need change dataReader MapToObject User dataReader MapToList User provide List User One thing noted model properties name type exact returned stored procedure find properties reflection use MapColumnAttribute map column different name data reader Attribute part contains class MapColumnAttribute use map c model property different name column data reader suppose model property SpecialName place Name stored procedure returns column Name public class User public int Id get set public string SpecialName get set public string EmailId get set public string Address get set public decimal Income get set decorate property MapColumnAttribute need pass useMapColumnAttribute true NullSafeDataReaderExtention methods public class User public int Id get set MapColumn Name public string SpecialName get set public string EmailId get set public string Address get set public decimal Income get set dataReader MapToObject User true Feel free provide feedback post query related module share wisdom motivate us keep writing online tutorials free comment anything missing wrong need kind help Keep Learning Happy Coding CodeNode Datalayer Complete ADO NET Wrapper last modified May 24th 2015 RahulGarg Tags NET ADO NET C Datalayer Related Posts C Logger Log4Net Implementation Comments May 19 2015 Active Directory Search Module Comments May 16 2015 Author RahulGargI sanguine self-motivated adroit coder approx 6 years experience strong interpersonal skills ability modulate per challenges believe process well final results key team player never afraid lead worked web windows application various level love learn latest software technologies maintain pace growing world technologies innovations Ask something Get Connected 30 Subscribers subscribe 20 Fans like 5 Followers follow 65 Followers follow 16 Followers follow Recent Posts Java 9 Top 5 features release Information May 27 2015 Bubble Sort Algorithm Implementations May 26 2015 CodeNode Datalayer Complete ADO NET Wrapper May 23 2015 C Logger Log4Net Implementation May 19 2015 Selection Sort Algorithm Implementation May 18 2015 Active Directory Search Module May 16 2015 Binary Search Algorithm- Fundamentals Implementation Analysis May 15 2015Categories NET algorithms AngularJs io Java news OOPS Strings UncategorizedTradepub - Free Engineering computer programming ebooks white papers lot Copyright 2015 CodinGeek'),
('Going native with React', "Ryan Clark Follow rynclark Going native React introduction 11 May 2015 JavaScript developer would've never thought could make native mobile applications easily JavaScript Sure tools PhoneGap wrapping browser based application native application leaves lot desired It's changed - React team Facebook released React Native allows us use React framework create applications utilise native mobile components real time - meaning don't recompile applications develop - makes incredibly easy create mobile apps Luckily got preview React Native beta even since it's progressed massively Please note currently iOS supported therefore need running OS X XCode order follow tutorial haven't chance learn React take look tutorial get started It's important note doesn't mean write code use everywhere Trying disastrous level abstraction would insane Instead React Native allows us learn write everywhere Going back 2004 watched Social Network remember FaceMash application kicked Facebook haven't watched 11 years ago wow Mark Zuckerberg created FaceMash application could view two people rate one hotter person would score although original algorithm unknown movie shows Elo rating algorithm used reflected hot it's glory - Let's go full circle - we're going recreating FaceMash React Native think it's immoral rate girls looks feel free change pictures something else find attractive dogs snippets code etc I'm judging Creating app clone start repo wish isn't necessary however different branches code different stages case get lost Houston lift haven't cloned repo need setup base project React Native allows us quickly start project react-native-cli npm package CLI don't installed quickly run npm install -g react-native-cli get started Navigate folder terminal run react-native init FaceMash create base application ready us dig add Open Launch XCode navigate directory created application need open facemash xcodeproj React Native supports us working iOS Simulator actual iOS devices developing iOS Simulator allows rapid application development - press Command R refresh application make changes JavaScript super lazy enable live reloading via developer menu accessible via Command Control Z even debug code Chrome developer tools wish develop application using iOS device need network computer default React Native look localhost JavaScript need point computer editing AppDelegate m file changing localhost local IP find OS X Alt Click-ing wireless menu run application application open whatever target you've picked XCode click run terminal process also spawn running npm start directory application don't wish run app XCode make sure run npm start create local web server port 8081 points compiled JavaScript code also watch recompile code save I'm running application simulated iPhone 6 running 50 scale go we've got blank canvas much room activities Taking peek Let's take look code takes render see screenshot Open index ios js Sample React Native App https github com facebook react-native 'use strict' var React require 'react-native' var AppRegistry StyleSheet Text View React var facemash React createClass render function return View style styles container Text style styles welcome Welcome React Native Text Text style styles instructions get started edit index ios js Text Text style styles instructions Press Cmd R reload ' n' Cmd Control Z dev menu Text View var styles StyleSheet create container flex 1 justifyContent 'center' alignItems 'center' backgroundColor ' F5FCFF' welcome fontSize 20 textAlign 'center' margin 10 instructions textAlign 'center' color ' 333333' marginBottom 5 AppRegistry registerComponent 'facemash' facemash close mouth - yes takes render application Looks familiar doesn't React Native vs browser React Native matches would've using React browser However differences two minuscule there's need worry Instead using block elements div section use View component React Native maps native iOS component UIView text must wrapped inside Text component stylesheets - styling written JavaScript objects don't need worry browser compatibility - ES6 harmony supported box well flexbox Get work We're going start clearing stylesheet render function React component Ideally get basic feeling React Native we're going try use many different components Let's start TabBarIOS component might recognise TabBar component used core iOS apps Clock Photos var React require 'react-native' var AppRegistry StyleSheet Text View TabBarIOS React var facemash React createClass getInitialState return selectedTab 'faceMash' render function return TabBarIOS TabBarIOS Item title FaceMash icon require 'image facemash' selected state selectedTab 'faceMash' View style styles pageView Text Face Mash Text View TabBarIOS Item TabBarIOS Item title Messages icon require 'image messages' selected state selectedTab 'messages' View style styles pageView Text Messages Text View TabBarIOS Item TabBarIOS Item title Settings icon require 'image settings' selected state selectedTab 'settings' View style styles pageView Text Settings Text View TabBarIOS Item TabBarIOS var styles StyleSheet create pageView backgroundColor ' fff' flex 1 omitted code Look You'll notice text currently status bar don't worry we'll fix later TabBarIOS component uses TabBarIOS Item children We're going three pages - page rate people messages list settings page TabBarIOS Item must one child contents page selected see us setting selected true false depending state component Obviously tab bar wouldn't look good without icons system icons use however use text tab also changes match icon Instead use icons import local image asset React Native use require prepend asset name image I'm using icons available free CC 3 0 licence flaticon Using Static Images add static image React Native open XCode Project Navigator first icon left hand pane open Images xcassets images sit allows us keep assets one name whilst providing different images resolution even device specific images Images must follow strict naming convention Use asset name messages settings append resolution displayed instance I'm building application iPhone 6 would use 2x resolution you've named image file correctly drag drop left hand page Images xcassets use require 'image assetname' React Native Back code next logical step set main component allow switching tabs setting state user clicks TabBarIOS Item allows us give onPress property use detect user taps tab omitted code var facemash React createClass getInitialState return selectedTab 'faceMash' changeTab tabName setState selectedTab tabName render function return TabBarIOS TabBarIOS Item title FaceMash icon require 'image facemash' onPress changeTab 'faceMash' selected state selectedTab 'faceMash' View style styles pageView Text Face Mash Text View TabBarIOS Item TabBarIOS Item title Messages icon require 'image messages' onPress changeTab 'messages' selected state selectedTab 'messages' View style styles pageView Text Messages Text View TabBarIOS Item TabBarIOS Item title Settings icon require 'image settings' onPress changeTab 'settings' selected state selectedTab 'settings' View style styles pageView Text Settings Text View TabBarIOS Item TabBarIOS omitted code Done It's simple Refresh app pressing Command R iOS simulator recompile via XCode you're developing device you'll notice tap tabs screen changes Although haven't written much code check step-one branch also contains icons we've used tabs Let's Mash Let's work FaceMash tab We're going hit endpoint load data using fetch step-one branch I've included config yaml file rest folder we're going use mock endpoints using stubby users endpoint pictures randomly generated randomuser Open terminal run stubby -d rest config yaml let's get started Create new file folder named tabs called FaceMash js stick basic React component - 'use strict' var React require 'react-native' var StyleSheet Text View React var facemashTab React createClass render function return View style styles container Text FaceMash tab Text View var styles StyleSheet create container flex 1 backgroundColor ' fff' module exports facemashTab we've got tab far basic View component text inside We've also got basic styling View make sure takes available height width We're going add header purely display purposes omitted code var facemashTab React createClass render function return View style styles container View style styles header View View style styles content Text FaceMash tab Text View View var styles StyleSheet create container flex 1 backgroundColor ' fff' header height 40 background ' ff0000' module exports facemashTab we're talking However looks terrible status bar black worry change using StatusBarIOS API changeTab function called check tab FaceMash tab we'll set status bar style 1 white we'll set 0 black index ios js omitted code var AppRegistry StyleSheet Text View TabBarIOS StatusBarIOS React var facemash React createClass changeTab tabName StatusBarIOS setStyle tabName 'faceMash' 1 0 setState selectedTab tabName omitted code Refresh you'll see white status bar - sorted get hitting endpoint displaying users We'll using fetch included us React Native default omitted code var facemashTab React createClass getInitialState function return list currentIndex 0 componentWillMount function fetch 'http localhost 8882 rest mash' res res json res setState list res render function return omitted code request populate state returned data initial state empty array check render function show user loading page whilst wait var StyleSheet Text View ActivityIndicatorIOS React var facemashTab React createClass render function var contents state list length contents View style styles loading Text style styles loadingText Loading Text ActivityIndicatorIOS View else contents View style styles content Text Loaded Text View return View style styles container View style styles header Text style styles headerText FaceMash Text View contents View var styles StyleSheet create container flex 1 backgroundColor ' fff' loading flex 1 backgroundColor ' fff' justifyContent 'center' alignItems 'center' loadingText fontSize 14 marginBottom 20 header height 50 backgroundColor ' 760004' paddingTop 20 alignItems 'center' headerText color ' fff' fontSize 20 fontWeight 'bold' access data state list We've also got current index array we're state endpoint returns array objects - object two people user rate two people pick data associated we're going make React component display data omitted code var Person React createClass render function var person props person return View style styles person Text Person Text View var facemashTab React createClass getInitialState function return list currentIndex 0 componentWillMount function fetch 'http localhost 8882 rest mash' res res json res setState list res render function var contents state list length contents View style styles loading Text style styles loadingText Loading Text ActivityIndicatorIOS View else var list currentIndex state var record list currentIndex var people record users map person Person person person contents View style styles content people View return View style styles container View style styles header Text style styles headerText FaceMash Text View contents View var styles StyleSheet create person flex 1 margin 10 borderRadius 3 overflow 'hidden' We've got component mounts twice person appropriate configuration passed display profile picture relevant user info Displaying external images Unlike tab icons images displaying user come external source isn't problem fact it's even easier display displaying static assets Instead passing require'd image Image component pass object instead object one property - uri points image want load we've passed user information property named person access image URL via props person picture omitted code var Person React createClass render function var person props person return View style styles person Image style styles personImage source uri person picture View omitted code var styles StyleSheet create person flex 1 margin 10 borderRadius 3 overflow 'hidden' personImage flex 1 height 200 module exports facemashTab also styling needed - resizing images incredibly easy Similar CSS properties background-size applied images React Native we're going put height image resized accordingly add rest user information omitted code var Person React createClass render function var person props person return View style styles person Image style styles personImage source uri person picture View style styles personInfo Text style styles personName person firstName person lastName Text View style styles personScore Text style styles personScoreHeader WON Text Text style styles personScoreValue styles won person won Text View View style styles personScore Text style styles personScoreHeader LOST Text Text style styles personScoreValue styles lost person lost Text View View style styles personScore Text style styles personScoreHeader SCORE Text Text style styles personScoreValue person score Text View View View omitted code var styles StyleSheet create person flex 1 margin 10 borderRadius 3 overflow 'hidden' personInfo borderLeftColor 'rgba 0 0 0 0 1 ' borderLeftWidth 1 borderRightColor 'rgba 0 0 0 0 1 ' borderRightWidth 1 borderBottomColor 'rgba 0 0 0 0 1 ' borderBottomWidth 1 padding 10 alignItems 'center' flexDirection 'row' personImage flex 1 height 200 personName fontSize 18 flex 1 paddingLeft 5 personScore flex 0 25 alignItems 'center' personScoreHeader color 'rgba 0 0 0 0 3 ' fontSize 10 fontWeight 'bold' personScoreValue color 'rgba 0 0 0 0 6 ' fontSize 16 won color ' 93C26D' lost color ' DD4B39' module exports facemashTab check code step-two branch we've got users displaying add tab events allow user pick hottest Tap tap React Native offers us TouchableHighlight component allows View components respond properly touches touched opacity wrapped view decreased makes components feel touchable We're going wrap person information section future might want make user tap photo see pictures person omitted code var Person React createClass render function var person props person return View style styles person Image style styles personImage source uri person picture TouchableHighlight View style styles personInfo Text style styles personName person firstName person lastName Text View style styles personScore Text style styles personScoreHeader WON Text Text style styles personScoreValue styles won person won Text View View style styles personScore Text style styles personScoreHeader LOST Text Text style styles personScoreValue styles lost person lost Text View View style styles personScore Text style styles personScoreHeader SCORE Text Text style styles personScoreValue person score Text View View TouchableHighlight View omitted code reload changes tap user information you'll notice works - looks horrible haven't set background colour view meaning whole component darkened omitted code var styles StyleSheet create person flex 1 margin 10 borderRadius 3 overflow 'hidden' personInfo backgroundColor ' fff' borderLeftColor 'rgba 0 0 0 0 1 ' borderLeftWidth 1 borderRightColor 'rgba 0 0 0 0 1 ' borderRightWidth 1 borderBottomColor 'rgba 0 0 0 0 1 ' borderBottomWidth 1 padding 10 alignItems 'center' flexDirection 'row' omitted code tap info box it'll work correctly TouchableHighlight offers us events TouchableWithoutFeedback TouchableWithoutFeedback shouldn't used everything tapped provide sort visual feedback means use onPress - called user released tap long hasn't interrupted e g moving finger tappable area need pass property Person component tapped 'use strict' var React require 'react-native' var StyleSheet Text View Image ActivityIndicatorIOS TouchableHighlight React var Person React createClass render function var person props person return View style styles person Image style styles personImage source uri person picture TouchableHighlight onPress props onPress TouchableHighlight View var facemashTab React createClass onPersonPress function setState currentIndex state currentIndex 1 render function var contents state list length contents View style styles loading Text style styles loadingText Loading Text ActivityIndicatorIOS View else var list currentIndex state var record list currentIndex var people record users map person Person person person onPress onPersonPress contents View style styles content people View return View style styles container View style styles header Text style styles headerText FaceMash Text View contents View omitted code see onPersonPress property main tab component pass Person components call TouchableHighlight area tapped increment index view rerender new set people final changes facemash tab wish go ideas Hit REST endpoint user picked Check end list reached display message Allow user click photos see check final code facemash tab step-three branch Messages move onto messages tab function bit like iMessage - scrollable list users clicking one navigate us chat view user Luckily React Native gives us ListView component allows us simple scrollable list using ScrollView well efficiently displaying list re-renders changed rows limits row rendering one per event loop use ListView need data source data source allows us custom function check whether row changed think similar shouldComponentUpdate put JSON data data source lives state object Create new file tabs folder called Messages js 'use strict' var React require 'react-native' var StyleSheet Text View Image React var messagesTab React createClass render function return View style styles container Text Messages Text View var styles StyleSheet create container flex 1 backgroundColor ' fff' module exports messagesTab You'll also need edit index ios js point newly created component - omitted code var MessagesTab require ' tabs Messages' var facemash React createClass getInitialState return selectedTab 'faceMash' changeTab tabName StatusBarIOS setStyle tabName 'faceMash' 1 0 setState selectedTab tabName render function return TabBarIOS TabBarIOS Item title Messages icon require 'image messages' onPress changeTab 'messages' selected state selectedTab 'messages' MessagesTab TabBarIOS Item TabBarIOS omitted code mentioned need data source list view accessible via ListView DataSource We'll initialise one getInitialState 'use strict' var React require 'react-native' var StyleSheet Text View Image ListView React var messagesTab React createClass getInitialState function return dataSource new ListView DataSource rowHasChanged r1 r2 r1 r2 render function return View style styles container Text Messages Text View var styles StyleSheet create container flex 1 backgroundColor ' fff' module exports messagesTab we've got data source need fetch data server know we've messaging I've included endpoint configuration stubby step-three branch omitted code var messagesTab React createClass componentWillMount function fetch 'http localhost 8882 rest messages' res res json res updateDataSource res getInitialState function return dataSource new ListView DataSource rowHasChanged r1 r2 r1 r2 updateDataSource function data setState dataSource state dataSource cloneWithRows data render function return View style styles container Text Messages Text View omitted code fetch data update data source handled state whenever data source gets updated view move ListView component minimum component needs two properties - dataSource already renderRow renderRow function needs return React element It's called every row data source passed appropriate data row argument omitted code var messagesTab React createClass renderRow function return View Text Row goes Text View render function return View style styles container ListView dataSource state dataSource renderRow renderRow View omitted code get displaying correct data row object item passed first parameter renderRow function omitted code var messagesTab React createClass renderRow function person return View Text person user firstName person user lastName Text View render function return View style styles container ListView dataSource state dataSource renderRow renderRow View omitted code go ahead add information picture last received message 'use strict' var React require 'react-native' var StyleSheet Text View Image ListView PixelRatio React function prettyTime timestamp var createdDate new Date timestamp var distance Math round new Date - timestamp 60000 var hours '0' createdDate getHours slice -2 var minutes '0' createdDate getMinutes slice -2 var month '0' createdDate getMonth 1 slice -2 var date '0' createdDate getDate slice -2 var year createdDate getFullYear var string distance 1440 string hours minutes join ' ' else distance 2879 string 'Yesterday' else string date month year join ' ' return string var messagesTab React createClass renderRow function person var time prettyTime person lastMessage timestamp return View View style styles row Image source uri person user picture style styles cellImage View style styles textContainer Text style styles name numberOfLines 1 person user firstName person user lastName Text Text style styles time numberOfLines 1 time Text Text style styles lastMessage numberOfLines 1 person lastMessage contents Text View View View style styles cellBorder View render function return View style styles container ListView dataSource state dataSource renderRow renderRow View var styles StyleSheet create container flex 1 backgroundColor ' fff' row flex 1 alignItems 'center' backgroundColor 'white' flexDirection 'row' padding 10 textContainer flex 1 cellImage height 60 borderRadius 30 marginRight 10 width 60 time position 'absolute' top 0 right 0 fontSize 12 color ' cccccc' name flex 1 fontSize 16 fontWeight 'bold' marginBottom 2 lastMessage color ' 999999' fontSize 12 cellBorder backgroundColor 'rgba 0 0 0 0 1 ' height 1 PixelRatio get marginLeft 4 module exports messagesTab Looking good You'll notice stylesheet we're using something called PixelRatio get thinnest line possibly displayed device used Normally would use 1px thinnest border concept px React Native add code deal tapping user We're going make use NavigatorIOS component - you'll recognise apps iMessage Notes allows us back-swipe functionality views well navigation bar top We're actually going make new React component house navigator component needs initial React component render We'll change messagesTab component called messageList create another component called messagesTab 'use strict' var React require 'react-native' var StyleSheet Text View Image ListView PixelRatio NavigatorIOS React omitted code var messageList React createClass render function return View style ListView dataSource state dataSource renderRow renderRow View var messagesTab React createClass render function return NavigatorIOS style styles container initialRoute title 'Messages' component messageList omitted code Looking much professional already Like facemash tab add TouchableHighlight rows 'use strict' var React require 'react-native' var StyleSheet Text View Image ListView PixelRatio NavigatorIOS TouchableHighlight React omitted code var messageList React createClass componentWillMount function fetch 'http localhost 8882 rest messages' res res json res updateDataSource res getInitialState function return dataSource new ListView DataSource rowHasChanged r1 r2 r1 r2 updateDataSource function data setState dataSource state dataSource cloneWithRows data renderRow function person var time prettyTime person lastMessage timestamp return View TouchableHighlight View style styles row Image source uri person user picture style styles cellImage View style styles textContainer Text style styles name numberOfLines 1 person user firstName person user lastName Text Text style styles time numberOfLines 1 time Text Text style styles lastMessage numberOfLines 1 person lastMessage contents Text View View View style styles cellBorder TouchableHighlight View render function return View style styles container ListView dataSource state dataSource renderRow renderRow View omitted code Reload changes you'll get error passing two child components TouchableHighlight plays nicely one worry wrap two components another View component omitted code var messageList React createClass renderRow function person var time prettyTime person lastMessage timestamp return View TouchableHighlight View View style styles row Image source uri person user picture style styles cellImage View style styles textContainer Text style styles name numberOfLines 1 person user firstName person user lastName Text Text style styles time numberOfLines 1 time Text Text style styles lastMessage numberOfLines 1 person lastMessage contents Text View View View style styles cellBorder View TouchableHighlight View omitted code tap row get expected behaviour Wait minute - bottom border looking bit weird we're using rgba value background whole view changed means border changed darker worry give hex code instead var styles StyleSheet create cellBorder backgroundColor ' F2F2F2' height 1 PixelRatio get marginLeft 4 see code point step-four branch Pushing popping we've got main list styled handle navigation change user tapped NavigatorIOS allows us push components want change current route need way access NavigatorIOS instance child component messageList Luckily us gets passed prop named navigator Let's add onPress event TouchableHighlight component omitted code var messageList React createClass openChat function user renderRow function person var time prettyTime person lastMessage timestamp return View TouchableHighlight onPress openChat bind person user TouchableHighlight View omitted code need React component pass navigator Create new file called MessageView js tabs folder 'use strict' var React require 'react-native' var StyleSheet Text View React var messageView React createClass render function return View style styles container Text Message view Text View var styles StyleSheet create container flex 1 backgroundColor ' fff' module exports messageView include Messages js file push navigator omitted code var messageList React createClass openChat function user props navigator push title user firstName user lastName component MessageView passProps user renderRow function person var time prettyTime person lastMessage timestamp return View TouchableHighlight onPress openChat bind person user View View style styles row Image source uri person user picture style styles cellImage View style styles textContainer Text style styles name numberOfLines 1 person user firstName person user lastName Text Text style styles time numberOfLines 1 time Text Text style styles lastMessage numberOfLines 1 person lastMessage contents Text View View View style styles cellBorder View TouchableHighlight View omitted code see we're pushing next route navigator set next route's title user's first last name component render newly created MessageView properties pass allows us access anything need MessageView component we're going pass user object work everyone chat list matter big small However text cut new title bar solve put padding first View component we've got user property passed also display MessageView js 'use strict' var React require 'react-native' var StyleSheet Text View React var messageView React createClass render function var user props user return View style styles container Text Chat user firstName user lastName Text View var styles StyleSheet create container flex 1 backgroundColor ' fff' paddingTop 64 module exports messageView checkout code step-five branch wish take tab ideas Get chat information user MessageView mounts Try implement pull refresh - hint use renderHeader property ListView Add Settings button right user's first last name Conclusion Feel free try add functionality settings tab Try make use components DatePickerIOS TextInput common settings DOB name etc Hopefully hit quite different components commonly using React Native application queries feel free contact twitter rynclark"),
('3 Open Source Python Shells', "Home Register News Group Tests Forums Calendar Submit News Polls Personalise Bookmark Search Articles News Stories News Sections HomeGeneral News 3987 0 Reviews 636 0 Press Releases 465 0 Distributions 197 0 Software 906 0 Hardware 537 0 Security 192 0 Tutorials 356 0 Topic 181 0 User Functions Username Password Don't account yet Sign New User Events upcoming events 3 Open Source Python Shells Frazer Kline Python high-level general-purpose structured powerful open source programming language used wide variety programming tasks features fully dynamic type system automatic memory management similar Scheme Ruby Perl Tcl avoiding many complexities overheads compiled languages language created Guido van Rossum 1991 continues grow popularity Python useful popular computer language One benefits using interpreted language Python exploratory programming interactive shell try code without write script limitations Python shell Fortunately excellent alternative Python shells extend basic shell offer excellent interactive Python experience bpython bpython fancy interface Python interpreter Linux BSD OS X Windows idea provide user features in-line much like modern IDEs simple lightweight package run terminal window bpython doesn't seek create anything new groundbreaking Instead brings together neat ideas focuses practicality usefulness Features include In-line syntax highlighting - uses Pygments lexing code type colours appropriately Readline-like autocomplete suggestions displayed type Expected parameter list Python function - seeks display list parameters function call Rewind function pop last line code memory re-evaluate Send code you've entered pastebin Save code you've entered file Auto-indentation Python 3 support Website www bpython-interpreter org Developer Bob Farrell contributors License MIT License Version Number 0 14 1 IPython IPython enhanced interactive Python shell provides rich toolkit help make using Python interactively IPython used replacement standard Python shell used complete working environment scientific computing like Matlab Mathematica paired standard Python scientific numerical tools supports dynamic object introspections numbered input output prompts macro system session logging session restoring complete system shell access verbose colored traceback reports auto-parentheses auto-quoting embeddable Python programs Features include Powerful interactive shells terminal Qt-based browser-based notebook support code rich text mathematical expressions inline plots rich media Support interactive data visualization use GUI toolkits Flexible embeddable interpreters load projects Easy use high performance tools parallel computing Website ipython org Developer IPython Development Team License BSD Version Number 3 1 DreamPie DreamPie Python shell designed reliable fun DreamPie use Python interpreter Jython IronPython PyPy Features include New concept interactive shell window divided history box lets view previous commands output code box write code allows edit amount code like favorite editor execute it's ready also copy code anywhere edit run instantly Copy code command copy code want keep save file code already formatted nicely four-space indentation Automatic completion attributes file names Automatically displays function arguments documentation Keeps recent results result history later use automatically fold long outputs concentrate what's important Save history session HTML file future reference load history file DreamPie quickly redo previous commands Automatically adds parentheses optionally quotes press space functions methods example type execfile fn get execfile fn Supports interactive plotting matplotlib Xupport Python 2 5 Python 2 6 Python 3 1 Jython 2 5 IronPython 2 6 PyPy Extremely fast responsive Website www dreampie org Developer Noam Yorav-Raphael License GNU GPL v3 Version Number 1 2 1 Python articles check Python Books Python IDEs Last Updated Saturday May 23 2015 04 53 EDT written range guides highlighting excellent free books popular programming languages Check following guides C C C Java JavaScript CoffeeScript HTML Python Ruby Perl Haskell PHP Lisp R Prolog Scala Scheme Forth SQL Node js new Fortran new Erlang new Pascal new Ada new Group Tests Group TestsTop Free Software 5 Office Suites 7 Document Processors 6 Lean Desktops 6 Desktop Search 9 Project Management 9 Groupware Apps 14 File Managers 10 Databases 21 Backup Tools 21 DVD Tools 21 Window Managers 21 Productivity Tools 9 Terminal Emulators 21 Financial Tools 21 Text Editors 21 Video Emulators 21 Home Emulators 42 Graphics Apps 6 CAD Apps 42 Scientific Apps 10 Web Browsers 42 Email Apps 12 Instant Messaging 10 IRC Clients 7 Twitter Clients 12 News Aggregators 11 VoIP Apps 11 Remote Display Apps 42 Best Games 42 Games 21 Games 21 Notable Games 1 21 Notable Games 2 21 Notable Games 3 8 ASCII Games 9 Educational Games 42 Audio Apps 42 Video Apps 6 Screencasting Apps 80 Security Apps 9 System Monitoring 6 Family History Apps 11 PDF Tools 6 Music Servers 6 Collection Managers 7 Calculator Apps 8 Geometry Apps Free Console Apps 14 Multimedia Programming 8 Compilers 9 IDEs 9 Debuggers 7 Revision Control Apps 6 Doc Generators 'Free' Proprietary 21 Closed-Source Apps Top Commercial Apps 42 Games Free Web Software 21 Web CMS 14 Wiki Engines 8 Blog Apps 6 eCommerce Apps 5 Human Resource Apps 10 ERP 10 CRM6 Data Warehouse Apps 8 Business Intelligence 6 Point-of-Sale Group Tests Articles Migrating Windows Back data Distribution Guide Distro Portal Pages 20 Free Linux Books Running Linux Windows Older Stories Friday 03 06 Raspberry Pi 2 review 0 Sunday 02 22 Chess Bytes 0 Learn Art Computer Programming Great Free Beginner Books 2 CD Audio Grabbers 0 Monday 01 19 fitlet tiny fanless PC full openness 0 Sunday 01 18 MintBox Mini gives Linux users pocket-sized PC 0 6 Invaluable Assembly Books 0 Wednesday 01 14 Mac users switch Linux 0 MIPS Creator CI20 review 0 Tuesday 01 13 Getting Time Without NTP 0 Vote Linux distribution run main computer Debian Fedora Mint Slackware openSuSE Arch Ubuntu Redhat Mageia CentOS FreeBSD Results 633 votes 3 comments Donate FAQ Press Releases Privacy Awards Contact Built GeekLog phpBB Comments webmaster welcome Copyright 2009 LinuxLinks com - rights reserved"),
('You monster.', "archive store home subscribe contact Invented collections available ebook good-old-fashioned paper versions Share Twitter Facebook Reddit Google Tuesday May 19 2015 First Previous Next Last I'm Owen one New Invented Here's helpful starting place View discussion thread Email Delivery Atom Facebook Twitter billba nihcomic Unshelved Invented comic strip software developers testers funny people make software living using computers compilers programming languages newfangled gadgets technologies published every week Monday Thursday Invented LLC Images text may reproduced without authors' permission Privacy Policy"),
('Enforce the Single Responsibility Principle: Cassandra nodetool case study', 'CoderGears Blog Insights CoderGears Team Skip content products C C Java Insights Basic steps follow contributing C project Enforce Single Responsibility Principle Cassandra nodetool case study Posted May 23 2015 CoderGears Team Let start single responsibility principle wikipedia object-oriented programming single responsibility principle states every class responsibility single part functionality provided software responsibility entirely encapsulated class servicesshould narrowly aligned responsibility Enforce single responsibility priniciple makes code readable maintainable article goal go inside Cassandra nodetool see enforce princple use JArchitect understand nodetool works internally Relational database management systems commonly used system store use data extremely large amounts data kind system doesn scale properly concept NoSQL SQL spreading due growing demand relational database alternatives biggest motivation behind NoSQL scalability NoSQL solutions offer way store use extremely large amounts data less overhead less work better performance less downtime Apache Cassandra implements NoSQL concept developed Facebook power Inbox Search feature became Apache open source project Twitter Digg Reddit quite others started using Cassandra exposes number management operations via Java Management Extensions JMX Java Management Extensions JMX Java technology supplies tools managing monitoring Java applications services statistic operation Java application exposed MBean monitored manipulated using JMX nodetool utility command line interface Cassandra use help manage cluster used like nodetool -h HOSTNAME -p JMX_PORT COMMAND available commands ring - Print informations token ring join - Join ring info - Print node informations uptime load cfstats - Print statistics column families clearsnapshot - Remove existing snapshots version - Print cassandra version tpstats - Print usage statistics thread pools drain - Drain node stop accepting writes flush column families Let first discover major nodetool components work internally nodetool classes exist org apache cassandra tools package entry class NodeCmd NodeCmd understand role class let search methods called main method NodeCmd class executing following CQLinq query m Methods m IsUsedBy org apache cassandra tools NodeCmd main String select new m m NbBCInstructions treat commands main method uses Apache Commons CLI library provides API parsing command line options also able print help messages options available command NodeCmd switch appropriate method job NodeCmd collaborates NodeProbe class NodeProbe Let discover NodeProbe achieve task search types used Types IsUsedBy org apache cassandra tools NodeProbe select new NodeProbe class uses mainly management beans acts facade redirects command appropriate JMX bean list Cassandra JMX beans Types NameLike mbean IsInterface select Many managed beans available gives possibility create tools exploiting capabilities help administrators monitor manage Cassandra cluster idea tools interact JMX beans invoke methods need create JMX proxy invoking JMX newMBeanProxy Let search methods create JMX proxy m Methods m IsUsing javax management JMX newMBeanProxy MBeanServerConnection ObjectName Class select new m m NbBCInstructions NodeProbe acts facade create proxies take example connect method invoked create proxies discover methods invoked creation proxies commands redirection example let search methods used NodeProbe forceRemoveCompletion m Methods m IsUsedBy org apache cassandra tools NodeProbe forceRemoveCompletion select new m m NbBCInstructions StorageServiceMBean forceRemoveCompletion used logic treatment server side TheStorageServiceMBean implemented StorageService class methods used StoageService forceRemoveCompletion method Refactor enforce responsibility principle discovered NodeCmd parse command line options delegate job NodeProbe class facade JMX beans NodeCmd class uses JMX beans directly NodeCmd uses EndpointSnitchInfoMBean JMX bean methods using bean m Methods m IsUsing org apache cassandra locator EndpointSnitchInfoMBean select new m m NbBCInstructions NodeCmd NodeProbe use NodeCmd doesn proxy ask NodeProbe class shown dependency graph enforce single responsibility principle better refactor nodetool let NodeProbe redirect commands JMX proxies acts facade management capabilities responsibility NodeCmd parsing command line redirect NodeProbe class Share Facebook Twitter Pinterest Linkedin Google Tumblr Reddit Stumble Upon Email entry posted Uncategorized Bookmark permalink Basic steps follow contributing C project Leave Reply Cancel reply email address published Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code del datetime em q cite strike strong Currently JavaScript disabled order post comments please make sure JavaScript Cookies enabled reload page Click instructions enable JavaScript browser Search Search CoderGears ProductsCppDepend C C JArchitect Java XClarify Objective-C VBDepend VB6 VBA Recent Posts Enforce Single Responsibility Principle Cassandra nodetool case study Basic steps follow contributing C project Readability Maintainability regulators using Halstead Technical Debt measures Exploring existing code architecture using dependency graph Dependency Structure Matrix could help improve software design May 2015 M W F Feb 123 45678910 11121314151617 18192021222324 25262728293031 Archives May 2015 February 2015 January 2015 December 2014 November 2014 October 2014 September 2014 July 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 Recent CommentsAjinkya Lessons learn Oculus development team using Modern C approach Rick Brown reasons Modern C adopted generic programmingVipul Chawathe C legacy language anymoreGreg C legacy language anymoreEvolution Android APIs SPJ Mobile Network Discovering Android APIs evolution SocialFollow us Meta Log Entries RSS Comments RSS WordPress org CoderGears Blog Proudly powered WordPress'),
('A new forum for talking about programming!', "CodeTalk Skip Navigation Home Help Search Welcome Guest Please Login Register CodeTalkHome General General News Welcome new forum General Board Threads Posts Last Post General general board random coding talk 0 0 posts made board Legend New Posts New Posts Forum Information Statistics Threads Posts Total Threads 0 Total Posts 0 Recent Threads - Recent Posts - RSS Feed Members Total Members 2 Newest Member codeguy Users Online 33 May 24 2015 10 37 58 GMT View today's birthdays Users Online 0 Staff 0 Members 1 Guest Users Online Last 24 Hours 2 Staff 0 Members 14 Guests codeguy Admin Click remove banner ads forum Forum Hosted FREE ProBoards Get Free Message Boards Free Forums Terms Service Privacy Policy Notice FTC Disclosure Report Abuse Mobile"),
('OpenMP Support for Clang completed', "skip main skip sidebar LLVM Project Blog LLVM Project News Details Trenches Friday May 22 2015 OpenMP Support OpenMP support Clang compiler completed Every pragma clause 3 1 version standard supported full including combined directives like pragma omp parallel pragma omp parallel sections addition elements OpenMP 4 0 supported well includes almost complete support pragma omp simd full support pragma omp atomic combined pragmas couple clauses still missing OpenMP enables Clang users harness full power modern multi-core processors vector units Pragmas OpenMP 3 1 provide industry standard way employ task parallelism pragma omp simd simple yet flexible way enable data parallelism aka vectorization Clang implementation OpenMP standard relies LLVM OpenMP runtime library available http openmp llvm org runtime supports ARM architecture processors PowerPC processors 32 64 bit X86 processors provides ABI compatibility GCC Intel's existing OpenMP compilers enable OpenMP add -fopenmp command line provide paths OpenMP headers library -I path omp h -L LLVM OpenMP library path run compiled program may need provide path shared OpenMP library well export LD_LIBRARY_PATH OpenMP library path LD_LIBRARY_PATH export DYLD_LIBRARY_PATH OpenMP library path DYLD_LIBRARY_PATH Mac OS X confirm compiler works correctly trying simple parallel C program include omp h include stdio h int main pragma omp parallel printf Hello thread d nthreads d n omp_get_thread_num omp_get_num_threads Compile see errors warnings clang -fopenmp -I path omp h -L LLVM OpenMP library path hello_openmp c -o hello_openmp execute export DY LD_LIBRARY_PATH OpenMP library path DY LD_LIBRARY_PATH hello_openmp see one Hello line different thread numbers note lines may mixed together see one line try setting environment variable OMP_NUM_THREADS number say 4 try Hopefully enjoy using OpenMP witness dramatic boosts applications performance Posted Alexey Bataev 8 23 Labels Clang OpenMP Newer Post Older Post Home LLVM Logo Labels Clang 97 llvmweekly 72 C 17 optimization 13 meta 9 MC 7 LLVM-IR 5 devmtg 5 llvm-users 5 new-in-llvm-2 7 5 new-in-llvm-3 3 5 LLDB 4 jit 4 codegen 3 new-in-llvm-3 0 3 sanitizer 3 testing 3 OpenMP 2 Products 2 GHC 1 GSoC 1 KLEE 1 SelectionDAG 1 Warnings 1 asip 1 dragonegg 1 eda 1 libc 1 modernizer 1 new-in-llvm-2 8 1 new-in-llvm-3 1 1 new-in-llvm-3 4 1 tce 1 tta 1 vliw 1 Blog Archive 2015 27 May 5 LLVM Weekly - 73 May 25th 2015 OpenMP Support LLVM Weekly - 72 May 18th 2015 LLVM Weekly - 71 May 11th 2015 LLVM Weekly - 70 May 4th 2015 April 6 March 5 February 5 January 6 2014 56 December 5 November 5 October 4 September 5 August 4 July 6 June 5 May 5 April 5 March 5 February 4 January 3 2013 23 November 2 October 2 September 3 August 1 July 2 June 2 May 2 April 7 March 2 2012 4 December 2 November 1 January 1 2011 11 December 2 November 2 September 1 May 5 April 1 2010 17 December 1 September 1 June 3 May 3 April 5 February 2 January 2 2009 6 December 6 LLVM Blog blog intended news feed information LLVM Compiler Infrastructure related subprojects welcome new contributors you'd like write post please get touch Chris"),
('A solution to open office distractions', 'Sleep Easy Software Menu Search Skip content Contact Testimonials Resume Experience Blog Search Search solution open office distractions May 19 2015Daniel Kaplan ve programming 10 years half years office cubicle half worked open office floor plan Given choice always preferred enclosed workspace open office floor plans becoming common rising trend inspired come techniques deal distractions recently started new job open office floor plan reason doesn bother rarely get distracted fact remember something happened interview would normally distracted like crazy effect hours interview collaborating someone fix problem day someone brought dog work weren watching split second moment ran underneath chair walked legs think would distract nearly anyone reason didn take moment pet dog one hand continued conversation without losing track ve since come hypothesis trouble paying attention new job detail haven mentioned yet company engineers pair program majority time hypothesis Pair programming gives focus need overcome distractions open office floor plan fact gives much focus pay attention tasks better could private office Saying pair programming keeps focused nothing new multiple studies say much Programmers note even come work bad night preoccupied thoughts partner draws attention task hand Partners keep focused task Programmers far less likely spend time telephone reading answering emails surfing web partner awaiting attention Undoubtedly benefit working pairs person far less likely waste time reading email Web surfing staring window partner awaiting continuous contribution input Two people working together pair treat shared time valuable tend cut phone calls short waste time addition multiple studies report open office layouts distracting Findings respect workspace perceptions showed although employees refurbished office positive regarding layout office significantly dissatisfied amount personal space degree distraction accompanied refurbishment plethora research papers identify negative impacts open-plan office layout occupants perception office environment example longitudinal survey results demonstrated significant decline workspace satisfaction Sundstrom Herbert Brown 1982 increased distraction loss privacy Kaarlela-Tuomaala et al 2009 perceived performance decrement Brennan Chugh Kline 2002 relocation employees enclosed workplace open-plan less-enclosed workplace Increased focus nice perk tip iceberg many benefits consider pair programming improves design quality reduces defects reduces staffing risk enhances technical skills improves team communications considered enjoyable statistically significant levels Despite research haven seen study explicitly measures distraction levels open office environment combined pair programming find hard concentrate open office environment try pair programming someone see re still distracted may come realize open offices aren issue working alone open office issue Join email list bonus content Email address First Name Last Name distractionsfocusopen officepair programmingstudies Additional articles Reflect every mistake see ask interviewees speak code phone Post navigation Leave Reply Cancel reply email address published Required fields marked Name Email Website Comment may use HTML tags attributes href title abbr title acronym title b blockquote cite cite code class title data-url del datetime em q cite strike strong pre class title data-url span class title data-url Proudly powered WordPress Theme Fictive WordPress com'),
('write and manage notes (in Markdown) from the command line', "ian zapolsky dot com Projects Blog Resume last final May 13 2015 ian zapolsky hours leading last final exam college career hacking cramming final Operating Systems notoriously difficult class would surely contain tricky questions things like different use cases binary semaphores mutexes multi-level paging tables stuff genuinely interested spent previous two days assigned reading typing masterful study guide course used vim wrote study guide Markdown fast knew could make look good later need test drew near became anxious actually start studying study guide That's realized didn't good way quickly converting raw Markdown files clean readable documents command line I've used Mou nice parser lacks favorite features Github Flavored Markdown like fenced code blocks there's option simply pushing Markdown files Github reading that's pretty ineglegant two hours go test got obsessed idea easy way write notes Markdown view compiled HTML instantly without manually convert command line using tool like pandoc created marknotes custom solution everyday note taking built people spend lot time terminal Basically it's barebones Node Express js app exposed user via three simple executable shell scripts nn short new note creates new Markdown file marknotes directory opens editing nb short notebook starts Node app serves HTML versions Markdown notes opens app default browser vn short view notes opens marknotes directory Markdown notes stored vim easily edit delete existing notes add three commands PATH use time terminal greatly reducing time takes jot simple idea add item todo list read one existing notes you've added couple notes type nb bring app view browser hope someone gets use like good side projects designed marknotes far made process taking mainting notes way efficient Ian Zapolsky ianzapolsky gmail com ianzapolsky Ian Zapolsky things failing innovating enough - Elon Musk"),
('Atom combined with Light table', "Packages Themes Documentation Blog Discuss Sign hydrogen Run code get results inline using Jupyter kernels like IPython IJulia iTorch execute run jupyter ipython julia willwhitney 0 3 11 1 334 38 Repo Bugs Versions License Flag spam malicious Hydrogen package lets run code directly Atom using Jupyter kernels installed Hydrogen inspired Bret Victor's ideas power instantaneous feedback design Light Table Running code inline real time natural way develop bringing interactive style Light Table rock-solid usability Atom Hydrogen makes easy write code way want Features execute line selection block time rich media support plots images video completions running kernel like autocomplete Chrome dev tools one kernel per language run snippets several files namespace interrupt restart kernel anything goes wrong Dependencies systems you'll need ZeroMQ IPython notebook pip install ipython notebook Python 2 builds - still run Python 3 code operating system instruction set Please read save time OS X homebrew OS X pkg-config brew install pkg-config ZeroMQ brew install zeromq IPython Jupyter needs installed PATH pip install ipython notebook Windows ZeroMQ Windows You'll need compiler Visual Studio Community Edition recommended Python tread install Anaconda IPython notebook - installed Anaconda you're already done installed you'll likely need restart machine especially Visual Studio Linux Depending distribution you'll need install libzmq-dev libzmq3-dev favorite package manager Python pip setup install notebook directly pip install ipython notebook Installation Assuming followed dependencies steps apm install hydrogen recommended search hydrogen Install pane Atom settings default python 3 x need instead run PYTHON python2 7 apm install hydrogen still use 3 x versions Python Hydrogen build 2 x due longstanding issue gyp Kernels Tested works IPython IJulia iTorch IJavascript jupyter-nodejs IRkernel install Development version master necessary changes haven't gotten released binaries yet work kernel post issue anything broken Note install new kernel you'll need reload Atom search Command Palette reload Hydrogen find performance reasons Hydrogen looks available kernels first starts Usage Make sure start Atom command line atom directory file package work See Jank Running code Hydrogen adds command Hydrogen Run command palette you're text editor Press - -P open command palette type hydrogen it'll come Hydrogen Run command bound keyboard shortcut - - default two ways tell Hydrogen code file run Selected code code selected hit Run Hydrogen run exactly code Current block code selected Hydrogen try find complete block that's current line line you're already complete expression like abracadabra Hydrogen run line line you're start block like loop Hydrogen run whole block line you're blank Hydrogen run first block line It's easiest see interactions visually code starts getting cluttered results run Hydrogen Clear Results remove also run command - - Managing kernels Sometimes things go wrong Maybe you've written infinite loop maybe kernel crashed maybe want clear kernel's namespace Use command palette open Hydrogen Show Kernel Commands select Interrupt interrupt think Ctrl-C REPL kernel Restart kill kernel start new one clearing namespace also access commands clicking kernel status status bar looks like works Hydrogen implements messaging protocol Jupyter Jupyter formerly IPython uses ZeroMQ connect client like Hydrogen running kernel like IJulia iTorch client sends code executed kernel runs sends back results Jank order access PATH find IPython binaries Atom launched command line atom location launch Atom app package won't work Hydrogen Hydrogen atoms make 90 Jupiter volume Plus easy make logo doesn't look exactly like Ionic's Whoops think package bad news Good catch Let us know package looks wrong we'll investigate right away Terms Use Releases FAQ Roadmap Contact"),
('Call C functions from Haskell without bindings', "SchoolBlogHelpFeedback Login Call C functions Haskell without bindings 20 May 2015 Francesco Mazzoli Haskell language choice many problem domains scales ranging one-off scripts full scale web services fortunate 8 000 open source packages commercial ones besides available build practice Haskell programming real world involves interacting myriad legacy systems libraries Partially industry far older comparatively recent strength community still quality new high-performance libraries created every day languages Haskell intensive numerical codes frameworks shuffling bits across machines Today releasing inline-c package writing mixed C Haskell source code seamlessly invokes native foreign functions module FFI required joys programming foreign codeImagine found C library wish use project standard workflow check Hackage package set bindings library exists one program orif doesn't write bindings package using Haskell's FFI Writing maintaining bindings large C libraries hard work libraries constantly updated upstream bindings find invariably out-of-date providing partial coverage library's API sometimes don't compile cleanly latest upstream version C library need convoluted error-prone conditional compilation directives support multiple versions API package shame typically need perform specific task using C library using minute proportion API frustrating bindings package fail install binding function you'll never use doesn't match header files library version happen installed system especially true large libraries expose sets related orthogonal indepedently useful functions GTK OpenCV numerical libraries GNU Scientific Library GSL NAG IMSL inline-c lets call functions libraries using full power C's syntax directly client code without need monolithic bindings packages High-level bindings wrappers may still useful wrap low-level details idiomatic Haskell interface inline-c enables rapid prototyping iterative development code uses directly C library today keeping later task abstracting calls high-level type safe wrapper needed short inline-c let's pay go programming foreign code first developed inline-c use numerical libraries particular popular high quality commercial NAG library tasks including ODE solving function optimization interpolation getting seamless access gold standard fast reliable numerical routines need interested companion package work specifically NAG inline-c-nag taste inline-cWhat follows teaser done inline-c Please refer Haddock documentation README details use showcased features Let's say want use C's variadic printf function convenient string formats inline-c let's write function call inline without need binding foreign function - LANGUAGE QuasiQuotes - - LANGUAGE TemplateHaskell - import qualified Language C Inline C C include stdio h C include math h main IO main x - C exp int printf number 2f n cos 0 5 putStrLn show x characters printed Importing Language C Inline brings scope Template Haskell function include include C headers stdio h math h exp quasiquoter embedding expressions C syntax Haskell code Notice inline-c trouble even C functions advanced calling conventions variadic functions crucial point full power C available fingertips whatever shoe-horned FFI capture Haskell variables used C expression computing x mycos CDouble - IO CDouble mycos x C exp double cos double x anti-quotation double x indicates want capture variable x Haskell environment want type double C inline-c check compile time sensible type ascription also splice block C statements explicitly return result C include stdio h -- readAndSum n reads n numbers standard input returns -- sum readAndSum CInt - IO CInt readAndSum n x - C block int int sum 0 tmp 0 int n scanf d tmp sum tmp return sum print xFinally library provides facilities easily use Haskell data C example easily use Haskell ByteStrings C - LANGUAGE OverloadedStrings - - LANGUAGE TemplateHaskell - - LANGUAGE QuasiQuotes - import qualified Data ByteString BS import Data Monoid import Foreign C Types import qualified Language C Inline C import Text RawString QQ r C context C baseCtx C bsCtx -- Count number set bits 'BS ByteString' countSetBits BS ByteString - IO CInt countSetBits bs C block int int bits 0 0 bs-len bs unsigned char ch bs-ptr bs bits ch 01001001001ULL 042104210421ULL 017 return bits example use bs-len bs-ptr anti-quoters get length pointer Haskell ByteString inline-c modular design anti-quoters completely optional included on-demand C context invocation adds extra ByteStrings anti-quoters base set Similar facilities present easily use Haskell Vectors well invoking Haskell closures C code Larger examplesWe included various examples inline-c inline-c-nag repositories Currently they're geared toward scientific numerical computing would welcome contributions using inline-c fields instance gsl-ode hs great example combining strengths C strengths Haskell good effect use function C's GNU Scientific Library solving ordinary differential equations ODE solve Lorenz system take advantage nice Chart-diagrams Haskell library display x z coordinates example vec-ptr anti-quoter used get pointer mutable vector vec-ptr double fMut fMut variable type Data Storable Vector Mutable Vector CDouble Moreover fun anti-quoter used get function pointer Haskell function fun int funIO double const double y double dydt void params funIO Haskell function typeCDouble - Ptr CDouble - Ptr CDouble - Ptr - IO CIntNote anti-quoters apart ones one type allowed like vec-len bs-ptr force user specify target C type alternative would write Haskell type Either way type ascription unfortunately required due limitation Template Haskell choose C type annotations way user understand precisely state explicitly target type marshalling Note stage type annotations needed possible get type locally defined variables Template Haskell works hoodinline-c generates piece C code Template Haskell functions quasi-quoters function exports write C exp double cos double x C function gets generated double some_name double x return cos x function bound Haskell automatically generated FFI import declaration invoked passing right argument -- x variable Haskell environment types specified C automatically translated corresponding Haskell types generate correct type signatures Custom anti quoters vec-ptr vec-len handle C Haskell types independently example writing C block double int double res 0 vec-len xs res vec-ptr double xs return res we'll get function typedouble some_name int xs_len double xs_ptr Haskell side variable xs used conjuction code getting length underlying pointer passed arguments Building programs use inline-cThe C code inline-c generates stored file named like Haskell source file c extension using cabal enough specify generated C source eventual options C code executable foo main-is Main hs Foo hs Bar hs hs-source-dirs src -- corresponding C sources must listed every module -- uses C code example Main hs Bar hs -- Foo hs c-sources src Main c src Bar c -- flags passed C compiler cc-options -Wall -O2 -- Libraries link code extra-libraries -lm Note currently cabal repl supported C code compiled linked appropriately However cabal repl fail end trying load compiled C code means still use type check package developing compile manually could ghc -c Main hs cc -c Main c -o Main_c o ghc Foo hs ghc Bar hs cc -c Bar c -o Bar_c o ghc Main o Foo o Bar o Main_c o Bar_c o -lm -o MainExtending inline-cAs mentioned previously inline-c extended defining custom anti-quoters Moreover also tell inline-c C types beyond primitive ones operations done via Context data type Specifically Context contains TypesTable mapping C type specifiers Haskell types Map AntiQuoters baseCtx provided specifying mappings base C types Haskell types int CInt double CDouble Contexts composed using Monoid instance example vecCtx contains two anti-quoters vec-len vec-ptr using inline-c external libraries often define context dedicated said library defining TypesTable converting common types find library Haskell counterparts example inline-c-nag defines context containing information regarding types commonly using NAG scientific library See Language C Inline Context module documentation C supportOur original use case inline-c always C oriented However thanks extensible contexts possible build C support top inline-c dabbled inline-c-cpp way one mix C code Haskell source files reusing infrastructure inline-c provides invoking foreign functions Since inline-c generates C wrapper functions inline expressions one gets function bona fide C linkage wrap C call free Dealing C templates passing C objects conveniently manipulating Haskell next challenges C support need feel free contribute ongoing effort Wrapping upWe meant inline-c simple modular alternative monolithic binding libraries borrowing core concept FFI-less programming foreign code H project language-c-inline first cut releasing library community early hopes accelerate Haskell community's embrace quality foreign libraries exist alternative expending considerable resources reinventing libraries little benefit Numerical programming machine learning computer vision GUI programming data analysis come mind obvious areas want leverage existing quality code fact FP Complete using inline-c today enable quick access NAG roughly 1 6K function strong library large compute-intensive codebase hope see many use cases future Haskellers want thousand tell us new Stackage Server Call C functions Haskell without bindings PSA GHC 7 10 cabal Windows Distributing packages without sysadmin Secure package distribution ready roll Guest post Haskell Front Row Haskell Web Server 5MB Docker Image School Haskell 2 0 Update GHC 7 10 Stackage Announcing stackage-install Announcing stackage-upload Flame graphs GHC time profiles ghc-prof-flamegraph Announcing first release Stackage CLI Command Line Tools future School Haskell FP Haskell Center Announcing stackage-view Announcing monad-unlift Announcing LTS Long Term Support Haskell 2 Announcing open sourcing ide-backend MinGHC GHC 7 10 composable community infrastructure FP Complete's Hackage mirror Stackage GHC 7 10 update Announcing executable-hash Upcoming Stackage LTS 2 0 Hiring Systems Engineer Primitive Haskell FP Complete Hiring Test Engineers Commercial Haskell Special Interest Group FP Complete's software pipeline We're hiring Software Engineer Announcing mutable-containers 0 2 New Release New Year Announcing Release 3 2 Announcing LTS Haskell 1 0 GHC 7 10RC1 Stackage build results Stackage Survey results easier usage LTS Haskell 0 X Dropping GHC 7 4 support FP Haskell Center Backporting bug fixes Towards LTS Haskell Experimental package releases via Stackage Server Stackage server new features open source Seeking Haskell developer high performance distributed computing 3 1 release changes New Stackage features We're hiring Haskell web UI developer IAP conduit stream fusion IAP Speeding conduit Announcing Stackage Server FP Haskell Center Going Free vectorBuilder packed-representation yielding conduit Stackage Server GHC 7 8 transformers 0 3 lenient lower bounds heartbleed bug FP Haskell Center Calculating Minimum Variance Portfolio R Pandas IAP Monte carlo analysis Haskell Emacs API Call Entries Announcing FP Haskell Center Community Edition Feature Upgrades State Stackage August Competition Winners FP Haskell Center Launch Event 4 Days Left Get Beta User Discount Snap Happstack anything else FP Complete Announces Free Academic Accounts FP Haskell Center Beta Refresh IDE Stackage FP Complete Launches FP Haskell Competition 1 000 Cash Prize Month FP Haskell Center Beta Sign-Up Still Open Scheduled Activations Ongoing FP Haskell Center Beta Released Beta Accounts Activated FP Haskell Center Beta Demo FP Haskell Center Video Blog FP Haskell Center Beta Sign-Up Interim Web Site FP Complete Launches Haskell Real World Competition Haskell C Loops Learning Haskell Koans School Haskell Goes Public Case studies commercial Haskell use School Haskell Goes Beta Joining FP Complete I'm investing FP Complete Solving Global Software Crisis Designing Haskell IDE Yesod Tutorial 2 Playing Routes Links Yesod Tutorial 1 First Web Site commercial users want Haskell Functional Patterns C Ten Things Know Haskell Syntax 5-Day Haskell Course Joining forces advance Haskell Functor Pattern C Asynchronous API C Continuation Monad Downfall Imperative Programming It's time Functional Programming Please enable JavaScript view comments powered Disqus comments powered Disqus SchoolBlogHelpFeedbackLog Sign Copyright 2013-2014 FP Complete CORP rights reserved Licenses Terms Use Privacy Policy"),
('I stared into the fontconfig, and the fontconfig stared back at me', "fuzzy notepad Atom blog detailed thoughtful prose computers worst fascinating true facts truly code etc things made aid computers beep boop doodles i'm learning draw results cats house overrun best email like sending facebook message less facebook twitter follow bad nerd jokes yelling computers github mausoleum code i've ever written abandoned patreon force blog often dollars square cash plain give money don't know would Wed 20 May 2015 stared fontconfig fontconfig stared back Wow Patreon experiment successful enough m finally obliged write one post per month first post Let us celebrate post something near dear everyone heart fonts rather fontconfig fontconfig pretty impressive piece work re Linux probably thing picks default fonts handles Unicode fallback magically notices new fonts installed without restart anything invisible great unfortunately great wrong common GUI configuring fontconfig re stuck manually editing XML configuration files documentation atrocious Lucky unlucky twice delve rabbit hole story others may saved madness Trial First Monospace font falling back proportional Unicode glyph explained almost year ago live-tweeting exploration problem typed foo took screenshot stress cursor actually positioned second o definitely Konsole bug terminal text never allowed escape grid cursor absolutely get sync text got wondering know fact monospace font somewhere contains glyph ve seen fit perfectly well terminal Konsole falling back proportional font monospace font using time Source Code Pro relative newcomer Could related Hint yes hint use fc-match -s font get sorted list fonts fontconfig use fallback Let try Source Code Pro 1 2 3 4 5 6 7 8 9 10 fc-match -s 'Source Code Pro' SourceCodePro-Regular otf Source Code Pro Regular PowerlineSymbols otf PowerlineSymbols Medium SourceSansPro-Regular otf Source Sans Pro Regular SourceHanSansJP-Normal otf Source Han Sans JP Normal DejaVuSans ttf DejaVu Sans Book DejaVuSans ttf DejaVu Sans Book DejaVuSansExtraLight ttf DejaVu Sans ExtraLight DejaVuSans-Bold ttf DejaVu Sans Bold Something distinctly wrong list ll jump payoff unless told otherwise fontconfig assumes every font sans-serif turns nothing inherent particular font makes serif sans-serif monospace cursive whathaveyou purely human categorizations Manual human categorizations fontconfig actually ships configuration files assign generic family names hardcoded ultimately arbitrary set fonts part etc fonts conf d 45-latin conf 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 fontconfig -- Mark common families generics we'll get something reasonable -- -- Serif faces -- alias family Bitstream Vera Serif family default family serif family default alias alias family DejaVu Serif family default family serif family default alias alias family Liberation Serif family default family serif family default alias alias family Times New Roman family default family serif family default alias etc fonts conf d 49-sansserif conf contains fallback fonts yet assigned generic family 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 fontconfig -- font still generic name add sans-serif -- match target pattern test qual name family compare not_eq string sans-serif string test test qual name family compare not_eq string serif string test test qual name family compare not_eq string monospace string test edit name family mode append_last string sans-serif string edit match fontconfig preposterous unthinkable yet might even incredible d never noticed covering popular fonts works well enough Computers right Anyway tell fontconfig Source Code Pro actually monospace font stuck config fontconfig fonts conf 1 2 3 4 5 6 alias family Source Code Pro family default family monospace family default alias ran fc-cache absolutely nothing different Skipping past pain suffering turns actually anything special generic family names fontconfig doesn bat eye give two generic families font User configuration applies sans-serif fallback na ve approach ended Source Code Pro falling back sans-serif monospace solution thankfully fairly simple 1 2 3 4 5 6 7 8 9 10 11 12 -- default fontconfig assumes unrecognized font sans-serif -- -- fonts families fix -- -- note delete applies first match -- match test compare eq name family string sans-serif string test test compare eq name family string monospace string test edit mode delete name family match fontconfig XML-powered expression engine little weird pretty much looks like font claims sans-serif monospace families delete sans-serif family rendering fixed fc-match gave much sensible output 1 2 3 4 5 6 7 8SourceCodePro-Regular otf Source Code Pro Regular PowerlineSymbols otf PowerlineSymbols Medium SourceSansPro-Regular otf Source Sans Pro Regular SourceHanSansJP-Normal otf Source Han Sans JP Normal DejaVuSansMono ttf DejaVu Sans Mono Book DejaVuMonoSans ttf DejaVu Sans Mono Book DejaVuSansMono-Bold ttf DejaVu Sans Mono Bold also simpler solution occurred Like said Source Code Pro default monospace font done simple incantation 1 2 3 4 5 6 alias family monospace family prefer family Source Code Pro family prefer alias could ever refer monospace applications glyph missing fontconfig would look fallback monospace actual font claim want rather Source Code Pro first fallback fontconfig already selected Alas time terminal using Source Code Pro directly never realized might problem way wee bit robust though Trial Second Kill Comic Sans fonts happen installed fontconfig built-in defaults default cursive font ends Comic Sans see often tends crop say website tries use curly Windows-only font cursive fallback Enter Comic Neue moderately successful attempt bringing respectability Comic Sans Okay neat ll set default cursive font 1 2 3 4 5 6 alias family cursive family prefer family Comic Neue family prefer alias cursive text displaying Comic Sans Hm Well interesting six hours investigating finally discovered problem ready great Comic Neue doesn glyphs caret backtick Thus fontconfig decided didn full set English glyphs wasn appropriate use English text really grotesque solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 -- comic neue missing glyphs fontconfig thinks it's -- -- unsuitable english text oops fix forcibly -- -- font fixed rule good enough -- match test compare contains name lang string en string test test name family string cursive string test edit mode delete_all name lang edit mode prepend name family string Comic Neue string edit match e re looking font called cursive English text drop language requirement put Comic Neue beginning list Hacky work may also want dance Source Code Pro make Comic Neue fall back cursive fonts remove extra sans-serif family aside distinctly remember testing Firefox doesn work know m direly misremembering hallucinating fifteen year old bug complaining Firefox Linux doesn specify cursive fantasy CSS fonts fall back know something totally arbitrary Anyway fixed cracking open config adding font name cursive x-western pref value cursive Yes apparently Firefox doesn even use fontconfig cursive CSS cursive box swear year ago think m starting doubt perceptions reality intense font configuration one thing move let really go limb ensure never see Comic Sans anyone tries use explicitly substitute Comic Neue instead make bold default since Comic Neue regular weight way lighter Comic Sans 1 2 3 4 5 6 7 8 9 10 11 12 -- Replace Comic Sans Comic Neue bold -- match test name family string Comic Sans MS string test edit binding mode assign name family string Comic Neue string edit edit binding weak mode assign name style string Bold string edit match thought using weak binding would mean someone could explicitly ask light Comic Sans get light Comic Neue doesn seem working m actually trying fucking whatever right Comic Sans cares Trial Third Japanese fonts junk reason celebrating addition ruby furigana support Firefox went go show someone prior version fact support well noticed something else curious Compare screenshots page Firefox left versus Chrome right Firefox choice font looks like total ass wonder Okay surrounding font serif font naturally CSS fallback serif Firefox asking fontconfig serif Japanese font Lo behold fontconfig configuration spaghetti found etc fonts conf d 65-nonlatin conf 1 2 3 4 5 6 7 8 9 fontconfig alias family serif family prefer family MS Mincho family -- han ja -- family SimSun family -- han zh-cn zh-tw -- family PMingLiu family -- han zh-tw -- first Japanese serif font fontconfig prefers MS Mincho happen installed Microsoft core fonts package ll get back shortly Firefox dev tools confirmed ugly font used find bug fontconfig objecting ordering variety reasons doesn help much Anyway went hunting really nice Japanese fonts found two IPAMincho serif Source Han Sans JP sans-serif easy enough force preferred stuck preferred Western fonts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 alias family serif family prefer family Source Serif Pro family family IPAMincho family prefer alias alias family sans-serif family prefer family Source Sans Pro family family Source Han Sans JP family prefer alias Result Gorgeous Trial Fourth Fuck Helvetica process installing Source Han Sans one point accidentally put first causing even Roman text rendered ostensibly Japanese font actually looked uh really nice Really nice Like blown away gorgeous Python documentation used default sans-serif font suddenly looked Wow Way nicer expected fallback glyphs Japanese font looked turned glyphs ported pretty directly Adobe Western font Source Sans Pro already using Source Code Pro point strongly considering drinking Adobe font Kool-Aid configuration point suddenly struck gorgeous Twitter web interface looked comparison peek entire thing always rendering Arial caused perfect storm font shenanigans didn Helvetica installed isn fucking Mac Microsoft core fonts installed want say Steam Wine would either crash render text whatsoever couldn find particular Windows font fontconfig ships 30-metric-aliases conf file supplies font fallback rules fonts similar glyph shapes Helvetica fall back Arial Arial deliberately designed fill role font licensing Well fuck Helvetica doublefuck Arial installed Source Sans Pro Source Serif Pro set fixing posthaste 1 2 3 4 5 6 7 8 9 -- fuck helvetica -- match test name family string Helvetica string test edit binding mode assign name family string Source Sans Pro string edit match Twitter Web DAMN hot parting tips fc-cache force fontconfig pick changes -f fighting fontconfig never made difference far tell reason ever run sudo fc-cache -vf floating around Internet years seems apocryphal copy paste need flush root fontconfig cache unless re running GUI stuff root fc-match font tell font used practice might think fc-query d wrong fc-query primary use produce bizarre error messages accidentally use instead fc-match really fucking difficult figure font used specific glyph two approaches browser Make URL like 1data text html meta charset utf8 p style font-family monospace p pop open dev tools look tells fonts actually used Firefox Inspector dedicated fonts tab panel right Chromium Elements lists fonts bottom computed tab Fair warning one level removed fontconfig CSS font rules may interfere bit tried confirm new cursive font Firefox Another warning Firefox picks fontconfig changes less instantly fc-cache Chromium Worse Chromium seems outright ignore fontconfig feels like used sans serif Japanese font text styled serif also nonsense terminal 1DISPLAY 0 FC_DEBUG 4 pango-view --font monospace -t grep family pango-view tiny program pops open window containing text particular font FC_DEBUG environment variable make fontconfig spit mountains fucking text stdout grep cuts something little manageable likely last family see listed font actually used render favorite glyph re really curious match blocks work good news one thing fontconfig docs actually kind explain course etc fonts conf d probably full real-world practical examples haven put fontconfig font config rc git seems pretty specific desktop particular setup whole thing gist re interested Posted Eevee essay Wed 20 May 2015 linux fonts like write words show appreciation force write often throwing bucks Patreon illus Rumwik Comments Apologies part running static blog comments served Disqus's JavaScript slurry it's consolation you're probably missing much Recent Posts stared fontconfig fontconfig stared back enough Git less dangerous Sylph programming language want Starbound airlock Eevee gained 2269 experience points Categories 90 everything essay meta people personal project euler python faq quick nerd thing reference rescued twitter status thinking loud Tags systems rust media humor pyramid web pokemon dywypi gadgets creation veekun photos math japanese normal puzzles law follow along linux ruby flora tech stuff sanpera gotcha squiggle starbound culture raidne gender php identity python infosec perl intellectual property interfaces sylph fonts mozilla git 2011 2014 Eevee Alex Munroe Backgrounds Subtle Patterns Powered Pelican Source code"),
('OctoBadge - a cool badge you can embed on your site which displays Github stats and contribution history', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 4 Star 44 Fork 3 calvinfroedge octobadge-github-badge Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP OctoBadge - Unofficial Github Badge Display Data Github History 13 commits 1 branch 0 releases 1 contributor JavaScript 82 3 CSS 16 1 HTML 1 6 JavaScript CSS HTML branch master Switch branches tags Branches Tags master Nothing show Nothing show octobadge-github-badge Update README md latest commit 8c40ecc274 calvinfroedge authored May 23 2015 Permalink Failed load latest commit information dist Updated build added examples readme fixed contribution chart May 22 2015 gitignore Updated build added examples readme fixed contribution chart May 22 2015 Gulpfile js Updated build added examples readme fixed contribution chart May 22 2015 README md Update README md May 23 2015 badge-gh css Updated build added examples readme fixed contribution chart May 22 2015 badge js Updated build added examples readme fixed contribution chart May 22 2015 example html Updated build added examples readme fixed contribution chart May 22 2015 example_octo png Updated build added examples readme fixed contribution chart May 22 2015 example_octogeek png Updated build added examples readme fixed contribution chart May 22 2015 package json Updated build added examples readme fixed contribution chart May 22 2015 README md OctoBadge - Unofficial Github Badge Octo github-badge user username_here badge octo github-badge Octogeek github-badge user username_here badge octogeek github-badge comes hiring I'll take Github commit log resume day - John Resig Creator jQuery Display Cool Badge Shows Github Project Contributions put website blog display things Github profile Name Location Number followers Number repos Number stars Number gists Popular repositories number stars Languages you've written code number repos Installing include JS file closing body tag include CSS head section grab jsDelivr JS script src cdn jsdelivr net octobadge github 0 0 1 badge min js type text javascript script CSS link href cdn jsdelivr net octobadge github 0 0 1 badge min css rel stylesheet type text css use badge HTML github-badge user username_here badge octogeek github-badge Considerations badge requires loading data Github API uses browsing user's public API Github ratelimit 60 requests per hour badge makes API requests following User profile data name followers etc Repo data Needed see many stars user received Events data contribution graph users 3 API requests needed load data users many contributions repositories may require load data make sure users don't quickly use badge cache results API requests 1 day improve badge think service OAuth cache data Github's API allow served one request avoid unnecessary requests rate limits lot interest project next step needs done Testing I've tested Chrome Firefox Safari OSX far badge works Automated functional tests would nice don't think project good candidate unit testing convince otherwise would also cool badges design idea please reach see getting implemented Developing intentionally used vanilla JavaScript CSS make simple others contribute build minification run run npm install run gulp node 0 10 Future development want get involved feel free create issue may set IRC Slack channel future ideas Allow hiring inquiries badge Allow users follow directly badge logged Github Display private contribution data well public contribution data badge Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('The Twelve-Factor App', 'Twelve-Factor App Introduction modern era software commonly delivered service called web apps software-as-a-service twelve-factor app methodology building software-as-a-service apps Use declarative formats setup automation minimize time cost new developers joining project clean contract underlying operating system offering maximum portability execution environments suitable deployment modern cloud platforms obviating need servers systems administration Minimize divergence development production enabling continuous deployment maximum agility scale without significant changes tooling architecture development practices twelve-factor methodology applied apps written programming language use combination backing services database queue memory cache etc Background contributors document directly involved development deployment hundreds apps indirectly witnessed development operation scaling hundreds thousands apps via work Heroku platform document synthesizes experience observations wide variety software-as-a-service apps wild triangulation ideal practices app development paying particular attention dynamics organic growth app time dynamics collaboration developers working app codebase avoiding cost software erosion motivation raise awareness systemic problems ve seen modern application development provide shared vocabulary discussing problems offer set broad conceptual solutions problems accompanying terminology format inspired Martin Fowler books Patterns Enterprise Application Architecture Refactoring read document developer building applications run service Ops engineers deploy manage applications Twelve Factors Codebase One codebase tracked revision control many deploys II Dependencies Explicitly declare isolate dependencies III Config Store config environment IV Backing Services Treat backing services attached resources V Build release run Strictly separate build run stages VI Processes Execute app one stateless processes VII Port binding Export services via port binding VIII Concurrency Scale via process model IX Disposability Maximize robustness fast startup graceful shutdown X Dev prod parity Keep development staging production similar possible XI Logs Treat logs event streams XII Admin processes Run admin management tasks one-off processes zh_cn ja English en ko Written Adam Wiggins Last updated Jan 30 2012 Sourcecode Download ePub Book Privacy Policy'),
('Excellent Java Book', ''),
('java at 20: how it changed programming forever', "Trending App Dev Cloud Data Center Mobile Open Source Security Deep Dives Reviews Resources White Papers infoworld Popular Microsoft issues patch KB 3065979 fix Win7 GDI drawing problems brought KB 3045171 5 mobile management questions stop asking Identity management cloud goes beyond security Microsoft open-sources vintage Web services technology 7 things re looking Google O 2015 Objective-C past Swift future Search Search Suggestions Insider email Application Development Application Development C C Google Go Java JavaScript Node js Python Applications Applications Collaboration Software Mobile Apps Office Software Web Browsers Big Data Big Data Analytics Hadoop NoSQL Business Intelligence Cloud Computing Cloud Computing Cloud File Sharing IaaS PaaS SaaS Collaboration Computer Hardware Data Center Data Center Devops Disaster Recovery Systems Management Databases Careers Internet Things Mobile Technology Mobile Technology Android BYOD Mobile Development Mobile Device Management MDM iOS Networking Networking Network Tools SDN Wireless Local Area Network WLAN Open Source Software Operating Systems Operating Systems Linux Mac OS X Microsoft Windows Security Storage Virtualization See Technologies News Blogs Reviews Tech Watch Insider articles Newsletters Deep Dives Slideshows Video Job Search Resources White Papers Home Application Development Java 20 years Java Share Twitter Like Facebook Share LinkedIn 1 Google Email friend Use commas separate multiple email addresses Privacy Policy Thank message sent Sorry error emailing page Java 20 changed programming forever like Java 20 programming juggernaut rolls Swift vs Objective-C 10 reasons future favors Swift InfoWorld's 2015 Technology Year Award winners IDG Answers retrieve data lost Outlook address book creating shortcut Credit markito via pixabay Java synthesized sound ideas repackaging practical format turned generation coders Elliotte Rusty Harold Follow InfoWorld May 21 2015 RELATED TOPICS Java Application Development 20 years Java Java 20 programming juggernaut rolls Java 20 JVM Java's big legacy Java 20 successes failures future Java 20 changed programming forever Remembering programming world like 1995 easy task Object-oriented programming one accepted seldom practiced paradigm much passed so-called object-oriented programs little rebranded C code used instead printf class instead struct programs wrote days routinely dumped core due pointer arithmetic errors ran memory due leaks Source code could barely ported different versions Unix Running binary different processors operating systems crazy talk Java changed platform-dependent manually allocated procedural C code continue us next 20 years least Java proved choice requirement first time began writing real production code cross-platform garbage-collected object-oriented language liked millions us Languages come Java notably C clear new higher bar developer productivity Java established See InfoWorld's full coverage Java 20 programming juggernaut rolls JVM Java's big legacy successes failures future Keep hot topics app dev InfoWorld's Application Development newsletter James Gosling Mike Sheridan Patrick Naughton programmers Sun Green Project invent important technologies Java brought widespread use key features included known Oak found origins elsewhere base Object class classes descend Smalltalk Strong static type-checking compile time Ada Multiple interface single implementation inheritance Objective-C Inline documentation CWeb Cross-platform virtual machine byte code just-in-time compilation Smalltalk especially Sun Self dialect Garbage collection Lisp Primitive types control structures C Dual type system non-object primitive types performance C Java however pioneer new territory Nothing like checked exceptions present language since Java also first language use Unicode native string type source code Java core strength built practical tool getting work done popularized good ideas earlier languages repackaging format familiar average C coder though unlike C Objective-C Java strict superset C Indeed precisely willingness add also remove features made Java much simpler easier learn object-oriented C descendants Java still structs unions typedefs header files object-oriented language shackled requirement run legacy code didn need Similarly Java wisely omitted ideas tried found wanting languages multiple implementation inheritance pointer arithmetic operator overloading noticeably good taste beginning means even 20 years later Java still relatively free dragons warnings litter style guides predecessors rest programming world stood still Thousands programming languages risen since first started programming Java never achieved minuscule fraction collective attention eventually disappearing sold us Java applets small programs running inside Web pages could interact user display static text pictures forms Today doesn sound like much remember -- 1995 JavaScript DOM didn exist HTML form talked server-side CGI script written Perl state art irony applets never worked well completely isolated content page unable read write HTML JavaScript eventually could Security constraints prevented applets interacting local file system third-party network servers restrictions made applets suitable little simple games animations Even trivial proofs concept hampered poor performance early browser virtual machines time applets deficiencies corrected browsers front-end developers long since passed Java Flash JavaScript recently HTML5 caught eyes far effective platforms delivering dynamic Web content Java promised us failed deliver Still applets inspired us work Java discovered clean language smoothed many rough edges pain points d struggling alternatives C Automatic garbage collection alone worth price admission Applets may overhyped underdelivered didn mean Java wasn damn good language problems Originally intended cross-platform client library Java found real success server space Servlets Java Server Pages array enterprise-focused libraries periodically bundled together rebranded one confusing acronym another solved real problems us business Marketing failures aside Java achieved near-standard status departments around world Quick difference Java 2 Enterprise Edition Java Platform Enterprise Edition guessed J2EE successor JEE got exactly backward enterprise-focused products heavyweight side inspired open source alternatives supplements Spring Hibernate Tomcat built top foundation Sun set Arguably single important contribution open source Java wider craft programming JUnit Test-driven development TDD tried earlier Smalltalk However like many innovations language TDD achieve widespread notice adoption became available Java Kent Beck Erich Gamma released JUnit 2000 TDD rapidly ascended experimental practice programmers standard way develop software 21st century Martin Fowler said Never field software development much owed many lines code lines code written Java Twenty years since inception Java longer scrappy upstart become entrenched incumbent languages rebel Lighter-weight languages like Ruby Python made significant inroads Java territory especially startup community speed development counts robustness scale -- trade-off Java took advantage early days performance virtual machines severely lagged compiled code Java course standing still Oracle continues incorporate well-proven technologies languages generics autoboxing enumerations recently lambda expressions Many programmers first encountered ideas Java every programmer knows Java whether know every programmer today influenced Related articles Review big 4 Java IDEs compared Java forever 12 keys Java's enduring dominance Java vs Node js epic battle developer mind share RELATED TOPICS Java Application Development Elliotte Rusty Harold Elliotte Rusty Harold programming Java since version 1 0 alpha 2 recent books language JavaMail API Java Network Programming 4th edition O Reilly CIO 8 Free Online Courses Grow Tech Skills View Comments 20 years Java Previous Next Java 20 programming juggernaut rolls Java 20 JVM Java's big legacy Java 20 successes failures future Currently reading Java 20 changed programming forever Might Like Join discussion first comment article Commenting Policies Read Objective-C past Swift future far Swift soar Objective-C Let us count ways rise devops enterprise Intel's Gordon Moore amazed legacy Moore's Law Newsletters Sign receive latest news reviews trends favorite technology topics Get Daily News Newsletter Go Appboy -- Demo Traction on-stage presentation Appboy's on-stage presentation Demo Traction April 22 2015 Stanza -- Demo Traction on-stage presentation Stanza's on-stage presentation Demo Traction 2015 BrandPostLearn Sponsored Nuage Networks Top Four Things SDN Needs New Year Sponsored Fibre Channel Industry Association 16Gb Fibre Channel Eases Data Center Traffic Jams Resources White Paper Delivering Enterprise Value Service Management Video WebcastSponsored Flash MySQL Increase Performance Lower Costs Video WebcastSponsored Flash MySQL Increase Performance Lower Costs White Paper Four App Deployment Disasters Every Business Know White Paper Gartner Business Continuity 2015 Go Top Stories 9 movies get almost right Hollywood hackers often fail capture true triumphs -- mind-numbing drudgery -- Failing upward Apple Watch story far Based Jony Ive's promotion probably wouldn't wish Apple Watch's success worst enemy Learn data science new improved MOOCs recent enhancements get truly useful education Coursera ilk -- data Find right balance security usability Make sure security reduces burden users minimum required get security Sponsored Links Top 10 Reasons Enterprises Choose Veeam Jaspersoft AWS Cloud BI Starting Jaspersoft AWS Cloud BI Starting InfoWorld Follow us Application Development Applications Big Data Business Intelligence Cloud Computing Collaboration Computer Hardware Data Center Databases Careers Internet Things Mobile Technology Networking Open Source Software Operating Systems Security Storage Virtualization News Blogs Reviews Insider Resources Newsletters Us Contact Privacy Policy Advertising Careers IDG Site Map Ad Choices Copyright 1994 - 2015 InfoWorld Inc rights reserved Explore IDG Network descend CFOworld CIO CITEworld Computerworld CSO DEMO Fritterati Greenbot IDC IDG IDG Answers IDG Connect IDG Knowledge Hub IDG TechNetwork IDG TV IDG Ventures InfoWorld News ITwhitepapers ITworld JavaWorld LinuxWorld Macworld Network World PC World TechHive ad close 20 seconds Continue site"),
('Schmobile: The quickest way to spin up an html/css-based iOS UI', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 1 Star 5 Fork 0 GulchGroup schmobile Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP 4 commits 1 branch 0 releases Fetching contributors CSS 69 4 HTML 20 9 JavaScript 9 7 CSS HTML JavaScript branch master Switch branches tags Branches Tags master Nothing show Nothing show schmobile readme index edits latest commit 9a039c61c2 criator authored May 23 2015 Permalink Failed load latest commit information css clean May 22 2015 fonts initial schmobile commit May 22 2015 img clean May 23 2015 js clean May 23 2015 gitignore initial schmobile commit May 22 2015 404 html initial schmobile commit May 22 2015 README md readme index edits May 23 2015 gulpfile js initial schmobile commit May 22 2015 humans txt initial schmobile commit May 22 2015 index html readme index edits May 23 2015 package json initial schmobile commit May 22 2015 robots txt initial schmobile commit May 22 2015 README md Schmobile full front end ios html css dev environment 2 commands 3 count clone Schmobile boilerplate meant starting point frontend developers quickly get running It's meant serve starting point html-based app dev tools like Cordova React see anything think could improved submit PR Installation git clone git github com GulchGroup schmobile git download zip command line within root directory sudo npm install gulp Features Gulp integration Sass processing Sass minification Sass GZip JS lint Starts server Opens browser window server location Watches CSS HTML JS files changes reloads browser using Livereload Monitors logs errors console seamlessly Mixins Commonly used mixins Responsive functionality predefined mixins Basic file structure Fancy landing page docs coming soon Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('how do i make a bot that pms people?Chatango link not important', ''),
('The Unreasonable Effectiveness of Recurrent Neural Networks', "Andrej Karpathy blog Hacker's guide Neural Networks Unreasonable Effectiveness Recurrent Neural Networks May 21 2015 There's something magical Recurrent Neural Networks RNNs still remember trained first recurrent network Image Captioning Within dozen minutes training first baby model rather arbitrarily-chosen hyperparameters started generate nice looking descriptions images edge making sense Sometimes ratio simple model quality results get blows past expectations one times made result shocking time common wisdom RNNs supposed difficult train experience I've fact reached opposite conclusion Fast forward year I'm training RNNs time I've witnessed power robustness many times yet magical outputs still find ways amusing post sharing magic We'll train RNNs generate text character character ponder question even possible way together post also releasing code Github allows train character-level language models based multi-layer LSTMs give large chunk text learn generate text like one character time also use reproduce experiments we're getting ahead RNNs anyway Recurrent Neural Networks Sequences Depending background might wondering makes Recurrent Networks special glaring limitation Vanilla Neural Networks also Convolutional Networks API constrained accept fixed-sized vector input e g image produce fixed-sized vector output e g probabilities different classes models perform mapping using fixed amount computational steps e g number layers model core reason recurrent nets exciting allow us operate sequences vectors Sequences input output general case examples may make concrete rectangle vector arrows represent functions e g matrix multiply Input vectors red output vectors blue green vectors hold RNN's state soon left right 1 Vanilla mode processing without RNN fixed-sized input fixed-sized output e g image classification 2 Sequence output e g image captioning takes image outputs sentence words 3 Sequence input e g sentiment analysis given sentence classified expressing positive negative sentiment 4 Sequence input sequence output e g Machine Translation RNN reads sentence English outputs sentence French 5 Synced sequence input output e g video classification wish label frame video Notice every case pre-specified constraints lengths sequences recurrent transformation green fixed applied many times like might expect sequence regime operation much powerful compared fixed networks doomed get-go fixed number computational steps hence also much appealing us aspire build intelligent systems Moreover we'll see bit RNNs combine input vector state vector fixed learned function produce new state vector programming terms interpreted running fixed program certain inputs internal variables Viewed way RNNs essentially describe programs fact known RNNs Turing-Complete sense simulate arbitrary programs proper weights similar universal approximation theorems neural nets shouldn't read much fact forget said anything training vanilla neural nets optimization functions training recurrent nets optimization programs Sequential processing absence sequences might thinking sequences inputs outputs could relatively rare important point realize even inputs outputs fixed vectors still possible use powerful formalism process sequential manner instance figure shows results two nice papers DeepMind left algorithm learns recurrent network policy steers attention around image particular learns read house numbers left right Ba et al right recurrent network generates images digits learning sequentially add color canvas Gregor et al Left RNN learns read house numbers Right RNN learns paint house numbers takeaway even data form sequences still formulate train powerful models learn process sequentially You're learning stateful programs process fixed-sized data RNN computation things work core RNNs deceptively simple API accept input vector x give output vector y However crucially output vector's contents influenced input fed also entire history inputs you've fed past Written class RNN's API consists single step function rnn RNN y rnn step x x input vector y RNN's output vector RNN class internal state gets update every time step called simplest case state consists single hidden vector h implementation step function Vanilla RNN class RNN def step self x update hidden state self h np tanh np dot self W_hh self h np dot self W_xh x compute output vector y np dot self W_hy self h return y specifies forward pass vanilla RNN RNN's parameters three matrices W_hh W_xh W_hy hidden state self h initialized zero vector np tanh function implements non-linearity squashes activations range -1 1 Notice briefly works two terms inside tanh one based previous hidden state one based current input numpy np dot matrix multiplication two intermediates interact addition get squashed tanh new state vector you're comfortable math notation also write hidden state update h_ 1 tanh W_ hh h_t W_ xh x_t tanh applied elementwise initialize matrices RNN random numbers bulk work training goes finding matrices give rise desirable behavior measured loss function expresses preference kinds outputs y you'd like see response input sequences x Going deep RNNs neural networks everything works monotonically better done right put deep learning hat start stacking models like pancakes instance form 2-layer recurrent network follows y1 rnn1 step x y rnn2 step y1 words two separate RNNs One RNN receiving input vectors second RNN receiving output first RNN input Except neither RNNs know care - it's vectors coming going gradients flowing module backpropagation Getting fancy I'd like briefly mention practice us use slightly different formulation presented called Long Short-Term Memory LSTM network LSTM particular type recurrent network works slightly better practice owing powerful update equation appealing backpropagation dynamics won't go details everything I've said RNNs stays exactly except mathematical form computing update line self h gets little complicated use terms RNN LSTM interchangeably experiments post use LSTM Character-Level Language Models Okay idea RNNs super exciting work We'll ground fun application We'll train RNN character-level language models we'll give RNN huge chunk text ask model probability distribution next character sequence given sequence previous characters allow us generate new text one character time working example suppose vocabulary four possible letters helo wanted train RNN training sequence hello training sequence fact source 4 separate training examples 1 probability e likely given context h 2 l likely context 3 l also likely given context hel finally 4 o likely given context hell Concretely encode character vector using 1-of-k encoding e zero except single one index character vocabulary feed RNN one time step function observe sequence 4-dimensional output vectors one dimension per character interpret confidence RNN currently assigns character coming next sequence Here's diagram example RNN 4-dimensional input output layers hidden layer 3 units neurons diagram shows activations forward pass RNN fed characters hell input output layer contains confidences RNN assigns next character vocabulary h e l o want green numbers high red numbers low example see first time step RNN saw character h assigned confidence 1 0 next letter h 2 2 letter e -3 0 l 4 1 o Since training data next correct character e would want increase confidence green decrease confidence letters red common approach use cross-entropy loss function corresponds placing Softmax classifier every output vector correct class index next character sequence loss backpropagated RNN's weights updated correct next letters higher scores faced similar inputs Technical add RNN trained mini-batch Stochastic Gradient Descent like use RMSProp per-parameter adaptive learning rate stablilize updates Notice also first time character l input target l second time target o RNN therefore cannot rely input alone must use recurrent connection keep track context achieve task test time feed character RNN get distribution characters likely come next sample distribution feed right back get next letter Repeat process you're sampling text Lets train RNN different datasets see happens Fun RNNs 5 example character models trained code I'm releasing Github input case single file text we're training RNN predict next character sequence Paul Graham generator Lets first try small dataset English sanity check favorite fun dataset concatenation Paul Graham's essays basic idea there's lot wisdom essays unfortunately Paul Graham relatively slow generator Wouldn't great could sample startup wisdom demand That's RNN comes Concatenating pg essays last 5 years get approximately 1MB text file 1 million characters considered small dataset way Technical Lets train 2-layer LSTM 512 hidden nodes approx 3 5 million parameters dropout 0 5 layer We'll train batches 100 examples truncated backpropagation time length 100 characters settings one batch TITAN Z GPU takes 0 46 seconds cut half 50 character BPTT negligible cost performance Without ado lets see sample RNN surprised investors weren't going raise money I'm company time interesting quickly don't get programmers There's super-angel round fundraising different physical investment become people reduced startup way argument acquirer could see you're also founders part users' affords alternation idea 2 Don't work first member see way kids seem advance bad successful startup act big company Okay clearly unfortunately going replace Paul Graham anytime soon remember RNN learn English completely scratch small dataset including put commas apostrophes spaces also like learns support arguments e g 2 Sometimes says something offers glimmer insight company meeting think investors Here's link 50K character sample you'd like see Temperature also play temperature Softmax sampling Decreasing temperature 1 lower number e g 0 5 makes RNN confident also conservative samples Conversely higher temperatures give diversity cost mistakes e g spelling mistakes etc particular setting temperature near zero give likely thing Paul Graham might say thing startup thing startup thing startup looks like we've reached infinite loop startups Shakespeare looks like learn spell English words structure style data examine downloaded works Shakespeare concatenated single 4 4MB file afford train larger network case lets try 3-layer RNN 512 hidden nodes layer train network hours obtain samples PANDARUS Alas think shall come approached day little srain would attain'd never fed chain subjects death sleep Second Senator away miseries produced upon soul Breaking strongly buried perish earth thoughts many states DUKE VINCENTIO Well wit care side Second Lord would ruled chamber fair nues begun fact conveyed Whose noble souls I'll heart wars Clown Come sir make behold worship VIOLA I'll drink Remember RNN knows characters particular samples speaker's names contents Sometimes also get relatively extented monologue passages VIOLA Salisbury must find flesh thought aps man fire show reining raven wars grace hand reproach within fair hand Caesar goodly father's world heaven presence fleets spare hours cut thy council great Murdered thy master's ready power give thee much hell service noble bondman Would show wine KING LEAR O feeble sight courtesy law sight several breath wear gods heads hands wonder'd deeds drop upon lordship's head opinion Shall honour barely recognize samples actual Shakespeare like Shakespeare might appreciate 100 000 character sample course also generate infinite amount samples different temperatures provided code Wikipedia saw LSTM learn spell words copy general syntactic structures Lets increase difficulty train structured markdown particular lets take Hutter Prize 100MB dataset raw Wikipedia train LSTM Following Graves et al used first 96MB training rest validation ran models overnight Alex reports performance 1 67 Bits Per Character BPC 7-layer LSTM 700 nodes best model ended 3-layer LSTM 700 nodes achieving 1 57 BPC 7 epochs training I'm exactly sure accounts better performance Regardless sample Wikipedia articles fun excerpts First basic markdown output Naturalism decision majority Arab countries' capitalide grounded Irish language John Clair Imperial Japanese Revolt associated Guangzham's sovereignty generals powerful ruler Portugal Protestant Immineners could said directly Cantonese Communication followed ceremony set inspired prison training emperor travelled back Antioch Perth October 25 21 note Kingdom Costa Rica unsuccessful fashioned Thrales Cynth's Dajoard known western Scotland near Italy conquest India conflict Copyright succession independence slop Syrian influence famous German movement based popular servicious non-doctrinal sexual power post Many governments recognize military housing Civil Liberalization Infantry Resolution 265 National Party Hungary sympathetic Punjab Resolution PJS http www humah yahoo com guardian cfm 7754800786d17551963s89 htm Official economics Adjoint Nazism Montgomery swear advance resources Socialism's rule starting signing major tripad aid exile case wondering yahoo url doesn't actually exist model hallucinated Also note model learns open close parenthesis correctly There's also quite lot structured markdown model learns example sometimes creates headings lists etc cite journal id Cerling Nonforest Department format Newlymeslated none ''www e-complete'' '''See also''' List ethical consent processing See also Iender dome ED Anti-autism Religion Religion French Writings Maria Revelation Mount Agamul External links http www biblegateway nih gov entrepre Website World Festival labour India-county defeats Ripper California Road External links http www romanology com Constitution Netherlands Hispanic Competition Bilabial Commonwealth Industry Republican Constitution Extent Netherlands Sometimes model snaps mode generating random valid XML page title Antichrist title id 865 id revision id 15900676 id timestamp 2002-08-03T18 14 12Z timestamp contributor username Paris username id 23 id contributor minor comment Automated conversion comment text xml space preserve REDIRECT Christianity text revision page model completely makes timestamp id Also note closes correct tags appropriately correct nested order 100 000 characters sampled wikipedia you're interested see Algebraic Geometry Latex results suggest model actually quite good learning complex syntactic structures Impressed results labmate Justin Johnson decided push even structured territories got hold book algebraic stacks geometry downloaded raw Latex source file 16MB file trained multilayer LSTM Amazingly resulting sampled Latex almost compiles step fix issues manually get plausible looking math it's quite astonishing Sampled fake algebraic geometry Here's actual pdf Here's another sample hallucinated algebraic geometry Nice try diagram right see sometimes model tries generate latex diagrams clearly hasn't really figured also like part chooses skip proof Proof omitted top left course keep mind latex relatively difficult structured syntactic format haven't even fully mastered instance raw sample model unedited begin proof may assume mathcal abelian sheaf mathcal C item Given morphism Delta mathcal F mathcal injective let mathfrak q abelian sheaf X Let mathcal F fibered complex Let mathcal F category begin enumerate item hyperref setain-construction-phantom Lemma label lemma-characterize-quasi-finite Let mathcal F abelian quasi-coherent sheaf mathcal C Let mathcal F coherent mathcal O _X -module mathcal F abelian catenary mathcal C item following equivalent begin enumerate item mathcal F mathcal O _X -module end lemma sample relatively decent model illustrates common mistakes example model opens begin proof environment ends end lemma example problem we'd fix manually likely due fact dependency long-term time model done proof forgotten whether proof lemma Similarly opens begin enumerate forgets close observed became less common larger better models nonetheless kinds mistakes come Linux Source Code wanted push structured data limit final challenge decided use code particular took source header files found Linux repo Github concatenated single giant file 474MB C code originally going train kernel 16MB trained several as-large-as-fits-on-my-GPU 3-layer LSTMs period days models 10 million parameters still lower end RNN models results superfun Increment size file new incorrect UI_FILTER group information size generatively static int indicate_policy void int error fd MARN_EPT kernel blank coeld userspace ss- segment mem_total unblock_graph_and_set_blocked else ret 1 goto bail segaddr in_SB addr selector seg 16 setup_works true 0 blocks seq buf bpf bd- bd next search fd current blocked rw- name Getjbbregs bprm_self_clearl iv- version regs- new blocks BPF_STATS info- historidac PFMR_CLOBATHINC_SECONDS 12 return segtable code looks really quite great overall course don't think compiles scroll generate code feels much like giant C code base Notice RNN peppers code comments random also good making syntactic errors example uses strings properly pointer notation etc also opens closes brackets correctly learns indent code well common error can't keep track variable names often uses undefined variables e g rw declares variables never uses e g int error returns non-existing variables Lets see examples Here's another snippet shows wider array operations RNN learns error set need anything right BSD static void action_new_function struct s_stat_info wb unsigned long flags int lel_idx_bit e- edd sys unsigned long FIRST_COMPAT buf 0 0xFFFFFFFF bit 4 min inc slist- bytes printk KERN_WARNING Memory allocated 02x 02x original MLL instead n min min multi_run - s- len max num_data_in frame_pos sz first_seg div_u64_w val inb_p spin_unlock disk- queue_lock mutex_unlock s- sock- mutex mutex_unlock func- mutex return disassemble info- pending_bh static void num_serial_settings struct tty_struct tty tty tty disable_single_st_p dev pci_disable_spool port return 0 static void do_command struct seq_file m void v int column 32 cmd 2 0x80 state cmd int int_state in_8 ch- ch_flags Cmd 2 1 else seq 1 0 16 k 1 1 pipe in_use UMXTHREAD_UNCCA count 0x00000000fffffff8 0x000000f 8 count 0 sub pid ppc_md kexec_handle 0x20000000 pipe_set_bytes 0 Free user pages pointer place camera dash subsystem_info of_changes PAGE_SIZE rek_controls offset idx soffset want deliberately put device control_check_polarity context val 0 0 COUNTER seq_puts policy Notice second function model compares tty tty vacuously true hand least variable tty exists scope time last function notice code return anything happens correct since function signature void However first two functions also declared void return values form common mistake due long-term interactions Sometimes model decides it's time sample new file usually amusing part model first recites GNU license character character samples includes generates macros dives code Copyright c 2006-2010 Intel Mobile Communications rights reserved program free software redistribute modify terms GNU General Public License version 2 published Free Software Foundation program distributed hope useful WITHOUT WARRANTY without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE See GNU General Public License details received copy GNU General Public License along program write Free Software Foundation Inc 675 Mass Ave Cambridge MA 02139 USA include linux kexec h include linux errno h include linux io h include linux platform_device h include linux multi h include linux ckevent h include asm io h include asm prom h include asm e820 h include asm system_info h include asm setew h include asm pgproto h define REG_PG vesa_slot_addr_pack define PFM_NOCOMP AFSR 0 load define STACK_DDR type func define SWAP_ALLOCATE nr e define emulate_sigs arch_get_unaligned_child define access_rw TST asm volatile movd esp 0 3 r 0 __type DO_READ static void stat_PC_SEC __read_mostly offsetof struct seq_argsqueue pC 1 static void os_prefix unsigned long sys ifdef CONFIG_PREEMPT PUT_PARAM_RAID 2 sel get_state_state set_pid_sum unsigned long state current_state_str unsigned long -1- lr_full low many fun parts cover- could probably write entire blog post part I'll cut short 1MB sampled Linux code viewing pleasure Understanding what's going saw results end training impressive work Lets run two quick experiments briefly peek hood evolution samples training First it's fun look sampled text evolves model trains example trained LSTM Leo Tolstoy's War Peace generated samples every 100 iterations training iteration 100 model samples random jumbles tyntd-iafhatawiaoihrdemot lytdws e tfti astai f ogoh eoase rrranbyne 'nhthnee e plia tklrgd o idoe ns smtt h ne etie h hregtrs nigtike aoaenns lng However notice least starting get idea words separated spaces Except sometimes inserts two spaces also doesn't know comma amost always followed space 300 iterations see model starts get idea quotes periods Tmont thithey fomesscerliund Keushey Thom sheulke anmerenith ol sivh lalterthend Bleipile shuwy fil aseterlome coaniogennc Phe lism thond hon MeiDimorotion ther thize words also separated spaces model starts get idea periods end sentence iteration 500 counter stutn co des stanted one ofler concossions gearang reay Jotrets fre colt otf paitt thin wall das stimn model learned spell shortest common words etc iteration 700 we're starting see English-like text emerge Aftair fall unsuch hall Prince Velzonski's hearly behs arwage fiving beloge pavu say falling misfort Gogition overelical ofter iteration 1200 we're seeing use quotations question exclamation marks Longer words learned well Kite vouch repeated door would done quarts feeling son people last start get properly spelled words quotations names iteration 2000 day replied Natasha wishing fact princess Princess Mary easier fed oftened Pierre aking soul came packs drove father-in-law women picture emerges model first discovers general word-space structure rapidly starts learn words First starting short words eventually longer ones Topics themes span multiple words general longer-term dependencies start emerge much later Visualizing predictions neuron firings RNN Another fun visualization look predicted distributions characters visualizations feed Wikipedia RNN model character data validation set shown along blue green rows every character visualize red top 5 guesses model assigns next character guesses colored probability dark red judged likely white likely example notice stretches characters model extremely confident next letter e g model confident characters http www sequence input character sequence blue green colored based firing randomly chosen neuron hidden representation RNN Think green excited blue excited familiar details LSTMs values -1 1 hidden state vector gated tanh'd LSTM cell state Intuitively visualizing firing rate neuron brain RNN reads input sequence Different neurons might looking different patterns we'll look 4 different ones found thought interesting interpretable many also aren't neuron highlighted image seems get excited URLs turns outside URLs LSTM likely using neuron remember inside URL highlighted neuron gets excited RNN inside markdown environment turns outside Interestingly neuron can't turn right sees character must wait second activate task counting whether model seen one two likely done different neuron see neuron varies seemingly linearly across environment words activation giving RNN time-aligned coordinate system across scope RNN use information make different characters less likely depending early late scope perhaps another neuron local behavior relatively silent sharply turns right first w www sequence RNN might using neuron count far www sequence know whether emit another w start URL course lot conclusions slightly hand-wavy hidden state RNN huge high-dimensional largely distributed representation Source Code hope I've convinced training character-level language models fun exercise train models using char-rnn code released Github MIT license takes one large text file trains character-level model sample Also helps GPU otherwise training CPU factor 10x slower case end training data getting fun results let know Brief digression code written Torch 7 recently become favorite deep learning framework I've started working Torch LUA last months hasn't easy spent good amount time digging raw Torch code Github asking questions gitter get things done get hang things offers lot flexibility speed I've also worked Caffe Theano past believe Torch perfect gets levels abstraction philosophy right better others view desirable features effective framework CPU GPU transparent Tensor library lot functionality slicing array matrix operations etc entirely separate code base scripting language ideally Python operates Tensors implements Deep Learning stuff forward backward computation graphs etc possible easily share pretrained models Caffe well others don't crucially compilation step least currently done Theano trend Deep Learning towards larger complex networks time-unrolled complex graphs critical compile long time development time greatly suffers Second compiling one gives interpretability ability log debug effectively Reading end post also wanted position RNNs wider context provide sketch current research directions RNNs recently generated significant amount buzz excitement field Deep Learning Similar Convolutional Networks around decades full potential recently started get widely recognized large part due growing computational resources Here's brief sketch recent developments definitely complete list lot work draws research back 1990s see related work sections domain NLP Speech RNNs transcribe speech text perform machine translation generate handwritten text course used powerful language models Sutskever et al Graves Mikolov et al level characters words Currently seems word-level models work better character-level models surely temporary thing Computer Vision RNNs also quickly becoming pervasive Computer Vision example we're seeing RNNs frame-level video classification image captioning also including work many others video captioning recently visual question answering personal favorite RNNs Computer Vision paper Recurrent Models Visual Attention due high-level direction sequential processing images glances low-level modeling REINFORCE learning rule special case policy gradient methods Reinforcement Learning allows one train models perform non-differentiable computation taking glances around image case I'm confident type hybrid model consists blend CNN raw perception coupled RNN glance policy top become pervasive perception especially complex tasks go beyond classifying objects plain view Inductive Reasoning Memories Attention Another extremely exciting direction research oriented towards addressing limitations vanilla recurrent networks One problem RNNs inductive memorize sequences extremely well don't necessarily always show convincing signs generalizing correct way I'll provide pointers bit make concrete second issue unnecessarily couple representation size amount computation per step instance double size hidden state vector you'd quadruple amount FLOPS step due matrix multiplication Ideally we'd like maintain huge representation memory e g containing Wikipedia many intermediate state variables maintaining ability keep computation per time step fixed first convincing example moving towards directions developed DeepMind's Neural Turing Machines paper paper sketched path towards models perform read write operations large external memory arrays smaller set memory registers think working memory computation happens Crucially NTM paper also featured interesting memory addressing mechanisms implemented soft fully-differentiable attention model concept soft attention turned powerful modeling features also featured Neural Machine Translation Jointly Learning Align Translate Machine Translation Memory Networks toy Question Answering fact I'd go far say concept attention interesting recent architectural innovation neural networks don't want dive many details soft attention scheme memory addressing convenient keeps model fully-differentiable unfortunately one sacrifices efficiency everything attended attended softly motivated multiple authors swap soft attention models hard attention one samples particular chunk memory attend e g read write action memory cell instead reading writing cells degree model significantly philosophically appealing scalable efficient unfortunately also non-differentiable calls use techniques Reinforcement Learning literature e g REINFORCE people perfectly used concept non-differentiable interactions much ongoing work hard attention models explored example Inferring Algorithmic Patterns Stack-Augmented Recurrent Nets Reinforcement Learning Neural Turing Machines Show Attend Tell People you'd like read RNNs recommend theses Alex Graves Ilya Sutskever Tomas Mikolov REINFORCE generally Reinforcement Learning policy gradient methods REINFORCE special case David Silver's class one Pieter Abbeel's classes Code you'd like play training RNNs hear good things keras passage Theano code released post Torch gist raw numpy code wrote ago implements efficient batched LSTM forward backward pass also look numpy-based NeuralTalk uses RNN LSTM caption images maybe Caffe implementation Jeff Donahue Conclusion We've learned RNNs work become big deal we've trained RNN character-level language model several fun datasets we've seen RNNs going confidently expect large amount innovation space RNNs believe become pervasive critical component intelligent systems Lastly add meta post trained RNN source file blog post Unfortunately 46K characters haven't written enough data properly feed RNN returned sample generated low temperature get typical sample I've RNN works computed program RNN computed RNN code Yes post RNN well works clearly works See next time EDIT extra links Discussions HN discussion Reddit discussion r machinelearning Reddit discussion r programming Replies Yoav Goldberg compared RNN results n-gram maximum likelihood counting baseline Jo o Felipe trained char-rnn irish folk music sampled music Bob Sturm also trained char-rnn music ABC notation RNN Bible bot Maximilien Please enable JavaScript view comments powered Disqus comments powered Disqus Andrej Karpathy blog karpathy karpathy Musings Computer Scientist"),
('How We Use Microservices And Event Sourcing To Instantly Connect Calls', "Speak Startup Journal Use Microservices Event Sourcing Instantly Connect Calls Luke Roberts team worked together various projects communication collaboration space ve definitely made mistakes ve also learned lot post overview re differently tech stack importantly every developers dream work completely greenfield project without baggage long lost constraints legacy code especially true still bonus two years worth data bunch house libraries specifically tasks application need also specific constraints goals outlined measure success failure new technology architecture choices still early days empirical data success decisions yet surface far according developers signs good Building real time app wrong way previous architecture consisted HTML CSS JS client iOS client three backend applications based fairly typical Ruby Rails setup well REST API - Used third-party integrations clients Website - sign account management marketing Admin Control Panel - internal use Although degree separation application instance level real terms architecture still fairly monolithic three applications shared code via ruby gems well common resources databases caching layers best practices approach well documented ton great resources available top managing dependencies providing new engineers completely functional development environment really simple used Ansible build virtual machine development simply case running git clone bundle install long knew ruby running however several problems Since using monolith needed framework would work broadest range use cases Rails fantastic fit prerequisite however constantly forcing real time asynchronous aspects application work traditional REST web request response format top HTTP also needed websockets push events client numerous libraries integrating websockets Rails simple truth Rails Heroku simply aren designed long-lived connections mind ActiveRecord approach easy maintain state world lot historical data lost confronted error bug report often easy understand problem less came example know user missing attribute much difficult find actions took place created state well unique design issues real-time platform numerous workflow operational issues wanted address Speak Running full test suite took upwards 10 minutes Deployments closer 15 minutes Development boot time approaching minute Even small changes required deployment entire application dependency redis memcache dependency everyone everything haystack large tracking bugs often difficult Conflicts front backend developers common Solution - Micro services Event Sourcing Speak SOA Service Orientated Architecture approach taken next level largely inspired talk given Chris Richardson chosen use technique called event sourcing Event sourcing relatively old simple idea profoundly changes way one thinks building web based application Rather storing state record state got means replay state changes get specific point time present state world practical example implement presentation great place start ve called central event store timber it's log see every event change ever happened system several services subscribe events changes interested publish events back event store distributed interested parties overview architecture looks something like current breakdown services follows Bulldog User sign authentication Socks Holds websocket connections desktop clients Karaoke Handles data business logic largest service plan break Admin Internal administration inspection tools Twoface WebRTC signalling MCU stack audio connections RabbitMQ - glue holds together chose RabbitMQ interservice communication number reasons First foremost mature platform fantastic support across languages developer arsenals also famously fast Another interesting aspect queue based messaging systems depending service type load balancing comes free simply spin another listener almost zero configuration start handling events concurrently allows us scale exactly throughput needed waste resource usage WebRTC MCU stack final piece shiny new stack media server layer written Golang C may may know use WebRTC technology stack media communications WebRTC based peer peer connections fantastic one one calls media usually taking direct route recipient approach however doesn scale larger conference calls client upload media twice upload bandwidth soon becomes saturated solution use MCU Multipoint Control Unit server create p2p connection server entirely reengineered MCU stack based event sourcing architecture asynchronous nature handling emitting events suits type application incredibly well operations vary execution time massively dependent network end user responses Although incredible tech team size build communication VOIP tool quickly still relatively new arena emerging standards best practices brand new likely subject post future Biggest Wins - Speed Concurrency Parallelization architecture allows app run much faster fairly obvious service potentially whole machine use languages frameworks optimized specific task biggest win surprisingly development workflow Prior development plan events emitted subscribed implement smallest simplest solution service without need complex shared dependencies service worked parallel without conflicts services increased team throughput allowed developers work domain suits strength service small well scoped much easier justify using specific tools task side benefit developer moves new language platform scope much smaller means sharing knowledge becomes far less daunting Docker rescue ve fixed lot problems highlighted earlier post app running quickly reliably fast builds deploys said onboarding new developers much complex running entire system requires understanding system whole fix jumped docker bandwagon Using docker-compose previously known fig re back single build run command exciting part docker compose machine swarm tools reach next level maturity simply push development containers production alleviate lot provisioning work re currently Ansible Conclusion Micro Services Event Sourcing definitely complex simple REST API require thought upfront bit prior planning worked well us improved code quality developer throughput app performance means comprehensive thesis hope helps identify ideas may help real time web projects tried working event sourcing d love hear comments section dc4a2e Luke Roberts's Picture author I'm UK based engineer Speak Besides coding like shred guitar snowboard Follow Twitter Share post Twitter Facebook Google Weekly Newsletter You'll receive weekly email great content around business productivity design Please enable JavaScript view comments powered Disqus comments powered Disqus Speak 2015 Slidebox"),
('Programmers: 4 ways your boss or client puts pressure on you and how to react', 'deen Toggle navigation HomeTopicsTeamCustomersContactBookBlog Technik Trends News Blog HomeTopicsTeamCustomersContactBookBlog Business ProjectsProgrammers 4 ways boss client puts pressure react 23 May 2015 Autor marcobehler Back Overview 0 Another day office Another day boss-storms-into-the-room-with-a-crazy-feature-request even properly listen actual feature request anymore Marketing desperately needs feature blah blah blah take much time mean already existing libraries right Plus guys super smart need ultra fast first-to market three weeks Need reliable estimate go live hour Bye see tricks maybe even unknowingly boss pulling Hold breath minuteThat feature request might seem bit hyperbolic even though seen ton variations like real life customer scenarios displays every warning flag programmer need recognize immediately push back blindly accept jabs thrown Let us look warning sign turn appeal existing solutions already existing libraries solutions one actually double-edged sword one hand astounding number developers tends reinvent wheel shy away shelf solutions Registering logging users Let write new user management scratch way almost seems obvious looking word developer instead maintainer hand gets equally counter-productive business suddenly decides somehow 100 know already existing easily custom-fitted solutions might even programmed something similar already existing duplicating effort integration cannot hard matter many libraries exist many similar requirements already implemented overlap functionality re-use seen proper requirements work reply tell careful analysis requirement deconstruction useful existing libraries solutions going appeal ego guys super smart one tricky fell prey twice beginning career maybe still wary someone suddenly starts stroke ego especially dangerous freelancer agency client tries pull client simply wants save money appealing ego alleged rock-star skills literally bake pizza 30 seconds instead usual 10-12 minutes smart big problem agree estimate nevertheless need usual 10 minutes almost promise ego go crawling back client go sorry smart took 10x longer reply complexity requirement unfortunately nothing super smartness Sure promise fresh Italian pizza one minute probably would like oven bit longer wouldn Hey said 4 signs last two recognize Alright go Appeal First Market need fast three weeks Appeal Engineering Prowess Need reliable estimate possible go-live hour Dum Dum Cliffhanger Sorry tease article already getting rather long talk remaining two much detail upcoming book Customer Requirements EAP starting 30 05 2015 Next Step Head book page judge Constructive feedback positive negative always welcome Otherwise stay tuned next articles requirements series miss Want receive news make better programmer help manage projects better Sign newsletter First Name Email Address required field autor Back Overview 0 Recent Posts Programmers 4 ways boss client puts pressure react Announcing E-Book Customer Requirements programmer road productivity Step 2 Battling assumptions Programmer Road Productivity Step 1 Deconstruction Requirements Programmer productivity starts requirements tools Stay connectedMarcoBehler twitterMarcoBehler GitHub comments MARCO BEHLER GmbHZittelstrasse 480796 M nchen 2014 MARCO BEHLER GmbH rights reserved Imprint Disclaimer'),
('How Older Programmers Can Stay Valuable', "Toggle navigation Home Vision Services Change value proposition experience valuable April 14 2015April 14 2015 Miguel Gonzalez master-your-success first considered wanted career thought wanted focus sort technology wizard wanted see far technical expert company would take thought team lead management role couldn see coding daily basis much less weeks time years passed held belief fought tooth nail seemed natural progression career Eventually people around started telling good leader good architecting solution problems brought lot valuable experience table dabbled management leading projects teams wasn really sold first thought found really didn hate much thought would fact really enjoyed felt good helping others making technical decisions mentoring coworkers leading development projects teams ve embraced find great enjoyment satisfaction every year getting harder compete developers coming college past years ve come accept something denying every year getting harder compete developers coming college even harder compete new generation programmers unlike ve grown computers lives new developers coding since grade school Recently went speak group middle school students starting coding club blown away already knew computer programming types questions asking didn even computer freshman year college ve realized late career value proposition changed longer produce pounding keyboard day experience m coming 20 years professional software development time ve done really cool stuff ve learned lot new interesting tools technologies process really important ve gone wrong path two three four times tools technologies processes seemed right choice ended quite right one reason another nothing technology part even valuable ve accomplished ve done seen others lot things wrong way ve gone wrong path two three four times tools technologies processes seemed right choice ended quite right one reason another nothing technology ve experienced things ve learned ve learned everything shiny new right team project even articles ve read say time speak happy paths touch difficult use cases scenarios Maybe deployment support maintenance stories quite ideal situation Maybe makeup team charge maintaining product ready particular technology tool process Maybe cost maintaining certain solution client willing spend experiences foresight give extremely valuable project client employer certain point gets harder harder negotiate higher salary based ability code time ve noticed gets harder harder negotiate higher salary based ability code point reach ceiling company willing pay coding hard get beyond far employer concerned could pay mid senior level developer three quarters much exactly thing point leverage experience use differentiate others code well Start working project management architectural leadership skill set apart developers give whole new component value bring table bargain ve progressed career ve learned love person answers questions architects solutions leads teams developers m longer addicted immediate gratification slinging code living say love coding anymore ve done almost two decades m ready take new challenge Whenever find need coding fix find something side fulfill need found like new role lot ever thought would early career m glad listened people encouraged embrace Related Articles Start something re passionate Tame email distraction inbox zero believe hype mindful gap title skill set Getting things done workflow Post Footer automatically generated Add Post Footer Plugin wordpress Yes want get 5 Secrets Programmer's Dream Career free launch career high gear First Name Email learnings soft skills Miguel Gonzalez Miguel designed developed managed dozens software projects clients wide variety industries including emergency management media insurance real estate logistics marketing education retail process gained valuable experience building highly available high bandwidth applications passion robust precise efficient software development recent focus leading development distributed scalable applications several top tier clients Post navigation 9 ways advance career core valuesDon believe hype mindful gap title skill set Blogroll Devin Rose TalkingInCode com Andrew Siemer LosTechies com Andrew Siemer AndrewSiemer com Andrew Siemer SiemerForHire com Andrew Siemer FriendlyPastures com Miguel Gonzalez Compile Recent Posts Level Programming Skills Connections Volunteering Writing Resumes Work Programmer Guide Dealing Back Pain Setting clear goals help guide career decisions Jack Trades Master Something portfolio manager employee Follow mentor grow become mentor succeed Build career retrospectively Put find opportunities Start something re passionate Tame email distraction inbox zero believe hype mindful gap title skill set Change value proposition experience valuable 9 ways advance career core values Assume responsibility ownership take everything seriously Dont TEAM Live company culture every day Focus Technical Skills TagsAWE-some back pain blogging brand career advice cat herding community core-values courage discover establish goals interviews inventories leadership learnings nerd status passion personality platform platforms presence priorities programming languages refine relationships resume self-knowledge soft skills technical roles technology time management Recent CommentsChris Karcher Level Programming Skills Connections VolunteeringBen Hynum Level Programming Skills Connections VolunteeringDevin Rose Programmer Guide Dealing Back PainDevin Rose Programmer Guide Dealing Back PainDerik Whittaker Programmer Guide Dealing Back PainArchives May 2015 5 April 2015 30 Categories advance-towards-your-goals 12 career-advice 1 career-mistakes 2 discover-who-you-are 3 establish-your-presence 7 life-as-a-programmer 1 master-your-success 5 refine-your-goals 3 Uncategorized 1 Meta Log Entries RSS Comments RSS WordPress org Developer Springboard rights reserved Theme Colorlib Powered WordPress"),
('Oblique Strategies: Prompts for Programmers', "Kevin Lawler Work Articles Notes Talks Oblique Strategies Prompts Programmers 2015 04 13 Brian Eno created collection strategies help artists break creative block something similar programmers Eno's strategies designed drawn random strategies drawn random perhaps via script sort order make easier read Experienced Approaches Look hack short-circuit complex algorithm short-circuit complex requirement Probably could build hacky PageRank without knowing anything linear algebra kind shortcuts look first learning program you've forgotten feeling set impossible task weekend Get much done solely cutting corners Hacks often become excellent long-term solutions can't build top hacked area assumption may never hack inexpensive attempt keep momentum Look good enough approximation Relax problem wherever possible Remove inessential requirements find Seemingly inconsequential unrelated relaxations way giving exactly leverage need solve problem hand practice eventual consistency database design good illustration technique technique long reach Sometimes make restrictions elsewhere filter back problem Don't shy away informal solutions like hacks approximations formal solution heavy work better save effort appease sense order world resists elegant solutions places faith sound-looking abstractions Novel combinations known high-level strategies almost always work Trust you'll able work details fitting parts together parts fit there'll fewer details handle solved problem primitive techniques example would using regexes lex tokens There's guarantee newcomer using regexes won't lead inescapable problem yet little mortar regexes work great Forget optimizing code time unoptimized code fine It's also lot easier write Say create New File txt directory without overwriting existing New Files Don't spend lot time figuring fairly complicated first available name algorithm Simply append number end New File get New File 1 check increment name available method work long time degrades gracefully ever becomes problem go back fix One caveat company enough users optimizations may necessary start Check usage data make determination can't break habit chasing optimizations Leave comment like POTENTIAL_OPTIMIZATION_POINT description go optimization cures urge optimize done find go back act maybe 1 20 Solve problem directly Pierce right center problem reduces simple combination known mathematical objects direct mathematical approach may best way solve Reddit needs rank stories based votes time Various mathematical expressions solve complicated expressions involving exponential decay use relatively simple one involving logarithm fact almost formula work See remark PageRank don't show formula clear easy follow investment envision instead arriving closed formula team produces substantially longer convoluted algorithm creates maintenance headaches direct math solution much less accessible yet still solve problem efficiently cases fight direct solution it's really true way long run math way right choice even everybody feels comfortable cuts knot Direct solutions always right way go things One misuse particular might call lazy man's load LAZY MAN'S LOAD Lazy people frequently take safely carry save trouble coming second time Francis Grose's Dictionary Vulgar Tongue 1811 context take mean problem solved directly order avoid theory building misapplication Feats fragile complicated solution mercilessly detailed though correct prove problem admits nothing less complicated Chances correct fragile use must resolve accept limited formulation problem easier identify situations happened several times trickier solution smaller pool people able maintain people could maintain would want Even Google many brilliant programmers admits defeat problems time time Build theory problem opposite solving problem directly exactly schools mathematicians companies take approach already without knowing parallel Simplify problem layers like onion Results ripen tree patiently gardening fall right time juicy weight Leila Schneps said Alexander Grothendieck Radix sort uses series filters lesser lesser coarseness Sorting piles stones big small piles recursing similar methods like lengthening lever go longer distance less work given point Taken far theory building approach creates cruft also form procrastination twin direct solution Shear layer Many problems separable layers Parsing reduced series passes subsection theory building worthy mention Get red green right mixing yellow combine two separates pieces bigger conglomeration tempting build entire thing one go reasoning naive reasoning building everything together saves time hope avoid rebuilding pieces don't fit Two important facts make reasoning wrong first added complexity building everything slows completion every part dragging overall completion rate second solving problem twice doesn't take twice long Solving problem much faster essentially free Try book puzzles it's easy phenomenon mathematicians call everything already know trivial blink lasts 300 milliseconds computing applications eternity application depends interaction take full advantage anticipated delays command-line interpreter returns output human line time doesn't matter slow parser Even worst strategies produce execution times orders magnitude measurable perception limit Bad parsing takes less millisecond cannot perceived means time spent optimizing compiler case absolutely wasted Delays often based different thresholds human perception websites maybe 50ms video games maybe 1ms Mobile apps somewhere middle Zoom tricky piece causing issues focus exclusively come back next day necessary Let take whole frame Add constraints Artificial limits turn exhausting problems simple ones user may need five shipping addresses don't need one million Mark WONTFIX best solution problem avoid solve first place one important tools work cut energy saved Pure gain can't immediately think reason something postpone work long try find reason possible drop task world explode probably lot work wasted Innocent Approaches Verify fears explicitly stuck you're worried something run slow don't know get around Verify case actually runs slow might problem may exist Don't allow create ridge inflatable mountains Keep calm fears real don't panic Terrible problems often simple solutions looms large one moment may lines code next see ten troubles coming road sure nine run ditch reach Calvin Coolidge Take closer look last time looked concretely abstract thing you're working Add debugging output Gather data bug think Something else that's broken make something works look broken make something broken broken typo wrong variable name otherwise working code trigger hunt far problem Stop think Many problems need solved paper first lack motivation find interesting thing project start branch Work append-only Don't worry mistakes Don't worry revising Later go back edit Revisions keep covering ground working append-only keeps focused destination Re-review causes internalize work don't want internalize prematurely work might wrong want look work fresh eyes later can't it's memorized Run thornbushes many small nagging potentially interlocked hard-to-resolve details preventing forward progress put thoughts aside start Get details go back untangle everything Change mind something seems wrong maybe Chuck start Power always last choice Building staircase sugarcubes draining Reapproaches Look ways chain tools reuse tools built combine novel ways solve problem doesn't matter heavy duty tool hard build performance penalty usually negligible savings effort substantial Sometimes series hacks bootstrap superior solution Backtrack avenue appears exhausted instead continually retracing steps backtrack assumption must wrong Change assumption go level abstraction try different approach Know good bad resistance flip problem around Look different perspective cannot dig hole different place digging hole deeper Edward de Bono coined term lateral thinking Work forward unfinished part code suggests List dependencies determine order completion Order work absence order likely inform later work Try naive method first general faster try easy methods order easiness start hard working method isn't easiest Sometimes attempts problem push back reason aren't challenge ability ways often ways faster analyzing best also experimental data instead theoretical Add toggle possible let choose later mistakes cheaper make avoid heard one John Carmack also appears cartoon Verify assumptions outside world correct Problems tests harnesses errors display statements worst Hallucinations aren't problem whatever causing hallucinations See trust you're told Convergent Approaches Every bug hunt worst log time search code base Google error message tweak google new error Write everything know problem terminal points process questions answered process usually converges you're stuck finish remaining piece go back check see new possibilities opened Repeat Form hypothesis test hypothesis repeat process use you're seemingly possibilities opinions generally better guess wrong check sit pondering might correct bothers potentially faulty opinions mentally assign confidence 0 frontier intuition beats proof goals subdivide Test-driven development one implementation strategy wrong way idea know it's wrong build wrong way anyway throw give better grip next attempt truth sooner come error confusion Francis Bacon 1620 something Work wrong thing Make something Start even don't information Inaction won't solve problem Put problem aside work something else Thrashing won't solve problem Return"),
('How We Spent Two Days Making Perl Faster', "B world's leading online accommodation provider operating across 205 countries 42 languages team designers developers database engineers Sysadmins solve complicated problems huge scale Work us Visit site Get touch Twitter Facebook LinkedIn Dribbble Spent Two Days Making Perl Faster Eric Herman Fri 22 May 2015 story significant new optimization Perl interpreter story battling code complexity story wanting cake eat recent Booking com hackathon provided us opportunity investigate speeding integer allocation Perl interpreter successful could optimize nearly every program run discovered naive implementation could work would make code lot difficult maintain path lead us attempt leverage C preprocessor improve code clarity opening doors real gains program execution speed First background described perlguts PerlGuts Illustrated representations variables Perl usually composed two parts head struct optionally body struct head contains essential internal book-keeping common variables regardless type including pointer optional body struct image layout fields head struct depicted PerlGuts Illustrated body struct quite different depending upon type variable simple type variable SvNULL represents undef need body struct string called PV pointer value body type XPV body struct PV different body struct PVNV PVNV hold floating point number string representation value One benefit type design references value point memory location head Perl free change memory used represent value changing body struct without update pointer except pointer contained within head Changing types Naturally Perl internal function convert types variable function sv_upgrade scalar value upgrade essence whenever variable type Perl example simple integer need access different type example string sv_upgrade convert type variable example type contains integer string representations value change may involve replacing body struct larger struct see sv_upgrade implemented look Perl_sv_upgrade function sv c see function encapsulates lot complexity many comments describe subtle corner cases Since take scalar value essentially type convert something capable representing type perhaps unsurprising lot code Without going line-by-line overview function implemented may useful First switch based current type variable determine needs new type Shortly thereafter second switch based new type Inside second switch block numerous blocks different things depending old type Finally new body struct set head struct contains correct flags memory used old body freed Still Good naive optimization sv_upgrade function called number places called places printing integers strings also called assigning integer value previously cleared variable previously cleared variable always undef body struct reason sv_upgrade called allow correct setup body occur sensible design decision centralizes lot internal book-keeping behavior rather duplicating cost centralization performance generic case superfluous code executed example creating new integer sv_upgrade run unnecessary check conversion larger type smaller type Integer assignment cleared variable occurs frequently one would imagine might worth duplicating required complexity achieve performance improvement Thus decided evaluate trade-off integer allocation review nearly 300 lines sv_upgrade internals saw could remove call entirely could hoist essential two lines code However good reason done Let's look two lines first line since know new type easy SvFLAGS sv new_type line quite complex SvANY sv XPVIV char sv- sv_u svu_iv - STRUCT_OFFSET XPVIV xiv_iv head swimming looking last line code worry re good company Granted described Illustrated perlguts Since 5 10 raw IV without PV IVX slot HEAD xpviv struct body allocated SvIVX macro abuses SvANY pointer arithmethic point compile-time calculated negative offset HEAD-1 sv_u svu_iv PVIV IV use SvIVX macro even thought maybe understood complex line code supposedly made Steffen patiently sit 15 minutes convinced paper pencil actually described drawing Illustrated Perl Guts made sense finally understood complexity exists order avoid executing statement would otherwise called every time value retrieved Thus previous design trade-offs seemed like right ones Yes could make Perl faster cost leaking lot complexity another part code complexity would make additional development much difficult future work cake eating wanted encapsulate complex bit code without added runtime performance cost Since C looked using preprocessor push complexity behind macro much way languages might move hairy lines code behind well named function method define SET_SVANY_FOR_BODYLESS_IV sv SvANY sv XPVIV char sv- sv_u svu_iv - STRUCT_OFFSET XPVIV xiv_iv course advantage using macro rather function cost paid entirely compile time thus zero additional runtime performance lost introducing macro readability code would improved several places change situation macro two lines wanted hoist looked lot less complex would need would patch replaces one computationally heavy function call sv_upgrade dstr SVt_IV two lines SET_SVANY_FOR_BODYLESS_IV dstr SvFLAGS dstr SVt_IV factoring complexity differently opened doors different set performance complexity cost trade-offs would leak small amount complexity relative gain performance worth changes cost would low would actual benefit Measuring gain micro-benchmark used heavy exercising one particular code path however common code path dumbbench -i50 --pin-frequency -- perl -Ilib -e 'for x 1 1000 1 2000 ' results micro-benchmark optimization Rounded run time per iteration 2 4311e-01 - 1 4e-04 results optimization Rounded run time per iteration 1 99354e-01 - 5 5e-05 18 faster Results Overall hackathon project success measurements demonstrated optimization worthwhile complexity cost pretty close zero places Perl core slightly complex internals sv_upgrade certainly clear Additionally found similar potential optimizations could leverage technique end five related patches pushed Perl Refactor bodyless-IV NV hacks define Speed assigning IV previously cleared SV Speed newSViv Repeat newSViv optimization newSVuv Attempt bring newSViv uv optimization newRV Perl 5 22 ships part work many real-world programs faster Please enable JavaScript view comments powered Disqus comments powered Disqus"),
('User stories on steroids  how Estimote uses blog post driven development', 'Home Facebook Twitter Archive Ask anything Reality matters Estimote Team Blog User stories steroids Estimote uses blog post driven development Planning defining work SDK team special challenge software development teams always visible deliverables way web app team team work developer-facing developers developers - much planning deeply technical level smart people team often strong opinions things done conflict arise understand work also call SDK cave danger losing sight bigger picture lead team going badly track ve regularly witnessed scenario SDK team disappear sight develop next great thing emerge SDK cave learn ve done isn really anyone wanted Estimote ve hit technique helps us issues ensures talk diving call approach blog post driven development simple terms write line code start sprint planning session outlining blog post describing next release technique helps us avoid premature discussion implementation details instead focusing first impact value deliver software well making sure really understand problems trying solve product owner kicks planning suggesting potential headline blog post communicates overall theme sprint No-one likes dull headline robust discussions tend take place start necessary ll refine iterate headline immediately normally tell ve hit great approach reactions energy levels ve turned Boring Nobody going care Wow Developers love headline stage team ll put together list bullet points blog Explaining thoughts rest team loud great test understanding awesomeness feature watch faces around planning ll also consider re going explain work users ship example code instance example code make simpler needs less explanation blog post need illustrations documentation need cover discussion helps team members develop product skills ensures think wider context mean company impact developer community Note isn producing vague marketing material detailed blog post describes real working features Planning done every team member understands enough able write blog post skeleton post commit making reality sprint lean approach put together enough plan us understand need without micro-management anyone telling us Right planning session defines mini product launch incredibly good morale ve adapted Kanban board suit way working first column Blog post k awesome room A5-sized Post-it note bullet points Lean big enough cover essentials inevitable debates implementation details easier resolve ve involved defining piece work matters actually visible Try test random development team ask tasks working important technique makes sure team answer important question share blog post outline soon possible teams company early feedback always useful actually write blog post ll often collaborate across teams re seeing added benefit breaking barriers company different teams getting know better even across continents Blog post driven development also alternative way approaching definitions done whilst avoiding dull checklists force think done ships well enough axiom hopefully need discussion us done shipped publicly announced documented examples used new developer ease delights users re getting feedback also use technique refactoring housekeeping need SDK test holds kind work isn wow factor maybe rethink internal teams first consumers SDK make announcement leads say makes development faster makes easier test makes life easier know right track might say like user stories yes aim similar focus delivering user value blog post driven development like user stories steroids discussions future announcements help us consider many different angles approaches often teams think benefitting user stories prefixing user old task whilst forgetting ask matter starting point make sure every member team understands simple tweak process alignment provides us one main reasons re moving faster releasing often ever Want engage blog post driven development deliver tools developers building contextual apps Join team re hiring iOS Android engineers John Cieslik-Bridgen Project Manager Estimote estimote software development kanban agile scrum May 21st 2015 16 notes Open app Facebook Tweet Mail haroldfredshort likes thispatator reblogged estimotebreakincode reblogged estimoteadrizzlingrain likes thistarkeshwarsingh likes thiscollegeimprovements likes thisthejoshmac likes thispreslavrachev likes this29thfloor likes thislezuse likes thiskevintcoughlin reblogged estimote added Interesting ideakevintcoughlin likes thisreginaldchowdhury likes thisbarthelemyehui reblogged estimotejmantivirus likes thisbrainitchsolutions likes thisbendiken likes thistanujparikh likes thisestimote posted'),
('Java Timeline - 20+ years in review', 'Loading'),
('ICPC World Finals 2015', 'Start 2015-05-20 11 00 WEST ICPC World Finals 2015 End 2015-05-20 16 00 WEST end near Contest yet started Contest starting -22 35 29 Time elapsed 5 00 00 Time remaining 0 00 00 Super region leader First solve problem Solved problem Attempted problem Pending judgement Rk Team Slv Time ABCDEFGHIJKLM 1 St Petersburg National Research University Mechanics Optics 13 1801 1 8 1 266 2 60 1 36 1 192 1 66 1 249 1 134 1 78 1 71 1 285 1 152 2 164 2 Moscow State University 11 1293 1 21 1 175 1 39 1 57 1 208 1 71 1 -- 1 118 2 78 1 107 1 136 1 263 3 University Tokyo 11 1369 1 18 4 288 1 58 1 33 2 177 1 70 1 156 1 110 1 47 1 248 1 84 4 -- 4 Tsinghua University 10 1234 1 6 2 -- 2 29 1 93 1 277 2 78 2 -- 1 168 1 58 2 134 1 107 1 224 5 Peking University 10 1250 1 5 1 41 1 51 1 237 2 81 1 168 1 130 1 92 1 114 3 271 6 University California Berkeley 10 1347 1 10 2 70 1 68 1 171 2 78 1 191 1 106 1 140 1 153 3 280 7 University Zagreb 10 1501 1 8 2 299 1 55 1 84 1 115 2 33 1 233 1 164 1 137 4 273 8 Charles University Prague 10 1567 1 13 1 168 1 73 1 160 1 106 1 292 1 209 1 52 1 250 2 224 9 Shanghai Jiao Tong University 10 1616 1 9 3 272 1 85 1 107 1 -- 1 49 1 244 1 153 1 167 1 116 5 294 10 Massachusetts Institute Technology 10 1629 1 16 1 55 1 117 1 187 2 111 2 223 2 53 2 252 1 159 5 296 11 Korea University 9 1220 1 19 1 57 1 90 4 -- 1 98 1 257 2 145 1 66 1 196 3 232 12 University Warsaw 9 1233 1 15 2 78 1 115 2 286 1 135 1 170 1 211 1 39 1 144 13 University Waterloo 9 1566 1 8 4 297 2 114 1 131 3 150 1 203 1 87 1 171 2 265 14 University Wroclaw 9 1700 2 18 2 241 1 73 1 272 4 202 1 282 1 143 1 194 4 -- 1 175 15 Fudan University 8 813 1 6 1 41 1 65 2 250 1 77 1 92 1 150 1 112 16 Lviv National University 8 890 1 15 2 120 1 41 1 199 1 138 2 152 1 118 1 67 6 -- 17 Jagiellonian University Krakow 8 982 1 9 2 48 1 86 1 250 2 130 2 70 1 188 2 -- 1 141 5 -- 18 Universidad de Buenos Aires - FCEN 8 1040 1 10 1 82 1 72 1 253 1 28 1 101 2 289 1 185 2 -- 19 Harvard University 8 1056 1 15 2 131 1 39 1 290 1 84 1 210 2 99 1 148 4 -- 20 University Southern California 8 1085 1 14 1 63 1 84 1 130 1 226 2 173 1 224 1 151 8 -- 21 Belarusian State University 8 1128 1 10 1 134 1 48 6 -- 1 109 3 206 1 191 1 89 2 281 22 University California Los Angeles 8 1185 1 12 1 68 1 95 1 255 1 244 1 147 1 173 1 191 23 University Electronic Science Technology China 8 1274 1 11 2 133 1 59 2 271 1 183 2 127 2 232 1 178 24 Carnegie Mellon University 8 1323 1 5 2 185 1 60 3 135 2 190 1 239 1 277 1 152 25 KAIST 8 1330 1 12 1 89 1 98 5 203 1 242 4 239 1 136 1 171 26 Sharif University Technology 8 1449 1 7 2 121 1 101 4 284 2 195 2 239 1 214 1 168 27 Georgia Institute Technology 8 1719 1 6 6 89 1 146 3 176 1 214 4 225 5 294 1 289 28 KTH - Royal Institute Technology 7 741 1 8 1 137 1 110 1 -- 2 89 1 -- 1 152 1 165 1 60 6 -- 29 National Taiwan University 7 767 2 28 1 111 1 78 1 55 5 -- 1 141 1 159 1 175 4 -- 30 Beihang University 7 780 1 13 2 35 1 83 2 94 2 195 1 165 1 135 7 -- 31 Shanghai University 7 828 1 10 1 -- 2 110 1 48 1 73 1 -- 1 -- 1 151 1 231 1 185 32 Kyoto University 7 845 1 19 1 58 1 140 1 81 1 142 1 180 1 225 33 National University Singapore 7 873 1 9 2 42 1 79 3 -- 1 58 1 104 2 -- 1 222 3 299 34 Universidade de o Paulo 7 921 1 26 1 57 1 82 2 -- 1 94 4 259 2 183 1 140 35 Odessa National Mechnikov University 7 951 1 15 2 56 1 108 1 137 1 158 1 248 1 209 36 University Central Florida 7 964 1 11 1 87 1 114 1 189 3 197 1 230 1 96 37 Universitat Polit cnica de Catalunya 7 991 1 22 1 114 1 77 4 85 3 177 1 192 1 224 38 Beijing Jiaotong University 7 996 1 8 3 98 1 118 2 96 1 207 1 145 1 264 39 South China Agricultural University 7 999 1 12 1 -- 2 90 1 152 2 -- 1 99 1 -- 1 -- 2 186 1 276 1 -- 1 144 1 -- 40 University Tsukuba 7 1024 1 12 3 191 1 138 2 29 3 278 1 221 1 55 5 -- 41 University Bucharest 7 1038 1 8 1 246 1 80 2 281 1 96 1 124 2 163 42 National Research University Higher School Economics 7 1044 1 18 1 105 1 225 1 48 3 287 1 177 1 144 5 -- 43 Zhejiang SCI-TECH University 7 1047 1 16 2 111 1 93 1 127 3 -- 3 248 1 231 1 161 44 Taras Shevchenko Kiev National University 7 1058 1 11 3 108 1 82 1 51 2 180 7 296 1 150 45 National University Defense Technology 7 1064 1 14 1 103 1 64 2 171 4 273 1 201 1 158 46 Saint Petersburg Academic University Nanotechnology Research Education Centre RAS 7 1101 1 22 1 166 1 117 1 88 2 231 2 259 1 178 47 Moscow Institute Physics Technology 7 1141 1 11 1 128 1 104 3 123 3 209 1 236 1 250 48 Zhejiang University 7 1157 1 15 3 297 1 86 2 134 1 281 1 92 1 192 49 Hangzhou Dianzi University 7 1177 1 15 3 150 1 171 1 100 1 -- 1 281 1 191 1 229 50 University Michigan Ann Arbor 7 1186 1 11 2 63 1 112 2 -- 2 102 5 269 3 296 1 173 51 St Petersburg State University 6 624 1 10 1 107 1 65 1 56 1 119 1 267 2 -- 52 Seoul National University 6 639 1 11 4 -- 1 51 1 211 2 90 1 148 1 108 53 Fuzhou University 6 793 1 13 1 65 1 133 4 -- 3 114 1 201 2 207 54 Shahjalal University Science Technology 6 795 1 21 1 -- 2 60 1 101 1 -- 1 152 2 -- 1 -- 1 242 1 -- 1 -- 1 199 1 -- 55 Saratov State University 6 797 1 11 1 58 3 110 1 119 1 187 1 272 56 Nanyang Technological University 6 801 1 13 2 177 1 116 2 157 2 224 1 54 1 -- 57 University New South Wales 6 865 1 6 1 218 1 149 1 88 1 147 12 -- 1 257 58 Friedrich-Alexander-University Erlangen-Nuremberg 6 868 1 10 3 164 1 79 4 76 8 -- 1 199 1 240 59 Jahangirnagar University 6 963 1 16 1 112 1 160 2 121 1 -- 1 290 1 244 60 South China University Technology 6 966 1 7 3 -- 1 71 1 115 1 293 2 219 1 241 61 Beijing Normal University 6 1102 1 13 1 180 1 98 2 118 6 298 1 275 62 University Science Technology China 6 1106 1 21 1 -- 3 102 3 254 6 -- 1 191 1 198 1 260 63 University Engineering Technology - VNU 6 1258 1 13 1 152 3 287 1 197 6 267 2 182 64 University Wisconsin - Madison 5 648 2 16 1 208 1 199 1 90 1 115 1 -- 65 Huazhong University Science Technology 5 690 1 15 1 57 2 210 4 -- 1 -- 1 295 1 93 66 ETH Z rich 5 729 1 15 1 249 4 198 1 93 2 94 8 -- 67 Nazarbayev University 5 757 1 13 1 197 2 168 1 87 2 252 68 Universidad Cat lica San Pablo 5 801 1 14 1 160 1 121 2 218 1 268 69 Indian Institute Technology - Roorkee 5 818 1 15 1 298 1 54 1 -- 3 274 1 137 70 Indian Institute Technology - Bombay 5 847 1 26 3 266 1 75 2 -- 1 264 1 176 71 Stanford University 5 852 1 10 1 227 2 208 1 87 3 260 5 -- 72 Northwestern University 5 903 3 23 1 274 1 110 2 170 2 246 1 -- 73 University Maryland 5 914 1 18 1 189 1 155 3 209 3 263 1 -- 74 Jilin University 5 929 1 15 5 202 1 84 4 209 1 279 75 American University Cairo 5 930 1 16 1 231 2 166 2 220 1 -- 1 257 76 University Copenhagen 5 1058 1 10 14 -- 3 182 1 221 1 238 5 287 77 Princeton University 4 292 1 11 1 30 2 156 1 -- 1 75 78 Australian National University 4 390 1 14 1 139 1 70 6 -- 2 147 79 University Indonesia 4 407 1 6 1 150 1 208 1 43 13 -- 80 Beijing Institute Technology 4 471 1 8 2 120 1 117 3 -- 2 186 10 -- 81 Universidade Estadual de Campinas 4 495 1 12 2 -- 2 134 1 59 1 270 82 Kazan Volga Region Federal University 4 501 1 14 3 82 2 127 2 198 83 University Cape Town 4 524 1 14 1 54 1 184 1 272 84 Free University Tbilisi 4 538 1 12 1 85 1 200 5 -- 1 241 85 Universidad Nacional de Colombia - Bogot 4 549 1 13 2 -- 1 167 1 -- 2 137 4 152 3 -- 86 International Institute Information Technology - Hyderabad 4 565 2 14 5 94 1 104 3 213 2 -- 87 Facultad de Ciencias Exactas-Universidad Nacional de Rosario 4 583 1 20 1 270 3 -- 1 115 1 178 88 University Illinois Urbana-Champaign 4 590 1 20 5 161 1 57 1 272 89 Belarusian State Economic University 4 593 1 27 2 98 1 161 3 247 90 University Tehran 4 596 1 16 1 160 1 171 1 -- 1 249 91 Indian Institute Technology - Madras 4 614 2 12 1 158 3 106 3 238 92 Virginia Tech 4 614 1 11 6 -- 1 109 1 141 5 273 93 Indian Institute Technology - Kharagpur 4 637 1 10 3 217 1 90 1 280 94 Belarusian State University Informatics Radioelectronics 4 674 1 19 1 -- 1 181 4 164 2 230 95 University Western Australia 4 726 1 15 1 -- 1 116 6 268 1 227 96 Escuela Superior De Computo Instituto Politecnico Nacional 3 341 1 14 1 135 1 192 97 University Chicago 3 362 1 14 2 98 1 -- 2 -- 2 210 98 Universidad de los Andes Colombia 3 367 1 20 1 239 2 -- 1 108 99 Universidad Sim n Bol var 3 402 2 35 1 -- 2 133 2 174 2 -- 100 Cornell University 3 428 2 12 1 129 2 -- 3 227 101 Faculty Engineering Ain Shams University 3 438 1 13 1 248 1 177 2 -- 102 Universidad de Oriente - Sede Antonio Maceo 3 453 1 12 1 175 1 266 103 Moscow Aviation Institute 3 481 1 12 1 -- 6 207 1 162 3 -- 104 Iowa State University 3 489 2 18 2 150 3 241 105 Federal University Minas Gerais 3 511 1 11 1 277 3 183 106 University Minnesota - Twin Cities 3 519 1 16 2 123 8 -- 6 260 107 German University Cairo 3 528 1 10 8 227 2 131 108 Universidad de La Habana 3 550 1 7 1 228 1 -- 2 295 109 Cairo University - Faculty Computers Information 3 588 1 14 1 287 5 -- 2 267 110 Arab Academy Science Technology Alexandria 2 80 1 16 1 64 1 -- 111 University Calgary 2 122 1 8 1 114 3 -- 4 -- 112 Indian Institute Technology - Delhi 2 141 1 16 1 125 50 -- 113 Universidad Aut noma de Aguascalientes 2 152 1 24 2 108 18 -- 114 Rice University 2 158 1 23 2 -- 2 115 115 National University Science Technology MISiS 2 220 1 10 1 -- 4 150 3 -- 116 Yazd University Iran 2 220 1 13 1 -- 11 -- 1 207 1 -- 117 Messiah College 2 223 1 23 1 200 1 -- 118 Amrita School Engineering Kollam 2 252 1 14 1 238 1 -- 119 Universidade Federal de Campina Grande 2 260 2 10 4 170 120 Universidad Privada de Santa Cruz de la Sierra 2 304 1 14 1 290 6 -- 121 Tishreen University 1 16 1 16 1 -- 122 Al Akhawayn University 1 19 1 19 13 -- 123 Universidade Federal Rio de Janeiro 1 21 1 21 4 -- 1 -- 124 Shahid Beheshti University 1 22 1 22 13 -- 125 ITESM Campus Monterrey 1 37 1 37 2 -- 126 Faculty Computer Information Sciences Ain Shams University 1 46 1 46 9 -- 127 Carleton College 1 47 1 47 2 -- 1 -- 128 ENSA Marrakech UCA 1 57 2 37 1 -- ABCDEFGHIJKLM Solved Tries 128 140 91 6 20 30 77 150 51 116 185 62 20 62 32 93 324 28 1 16 6 20 28 71 92 237 38 59 110 53 2 11 18 68 81 83 15 108 13 Average tries 1 09 2 00 1 69 1 53 1 88 2 72 1 78 1 12 2 30 1 69 1 57 1 11 3 38 Averages tries solve 1 09 2 50 1 64 1 40 1 50 1 72 1 00 1 05 2 04 1 41 1 00 1 01 2 53'),
('Awesome Offensive Security Lectures - Looking for Similar Courses', "Spring 2013 Lectures Videos page contains lecture Lecture Slides youtube videos Spring 2013 semester course HD Video Download download watch lecture class following URL Simply streaming dropbox work Dropbox cut stream 1 4 way video Video download URL Lecture Video Torrent videos much higher quality youtube versions Course Lecture Videos Slides Reading find watch course videos required reading lecture slides lecture applicable videos hosted youtube lower quality ones avaiable direct download see left find navigation sidebar help find lectures relevant meta-topic Navigation Reverse Engineering Lectures 5 6 Exploit Development Lectures 7 8 9 15 16 Network Defenses Hacking Lectures 10 11 15 Web Application Hacking Lectures 12 13 14 15 Metasploit Lecture 19 Meterpreter Lecture 20 Volatility Lecture 21 Cyber Warfare Lectures 17 18 Physical Security Lectures 18 22 Week 1 Intro Overview Lecture 1 Intro Ethics Overview video recorded lecture due technical difficulties lecture covers course Intro syllabus review distinction hacking vs penetration testing ethics discussion course motivation threat models basics Resources Lecture Slides Required reading Chapter 1 CHR SAND2007-5791 Lecture 2 Linux Overview lecture covers basics OS Kernel vs user space system calls unix permissions ruid vs euid etc ext file system limited focus forensics persistence mechanisms used malware var log Resources Lecture Slides Required reading Chapter 3 CHR Week 2 Overview Code Auditing Lecture 3 Windows Overview lecture provides overview registry registry hives persistence mechanisms used malware Portable Executable PE file format overview window systems calls commonly used malware windows API Resources Lecture Slides Required reading Chapter 4 CHR Related reading Windows PE File Format Lecture 4 Rootkits Code Auditing first half lecture covers rootkits rootkit techniques windows linux second half covers code auditing concepts like design flaws software analysis vulnerability identification signed bugs int flows incorrect use length params strncpy strncat snprintf format strings Resources Lecture Slides Required reading Chapter 0x200 0x250 HAOE Week 3 Reverse Engineering Workshop Week Lecture 5 x86 Reverse engineering lecture day one weeklong x86 reverse engineering workshop lead guest lecturer Mitch Adair Resources PDF Lecture Slides PPTX Lecture Slides Binaries Download Required reading Read 0x250 0x270 HAOE Related reading required ASSEMBLY PRIMER HACKERS PART 1 SYSTEM ORGANIZATION Lecture 6 lecture day two weeklong x86 reverse engineering workshop lead guest lecturer Mitch Adair Resources Stand alone exercise download PDF Lecture Slides PPTX Lecture Slides Binaries Download Required reading Read 0x250 0x270 HAOE Week 4 Exploit Development Lecture 7 Fuzzing Exploit Development 101 lecture covers fuzzing overview basics exploit development environment variables stack attacks buffer overflow nop-sleds etc Resources Lecture Slides Required reading Read 0x300 0x340 HAOE Lecture 8 Shellcode Exploit Development 102 Lectore topics writing Shellcode linux vs windows win32 process memory map Resources Lecture Slides Required reading Read 0x500 0x540 HAOE Writing shellcode Read 0x6A0 0x700 HAOE Related reading required Constant Insecurity Things didn know Portable Excutable File Format 2011 Blackhat presentation Mario Vuksan Tomislav Pericin Reversing Labs Week 5 Exploit Dev Networking Lecture 9 Exploit Development 103 SEH Exploitation Heap Sprays Executable Security Mechanisms lecture covers SEH exploitation heap sprays executable security mechanisms like ASLR DEP NX Stack Cookies Resources Lecture Slides Required reading Read 0x680 0x6A0 HAOE Lecture 10 Networking 101 Data Layer Link Layer IP layer video recorded lecture due technical difficulties lecture covers overview networking concepts network security concepts Topics covered Wireshark Nmap nc Hubs vs switches vs routers manufacturer default logins backdoors ARP dns dnssec proxies weak IP vs strong IP model RFC 1122 Resources Lecture Slides Required reading choice offered Read Chapter 2 Chapter 8 CHR Read 0x400 0x450 HAOE Related reading required Defcon 18 - hack millions routers- Craig Heffner Week 6 Networking Web Application Hacking Lecture 11 Networking 102 TCP layer Important Protocols Services Portscanning ARP video recorded lecture due technical difficulties lecture finishes networking overview last time Resources Lecture Slides Required reading Chapter 8 CHR pages 470-510 Read 0x460 0x500 HAOE 20 pages Read 0x540 0x550 HAOE 11 pages Related reading required Defcon 18 - Mastering Nmap Scripting Engine - Fyodor - David Fifield Lecture 12 Web application Hacking 101 bit shorter videos class time taken going homework beforehand lecture addresses big picture topics covered far moves web application security topics Resources Lecture Slides Required reading Read Chapter 7 CHR Page 406-435 Reading Open Web Application Security Project OWASP Top 10 Related reading required DEFCON 17 Advanced SQLi Joseph McCray Week 7 Web Application Hacking Lecture 13 Web Application Hacking 102 Big picture topics far SQLi XSS lecture's topices cover HTTP proxies SQLi XSS Resources Lecture Slides Required reading None time Lecture 14 Web Application Hacking 103 SSL attacks advanced techniques lecture's topics cover SSL TLS Certificate Authorities serious problems Certificate Authority infrastructure history CA hacks breaches SSL hacking tools like sslstrip Resources Lecture Slides Required reading Video Black hat SSL future Authenticity Related reading required Related Video Whitfield Diffie Moxie Marlinspike talk certificate authorities DNSSEC SSL dane trust agility etc Week 8 Web Application Hacking Exploit dev Lecture 15 Web Application Hacking 104 Exploit Development 104 class two lectures one web application 104 lecture cover topics like WAF IDS evade - leads exploit development 104 lecture exploit dev 104 section cover topics like networking shellcode polymorphic shellcode encoders methodology defeating IDS WAF Resources Lecture Slides Required reading Read 0x550 HAOE Related reading required Defcon 18 - spent money still got owned - Joseph McCray Lecture 16 Midterm review Exploit Development 105 ROP lecture's first half review topics midterm second half introduces Return Oriented Programming Resources Lecture Slides Required reading N study Related reading required Dino Dai Zovi - Practical Return-Oriented Programming Week 9 Special Topics Lecture 17 Modern History Cyber Warfare lecture covers small sample major events one might consider part history cyber warfare lecture discusses potential tactical strategic differences traditional warfare cyber warfare - well policy perspective hurdles face today lecture happened shortly ground-breaking APT1 report Mandiant Resources Lecture Slides Required reading ars technica - Georgia doxed Russian hacker matters ars technica - US cyber-weapons exempt human judgment requirement Related reading required DEFCON 19 Christopher Cleary - Operational Use Offensive Cyber Mandiant - APT1 Report Lecture 18 Social Engineering first portion video continuation previous lecture cyber warfare Afterwards lecture offers new spin social engineering - staring fundamental psychological flaws human brain discussing exploited Resources Lecture Slides required reading time Week 10 Metaspl0it Lecture 19 Metasploit lecture covers metasploit framework interfaces basic usage utilities along brief discussion social-engineering toolkit SET Resources Lecture Slides required reading Related reading required Metasploit Megaprimer videos www securitytube net MIDTERM video class midterm point covering lectures 1-16 Week 11 Post Exploitation Forensics Lecture 20 Meterpreter Post Exploitation lecture starts finishing SET discussion last time covers Windows access-tokens delves meterpreter post exploitation Resources Lecture Slides Required reading Read 0x640 0x670 HAOE DEFCON 19 Covert Post-Exploitation Forensics Metasploit Related reading required Carlos Perez darkoperator -- Tactical Post Exploitation Lecture 21 Volatility Incident Response lecture covers overview Incident Response delves Volatility memory analysis Resources Lecture Slides Required reading Skim chapter 10 CHR Week 12 Physical Security Midterm Homework recap lecture video class lecture sacrified administrative things like reviewing midterm homeworks term project expectations Resources Instructor's statement term project expectations Term Project Implementation-project Paper Rubric Term Project Research-project Paper Rubric Term Project Presentation Rubric Lecture 22 Physical Security Workshop Lockpicking USB mischief BacNET SCADA system security class open workshop thus video lecture covers physical security hands-on workshop lockpicking along simultaneous discussion USB-related-mischief building hacking BacNET SCADA Resources Lecture Slides Week 13 Malware Student Presentations Lecture 23 Advanced Malware Techniques video class lecture slides emailed students posted online Student Presentations Begin video class rest semester point course lectures concluded remainder semester taken student presentations term projects Week 14-15 Student Presentations lectures back top work licensed Creative Commons license"),
("What's new in PostgreSQL 9.5", "What's new PostgreSQL 9 5 PostgreSQL wiki Jump navigation search page currently development ahead release PostgreSQL 9 5 page contains overview PostgreSQL Version 9 5's features including descriptions testing usage information links blog posts containing information See also PostgreSQL 9 5 Open Items Contents 1 Major new features 1 1 IMPORT FOREIGN SCHEMA 1 1 1 Links 1 2 Row-Level Security Policies 1 2 1 Links 1 3 BRIN Indexes 1 3 1 Links 1 4 Foreign Table Inheritance 1 4 1 Links 1 5 GROUPING SETS CUBE ROLLUP 1 5 1 Links 1 6 JSONB-modifying operators functions 1 6 1 jsonb jsonb concatenate overwrite 1 6 2 jsonb - text int remove key array element 1 6 3 jsonb - text int remove key array element path 1 6 4 jsonb_replace function 1 6 5 jsonb_pretty 1 6 5 1 Links 1 7 INSERT CONFLICT NOTHING UPDATE 1 7 1 Links 1 8 pg_audit 1 8 1 Links 1 9 pg_rewind 1 9 1 Links 2 new features 2 1 ALTER TABLE SET LOGGED UNLOGGED 2 2 SKIP LOCKED 2 2 1 Links 2 3 Parallel VACUUMing 2 3 1 Links 2 4 Abbreviated Keys 2 4 1 Links 2 5 GiST Index-Only Scans Major new features IMPORT FOREIGN SCHEMA Previously order create foreign table PostgreSQL would need define table referencing destination columns data types lot tables become tedious error-prone tables change need CREATE FOREIGN TABLE remote customers id int NULL name text company text registered_date date expiry_date date active boolean status text account_level text SERVER dest_server OPTIONS schema_name 'public' CREATE FOREIGN TABLE remote purchases id int NULL purchase_time timestamptz payment_time timestamptz itemid int volume int invoice_sent boolean SERVER dest_server OPTIONS schema_name 'public' PostgreSQL 9 5 import tables en masse IMPORT FOREIGN SCHEMA public SERVER dest_server remote would create foreign tables schema named remote every table appeared public schema foreign server labelled dest_server also filter tables don't wish IMPORT FOREIGN SCHEMA public EXCEPT reports audit SERVER dest_server remote limit specific set tables IMPORT FOREIGN SCHEMA public LIMIT customers purchases SERVER dest_server remote Links Waiting 9 5 Implement IMPORT FOREIGN SCHEMA PostgreSQL 9 5 IMPORT FOREIGN SCHEMA Row-Level Security Policies Additional security added tables prevent users accessing rows shouldn't able see Say table log data username column contained database user name created log entry CREATE TABLE log id serial primary key username text log_event text don't want users see log entries users create policy says you're allowed see row username column matches current user running query CREATE POLICY policy_user_log log PUBLIC USING username current_user enable Row Level Security table ALTER TABLE log ENABLE ROW LEVEL SECURITY user report would see rows username column contained value 'report' SELECT log id username log_event ---- ---------- ---------------- 1 report DELETE issued 4 report Reset accounts 2 rows user messaging see different set rows id username log_event ---- ----------- ---------------------- 2 messaging Message queue purged 3 messaging Reset accounts 2 rows Whereas postgres user superuser would get id username log_event ---- ----------- ---------------------- 1 report DELETE issued 2 messaging Message queue purged 3 messaging Reset accounts 4 report Reset accounts 4 rows That's superuser sees rows due BYPASSRLS attribute superuser role default Links Waiting 9 5 Row-Level Security Policies RLS BRIN Indexes BRIN stands Block Range INdexes store metadata range pages moment means minimum maximum values per block results inexpensive index occupies small amount space speed queries extremely large tables allows index determine blocks ones worth checking others skipped 10GB table order contained rows generally order order date BRIN index order_date column would allow majority table skipped rather performing full sequential scan still slower regular BTREE index column benefits far smaller requires less maintenance example -- Create table CREATE TABLE orders id int order_date timestamptz item text -- Insert lots data INSERT orders order_date item SELECT x 'dfiojdso' generate_series '2000-01-01 00 00 00' timestamptz '2015-03-01 00 00 00' timestamptz '2 seconds' interval x -- Let's look much space table occupies dt orders List relations Schema Name Type Owner Size Description -------- -------- ------- ------- ------- ------------- public orders table thom 13 GB 1 row -- What's involved finding orders 2 dates EXPLAIN ANALYSE SELECT count orders order_date '2012-01-04 09 00 00' '2014-01-04 14 30 00' QUERY PLAN ------------------------------------------------------------------------------------------------------------------------------------------------------------- Aggregate cost 5425021 80 5425021 81 rows 1 width 0 actual time 30172 428 30172 429 rows 1 loops 1 - Seq Scan orders cost 0 00 5347754 00 rows 30907121 width 0 actual time 6050 015 28552 976 rows 31589101 loops 1 Filter order_date '2012-01-04 09 00 00 00' timestamp time zone order_date '2014-01-04 14 30 00 00' timestamp time zone Rows Removed Filter 207652500 Planning time 0 140 ms Execution time 30172 482 ms 6 rows -- let's create BRIN index order_date column CREATE INDEX idx_order_date_brin orders USING BRIN order_date -- see much space takes di idx_order_date_brin List relations Schema Name Type Owner Table Size Description -------- --------------------- ------- ------- -------- -------- ------------- public idx_order_date_brin index thom orders 504 kB 1 row -- let's see much faster query small index EXPLAIN ANALYSE SELECT count orders order_date '2012-01-04 09 00 00' '2014-01-04 14 30 00' QUERY PLAN ----------------------------------------------------------------------------------------------------------------------------------------------------------------------- Aggregate cost 2616868 60 2616868 61 rows 1 width 0 actual time 6347 651 6347 651 rows 1 loops 1 - Bitmap Heap Scan orders cost 316863 99 2539600 80 rows 30907121 width 0 actual time 36 366 4686 634 rows 31589101 loops 1 Recheck Cond order_date '2012-01-04 09 00 00 00' timestamp time zone order_date '2014-01-04 14 30 00 00' timestamp time zone Rows Removed Index Recheck 6419 Heap Blocks lossy 232320 - Bitmap Index Scan idx_order_date_brin cost 0 00 309137 21 rows 30907121 width 0 actual time 35 567 35 567 rows 2323200 loops 1 Index Cond order_date '2012-01-04 09 00 00 00' timestamp time zone order_date '2014-01-04 14 30 00 00' timestamp time zone Planning time 0 108 ms Execution time 6347 701 ms 9 rows example SSD drive results would even pronounced HDD default block size 128 pages resolution increased decreased using pages_per_range -- Create index 32 pages per block CREATE INDEX idx_order_date_brin_32 orders USING BRIN order_date pages_per_range 32 -- Create index 512 pages per block CREATE INDEX idx_order_date_brin_512 orders USING BRIN order_date pages_per_range 512 lower pages per block space index occupy less lossy index e need discard fewer rows di idx_order_date_brin List relations Schema Name Type Owner Table Size Description -------- ------------------------- ------- ------- -------- --------- ------------- public idx_order_date_brin index thom orders 504 kB public idx_order_date_brin_32 index thom orders 1872 kB public idx_order_date_brin_512 index thom orders 152 kB 3 rows Links Waiting 9 5 BRIN Block Range Indexes Foreign Table Inheritance Foreign tables either inherit local tables inherited example local table inherit foreign table -- Create new table inherits foreign table CREATE local_customers inherits remote customers -- Insert data INSERT local_customers VALUES 16 'Bruce' Jo's Cupcakes '2015-01-15' '2017-01-14' true 'running' 'basic' -- query parent foreign table SELECT tableoid regclass remote customers tableoid id name company registered_date expiry_date active status account_level ------------------ ---- ------- --------------- ----------------- ------------- -------- --------- --------------- remote customers 1 James Hughson Corp 2014-05-03 2016-05-02 idle premium local_customers 16 Bruce Jo's Cupcakes 2015-01-15 2017-01-14 running basic 2 rows foreign table made inherit local table -- Create new table foreign table child CREATE TABLE master_customers LIKE remote customers -- Insert new row table INSERT master_customers VALUES 99 'Jolly' Cineplanet '2014-10-30' '2016-10-29' true 'running' 'premium' -- foreign table inherit new table ALTER TABLE remote customers INHERIT master_customers -- Let's look contents new table SELECT tableoid regclass master_customers tableoid id name company registered_date expiry_date active status account_level ------------------ ---- ------- --------------- ----------------- ------------- -------- --------- --------------- master_customers 99 Jolly Cineplanet 2014-10-30 2016-10-29 running premium remote customers 1 James Hughson Corp 2014-05-03 2016-05-02 idle premium local_customers 16 Bruce Jo's Cupcakes 2015-01-15 2017-01-14 running basic 3 rows -- query plan EXPLAIN ANALYSE SELECT tableoid regclass master_customers QUERY PLAN --------------------------------------------------------------------------------------------------------------------------- Result cost 0 00 140 80 rows 1012 width 145 actual time 0 014 0 595 rows 3 loops 1 - Append cost 0 00 140 80 rows 1012 width 145 actual time 0 012 0 591 rows 3 loops 1 - Seq Scan master_customers cost 0 00 1 48 rows 48 width 145 actual time 0 012 0 013 rows 1 loops 1 - Foreign Scan customers cost 100 00 124 52 rows 484 width 145 actual time 0 567 0 567 rows 1 loops 1 - Seq Scan local_customers cost 0 00 14 80 rows 480 width 145 actual time 0 007 0 008 rows 1 loops 1 Planning time 0 256 ms Execution time 1 040 ms 7 rows Links Waiting 9 5 Allow foreign tables participate inheritance K PostgreSQL got sharding Postgres 9 5 feature highlight Scale-out Foreign Tables part Inheritance Trees GROUPING SETS CUBE ROLLUP set features allows one summarise data sets example data SELECT employees name role department gender ---------- ----------------- ------------ -------- Tim Manager Sales Male Sarah Manager Finance Female Neil Accountant Finance Male Joe Project Manager Sales Male Yvette Project Manager Finance Female Craig Project Manager Male Penelope Manager Female 7 rows wanted see summaries department role gender use GROUPING SETS SELECT department role gender count employees GROUP GROUPING SETS department role gender department role gender count ------------ ----------------- ----------- ------- Finance 3 2 Sales 2 7 Female 3 Male 4 Accountant 1 Manager 3 Project Manager 3 9 rows see count employees department role gender also get total columns except count blank wanted count every combination 3 categories could use CUBE SELECT department role gender count employees GROUP CUBE department role gender department role gender count ------------ ----------------- ----------- ------- Finance Accountant Male 1 Finance Accountant 1 Finance Manager Female 1 Finance Manager 1 Finance Project Manager Female 1 Finance Project Manager 1 Finance 3 Manager Female 1 Manager 1 Project Manager Male 1 Project Manager 1 2 Sales Manager Male 1 Sales Manager 1 Sales Project Manager Male 1 Sales Project Manager 1 Sales 2 7 Finance Female 2 Female 1 Female 3 Finance Male 1 Male 1 Sales Male 2 Male 4 Accountant Male 1 Accountant 1 Manager Female 2 Manager Male 1 Manager 3 Project Manager Female 1 Project Manager Male 2 Project Manager 3 33 rows get counts every combination values wanted ensure columns grouped sequence summarise left right we'd use ROLLUP SELECT department role gender count employees GROUP ROLLUP department role gender department role gender count ------------ ----------------- ----------- ------- Finance Accountant Male 1 Finance Accountant 1 Finance Manager Female 1 Finance Manager 1 Finance Project Manager Female 1 Finance Project Manager 1 Finance 3 Manager Female 1 Manager 1 Project Manager Male 1 Project Manager 1 2 Sales Manager Male 1 Sales Manager 1 Sales Project Manager Male 1 Sales Project Manager 1 Sales 2 7 18 rows don't get summaries per role per gender except used combination previous columns basic examples Far complicated configurations possible Links JSONB-modifying operators functions 9 3 greater extent 9 4 JSONB data could extracted using various functions operators nothing could actually modify data 9 5 JSONB data modified jsonb jsonb concatenate overwrite operator allows us combine 2 jsonb objects there's overlap values replaced highest level example want add values jsonb object SELECT ' name Joe age 30 ' jsonb ' town London ' jsonb column ---------------------------------------------- age 30 name Joe town London 1 row overwrite existing values SELECT ' town Dataville population 4096 ' jsonb ' population 8192 ' jsonb column ------------------------------------------- town Dataville population 8192 1 row Note works highest level nested objects replaced top level example SELECT ' name Jane contact phone 01234 567890 mobile 07890 123456 ' jsonb ' contact fax 01987 654321 ' jsonb column ------------------------------------------------------ name Jane contact fax 01987 654321 1 row jsonb - text int remove key array element remove keys jsonb object - operator SELECT ' name James email james localhost ' jsonb - 'email' column ------------------- name James 1 row remove values array base 0 SELECT ' red green blue ' jsonb - 1 column ----------------- red blue 1 row jsonb - text int remove key array element path previous example remove keys array elements lower highest level provide path value want delete using text array we'll want remove fax number within contact value SELECT ' name James contact phone 01234 567890 fax 01987 543210 ' jsonb - ' contact fax ' text column --------------------------------------------------------- name James contact phone 01234 567890 1 row remove array value we'll get rid array value index 1 2nd value SELECT ' name James aliases Jamie Jamester J Man ' jsonb - ' aliases 1 ' text column -------------------------------------------------- name James aliases Jamie J Man 1 row jsonb_replace function lets us delete values path update jsonb_replace function We'll update phone value within contact value SELECT jsonb_replace ' name James contact phone 01234 567890 fax 01987 543210 ' jsonb ' contact phone ' ' 07900 112233 ' jsonb jsonb_replace -------------------------------------------------------------------------------- name James contact fax 01987 543210 phone 07900 112233 1 row jsonb_pretty Notice jsonb doesn't preserve white-space matter effort went order make object easier read end long string Well jsonb_pretty format use previous jsonb example wrap jsonb_pretty function SELECT jsonb_pretty jsonb_replace ' name James contact phone 01234 567890 fax 01987 543210 ' jsonb ' contact phone ' ' 07900 112233 ' jsonb jsonb_pretty --------------------------------- name James contact fax 01987 543210 phone 07900 112233 1 row Much easier read Links INSERT CONFLICT NOTHING UPDATE 9 5 brings support UPSERT operations additional syntax INSERT command tell INSERTs switch UPDATE operations conflict found example simple table user accounts logins wanted track number times user logged SELECT username logins user_logins username logins ---------- -------- James 4 Lois 2 2 rows wanted add 2 new logins normally we'd problem primary key unique constraint violated INSERT user_logins username logins VALUES 'Naomi' 1 'James' 1 ERROR duplicate key value violates unique constraint users_pkey DETAIL Key username James already exists Unlike approaches using Common Table Expression new command race conditions guaranteeing either insert update provided incidental error guarantee maintained even event many concurrent updates inserts deletes Example new syntax INSERT user_logins username logins VALUES 'Naomi' 1 'James' 1 CONFLICT username UPDATE SET logins user_logins logins EXCLUDED logins UPSERT 0 2 let's look happened SELECT username logins user_logins username logins ---------- -------- Lois 2 Naomi 1 James 5 3 rows new row Naomi shows logged also James whose logins value incremented one specified UPDATE part statement UPDATE statement knows rows it's updating based column unique constraint that's checked course scenarios might want insert value table it's already Say list countries would used constrain values tables SELECT countries country ----------- Australia Italy Japan UK USA 5 rows want add 2 countries one already existed violated primary key case country column we'd get error INSERT countries country VALUES 'France' 'Japan' ERROR duplicate key value violates unique constraint countries_pkey DETAIL Key country Japan already exists tell conflict fine NOTHING scenarios INSERT countries country VALUES 'France' 'Japan' CONFLICT NOTHING INSERT 0 1 one additional country table SELECT countries country ----------- Australia Italy Japan UK USA France 6 rows additional columns also unique constraints could specify constraint column want apply condition real conflict another column produces error could phrased last example INSERT countries country VALUES 'France' 'Japan' CONFLICT CONSTRAINT countries_pkey NOTHING INSERT countries country VALUES 'France' 'Japan' CONFLICT country NOTHING Note providing multiple sets conflict update conditions isn't yet supported specific conflict specified another conflict occurs instead produce conflict error like would normal insert Links Upsert Lands PostgreSQL 9 5 First Look pg_audit Links pg_rewind pg_rewind makes possible efficiently bring old primary sync new primary without perform full base backup works looking Write Ahead Log see pages modified copying across pages example primary running port 5530 standby subscribing port 5531 SELECT pg_stat_replication - RECORD 1 ---- ------------------------------ pid 11609 usesysid 16384 usename rep_user application_name standby1 client_addr 127 0 0 1 client_hostname client_port 38434 backend_start 2015-03-29 00 11 55 243319 00 backend_xmin state streaming sent_location 0 C81BB40 write_location 0 C81BB40 flush_location 0 C81BB40 replay_location 0 C81BB40 sync_priority 0 sync_state async we'll promote standby pg_ctl promote -D standby1 server promoting we'll make changes instance psql -p 5531 postgres CREATE TABLE x content text CREATE TABLE INSERT x SELECT 'test' generate_series 1 1000 INSERT 0 1000 we'll stop old primary use pg_rewind re-synchronise pg_ctl stop -D primary waiting server shut done server stopped pg_rewind -D primary --source-server 'host localhost port 5531' -P connected remote server servers diverged WAL position 0 C81BB40 timeline 1 Rewinding last common checkpoint 0 2000060 timeline 1 reading source file list reading target file list reading WAL target Need copy 274 MB total source directory size 290 MB 281142 281142 kB 100 copied creating backup label updating control file Done we'll make changes get subscribe new primary cd primary mv recovery done conf vi recovery conf edited set host info point port 5531 case vi postgresql conf example instances running server we'll change port doesn't conflict start new standby old primary pg_ctl start -D primary Let's see it's successfully caught psql -p 5531 postgres connect new primary SELECT pg_stat_replication - RECORD 1 ---- ------------------------------ pid 11837 usesysid 16384 usename rep_user application_name standby1 client_addr 127 0 0 1 client_hostname client_port 49148 backend_start 2015-03-29 00 22 39 047657 00 backend_xmin state streaming sent_location 0 C8559B0 write_location 0 C8559B0 flush_location 0 C8559B0 replay_location 0 C855978 sync_priority 0 sync_state async see test data new primary new standby psql -p 5530 postgres connect new standby SELECT COUNT x count ------- 1000 1 row synchronised Links Waiting 9 5 Add pg_rewind re-synchronizing master server failback new features ALTER TABLE SET LOGGED UNLOGGED PostgreSQL allows one create tables aren't written Write Ahead Log meaning aren't replicated crash-safe also don't associated overhead good data doesn't need guarantees regular tables decided unlogged table replicated regular table longer logged you'd previously create new copy table copy data across 9 5 switch logged unlogged using new command Set unlogged table logged ALTER TABLE tablename SET LOGGED Set logged table unlogged ALTER TABLE tablename SET UNLOGGED example CREATE UNLOGGED TABLE messages id int PRIMARY KEY message text SELECT relname CASE relpersistence 'u' 'unlogged' 'p' 'logged' ELSE 'unknown' END table_type pg_class relname 'messages ' relname table_type --------------- ------------ messages unlogged messages_pkey unlogged 2 rows Note setting unlogged table logged generate WAL contain data table would cause spike replication traffic large tables change logged table ALTER TABLE messages SET LOGGED result previous query relname table_type --------------- ------------ messages logged messages_pkey logged 2 rows SKIP LOCKED Links Waiting 9 5 Implement SKIP LOCKED row-level locks Parallel VACUUMing vacuumdb utility supports parallel jobs specified -j option like using pg_dump pg_restore means vacuuming database complete lot quicker especially cases tables spread across multiple tablespaces also start vacuuming largest relations first example vacuumdb -j4 productiondb would vacuum database named productiondb spawning 4 vacuum jobs run simultaneously Links Waiting 9 5 vacuumdb enable parallel mode Abbreviated Keys abbreviated keys optimization expected greatly enhance performance sorts PostgreSQL including used CREATE INDEX Reportedly cases CREATE INDEX text columns much entire order magnitude faster Numeric sorts also support optimization Links Abbreviated keys exploiting locality improve PostgreSQL's text sort performance Abbreviated keys numeric accelerate numeric sorts GiST Index-Only Scans Previously index access method supported index-only scans B-Tree SP-GiST support added GiST PostgreSQL 9 5 example we'll using btree_gist extension CREATE EXTENSION btree_gist We'll set simple table stores meeting room reservations CREATE TABLE meetings id serial primary key room int reservation tstzrange add exclusion constraint ensure booking one room overlaps another booking room creates index enforce constraint ALTER TABLE meetings ADD CONSTRAINT meeting_exclusion EXCLUDE USING GIST room reservation we'll populate lots test data RECURSIVE ins SELECT 1 room '2000-01-01 08 00 00' timestamptz reservation_start ceil random 24 5 ' minutes' interval duration UNION SELECT CASE ins reservation_start ins room 1 ELSE ins room END room CASE ins reservation_start '2000-01-01 08 00 00' timestamptz ELSE ins reservation_start ins duration END duration ceil random 16 15 ' minutes' interval duration ins reservation_start '1 day' interval room 200 INSERT meetings room reservation SELECT room tstzrange reservation_start reservation_start duration ins reservation_start duration time '08 00' '20 00' One run results 6 4 million rows get query plan counting many meetings occurred May 2014 room EXPLAIN SELECT room count meetings reservation ' 2014-05-01 2014-05-31 ' tstzrange GROUP room ORDER room QUERY PLAN ------------------------------------------------------------------------------------------------------------- Sort cost 1294 20 1294 21 rows 2 width 4 Sort Key room - HashAggregate cost 1294 17 1294 19 rows 2 width 4 Group Key room - Index Scan using meeting_exclusion meetings cost 0 41 1113 98 rows 36038 width 4 Index Cond reservation ' 2014-05-01 00 00 00 01 2014-05-31 00 00 00 01 ' tstzrange Prior 9 5 would get following plan QUERY PLAN ------------------------------------------------------------------------------------------------------------------- Sort cost 28570 15 28570 16 rows 2 width 4 Sort Key room - HashAggregate cost 28570 12 28570 14 rows 2 width 4 Group Key room - Bitmap Heap Scan meetings cost 778 49 28386 07 rows 36810 width 4 Recheck Cond reservation ' 2014-05-01 00 00 00 01 2014-05-31 00 00 00 01 ' tstzrange - Bitmap Index Scan meeting_exclusion cost 0 00 769 29 rows 36810 width 0 Index Cond reservation ' 2014-05-01 00 00 00 01 2014-05-31 00 00 00 01 ' tstzrange Retrieved https wiki postgresql org index php title 27s_new_in_PostgreSQL_9 5 oldid 24724 Views Page Discussion View source History Personal tools Log Navigation Main Page Random page Recent changes Help Search Tools links Related changes Special pages Printable version Permanent link page last modified 21 May 2015 12 32 Privacy policy PostgreSQL wiki Disclaimers"),
('RoboPods - RoboVM Java bindings for 3rd party iOS frameworks', 'Facebook Twitter Google Blog Sign Get Started Pricing Support Documentation License Code contributions Report bug Community us Contact us Jobs Press Newsroom team Select Page Announcing RoboPods Cast Vote Mario Zechner 21 May 2015 Blog past 2 months ve quite inquiries regarding community driven RoboVM Bindings project 30 bindings popular 3rd party libraries services like ads social network integration analytics contributed last year However many bindings maintained ceased function due changes RoboVM 3rd party libraries lead lot frustration Thanks feedback mailing list via e-mail raised awareness problem help d like fix starting today happy announce ROBOPODSWith RoboPods RoboVM AB take maintenance subset bindings important 3rd party libraries ll ensure synch latest RoboVM developments well changes 3rd party libraries well initial patch RoboPods open-source hosted Github like community maintained bindings project 3rd party library allows deploy corresponding RoboPod Maven Central easily integrate Maven Gradle build case 3rd party license issues make easy build RoboPod locally may case 3rd party libraries allow redistribution first iteration RoboPods ll focus efforts making easy create distribute RoboPods includes semi-automatic binding generation well packaging potentially hosting also provide binding services need RoboPod 3rd party library yet supported us drop us mail hello robovm com quote come first iteration RoboPods need select subset 3rd party libraries give us biggest bang buck better ask community find selection libraries believe important moment poll open 1st June ll announce list start working Cast vote Loading Recent Posts RoboVM 1 3 Released Second Optimization Pass Announcing RoboPods Cast Vote RoboVM 1 2 Released First Optimization Pass RoboVM 1 1 released Interface Builder Support Intellij IDEA Android Studio RoboVM plugin released Archives May 2015 April 2015 March 2015 February 2015 January 2015 December 2014 October 2014 September 2014 August 2014 June 2014 May 2014 April 2014 March 2014 February 2014 January 2014 December 2013 November 2013 October 2013 September 2013 August 2013 July 2013 June 2013 May 2013 March 2013 February 2013 January 2013 Categories Blog javafx openjfx Uncategorized RoboVM mission bring Java iOS properly empower Java developer Contact us RoboVM AB Viktoriagatan 3 411 25 G teborg SWEDEN hello robovm com Get Started Pricing Support us Facebook Twitter Google Privacy Policy Terms Use Copyright 2014 RoboVM AB rights reserved'),
('Accelerate .NET Applications (F#, C#) with Alea GPU', 'Cuda zone menu Getting Started Downloads Training Ecosystem Search CUDA Zone Register Login Main menu Skip primary content Skip secondary content Features CUDACasts CUDA Pro Tips CUDA Spotlights Next Previous Accelerate NET Applications Alea GPU Share Posted May 20 2015 Daniel Egloff 1 Comment Tagged NET Alea GPU C CUDA F Today software companies use frameworks NET target multiple platforms desktops mobile phones single code base reduce costs leveraging existing libraries cope changing trends developers easily write scalable parallel code multi-core CPUs NET libraries task parallel library face bigger challenge using GPUs tackle compute intensive tasks accelerate NET applications GPUs developers must write functions CUDA C C write generate code interoperate NET CUDA C C Alea GPU closes gap bringing GPU computing directly NET ecosystem Alea GPU write GPU functions NET language like compile standard NET build tool accelerate GPU Alea GPU offers full implementation CUDA features code compiled Alea GPU performs well equivalent CUDA C C code CUDA NET Alea GPU Alea GPU professional CUDA development stack NET Mono built directly top NVIDIA compiler toolchain Alea GPU offers following benefits Easy use Cross-platform Support many existing GPU algorithms libraries Debugging profiling functionality JIT compilation compiler API GPU scripting Future-oriented technology based LLVM compromise performance easily install Alea GPU Nuget package Figure 1 shows Figure 1 Alea GPU Nuget packages Ease Use Alea GPU easy use kinds parallel problems Developers write GPU code NET language use full set CUDA device functions provided NVIDIA LibDevice well CUDA device parallel intrinsic functions thread synchrhonization warp vote functions warp shuffle functions atomic functions Let consider simple example applies calculation many data values SquareKernel GPU kernel written C accesses memory GPU static void SquareKernel deviceptr outputs deviceptr inputs int n var start blockIdx x blockDim x threadIdx x var stride gridDim x blockDim x var start n stride outputs inputs inputs Alea GPU kernels require special attribution access full CUDA semantics Invoking CUDA kernel requires configuring thread block grid layout transferring data device memory launching kernel SquareKernel GPU function launched shown following code static double SquareGPU double inputs var worker Worker Default using var dInputs worker Malloc inputs using var dOutputs worker Malloc inputs Length const int blockSize 256 var numSm worker Device Attributes MULTIPROCESSOR_COUNT var gridSize Math Min 16 numSm Common divup inputs Length blockSize var lp new LaunchParam gridSize blockSize worker Launch SquareKernel lp dOutputs Ptr dInputs Ptr inputs Length return dOutputs Gather call worker Launch Alea GPU Just-In-Time JIT compiles kernel function SquareKernel loads worker executes GPU attached worker JIT compilation workflow extremely flexible allows code generation execution fly enabling GPU scripting rapid prototyping JIT compilation also useful application scenarios algorithms depend runtime information JIT compilation adds small start-up time overhead requires deployment Alea GPU compiler along application alternative Ahead-Of-Time AOT compilation kernel functions tagged attribute AOTCompile Alea GPU compiler generates PTX code compile time embeds assembly binary resource AOTCompile static void SquareKernel deviceptr outputs deviceptr inputs int n AOT compilation saves run-time compilation overhead simplifies deployment Alea GPU runtime components need installed details JIT AOT compilation found Alea GPU manual Another benefit GPU development NET GPU resources managed thus simplifying development leading robust code example memory objects allocated Worker instance disposable using statement using var dOutputs worker Malloc inputs Length convenient syntax ensures correct use IDisposable objects providing clean safe mechanism releasing unmanaged resources find details Alea GPU tutorial Cross-Platform Alea GPU fully cross-platform code compiled one platform resulting assembly binary compatible platforms Alea GPU supports Windows Linux Mac OS X also tested ARM based Tegra development kits combination NET libraries impressive cross-platform GPU-accelerated applications sophisticated user interfaces graphics visualization developed n-body simulation Figure 2 Alea GPU tutorial example uses OpenGL OpenTK display simulation results code base 100 cross-platform Figure 2 N-Body Simulation Ecosystem Algorithms Libraries Developing high-performance generic GPU kernels basic parallel primitives scan reduce sort linear algebra codes parallelized matrix multiplication linear system solving challenging time-consuming Alea GPU offers productivity gains form range GPU algorithms integrated libraries cuBLAS cuDNN library interfaces fully type-safe library functions mixed seamlessly custom GPU kernels developed NET rely memory management data types GPU memory GPU pointers Full Device-Side Functionality Alea GPU provides rich set device-side functions advanced CUDA features useful creating sophisticated GPU algorithms including CUDA intrinisic functions __ballot __atomic_add etc complete set LibDevice functions Additional useful functions exposed LibDeviceEx Alea Unbound CUB Parallel Algorithms F Alea GPU flexible enough handle complex CUDA code found advanced CUDA C libraries good example CUB library generic GPU parallel algorithm primitives ported subset CUB primitives NET using Alea GPU made available Alea Unbound example use device level sum scan primitive C public static void DeviceScanInclusive const int numItems 1000000 var rng new Random 42 var inputs Enumerable Range 0 numItems Select rng Next -10 10 ToArray var gpuScanModule DeviceSumScanModuleI32 Default using var gpuScan gpuScanModule Create numItems using var dInputs gpuScanModule GPUWorker Malloc inputs using var dOutputs gpuScanModule GPUWorker Malloc inputs Length gpuScan InclusiveScan dInputs Ptr dOutputs Ptr numItems var actual dOutputs Gather Assert AreEqual actual inputs ScanInclusive 0 b b ToArray generic scan primitive Primitives DeviceScanModule expects binary operator used scan process delegate Func int int int public static void DeviceGenericScanInclusive const int numItems 1000000 var rng new Random 42 var inputs Enumerable Repeat rng numItems Select gen ToArray Func int int int scanOp Math Max using var gpuScanModule new Primitives DeviceScanModule GPUModuleTarget DefaultWorker scanOp using var gpuScan gpuScanModule Create numItems using var dInputs gpuScanModule GPUWorker Malloc inputs using var dOutputs gpuScanModule GPUWorker Malloc inputs Length gpuScan InclusiveScan dInputs Ptr dOutputs Ptr numItems var actual dOutputs Gather Assert AreEqual actual inputs ScanInclusive zero scanOp ToArray Following design CUB Alea Unbound warp block device-wide primitives warp- block-wide primitives used kernels convenient plugin components write new algorithms Alea Unbound algorithms deliver performance CUB CUDA C C counterparts implemented F using warp shuffle shared memory union storage optimal shared memory use Besides primitive algorithms Alea Unbound also provides fast implementations matrix multiplication matrix transpose random number generators statistical functions linear system solvers Debugging Profiling Alea GPU provides first class tools coding debugging profiling fully integrated Visual Studio GPU kernels developed Alea GPU debugged Windows NVIDIA Nsight Visual Studio Debugger support debugging profiling Alea GPU three compilation levels Optimized Profiling Diagnostic Level Description Profiling Debugging Optimized source line information variable meta data Profiling Source line information variable meta data Yes Diagnostic Source line information variable meta data Yes Yes Nsight Visual Studio debugger allows breakpoints directly set Alea GPU source code even F code quotations full range standard debugging features available memory inspection local variable values memory checks Figure 3 shows Debugging functionality based upon LLVM debug meta information generated Alea GPU Figure 3 Debugging C GPU code NVIDIA Nsight Visual Studio Edition Click full resolution compilation level Profiling also supports source code correlation Figure 4 shows Figure 4 Profiling C GPU code NVIDIA Nsight Visual Studio Edition Click full resolution Alea GPU tutorial detailed explanations debug profile GPU-accelerated NET applications GPU Scripting Developing GPU algorithms often iterative process Usually many variations explored fine-tune algorithm GPU scripting rapid prototyping greatly improve productivity encourage developer thoroughly investigate efficiency code Alea GPU solution deliver GPU scripting REPL Visual Studio interactive prototyping GPU code F code directly sent F interactive console execution JIT compilation mode Alea GPU allows execution F GPU code fly F interactive console Figure 5 shows Figure 5 Interactive GPU scripting F Alea GPU Click full resolution GPU code also embedded F scripts executed fsi exe ordinary scripts console Advanced GPU Coding Full CUDA Flexibility example illustrates basic usage Alea GPU uses plain functions methods GPU code separate function memory management kernel execution therefore well-suited simple applications complex problems Alea GPU offers two alternatives Class instances Workflows Class Instances Class instances use class derived GPUModule ILGPUModule manage GPU resources CUDA compile-time arguments supplied constructor allows creation advanced kernels using generics following example generic map kernel internal class TransformModule ILGPUModule private readonly Func op public TransformModule GPUModuleTarget target Func opFunc base target op opFunc Kernel public void Kernel int n deviceptr x deviceptr y var start blockIdx x blockDim x threadIdx x var stride gridDim x blockDim x var start n stride y op x Workflows Workflows specify GPU resources kernels composable cuda workflow blocks exposes full expressive power Alea GPU well suited scripting feature available F let template transform Expr int - int - int cuda let kernel fun z deviceptr int x deviceptr int y deviceptr int n int - let start blockIdx x blockDim x threadIdx x let stride gridDim x blockDim x let mutable start n z - transform x y - stride Compiler DefineKernel return Entry fun program - let worker program Worker let kernel program Apply kernel let lp LaunchParam 16 256 let run x int y int let n inputs1 Length use x worker Malloc x use y worker Malloc y use z worker Malloc n kernel Launch lp z Ptr x Ptr y Ptr n outputs Gather run find details programming approaches Alea GPU supports Alea GPU tutorial Future-Oriented Technology Alea GPU complete compiler built top popular LLVM compiler infrastructure NVIDIA CUDA compiler SDK Code compiled Alea GPU delivers performance equivalent CUDA C C CUDA Fortran Alea GPU takes advantage code optimization passes LLVM well GPU-specific optimizations provided NVIDIA NVVM compiler back-end Get Started Alea GPU Today Alea GPU contains individual packages conveniently installed NuGet deployment package Alea CUDA Fody installs necessary compilers together ahead-of-time compilation tool install Alea GPU run following command Package Manager Console PM Install-Package Alea CUDA Fody Alea GPU requires CUDA-capable GPU compute capability 2 0 Fermi architecture higher installed CUDA driver version 6 5 higher Finally need Alea GPU license community edition free supports consumer GPUs GeForce product line Register QuantAlea web page select Client Login sign retrieve free community edition license applications require enterprise hardware mobile GPUs QuantAlea provides commercial licenses Feedback interested hear feedback suggestions Alea GPU Write us info quantalea com QuantAlea Twitter Related PostsAccelerating Bioinformatics NVBIOArrayFire Portable Open-Source Accelerated Computing LibraryCUDACasts Episode 15 Introduction ThrustC 11 CUDA Variadic Templates parallel Share Daniel Egloff Dr Daniel Egloff partner InCube Group Managing Director QuantAlea Swiss software engineering company specialized GPU software development studied mathematics theoretical physics computer science worked 15 years quant financial service industry Follow EgloffDaniel QuantAlea Twitter Follow QuantAlea Twitter View posts Daniel Egloff Jeremy Child Wow great m thinking applications existing software servers Nvidia cards even smaller firms leverage hardware hope licencing costs Alea GPU reasonable Subscribe RSS Email Connect Follow gpucomputing X Enter email address Subscribe ResourcesAbout Parallel Forall NVIDIA Developer Forums CUDA Newsletter Recent Posts Introduction Neural Machine Translation GPUs part 1 Accelerate NET Applications Alea GPU Deep Learning Image Understanding Planetary Science GPU Pro Tip Track MPI Calls NVIDIA Visual Profiler Parallel Direct Solvers cuSOLVER Batched QR TweetsRecent CommentsJimmy Ren Introduction Neural Machine Translation GPUs part 1 Alex Rothberg Jetson TK1 Mobile Embedded Supercomputer Takes CUDA EverywhereMark Harris GPU Pro Tip CUDA 7 Streams Simplify Concurrencytoni GPU Pro Tip CUDA 7 Streams Simplify ConcurrencyMark Harris GPU Pro Tip CUDA 7 Streams Simplify Concurrency CUDA ZONE GAMEWORKS EMBEDDED COMPUTING PROFESSIONAL GRAPHICS GET STARTED CUDA Parallel Computing CUDA Toolkit CUDACast LEARN Training Courseware Tools Ecosystem Academic Collaboration Documentation GET INVOLVED Forums Parallel Forall Blog Developer Program Contact Us Copyright 2015 NVIDIA Corporation Legal Information Privacy Policy'),
('Example of using JWTs as API Keys', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 29 Star 25 Fork 2 auth0 jwt-as-api-keys Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP Example use JWTs API Keys 3 commits 2 branches 0 releases 1 contributor JavaScript 100 0 JavaScript branch master Switch branches tags Branches Tags master starting-point Nothing show Nothing show jwt-as-api-keys Updated README latest commit f2caa7cde9 mgonto authored May 22 2015 Permalink Failed load latest commit information env Finished example May 22 2015 gitignore Created server May 22 2015 README md Updated README May 22 2015 help Finished example May 22 2015 package json Created server May 22 2015 scopes js Finished example May 22 2015 server js Finished example May 22 2015 start js Finished example May 22 2015 user js Finished example May 22 2015 README md Use JWT API keys sample sample shows use JWTs API Keys read amazing article Explanation example want able call API MyApp com first must login MyApp com user credentials I'm logged create API Key MyApp com use call API Endpoints POST login must send username payload calling method Login user return Token user authenticated POST create-api-token create new API token calling endpoint order call user must first logged login calling login endpoint sending created JWT Authorization header calling endpoint It'll return JWT API token requested scopes default 2 POST api follow endpoint mimis calling Follow action order call endpoint need API token contains follow scope GET api user names endpoint mimis calling get user names action order call endpoint need API token contains read_users read_names scopes Running download npm node start js License MIT Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('How to differentiate between an Average and a Good Programmer? (Tips for Recruiters)', "Javarevisited Blog Java programming language FIX Protocol Tibco Rendezvous related Java technology stack Loading Tuesday May 19 2015 differentiate Average Good Programmer comes interview goal find suitable developer job get done difficult judge someone's caliber experience expertise short duration Interview always process starting phone interview written tests face-to-face interview still difficult hire right programmer Process help filter candidates eventually come experience gut feeling take interviews know ask like many interviewers world develop tips Similarly developed couple tips experience helped differentiate average programmer good programmer past Today would like share one tips guys see agree observation hopefully get couple tips find right programmers One used tip finding gaps requirement found learnt time good developers knack breaking requirements finding gaps important produce quality software products Though skill comes experience good developer even less experience ability article share hypothetical interview two programmers see produced Average Programmer vs Good Programmer hypothetical interview demonstrate tip close real interview BTW change requirement based upon domain candidates experience domain expertise job description Key give one line requirement candidate compare quality program developed multiple programmers scenario used general requirement doesn't need domain expertise e g finance healthcare manufacturing require programming experience Interviewer write script archive files older 30 days run 1st day month using cron job Programmer 1 went code produced script exactly requirement script find files directory provided input create archive directory provided name backup date suffix Looks good right hold something missing 1 excluded archive files created script means second month script also include last month's archive monitoring realize problem need retrieve something archive 2 think two contradicting part script finding files older 30 days running 1st every month Since script's objective backup last month's data month 28 29 30 31 days run script 1st march archive files less 30 days old February usually 28 day long 3 script removing files archiving Though stated part requirement implicit requirement interviewer specifically mentioned examples missing requirements case quite common real world programming users gives requirement like experienced programmer know devil always details anything first step understand purpose think missing like go doctor says problem asks couple questions better understand problem always ask questions clear doubts let user know missing etc expert area software development responsibility get enough details product meet user expectation withstand test time like ask kind question domain specific general nature gives opportunity gauge candidate's expertise particular technology e g Perl Python Bash script also overall thinking process developer think find gaps requirement going asset team BTW like things always case hard fast rule It's another indicator potentially help find good programmers couple examples differentiate average programmer good programmer One interesting task ask developer write code read file good programmer always ask questions file content e g binary text text encoding average developer write code read file Good developer make sure close streams right way release file descriptors average programmer forget Another example asking candidates quickly sort array tell quicksort algorithm good developers ask size array array small enough fastest way sort use insertion sort fact library methods based upon quicksort usually use insertion sort small arrays Like Java API implementation Arrays sort method sorts small integer array less 286 element using quicksort tiny array elements less 47 using Insertion sort BTW another reason follow Joshua Bloch advise always using library method available never get kind optimization right short duration writing library forget testing users done open source library Task based Questions Interviews developers programmers get kind questions Interviewer ask real job consider understanding requirement better asking right questions Like previous question could ask missing requirement surface start using script Needless mention second programmer bit intelligent practical able fill gaps couple question practice 1 Write wordwrap function take String break based screen size real Java interview question appeared mobile devices small don't enough API support Since mobiles varied screen sizes wrapping words based upon screen size common task Though stated goal make function work every device Function consider line breaks white spaces font sizes etc use question Android iOS interview smartphone sizes still uniform 2 Write function replace given character String Java rather simpler one ask write production like code see takes care obvious things like null string empty string String contains character replace etc sample solution problem That's tip differentiate average programmer good programmer said one several points many Interviewer looks candidate programmers It's opportunity show think ability good understanding requirements finding gaps tip helped past hard fast rule find good developers fact rule find work indicator gut feeling Let know tips guys using find good programmers interviews P - want become good programmer don't forget read 10 tips 10 articles Posted Javin Paul 7 50 Email BlogThis Share Twitter Share Facebook Labels programmers programming 9 comments Anonymous said script archive files older 30 days ad 3 assumption removing files archiving questionable ad 2 Well think you're wrong There's nothing identical archive files older 30 days backup last month's data contradiction running script 1st day every month find items OLDER 30 days script looks 30 days back time past looks younger OLDER items find provided created modified accessed 30 days ago Everytime script run moved forward 28 29 30 31 days time covered another period past time May 20 2015 5 50 jonas brothers said come arguable questions May 20 2015 11 10 Anonymous said really expecting someone able know remember APIs methods write wordwrap function right interview time frame give May 21 2015 6 51 Anonymous said Anonymous think remembering API developing API common methods e g length split count etc find wordwrap question interesting especially general solution used across different devices different width Key thing need break words length sentence greater screen width middle word need backtrack May 22 2015 1 36 Anonymous said Jonas brothers Even though questions aguable need ask question put argument forward shows think ability many programmers lacks May 22 2015 1 37 Anonymous said 3 script removing files archiving Though stated part requirement implicit requirement interviewer specifically mentioned bullshit article May 23 2015 3 23 Javin Paul said Anonymous BS Don't want cleanup one sign professional developers saying BS doesn't doesn't prove anything argument please put forward May 23 2015 4 42 Saad Alfoudari said purpose archiving known expect imply want continue working files want back certainly wouldn't want cleaned Instead expecting programmer think done implicitly would better indicator opinion see programmer tries ask questions scope program purpose usage limitations explicitly Unless programmer familiar purpose program assume stated try elicit May 23 2015 9 23 Javin Paul said Saad Indeed pick right point whole purpose see whether programmer ask right question requirements whether relevant experience agree cases though archiving followed cleanup necessary candidate sure ask May 23 2015 8 52 PM Post Comment Newer Post Older Post Home Subscribe Post Comments Atom Recommended Books Java Developer 9 Must Read Books Java Developers 3 Good Books Learn Java 8 6 Books Learn Master Programming 2 Books Prepare Oracle Java Certification 5 Books Learn Spring Framework Java Programmers 5 Books Learn Design Patterns OOP 5 Free Scala Programming Books PDF 5 Books Learn Hibernate Java Developers Top 5 Java Performance Tuning Books Top 5 jQuery Books Java Web Developer 5 Java Unit Testing Book Every Developer Read Followers Blog Archive 2015 46 May 4 Top 10 Java Multithreading Concurrency Best Pr Sieve Eratosthenes Algorithm generate Prime Fixing Unsupported major minor version 52 0 Error differentiate Average Good April 4 March 10 February 12 January 16 2014 106 December 6 November 9 October 4 September 9 August 9 July 8 June 8 May 11 April 10 March 11 February 11 January 10 2013 136 December 5 November 7 October 3 September 3 August 13 July 12 June 9 May 14 April 18 March 16 February 18 January 18 2012 217 December 52 November 8 October 14 September 8 August 9 July 9 June 12 May 10 April 14 March 28 February 18 January 35 2011 145 December 28 November 14 October 14 September 22 August 11 July 7 June 9 May 6 April 10 March 4 February 10 January 10 2010 33 December 4 October 29 Follow Us References Java API documentation JDK 6Spring framework docStrutsJDK 7 APIMySQLLinuxEclipsejQuery Copyright Javin Paul 2010-2015 Powered Blogger Privacy Policy"),
('Maven build configuration composed out of small units similar to OS package management.', "Skip content Sign Sign repository Explore Features Enterprise Blog Watch 3 Star 2 Fork 0 sviperll ozymandias Code Issues Pull requests Pulse Graphs HTTPS clone URL Subversion checkout URL clone HTTPS Subversion Download ZIP branch master Switch branches tags Branches Tags gh-pages master Nothing show ozymandias-0 6 Nothing show ozymandias maven-parent Add strict-dependencies Active default profile latest commit d421fe2e69 sviperll authored May 26 2015 Permalink Failed load latest commit information mvn gitignore First commit May 18 2015 README md Implement contextual profile selector correctly process maven proj May 22 2015 nbactions xml use DefaultProfileSelector class May 25 2015 pom xml Add strict-dependencies Active default profile May 26 2015 README md maven-parent Generally usefull maven parent artifact Part ozymandias Usage Set maven-parent parent project activate required profiles activateparentprofiles property Profile activation implemented maven-profiledep-extension project xmlns http maven apache org POM 4 0 0 xmlns xsi http www w3 org 2001 XMLSchema-instance xsi schemaLocation http maven apache org POM 4 0 0 http maven apache org maven-v4_0_0 xsd modelVersion 4 0 0 modelVersion parent groupId com github sviperll groupId artifactId maven-parent artifactId version 0 6 version parent groupId group groupId artifactId myartifact artifactId version version version -- -- properties activateparentprofiles java6 nexus-deploy activateparentprofiles -- -- properties -- -- project Profiles java6 Use version 1 6 java language runtime java7 Use version 1 7 java language runtime java8 Use version 1 7 java language runtime bootclasspath Fork javac specify bootclasspath compilation argument using JDK6_HOME JDK7_HOME JDK8_HOME environment variable nexus-deploy Configure nexus-staging-maven-plugin run instead standard deploy-plugin deploy artifact running nexus instance executable Add main class classpath jar manifest create archives jar file it's dependencies no-deploy-to-maven-repository deploy artifacts maven repository plugins executed deploy phase Status API Training Shop Blog 2015 GitHub Inc Terms Privacy Security Contact Something went wrong request Please try"),
('Python Patterns - An Optimization Anecdote', "Notice Javascript essential website interaction content limited Please turn Javascript full experience Skip content Close Python PSF Docs PyPI Jobs Community Python Network Menu Search Site GO Smaller Larger Reset Socialize Google Facebook Twitter Chat IRC Sign Sign Register Sign Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Python Patterns - Optimization Anecdote Python Patterns - Optimization Anecdote day friend asked seemingly simple question what's best way convert list integers string presuming integers ASCII values instance list 97 98 99 converted string 'abc' Let's assume want write function first version came totally straightforward def f1 list string item list string string chr item return string can't fastest way said friend one def f2 list return reduce lambda string item string chr item list version performs exactly set string operations first one gets rid loop overhead favor faster implied loop reduce function Sure replied cost function call lambda function per list item betcha it's slower since function call overhead Python bigger loop overhead OK already done comparisons f2 took 60 time f1 - Hmm said friend need faster OK said version def f3 list string character map chr list string string character return string surprise f3 clocked twice fast f1 reason surprised us twofold first uses storage result map chr list another list length second contains two loops instead one one implied map function loop course space versus time well-known trade-off first one shouldn't surprised us However come two loops faster one Two reasons First f1 built-in function chr looked every iteration f3 looked argument map look-up relatively expensive told friend since Python's dynamic scope rules mean first looked unsuccessfully current module's global dictionary dictionary built-in function found Worse unsuccessful dictionary lookups average bit slower successful ones way hash chaining works second reason f3 faster f1 call chr item executed bytecode interpreter probably bit slower executed map function - bytecode interpreter must execute three bytecode instructions call load 'chr' load 'item' call map function C led us consider compromise wouldn't waste extra space would speed lookup chr function def f4 list string lchr chr item list string string lchr item return string expected f4 slower f3 25 40 faster f1 still local variable lookups much faster global built-in variable lookups Python compiler optimizes function bodies local variables dictionary lookup necessary simple array indexing operation sufficient relative speed f4 compared f1 f3 suggests reasons f3 faster contribute first reason fewer lookups bit important get precise data would instrument interpreter Still best version f3 twice fast straightforward version f1 Could better worried quadratic behavior algorithm killing us far using list 256 integers test data since friend needed function applied list two thousand characters We'd concatenating longer longer strings one character time easy see apart overhead create list length N way 1 2 3 N-1 characters copied total N N-1 2 0 5 N 2 - 0 5 N addition N string allocation operations sufficiently large N term containing N 2 take Indeed list that's 8 times long 2048 items functions take much 8 times long close 16 times long fact didn't dare try list 64 times long There's general technique avoid quadratic behavior algorithms like coded follows strings exactly 256 items def f5 list string range 0 256 16 0 16 32 48 64 character map chr list 16 character string string return string Unfortunately list 256 items version ran bit slower though within 20 f3 Since writing general version would slow didn't bother pursue path except also compared variant didn't use map course slower Finally tried radically different approach use implied loops Notice whole operation described follows apply chr list item concatenate resulting characters already using implied loop first part map Fortunately string concatenation functions string module implemented C particular string joinfields list_of_strings delimiter concatenates list strings placing delimiter choice two strings Nothing stops us concatenating list characters strings length one Python using empty string delimiter Lo behold import string def f6 list return string joinfields map chr list function ran four five times fast fastest contender f3 Moreover doesn't quadratic behavior versions Winner next day remembered odd corner Python array module happens operation create array 1-byte wide integers list Python integers every array written file converted string binary data structure Here's function implemented using operations import array def f7 list return array array 'B' list tostring three times fast f6 12 15 times fast f3 also uses less intermediate storage - allocates 2 objects N bytes plus fixed overhead f6 begins allocating list N items usually costs 4N bytes 8N bytes 64-bit machine - assuming character objects shared similar objects elsewhere program like small integers Python caches strings length one cases Stop said friend get negative times - fast enough program agreed though wanted try one approach write whole function C could minimal storage requirements would allocate string length N right away save instructions C code knew array module genericity supports integer widths 1 2 4 bytes However wouldn't able avoid extract items list one time extract C integer fairly costly operations Python-C API expected modest speed compared f7 Given effort writing testing extension compared whipping Python one-liners well dependency non-standard Python extension decided pursue option Conclusion feel need speed go built-in functions - can't beat loop written C Check library manual built-in function want isn't one guidelines loop optimization Rule number one optimize proven speed bottleneck optimize innermost loop rule independent Python doesn't hurt repeating since save lot work - Small beautiful Given Python's hefty charges bytecode instructions variable look-up rarely pays add extra tests save little bit work Use intrinsic operations implied loop map faster explicit loop loop explicit loop counter even slower Avoid calling functions written Python inner loop includes lambdas In-lining inner loop save lot time Local variables faster globals use global constant loop copy local variable loop Python function names global built-in also global constants Try use map filter reduce replace explicit loop use built-in function map built-in function beats loop loop in-line code beats map lambda function Check algorithms quadratic behavior notice complex algorithm pays large N - small N complexity doesn't pay case 256 turned small enough simpler version still tad faster mileage may vary - worth investigating last least collect data Python's excellent profile module quickly show bottleneck code you're considering different versions algorithm test tight loop using time clock function way here's timing function used calls function f n 10 times argument prints function name followed time took rounded milliseconds 10 repeated calls done minimize loop overhead timing function could go even make 100 calls Also note expression range n calculated outside timing brackets - another trick minimize overhead caused timing function worried overhead calibrate calling timing function do-nothing function import time def timing f n print f __name__ r range n t1 time clock r f f f f f f f f f f t2 time clock print round t2-t1 3 Epilogue days later friend back question reverse operation e create list integer ASCII values string Oh go flashed mind time relatively painless two candidates obvious def g1 string return map ord string somewhat less obvious import array def g2 string return array array 'b' string tolist Timing reveals g2 five times fast g1 There's catch though g2 returns integers range -128 127 g1 returns integers range 0 255 need positive integers g1 going faster anything postprocessing could result g2 Note since essay written 'B' typecode added array module stores unsigned bytes there's reason prefer g1 Sample Code timing f1 f7 timing g1 g2 Tweets ThePSF PSF Python Software Foundation organization behind Python Become member PSF help advance software mission Back Top Applications Quotes Getting Started Help Downloads releases Source code Windows Mac OS X Platforms License Alternative Implementations Documentation Docs Audio Visual Talks Beginner's Guide Developer's Guide FAQ Non-English Docs PEP Index Python Books Community Diversity IRC Mailing Lists Python Conferences Special Interest Groups Python Wiki Python Logo Merchandise Community Awards Success Stories Arts Business Education Engineering Government Scientific Software Development News Python News Community News PSF News PyCon News Events Python Events User Group Events Python Events Archive User Group Events Archive Submit Event Contributing Developer's Guide Issue Tracker python-dev list Core Mentorship Back Top Help General Contact Diversity Initiatives Submit Website Bug Copyright 2001-2015 Python Software Foundation Legal Statements Privacy Policy"),
('The archive of the World Finals Problems for the International Collegiate Programming Contest, from 1974 to 2015', 'Follow ICPCNews Register Log worldfinals Past Problems World Finals Schedule Activities World Finals Rules Local Information On-Site Registration Video Photo Coverage World Finals Results Past Problems Teams Fact Sheet Prog Environment Regionals Regional Finder Upcoming Regionals Regional Results Regional Rules Getting Involved Starting Regional Free ACM Membership Compete Preparation Policies Procedures FAQs Problems Community IBM Upsilon Pi Epsilon ACM Fact Sheet History Contacts Past Problems2015 ACM-ICPC World Finals Problems Dress Rehearsal2014 ACM-ICPC World Finals Problems Dress Rehearsal Input output data 2013 ACM-ICPC World Finals Problems Dress Rehearsal Input output data 2012 ACM-ICPC World Finals Problems Input output data2011 ACM-ICPC World Finals Problems Input output data2010 ACM-ICPC World Finals Problems2009 ACM-ICPC World Finals Problems2008 ACM-ICPC World Finals Problems2007 ACM-ICPC World Finals Problems2006 ACM-ICPC World Finals Problems2005 ACM-ICPC World Finals Problems2004 ACM-ICPC World Finals Problems2003 ACM-ICPC World Finals Problems2002 ACM-ICPC World Finals Problems2001 ACM-ICPC World Finals Problems2000 ACM-ICPC World Finals Problems1999 ACM-ICPC World Finals Problems1998 ACM-ICPC World Finals Problems1997 ACM-ICPC World Finals Problems1996 ACM-ICPC World Finals Problems1995 ACM-ICPC World Finals Problems1994 ACM-ICPC World Finals Problems1993 ACM-ICPC World Finals Problems1992 ACM-ICPC World Finals Problems1991 ACM-ICPC World Finals Problems1990 ACM-ICPC World Finals Problems1989 ACM-ICPC World Finals Problems1988 ACM-ICPC World Finals Problems1987 ACM-ICPC World Finals Problems1986 ACM-ICPC World Finals Problems1985 ACM-ICPC World Finals Problems1984 ACM-ICPC World Finals Problems1983 ACM-ICPC World Finals Problems1982 ACM-ICPC World Finals Problems1981 ACM-ICPC World Finals Problems1980 ACM-ICPC World Finals Problems1979 ACM-ICPC World Finals Problems1978 ACM-ICPC World Finals Problems Nationals 1974 ACM-ICPC World Finals Problems Texas Programming Contest Last modified 05 07 May 20 2015'),
('PHP LDAP: Get All Active Directory Groups and other useful things....', "Code Drug Coding tips blatherings someone whose lucky enough get paid code Menu Skip content HomeAbout 21Apr2015 PHP LDAP Get Active Directory Groups useful things Posted Active Directory Database PHP davidrothbauer suite applications useful tools m developing organization expand ve found increasingly necessary integrate Active Directory assistance AD guru Adam Witt Professor Google ve finally managed pull information need without breaking anything goal maintain database table AD groups order control access certain applications re sitting thinking m sort sort idiot m pulling AD groups needed explain end blog post please read pointing blindingly obvious used PHP LDAP library project link entry PHP site Please note prerequisites connect LDAP server ldap ldap_connect '867 530 09 00' '389' real IP musical easter egg ldap die 'No LDAP' exit easy part order successfully pull information Active Directory essential know laid Note specified KNOW laid THINK laid words learn experience Using Microsoft AD Browser helped tie everything together figure exactly use filters search strings get big chunk code things m going cover gotchas work past LDAP Operations Errors much flailing found two things causing Remember set Options ldap_set_option ldap LDAP_OPT_REFERRALS 0 ldap_set_option ldap LDAP_OPT_PROTOCOL_VERSION 3 AD administrator likes things like security use ldap_bind command register AD server code tell AD server credentials PHP script ldap_bind ldap 'xxxxxxx' 'thisisnotreallyapassword' connect AD server AD server knows rights privileges PHP script next step tell PHP script look whatever want look command result ldap_search ldap base_dn filter attributes parameters bit tricky understanding AD layout crucial ldap parameter connection set earlier base_dn Distinguished Name top part AD structure want search Note base_dn limited DN add attributes example m going want search within OU Organizational Unit STAFF within DCs Domain Controller MAIN SITE CA Loading base_dn variable look like base_dn OU STAFF DC MAIN DC SITE DC CA confess haven spent lot time playing filters attributes ve seen examples fairly complex filters re looking something like always hit Google find good working examples d invite post comments example re going look OU CN DC attributes within child base OU filter OU attr array OU CN DC result ldap_search ldap base_dn filter attr rescount ldap_count_entries ldap result data ldap_get_entries ldap result echo ' pre ' foreach data row print_r row pretty basic example sample data show would require either sending actual AD structure think would violate terms employment contract require go build AD server leave bit code used examine validate information getting wanted ensure working groups users validation stage used bit code foreach info k v v 'dn' becomes base domain want search children sres ldap_search ldap v 'dn' CN attrib ldap_count_entries ldap sres 0 echo v 'dn' ' ' ldap_count_entries ldap sres ' users br ' echo ' hr ' Hopefully helps ve questions improvements please feel free post think reason wouldn pull AD groups server users connected Yes know could pull AD groups fly m stupid want ensure maintain security functionality event AD server isn available doesn respond fast enough want ability audit access meaning would want record user AD groups time logged know thinking stupid record groups sort audit table m going explain m way short answer Database Normalization Database Normalization refers practice designing database avoid much possible storing redundant data Meaning piece information address would associated another entity person record piece information associate parent entities joining table know people hard time wrapping heads around believe actual thing specific case recording user groups would several time connect would create row group user time logged testing first part project connected twice created 16 rows 8 rows twice Imagine fast audit table would grow 100 users connecting multiple times day tracking data like historical audit purposes keep table AD groups group addition name stored table also unique identifier field would serve table primary key solution instead 16 rows name group would 16 rows least two columns Column 1 would contain unique identifier row user table Column 2 would contain unique identifier row groups table containing individual group solution takes much less space proper indexing makes database operations much faster efficient also added bonus database programmers won make fun ads Share TwitterTumblrLinkedInFacebookGoogleEmailPrintRedditLike Like Loading Related Active Directory LDAP LDAP Operations Error PHP Leave comment Post navigation Mirth Integration Iterate specific HL7 segments Full Stack Programmer Leave Reply Cancel reply Enter comment Fill details click icon log Email required Address never made public Name required Website commenting using WordPress com account Log Change commenting using Twitter account Log Change commenting using Facebook account Log Change commenting using Google account Log Change Cancel Connecting Notify new comments via email Notify new posts via email Seach Posts Search Recent Posts PHP BREAK CONTINUE Nested Routines loops switch statements makes programmer good Javascript Function returns status specified Facebook API permission Full Stack Programmer PHP LDAP Get Active Directory Groups useful things Recent Comments davidrothbauer SQL SERVER Conditional Chris SQL SERVER Conditional VS2012 C Get IPV4 Finding Console Windo Archives May 2015 April 2015 March 2015 February 2015 December 2014 November 2014 October 2014 September 2014 July 2014 May 2014 April 2014 March 2014 Categories NET Active Directory Asides C Database Flow Control HL7 iPeople Echo Javascript JQuery Meditech Mirth Integration PHP Programmer Sanity Preservation Programming Basics SQL SQL SERVER Uncategorized Web Design Meta Register Log Entries RSS Comments RSS WordPress com Follow Blog via Email Enter email address follow blog receive notifications new posts email Join 17 followers Blog WordPress com Adelle Theme Follow Follow Code Drug Get every new post delivered Inbox Build website WordPress com Send Email Address Name Email Address Cancel Post sent - check email addresses Email check failed please try Sorry blog cannot share posts email d bloggers like"),
('CSSenter - chrome extension to interactively center in CSS', 'CSSenteroffered CSSenter 2 34 usersOverviewCentering CSS made easyCSSenter takes pain CSS centering 1 Toggle extension clicking button top right 2 Click element want centered 3 Select want centered 4 Test alternative methods clicking 5 Copy paste code suggestions Done time want improve add features please email suggestions jdelafargue gmail com Thanks Report AbuseVersion 0 0 1 2Updated May 22 2015Size 124KBLanguage English'),
('Scott and Rob talk to a group of top gun developers: the StackOverflow team, about the day their database melted - and how the team responded', "Playing Developer's Life podcast developers lives 2 0 2 Pressure Tweet Download Scott Rob talk group Top Gun developers StackOverflow team day database melted - team responded Geoff Dalgas - developer StackOverflow Sam Saffron - developer data geek StackOverflow Jeff Atwood Mr CodingHorror co-founder StackOverflow Music music tracks week combination Fair Use Royalty-free Mashups mashups won't link source find video serving site Beastie Boys - Sabotage Nine Inch Nails - Ghosts VI Star Garden - Rutile Calexico - Whipping Horse's Eyes Rildrim - Linber Sponsor Developer's Life brought CodeRush Visual Studio 2015 Taco Truck Media"),
('RegExr, a website for interactive regex prototyping with syntax highlighting, now in v2', "RegExrv2 0BETAby gskinner RegExr v1 GitHub TutorialLibrary getLabel getLabel getStaticRating Substitution getIcon getLabel getDetail RegExr online tool learn build test Regular Expressions RegEx RegExp Results update real-time type Roll match expression details Save share expressions others Explore Library help examples Undo Redo getCtrlKey -Z Y Search rate Community patterns Character classes character except newline w d sword digit whitespace W D Snot word digit whitespace abc b c abc b c a-g character gAnchors abc start end string bword boundaryEscaped characters escaped special characters n rtab linefeed carriage return u00A9unicode escaped Groups Lookaround abc capture group 1backreference group 1 abc non-capturing group abc positive lookahead abc negative lookaheadQuantifiers Alternationa 0 1 0 1a 5 2 exactly five two morea 1 3 one threea 2 match possibleab cdmatch ab cdExpressionsharesaveflagsText Welcome RegExr v2 0 gskinner com Edit Expression Text see matches Roll matches expression details Undo mistakes ctrl -z Save Share expressions friends Community full Reference Help available Library watch video Tutorial Sample text testing abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ 0123456789 - ' 12345 -98 7 3 141 6180 9 000 42 555 123 4567 1- 800 -555-2468 foo demo net bar ba test co uk www demo com http foo co uk http regexr com foo html q bar SubstitutionExpression Flagsignore case global g multiline m Share Copy LinkPress Ctrl C copy link Save pattern sharing CopyExpression Pattern JavascriptCopied clipboard Press dynamic-C copy SaveAdd Community Favouritesname descriptiontags getLabel author error saving pattern Please try later Pattern saved share pattern changes since last save RegExrv2 0RegExr isn't optimized mobile devices yet still take look might bit quirky Okay RegExrv2 0RegExr requires modern browser Please update browser latest version try Flash support still visit RegExr version 1"),
('Qt - 20 years leading cross-platform development', "Skip main content ContributeSubmit article project KDE NewsAbout KDELearn KDE software communityDownload KDEDownload KDE Desktop related applications KDE org KDE Forums KDE Wikis Developer Blogs Planet KDE MAY 20 2015 Qt - 20 years leading cross-platform development Submitted Sandro Santos Andrade Today celebrate 20 years since first release Qt uploaded sunsite unc edu announced six days later comp os linux announce years Qt evolved two person Norwegian project full-fledged social-technical world-wide organism underpins free software projects profitable companies universities government-related organizations It's exciting journey early days Trolltech 1999 evolution licensing original FreeQt QPL GPL LGPL today corporate cooperation Nokia Digia Open Governance leading edge technology refinements Qt supported spirit free software thriving communities high quality products KDE Community thanks everyone helps keep Qt rocking share pride part history Since 1997 Qt provided foundation upon KDE developed workspaces applications development environments Moreover Qt contributed fruitful symbiosis goals contributions discussions blur boundaries Qt KDE projects result today KDE biggest Qt showcase world there's evidence successful long-running partnership continue Qt KDE partnership several fundamental aspects strong relationship KDE always worked hard keep Qt free open KDE Free Qt Foundation Since creation 1998 Foundation makes continuous updates statutes aiming precise complete terms also accommodate new situations involving Qt's development KDE people make 40-60 weekly commits QtBase repository every major transition Qt versions KDE close active participation development Qt 5 contributing many new features enhancements expanded benefits whole class Qt applications Furthermore since Qt adopted Open Governance model October 2011 contributing Qt become even easier KDE people anyone interested project's trends roadmap technologies Conceiving KDE Frameworks 5 set fine-grained independent Qt 5 add-on modules demonstrates confidence Qt's commitment KDE efforts turn KDE Frameworks 5 contributes entire ecosystem Qt developers making available many high-quality libraries based 18 years KDE experience building Qt applications Many people interested Qt development start efforts KDE projects seasoned mentors KDE offers several opportunities young people real-world work consequence time KDE first Qt experience growing number highly skilled Qt developers learned Qt way things beginning Congratulations say much appreciation congratulations Qt Thank keep counting KDE Bookmark Search post Add new comment Search form Search DONATE Donate Planet KDE Kubuntu Statement important Kubuntu Developer Scarlett Clark sgclark Qt Android Episode 7 KDAB Qt Google Summer Code 2015 KDE Aroonav Mishra roguedragon transactional b-trees what-not Aaron Seigo aseigo Challenges opportunities Valorie Zimmerman valorie KDE Look LiteYear 3 logo KDE Wallpaper 1920x1200 LiteYear 3 KDE Wallpaper 1920x1200 Stvens cliff 1 0 KDE Wallpaper 2560x1600 Anillo Kubuntu 1 1 1 1 KDE Wallpaper 1920x1200 Flattr 1 3 KDE Icon Theme Resources Monitor 1 0 Plasma 5 Plasmoid Windows 7 Login Screen Pack 1 0 1 KDM4 Theme GIF Viewer 0 4 Plasmoid Script KDE Apps Kwave 0 9 0 KDE Sound Application Resources Monitor 1 0 Plasma 5 Plasmoid GIF Viewer 0 4 Plasmoid Script Extended Systemmonitor DataEngine 2 2 2 Plasmoid Binary Awesome Widgets 2 2 2 Plasma 5 Plasmoid Social Networks Visualizer 1 7 KDE Scientific CV Assistant 1 1 2 KDE Text Processing kde-desktop-custom-menu 0 1 KDE Improvement KDE Sprints Randa Meetings 2015 159 days KDE PIM Spring 2015 Sprint 16 days Plasma Sprint 2015 58 days work KDE licensed Creative Commons Attribution 3 0 Unported License Powered Drupal"),
('Operating System Containers vs. Application Containers', "RisingStack Engineering Engineering blog all-the-things JavaScript DevOps IoT Subscribe via RSS RisingStack Website GitHub Twitter Contact Get early access posts 2015 RisingStack Inc rights reserved Privacy Policy Proudly published Ghost StayPuft theme David Lecina Operating System Containers vs Application Containers 9 days ago May 19th 2015 docker OS containers application containers Docker container article guest post Akshay Karle developer ThoughtWorks currently working Snap CI Thanks Docker containers gained significant popularity lately among Developer Ops communities alike Many people simply want use Docker rising popularity without understanding Docker container need many container technologies choose general lack knowledge subtle differences technologies use need containers Hypervisor based virtualization technologies existed long time Since hypervisor full virtualization mechanism emulates hardware run operating system top Windows Linux way around guest operating system host operating system run kernel communication guest system actual hardware done abstracted layer hypervisor approach usually provides high level isolation security communication guest host hypervisor approach also usually slower incurs significant performance overhead due hardware emulation reduce overhead another level virtualization called operating system virtualization container virtualization introduced allows running multiple isolated user space instances kernel containers Containers products operating system virtualization provide lightweight virtual environment groups isolates set processes resources memory CPU disk etc host containers isolation guarantees processes inside container cannot see processes resources outside container difference container full-fledged VM containers share kernel host system gives advantage fast almost 0 performance overhead compared VMs also utilize different computing resources better shared kernel However like everything else sharing kernel also set shortcomings Type containers installed host work kernel host Hence cannot install Windows container Linux host vice-versa Isolation security -- isolation host container strong hypervisor-based virtualization since containers share kernel host cases past process container managed escape kernel space host Common cases containers used noticed containers used two major uses - usual operating system application packaging mechanism also cases like using containers routers don't want get blog like classify containers special types based used Although also point must use container technology case may well use cases I've classified way find certain technologies easier use certain cases Based two uses mentioned I've classified containers OS containers application containers OS containers OS containers virtual environments share kernel host operating system provide user space isolation practical purposes think OS containers VMs install configure run different applications libraries etc would OS VM anything running inside container see resources assigned container OS containers useful want run fleet identical different flavors distros times containers created templates images determine structure contents container thus allows create containers identical environments package versions configurations across containers Container technologies like LXC OpenVZ Linux VServer BSD Jails Solaris zones suitable creating OS containers Application containers OS containers designed run multiple processes services application containers designed package run single service Container technologies like Docker Rocket examples application containers even though share kernel host subtle differences make different would like talk using example Docker container Run single service container Docker container launched runs single process process usually one runs application create containers per application different traditional OS containers multiple services running OS Layers containers RUN commands specify Dockerfile creates new layer container end run container Docker combines layers runs containers Layering helps Docker reduce duplication increases re-use helpful want create different containers components start base image common components add layers specific component Layering also helps want rollback changes simply switch old layers almost overhead involved Built top container technologies time ago Docker built top LXC look Docker FAQ mention number points point differences LXC Docker idea behind application containers create different containers components application approach works especially well want deploy distributed multi-component system using microservices architecture development team gets freedom package applications single deployable container operations teams get freedom deploying container operating system choice well ability scale horizontally vertically different applications end state system different applications services running container talk using APIs protocols supports order explain means run app container using Docker let's take simple example three-tier architecture web development PostgreSQL data tier Node js application tier Nginx load balancer tier simplest cases using traditional approach one would put database Node js app Nginx machine Deploying architecture Docker containers would involve building container image tiers deploy images independently creating containers varying sizes capacity according needs Summary general want package distribute application components application containers serve good resort Whereas want operating system install different libraries languages databases etc OS containers better suited article guest post Akshay Karle developer ThoughtWorks currently working Snap CI Gabor Nagy's Picture Gabor Nagy Full stack marketing track zero hero web development https twitter com hellogabor Hire author Get early access posts Please enable JavaScript view comments powered Disqus comments powered Disqus"),
('The development process HubSpot uses and why', "HubSpot Product Team Open Source Blog We're Hiring HubSpot Product Blog Defining HubSpot Development Process fa icon calendar' May 22 2015 Jeremy Crane Tweet One questions people ask product team software development process use practice scrum agile shop HubSpot take Kanban approach lean last one feels little personal doesn answer always follow process pretty much solve customer every time roll eyes no-process process might always crowd-pleaser it's really works team ve taken ton inspiration people much smarter find approach sticks biggest influence Eric Reis Lean Startup model course re hardly startup anymore found core product market fit long time ago scale name game right re always iterating process developing go best way describe process looks like today analogy younger leaner days fair amount sailing loved water racing power wind Looking back see strong parallels sailing build products HubSpot reality sailing matter much plan measure study never truly know conditions actually water wind different currents different waves different planned Even crew physical mental state different expected stepping onto boat Water wind people extraordinarily dynamic despite good sailor always get point point B using instincts instruments find right path Every one small dev teams goal point B spend ton time defining ll know get goals combination high level could something big build CRM sales rep would love make blog editing experience writer-friendly timing INBOUND big annual conference July typical targets long clear shared definition success team autonomy figure best solution reaching point B goal next step get water world means getting something front customer quickly possible instincts instruments qualitative quantitative data customers get feedback product app feature learn respond Sometimes means pivot figure new route times surprises stay course believe roadmaps specs allow teams change direction based conditions water Similarly sprints Teams hellbent getting point learning quickly possible come plan put timer finding right solution particular effort could take couple months others could couple hours let artificial boxing time define tack change courses make timelines deadlines tricky mentioned set big broad timelines getting point B define incremental deadlines team define milestones based beauty helps teams get aggressive polishing product endlessly Done better perfect Besides thing perfect especially true comes development processes sailing approach allowing us scale solve customer everyday doesn mean perfect everyone Companies find process floats boat based goals conditions team organizations want get going ship faster agile may make lot sense partner crime HubSpot Christopher O Donnell pretty interesting tweet storm months back sharing thoughts agile processes Maybe bug enough ll write proper post topic process works fits ecosystem product development Small teams high levels autonomy engineering ownership mission solving customer key ingredients make sailing approach work guess ship fairly appropriate mantra us afterall Topics Product Written Jeremy Crane VP Product Marketing Products fa icon facebook-square fa icon linkedin-square fa icon twitter-square fa icon google-plus-square Subscribe Email Updates Topics Product Engineering Design Product Management UX Culture Career Growth Recent Posts Meet Movers Makers le Brehony Product Manager Defining HubSpot Development Process Software Internationalization 101 Go Global Without Slowing Product Breakfast Recap Product Managers Build Trust Engineers Meet Movers Makers Jen Huang Tech Lead Us Use little footer reinforce message people love working since global module edit make changes across every page appears Learn fa icon long-arrow-right Links Contact Us fa icon phone fa icon envelope yourname company com fa icon home 25 First Street Cambridge MA 02141 fa icon facebook-square fa icon linkedin-square fa icon twitter-square fa icon pintrest-square Copyright 2014 Designed fa icon heart HubSpot fa icon chevron-up"),
('The 3 Legs of an Architect', "Gregor's Ramblings HOME PATTERNS RAMBLINGS ARTICLES TALKS DOWNLOAD BOOKS CONTACT 3 Legs Architect DEC 28 2014 MEHi Gregor Hohpe co-author book Enterprise Integration Patterns like work write asynchronous messaging systems service-oriented architectures sorts enterprise computing architecture topics also Chief Architect Allianz SE one largest insurance companies world TOPICS RAMBLINGS Architecture 5 Conversations 8 Design 26 Events 26 Gregor 4 Integration 13 Messaging 11 Modeling 5 Patterns 7 Visualization 3 WebServices 5 Writing 11 POPULAR RAMBLINGS Starbucks use 2-phase commit Diagram-driven Design EIP Visions Hub spoke Correlation Conversations makes good integration developer RECENT Old Architecture - Best Ramblings SATURN Conference 2015 Free Gift Subscription Pattern Google Cloud Pub Sub RESTful Conversations Sync Swim Architect Elevator 3 Legs Architect Writing Busy People Defining software architect less challenging defining software architecture SEI maintains list software architecture definitions yet seen corresponding list software architects One could try skirt issue declaring software architects people make software architecture However think approach would missing important aspects architect Skill Impact Leadership asked characterize seniority architect resort simple framework believe applies high-end professions successful architect stand 3 legs Skill foundation practicing architects Depending specialization may include specific technologies architectures Service-oriented Architectures aspect architect usually acquired taking course reading book perusing on-line material certifications focus verifying skill partly verifying skill easily mapped multiple choice questions Impact measures skill applied projects benefit project company Impact take many forms financial gain cost avoidance reduced time-to-market ability incorporate unforeseen requirements late product cycle without start Lastly leadership acknowledges experienced architects mentor junior architects pass knowledge experience Thought leadership also furthers state field whole happen example publications speaking engagement research blogging classification maps well professional fields medicine studying acquiring skill doctors practice treat patients go publish medical journals pass learnings next generation doctors Virtuous Cycle model rather simple stool cannot stand two legs it's important appreciate balance three aspects Skill without impact new architects start students apprentices soon time get world make impact Architects make impact place for-profit business Impact without leadership great place solution architect engrained projects However without leadership architect hit glass ceiling won't become thought leader field Many companies don't put enough emphasis nurturing pushing architects level fear distraction projects reduces impact thus cost money result architects companies plateau intermediate level typically won't lead company innovative transformative solutions much higher cost companies like IBM formalize aspect leadership category give back distinguished engineers fellows expected give back community inside outside company Likewise leadership without prior impact lacks foundation may warning signal so-called ivory tower architects lack relation reality undesirable effect also happen impact stage architect lies many years even decades back architect may preach methods insights longer applicable current technologies insights timeless others age technology putting much logic possible database stored procedures speeds processing longer wise approach database turns bottleneck modern web-scale architectures Even dramatic misalignment nightly batch cycles modern 24 7 real-time processing requirements circle closes senior architect mentors junior architects feedback cycles software architecture inherently slow process save new architects many years learning making mistakes end 10 well-mentored junior architects much impact one senior architect aspect critical scale architect skill continuously trying recruit architects sense many large enterprises similar need architects scaling skill set important ever Mentoring benefits mentee also mentor old saying really understand something need teach someone else true architecture Likewise giving talk writing paper requires sharpen thoughts often leads renewed insight spin right round Experienced architects correctly interpret 80ies reference mean architect complete virtuous cycle partly driven ever changing technologies architectural styles person may though leader relational databases person may acquire skill NoSQL databases second time around building skill likely significantly faster build already learned sufficient number cycles may fact experience curmudgeons always knew really much new software architecture we've seen Another reason repeat cycle second time around understanding may much deeper level first time around may learned things second time may understand example likely misrepresentation writing Enterprise Integration Patterns form thought leadership Still elements pattern icons decision trees tables chapter introductions accidental based deep insight hindsight understand instances visual pattern language pattern-aided decision approaches Thus it's often worth make another cycle Share Tweet Read ARCHITECTURE RAMBLINGS SUBSCRIBE GREGOR'S RAMBLINGS Gregor Chief Architect Allianz SE frequent speaker asynchronous messaging service-oriented architectures co-authored Enterprise Integration Patterns Addison-Wesley mission make integration distributed system development easier harvesting common patterns best practices many different technologies www eaipatterns com 2003-2015 rights reserved"),
('Jon Blow: Jai - Custom Allocators and Threads', "Skip navigation UploadSign inSearch Loading Close Yeah keep Undo Close video unavailable Watch QueueTV QueueWatch QueueTV Queue Remove allDisconnect Loading Watch Queue TV Queue __count__ __total__ Demo Implicit Context Jonathan Blow SubscribeSubscribedUnsubscribe9 754 Subscription preferences Loading Loading Working Add Want watch later Sign add video playlist Sign Share Report Need report video Sign report inappropriate content Sign Transcript Statistics 5 532 63 Like video Sign make opinion count Sign 64 1 Don't like video Sign make opinion count Sign 2 Loading Loading Transcript interactive transcript could loaded Loading Loading Rating available video rented feature available right Please try later Published May 21 2015This more-formal demo compiler opposed random livestreams happen URL code follow along tinyurl com l9sw25dSorry blurriness hey download sources crisp Category Travel Events License Standard YouTube License Show Show less Loading Autoplay autoplay enabled suggested video automatically play next Next Q Implicit Context - Duration 9 34 Jonathan Blow 1 366 views 9 34 Play nextPlay Q Polymorphic Procedures - Duration 46 40 Jonathan Blow 2 203 views 46 40 Play nextPlay Replacing printf part 3 - Duration 1 57 37 Jonathan Blow 1 932 views 1 57 37 Play nextPlay Ideas new programming language games - Duration 1 55 24 Jonathan Blow 100 513 views 1 55 24 Play nextPlay Replacing printf part 2 re-upload - Duration 1 59 57 Jonathan Blow 1 305 views 1 59 57 Play nextPlay Replacing printf - Duration 1 53 26 Jonathan Blow 4 415 views 1 53 26 Play nextPlay Programming Language Games talk 2 - Duration 1 30 26 Jonathan Blow 24 393 views 1 30 26 Play nextPlay Demo Base language compile-time execution - Duration 2 07 18 Jonathan Blow 36 345 views 2 07 18 Play nextPlay Demo Iteration arrays uninitialized values enums - Duration 59 39 Jonathan Blow 12 932 views 59 39 Play nextPlay Q Iteration arrays uninitialized values enums - Duration 53 29 Jonathan Blow 6 483 views 53 29 Play nextPlay Data-Oriented Demo SOA composition - Duration 1 32 47 Jonathan Blow 16 042 views 1 32 47 Play nextPlay Q Data-Oriented Demo - Duration 45 22 Jonathan Blow 4 169 views 45 22 Play nextPlay Demo Run-Time Compile-Time Type Information - Duration 1 09 43 Jonathan Blow 7 570 views 1 09 43 Play nextPlay Q Run-Time Type Info - Duration 52 31 Jonathan Blow 2 829 views 52 31 Play nextPlay Arguments Return Values - Duration 1 05 56 Jonathan Blow 7 330 views 1 05 56 Play nextPlay Q Arguments Return Values - Duration 32 08 Jonathan Blow 2 755 views 32 08 Play nextPlay char directive starting operator - Duration 1 45 29 Jonathan Blow 3 477 views 1 45 29 Play nextPlay Polymorphic Procedures part 1 - Duration 51 51 Jonathan Blow 6 516 views 51 51 Play nextPlay Polymorphic Procedures part 2 - Duration 1 10 46 Jonathan Blow 3 239 views 1 10 46 Play nextPlay iMovie Fails 15 iMovie '11 CUTs - Duration 0 27 CyberneticArts 276 views 0 27 Play nextPlay Language English Country India Safety History Help Loading Loading Loading Press Copyright Creators Advertise Developers YouTube Terms Privacy Policy Safety Send feedback Try something new Loading Working Sign add Watch Later Add Loading playlists"),
('Visual C++ Team Developer Survey (blog post)', 'Sign MSDN Blogs Microsoft Blog Images May - Take Survey MSDN Blogs Visual C Team Blog May - Take Survey Server Tools Blogs Developer Tools Blogs Visual C Team Blog Executive Bloggers Scott Guthrie Somasegar Brian Harry Steve Guggenheimer Visual Studio Visual Studio Visual Studio Code Diagnostics LightSwitch Line Business Apps Beth Massi Setup Install Heath Stewart Application Lifecycle Management Application Insights Release Management Team Foundation Server Testing Visual Studio Online Languages Visual Basic Visual C Visual C Visual F JavaScript TypeScript NET NET NET Parallel Programming ADO NET Managed Providers DataSet EF ASP NET Scott Hanselman OData Team WPF Platform Development Apps Windows Bing Internet Explorer Microsoft Azure Office Office 365 Development Web Visual C Team Blog Common Tasks Blog HomeEmail Blog AuthorRSS commentsRSS posts Search Search blog Search blogs Tags Announcement Announcements C C language C 0x Channel 9 Community compiler debugging design Dev DirectX IDE Intellisense MFC Parallelism performance STL Survey VC VS2010 weekly roundup Windows 7 windows 8 Windows Store Apps Archives Archives May 2015 3 April 2015 12 March 2015 5 February 2015 3 January 2015 4 December 2014 4 November 2014 12 October 2014 5 September 2014 6 August 2014 7 July 2014 6 June 2014 11 May 2014 3 April 2014 8 March 2014 5 February 2014 8 January 2014 10 December 2013 5 November 2013 6 October 2013 4 September 2013 9 August 2013 7 July 2013 8 June 2013 9 May 2013 7 April 2013 7 March 2013 6 February 2013 9 January 2013 8 December 2012 4 November 2012 11 October 2012 12 September 2012 9 August 2012 5 July 2012 3 June 2012 6 May 2012 5 April 2012 6 March 2012 6 February 2012 8 January 2012 2 December 2011 1 November 2011 3 October 2011 6 September 2011 4 August 2011 2 July 2011 3 June 2011 14 May 2011 11 April 2011 11 March 2011 16 February 2011 12 January 2011 15 December 2010 7 November 2010 1 October 2010 1 September 2010 3 August 2010 3 July 2010 3 June 2010 5 May 2010 2 April 2010 6 March 2010 9 February 2010 5 January 2010 5 December 2009 2 November 2009 5 October 2009 5 September 2009 3 August 2009 3 July 2009 4 June 2009 8 May 2009 7 April 2009 3 March 2009 7 February 2009 3 January 2009 2 December 2008 6 November 2008 6 October 2008 5 September 2008 1 August 2008 5 July 2008 1 June 2008 5 May 2008 5 April 2008 8 March 2008 3 February 2008 5 January 2008 5 December 2007 5 November 2007 10 October 2007 8 September 2007 6 August 2007 5 July 2007 6 June 2007 5 May 2007 5 April 2007 7 March 2007 9 February 2007 5 January 2007 4 December 2006 6 November 2006 2 October 2006 5 September 2006 5 August 2006 6 July 2006 5 June 2006 10 May 2006 3 May - Take Survey Eric Battalio 22 May 2015 10 38 Comments 1 Thank continued support surveys -- response rate continues phenomenal appreciate time spend detailed answers provide willingness connect 1 1 help us better understand create software Thank another survey one focuses tools use interaction Visual Studio take around 12 minutes complete Click http www instant ly hmy5G 1 Comments Survey Leave Comment Name Comment Please enter comment Please shorten content 3072 less Please add 4 2 type answer Post Publishing error occurred posting Please retry posting comment Comments Emily Woods 25 May 2015 5 51 Nice questionnaire find user interface SoGoSurvey much better Page 1 1 1 items 2015 Microsoft Corporation Terms Use Trademarks Privacy Cookies Report Abuse 5 6 426 415'),
('Architecture Improvement Method Guide', "Table Contents Method Guide aim42 1 Introduction 1 1 software changed 1 2 software need improvement 1 3 aim42 work 1 4 Patterns Practices Provide Guarantee 2 Analyze 2 1 Goals 2 2 works 2 3 Patterns Practices Analysis 3 Evaluate 3 1 Goals 3 2 Estimation 3 3 Pattern Practices Evaluation 4 Improve 4 1 Goals 4 2 Structure Improvement Practices 4 3 Practices Improvement 5 Cross-Cutting Practices Patterns 5 1 works 5 2 Crosscutting Practices 5 3 Architectural-Understanding 5 4 Collect Opportunities Improvement 5 5 Collect Issues 5 6 Expect Denial 5 7 Explicit Assumption 5 8 Fail Fast 5 9 Fast Feedback 5 10 Impact Analysis 5 11 Improvement Backlog 5 12 Issue List 5 13 Plan Improvements 5 14 Report-Structure 5 15 Separate-Cause-From-Effect 5 16 Slide Write 5 17 Traceability 5 18 Widen Options 6 Pattern index Appendix Domain Model Appendix B Bibliography Appendix C Glossary Appendix D Organizational Stuff Team License Contribute aim42 org Appendix E Asciidoc Help Headings Cross-References external Links Anchor Images Diagrams Lists Admonitions Files Directories Attributes Footnotes Typesetting Appendix F add new pattern practice Method Guide aim42 aim 42 supports software evolution maintenance migration improvement - systematic pragmatic way aim42 collection practices patterns support software evolution maintenance migration improvement software systems Optimize software reduce maintenance cost Control risks issues technical debt Organizes patterns practices three phases Analyze Evaluate Improve Free open-source contributions welcome Grounded practice proven approaches backed serious research Authored aim42 community lead Dr Gernot Starke gernot starke innoq com 1 Introduction 1 1 software changed Software systems least practically used changed time Features added modified removed user interaction streamlined performance tuned changes external interfaces systems reflected reasons changing system grouped four categories see ISO-14764 Corrective changes fixing failures within software system Adaptive changes data structures rely changed external interfaces changed - system cope changes technology framework product used within system available longer needs replaced Perfective changes operational costs reduced maintenance costs reduced existing documentation reflect truth resource consumption needs optimized system needs work faster system needs become reliable fault-tolerant people need new features system needs integrated new neighbour system needs comply new regulations laws system needs new improved user interface existing features modified removed Preventive changes technical debt reduced see - lots good reasons - 1 2 software need improvement important reason depicted following diagram cost-of-change software increases heavily time making people really unhappy pay changes called maintenance evolution new-features else additional effect long-term maintenance software strong decrease understandability system matures becomes difficult understand inner workings changes become increasingly risky consequences changes become difficult foresee render effort estimations quite blurry Figure 1 Reality Maintaining Software expensive negative effects share common root-causes lack conceptual integrity internal disorder overly complex internal structure either source code data overly complex concepts crosscutting solutions fine-grained problems overly complex inappropriate internal processes inappropriate selection technology frameworks libraries languages surely find 1 2 1 Long-Term Goal beginning though everything fine nice coupling cohesion appropriate technologies well written code understandable structures concepts see figure Goal Maintainable Software changes modifications tweaks supposed optimizations performed growing time budget pressure things got nasty maintainers piled called technical debt us software folks call quick-hack quick-and-dirty-fix detours abbreviations re quite sure know re talking - experienced seems normal situation bad exception Investment methodical systematic software architecture improvement following effect Figure 2 Goal Maintainable Software 1 3 aim42 work 1 3 1 Three Simple Phases aim42 works phased iterative manner Figure 3 Three Phases aim42 Analyze collect issues problems risks deficiencies technical debt within system development process Focus problems phase potential solution approaches addition develop document understanding internal structures concepts architectural approaches Evaluate determine value issues solutions improvements Improve systematically improve code structures reduce technical debt remove waste optimize three phases performed iteratively - explained Several cross-cutting practices patterns applied phases example documenting results collect-opportunities-for-improvement long- short-term planning activities 1 3 2 Common Terminology aim42 relies common terminology small set fundamental concepts Figure 4 aim42 domain terminology Issue problem error fault risk suboptimal situation causes within System processes related e g management operational development administrative organizational activities Cause Fundamental reason one several issues Improvement Solution remedy cure one several issues Cost issue cost unit appropriate business e g currency effort issue related frequency period time example cost every occurrence issue recurring cost per week Cost improvement cost monetary units improvement remedy tactic strategy Risk Potential problem Improvements change associated risks better worse even create new risks See also detailed Domain Model required casual reader 1 3 3 Iterative Approach compliance modern agile development methodologies aim42 fundamentally depends iteration feedback phases Within phase collect issues opportunities improvement depicted illustration Figure 5 Iterate Collect Issues improvements need related improvement-idea without existing issue - want optimize evaluated business-compatible unit Euro described See Evaluate 1 4 Patterns Practices Provide Guarantee sure aim42 work system organization yes always cannot guarantee Maybe software extraordinaire special needs treatment Maybe organization fit prerequisites way advanced anticipated approach use practices patterns approaches aim42 risk responsibility aim42 contributor team means held responsible results applying aim42 2 Analyze Figure 6 Analyze-Phase 2 1 Goals Obtain overview intent purpose quality requirements system System Develop document understanding internal structures concepts architectural approaches Find problems issues symptoms risks technical debt within system System operation maintenance otherwise related processes Understand root causes problems found potential interdependencies issues 2 2 works Systematically look issues various places various people effectively find issues need appropriate amount understanding system design System technical concepts code-structure inner workings major external interfaces development process One serious risk phase premature restriction certain artifacts aspects system search microscope re likely miss several aspects Figure Overview Important Analysis Pracices Always begin Stakeholder Analysis conduct Stakeholder Interview important stakeholders Improve Architectural-Understanding System Context-Analysis Documentation-Analysis read especially architecture documentation focus View Based Understanding Development-Process-Analysis Perform Static Code Analysis learn code structure in-the-large also helps identify risky code Capture Quality Requirements authoritative stakeholders systems Conduct Qualitative Analysis system architecture associated organization based upon specific quality requirements Inspect analyze involved organizational processes - development project-management operations requirements-analysis Perform Runtime-Analysis Quantitative-Analysis e g performance load monitoring process thread analysis Inspect data created modified queried system structure size volume specialities Finally Root Cause Analysis major issues found together appropriate stakeholders Never start solving problems thorough understanding current stakeholder requirements Otherwise risk wasting effort areas influential stakeholder cares 2 3 Patterns Practices Analysis Figure Detailed overview Analysis Practices Patterns 2 3 1 Atam Architecture Tradeoff Analysis Method Systematic approach find architectural risks tradeoffs sensitivity points Intent Apply ATAM method evaluate software architecture regarding compliance quality goals Description ATAM method consists four phases shown diagram Approach ATAM Figure 7 Approach ATAM phases Preparation Identify relevant stakeholders specific goals relevant stakeholders define primary goals architecture belongs relevant stakeholders determined Stakeholder Analysis Kickoff Present ATAM method Convince relevant stakeholders significance comprehensible specific architecture quality goals ATAM helps identify risks non-risks tradeoffs sensitivity points Calculation quantitative attributes subject method Present business objectives architecture goals Present business context relevant stakeholders especially business motivation reasons development system Clarify specific requirements architecture meet instance flexibility modifiability performance Present architecture system architect presents architecture system includes systems interactions System building blocks top abstraction level runtime views important use cases change modification scenarios Evaluation Explain detail architecture approaches following questions answered architect developers relevant quality requirements achieved within architecture implementation structures concepts solving relevant problems challenges important design decisions architecture Create quality tree scenarios context creative brainstorming stakeholders develop relevant required quality goals arranged quality tree Afterward quality requirements architecture goals system refined scenarios added quality tree found scenarios prioritized regarding business value Analyze architecture approaches respect scenarios Based priorities scenarios evaluation team examines together architect developers architecture approaches support considered scenario findings analysis Existing risks concerning attainment architecture goals Non-risks means quality requirements achieved Tradeoff points decisions affect quality attributes positive negative Sensitivity points elements architecture formative influence quality attributes Follow-up Present results Creation report Architectural approaches Quality tree prioritized scenarios Risks Non-risks Tradeoffs Sensitivity points Experiences ATAM method provides operational specific quality requirements discloses important architectural decisions System promotes communication relevant stakeholders ATAM method develop concrete measures strategies tactics found risks ATAM successfully applied many organizations variety systems widely regarded important systematic approach qualitative system architecture analysis 1 Applicability Evaluate architecture soon possible already construction phase better completion system Related Patterns Qualitative Analysis Capture Quality Requirements 2 3 2 Capture Quality Requirements Intent Make specific quality requirements system explicit Description Invite authoritative stakeholders joint workshop e g half- full-day Let write quality scenarios describe specific quality requirements system Moderate workshop Use scenarios formulate specific quality requirements Order scenarios within mostly hierachical quality tree similar ISO-9126 Scenario-based Quality Description Scenario describes reaction system certain event type event Figure 8 Structure Quality Scenarios Although definition concise needs explanation become understandable See figure Structure Quality Scenarios event user clicking button administrator starting stopping system hacker trying get unauthorized access event also manager needing another feature another manager wanting reduce operation costs government agency requiring financial data tamper-proof Experiences Needs moderation Brainstorming quality requirements usually works well moderated workshops given even trivial examples every stakeholder likely write several scenarios often received 80-120 different scenarios one-day workshops Uncovers problems risks Scenarios collected within brainstorming sessions often contain hidden problem descriptions risks problems current systems Covers organization process Scenarios sometimes cover process organizational aspects like release cycles faster Move Improvement Backlog Improves human communication Different stakeholders often start communicating systeme requirements workshops kind interaction happened long Applicability Use practice authoritative stakeholders available discussion workshop well-documented specific current quality requirements available might consider skipping practice although re quite sure good opportunity learn lot system stakeholders requirements opinions Consequences required constraints aka quality attributes system made explicit Also Known Non-functional requirements although term misleading functional requirements strongly influence quality system Documentation quality requirements Related Patterns Atam Explicit Assumption Qualitative Analysis Requirements-Analysis References workshop-based collection quality requirements described Clements-ATAM Real-world examples software quality requirements Currently available German language https bitbucket org arc42 quality-requirements document likely moved github arc42 organization Clements-ATAM contains brief description scenario-based quality description details setup workshops 2 3 3 Context-Analysis Intent Analyse external interfaces risk technology business value factors Use context gain overview System within business technical environment Identify risks problems immediate vicinity System Terminology distinguish following terms context analysis Business Context Adjacent organizations applications users interfaces either requiring providing services data System business context used describe overall business process es System involved Technical Context Adjacent hardware technical infrastructure either required System providing data events System used operated different hardware infrastructures might exist several different technical contexts Description Context analysis shall help identify issues associated external interfaces e g interfaces influence critical quality requirements system e g reliability security throuput runtime performance operation cost overly complex brittle fragile implemented unsuitable technology underdocumented poorly understood transport critical data important sensitive insecure transport especially huge amounts data high operational effort high usage cost e g cost-per-request similar high cost-of-change high maintenance costs difficult impossible modify enhance change suffer operational failures production issues Note user interfaces often belong context especially respect kind data events exchanged users user groups Due importance topic aim42 devotes section Example context diagram example fig Example Context View see user roles external systems context diagram accompanied tabular description elements relationships Example taken HtmlSanityCheck HtmlSC open source project Figure 9 Example Context View Table 1 Business Context Neighbor Description user documents software toolchain generates html Wants ensure links within html valid build system local html files HtmlSC reads parses local html files performs sanity checks within local image files HtmlSC checks linked images exist local files external web resources HtmlSC configured optionally check existence external web resources Due nature web systems check might need significant amount time might yield invalid results due network latency issues example complete check completed within 5 seconds quality requirement access external websites resources might hindered network latency even failures external interface responsible requirement likely contain risks 2 3 4 Data-Analysis Intent Analyse inspect data created manipulated system content structure quantity size Description data analysis could examine following topics Data Structure Data Access Data Size Data Validation Data Actuality Correctness Data Access Protection Backup Analyze Data Structures data structures suited represent problem domain first make structure existing data explicit e g creating rough sketch data model either informal diagrams entity-relationship class diagrams Focus overview kinds data stored format relationsships data elements Second create explicit model required domain data structures typical questions might help finding problems structural differences two models differences data types differences plausibity validity checking Analyze Data Access Get overview data access paths data read written queries match requirements complex mappings unsuitable indirections involved queries executed often large results number volume relationships query results computed appropriate indices exist Analyze Data Size parts data especially large relation record-size large single record record-volume many records exists plausible critical queries involve especially large parts data Analyze Data Validation data validated upon write upon read client server redundantly uniformly validation consistent current business rules validation overly complex validation implemented appropriate technical means Analyze Data Actuality Correctness Especially data concerning dynamic entities like people organizations markets commodities etc facts likely change time data stored facts might become invalid sooner later types information like tax records invoices bookings bank accounts created remain valid forever Peoples' address typically changes something 2-10 times lives Empirical studies show 5 10 business job email addresses become invalid every year parts data subject kind changes parts data known invalid contain invalid portions System handle potentially wrong invalid data appropriately organizational technical processes place deal data inconsistencies faults Analyze Data Access Protection overview kinds data need level access protection security concept place covering protection unauthorized access users roles organizations allowed access data managed process place revoke access outdated users roles organizations plan shall happen case security breaches data theft data theft recognized Analyze Backup universal backup strategy place covering areas data storage backup strategy match business criticality data extend backup verified fallback scenario exist case partial complete data loss 2 3 5 Debugging Intent Identify source error bug misbehavior observing flow execution program detail Many software developers met violated basic rules debugging worked haste took wrong assumptions imagined-instead-of-read simply hunted bugs wrong parts system Description Debuggers well-known important tools software developers Yet - finding bugs often difficult expected - despite powerful tool support Approach search bugs errors following order Get clear precise description error detailed wording error messages log messages stacktraces similar information Know context error exact version system operating system involved middleware hardware settings knowledge input data leads error Minimize external disturbance searching errors need concentrate observe details Shut chat twitter clients notifications phone Send away boss important management mission lean back reflect error Perhaps colleague support Reproduce error live system rely assumption reproduce - make sure reliably really reproduce Obtain exact version required source code involved data Reproduce error development environment ensures development environment consistent live system Call error assumption question Realize symptom cause error Identify building blocks involved error path Understand error scenario need know business technical scenario aka process activity flow error steps within system external interfaces precede error step example View Based Understanding Make scenario explicit - draw scribble diagram See diagram Divide conquer example error arises building block 1 suppose processing within system spaned blue marked data path building blocks 2 6 involved Cut path half check assumption transition one half beetween building block 4 3 error observable error occures considered transiton Otherwise look error transition Figure 10 Divide conquer debugging tactics Plan debugging strategy Think expected outcome every part scenario know re traveling Pisa Italy won confuse Leaning Tower error Look imagine Sherlock Holmes succesful detective formulated golden rule debugging capital mistake theorize one data Instrument system use step debugging Look exactly messages read carefully Change one thing time test error disappears Aim errors pistol scattergun Apply 4-Eye-Principle Describe problem state-of-debugging somebody else Especially clarify assumptions Experiences locating errors takes long re propably facing one following issues suffer assumption currently valid think something instead observing - let mind deceive eyes ears ignore context test wrong version wrong data wrong operating system Applicability Whenever bug misbehavior program reported debugging help identify root cause Debugging help understanding system make inner working explicit Related Patterns Root Cause Analysis 2 3 6 Development-Process-Analysis Intent Analyse inspect development process documented described stakeholders appropriateness problems problem-areas Description discussion 2 3 7 Documentation-Analysis Intent Analyse existing documentation availability correctness actuality problems problem-areas Description discussion Look missing documentation over-documentation outdated documentation 2 3 8 Infrastructure-Analysis Intent Analyze technical infrastructure System e g respect time resource consumption creation Part Runtime-Analysis Description Infrastructure analysis associated general Runtime-Analysis focus technical infrastructure operation test development System Inspect analyse technical infrastructure example following aspects production hardware characteristics type size hardware suit system business problem Hardware might consist several subsystems like processing various levels storage processor cache RAM flash disk tape others graphical network interfaces arbitrary specialized hardware development test hardware software infrastructure like operating system required database middleware frameworks libraries helps measure runtime behavior agains expected required values example processing time memory consumption Instrument System support type analysis Specialized stakeholders like datacenter administrators operating-system database experts hardware designers often pinpoint critical aspects existing infrastructures experience Apply View Based Understanding especially infrastructure overview e g deployment diagram get overview existing hardware plus associated software Start hardware context refine Ensure least hardware-types node-types plus relations networks buses visible Double-check overview appropriate stakeholders Experience combination hardware software arbitrary complex Even small configuration settings operating systems like block packet sizes conflict hardware capabilities effectively ruining overall system performance Related Practices Improve Logging Infrastructure-Analysis Instrument System Quantitative-Analysis 2 3 9 Instrument System Use retroactive modification executables target cross-cutting concerns make existing software-base tell internals Ways achieve include Aspect Oriented Programming AOP Monkey Patching meta programming techniques Intent Find system really used runtime relationships well facts easily determined Static Code Analysis even situation system design largely undocumented architecture work thus mostly relies assumptions interviews lore Description many languages today possible define operation alter behavior certain structures system without modifying original source code Java often done byte code instrumentation Ruby PHP languages built mechanisms re- define behavior system classes libraries theory instrumenting system therefore straightforward process Identify describe concern shall explored e g obectect-creation function entries exits code execution somethings else described terms mechanism used Write code collects data system behavior e g sends syslog writes file sends dedicated server creates SNMP Trap etc Use language specific mechanism create instrumented version system Replace part currently operational system instrumented version Collect data Replace instrumented version previously operational version real life since mechanisms instrumentation vary widely specific ways must found scenario tools like AspectJ provide easy ways instrument Java-Code Ruby metaprogramming model allows easy introduction crosscutting functionality gets harder languages languages may necessary modify dynamically linked library central operations introduce instrumentation without modifying original system special form pattern especially useful interpreted languages instrumenting source code manually Basically manually type code collect information re interested case especially important tried tested way replace instrumented system back original system Experiences even used cautiously instrumentation system design entail heavy performance penalties execution time space used bandwith etc alway make sure quick way switch back original un-instrumented version Applicability pattern almost universally applicable long way introduce instrumentation executable operations convinced possible switch back instrumented version real fast Related Patterns Static Code Analysis Runtime-Analysis Software Archeology Use Invariants Kill Zombies 2 3 10 Issue-Tracker-Analysis Intent Analyse entries issue-tracker identify critical areas components stakeholders discussion 2 3 11 Organizational-Analysis Intent Analyse inspect organization responsible system Description discussion Look violations Conways' law under-regulated processes organization overly strict constraints organizations lacking constraints anarchy orga-problems leading problems 2 3 12 Qualitative Analysis Intent Find analyze wether quality requirements met system specific quality requirements risks respect current architecture specific quality requirements currently non-risks Description Capture quality requirements ensure explicit specific valid current quality requirements available - preferably form scenarios Prioritize scenarios respect business value importance authoritative stakeholders every important scenario analyze architectural approach system takes decide wether approach seems appropriate risky Experiences Conducting workshops variety stakeholders often leads intense productive communication Applicability Use qualitative analysis support following situations need analyze specific quality requirements risk likely met system variety different stakeholders groups impose quality requiements - yet agreed common set requirements current understandable collection specific quality requirements system missing Also Known Atam References Atam Published Software Engineering Institute numerous whitepapers books especially Clements-ATAM 2 3 13 Quantitative-Analysis Intent Measure artifacts processes within system e g source code Description discussion Related Practices Runtime-Analysis Static Code Analysis 2 3 14 Pre Interview Questionnaire Intent Prior interviewing stakeholders present written questionnaire reflect advance Description specialisation questionnaire - targeted used stakeholders aka interview partners general questionnaire need collect appropriate topics questions suggestions Remember apply stakeholder-specific communication might useful create different questionnaires per stakeholder stakeholder-group work interviewer lead better interview results Mix open closed questions open questions require stakeholders formulate answers example Please explain closed questions ask stakeholders select several predefined choices Include Comments Remarks section end questionnaire stakeholders comment topics consider advance Pre Interview Questionnaire shall handed appropriate stakeholders advance days interview documents read processed external potentially critical stakeholders need care several details Stakeholder specific terminology Ensure questions understandable target audience See Stakeholder-Specific-Communication Ensure nice layout visual readability questionnaire shall fun work Ensure timely delivery stakeholders enough time think answers never force stakeholders answer questions time pressure Examples Download sample pre-interview questionnaire - currently German pdf version docx version Also Known Interview checklist Related Patterns Stakeholder Interview Questionnaire 2 3 15 Questionnaire Intent Support interviews guidance hints appropriate questions Description Prior taking interviews stakeholders formulate questions covering topics areas information might important interview partners stakeholders knowledge experience questionnaire specific single interview template multiple interviews Experiences Gernot Starke used questionnaires within several technical reviews audits helped stay track cover multitude topics even conducted several interviews consecutively usually printed one copy questionnaire every interview planned could sketch notes - always context notes already printed saving lot note-taking effort Applicability Whenever interview stakeholders thorough preparation lead better results interviewers less likely forget important topics Consequences Questionnaires serve checklists interviewers aid group-interviews stay track Especially multiple interviewers conduct interviews preparing questionnaire lead homogeneous questioning Also Known Interview checklist Related Patterns Stakeholder Interview Pre Interview Questionnaire 2 3 16 Requirements-Analysis Intent Analyze document current requirements required features required constraints Description discussion Look document required features functions required quality attributes e g maintainability security etc constraints need met organizational requirements constraints hardware requirements constraints 2 3 17 Root Cause Analysis find mistakes enough necessary find cause behind mistake build system minimizes future mistakes W Edwards Deming Intent Explicitly differentiate symptom cause Identify root causes symptoms problems issues Trace problem origins Description people fight problems real cause faced problem brains tend start immediately search proper solutions exactly problem instance application regularly crashes Out-Of-Memory-Errors might reflex increase memory settings Instead ask really problem symptom real problem e g programming failure memory releasing iterative process asking causal chain must traced root cause Experiences Users system complained low performance Developers started tuning database tweaking application server optimizing inner loops pretty well know mean solve issue applying Take Mean Say found users complained low performance data entry switch back-and-forth different regions input-screens actual cause complaint improper field order input forms adapting order simply dragging fields labels around screen users perfectly happy systems Applicability pattern always considered faced problem Consequences eliminate cause Also Known Inspect-Cause Separate-Cause-From-Effect Related Patterns Take Mean Say maybe told real problem References http en wikipedia org wiki Root_cause_analysis 2 3 18 Runtime-Analysis Intent Analyze runtime behavior System e g respect time resource consumption creation Description Ask stakeholders perceived runtime behavior - double check measuring Measure runtime behavior e g profilers logs traces Inspect artifacts created runtime e g logfiles protocolls system-traces information problems root-causes system behavior Perform Infrastructure-Analysis learn technical infrastructure WARNING Measuring might influence behavior especially disturbing multi-threaded multi-user multi-core applications Related Practices Infrastructure-Analysis Instrument System Quantitative-Analysis 2 3 19 Software Archeology Intent Understand software examining existing source code Description Make sure complete code scripts frameworks tools required build system Ensure access rights required systems least version control database participating servers etc Ensure build system scratch compile load dependencies link whatever steps neccessary Practice View-Based Understanding sketching notes diagrams Get aerial view glimpse topmost biggest structures code Try understand terminology original authors scanning code searching multiple occurances Start creating glossary Introduce tracing logging statements Aspect-oriented tools like AspectJ might helpful Applicability understand system little current documentation knowledgeable technical stakeholders development team available Related Patterns Code Reading Runtime-Artifact-Analysis Structural-Analysis References Hunt-Archeology pleasant introduction without adherence strict pattern template Recommended reading Moyer-Archeology short report 2 3 20 Stakeholder Analysis Find people roles organizational units organizations interests System Intent Ensure concerned parties adressed Description Get initial list stakeholders project management Distinguish roles individuals stakeholders need adressed individually roles might sufficient identify several possible representatives Take following list examples roles top-management business-management project-management product-management process-management client subject-matter-expert business-experts business-development enterprise-architect IT-strategy lead-architect developer tester qa-representative configuration-manager release-manager maintenance-team external service provider hardware-designer rollout-manager infrastructure-planner infrastructure-provider IT-administrator DB-administrator system-administrator security- safety-representative end-user hotline service-technician scrum-master product-owner business-controller marketing related-projects public government agency authorities standard-bodies external service- interface providers industry- business associations trade-groups competitors Include stakeholders simple table Table 2 Stakeholder Table Role Name Description Intention Contribution Contact name person role responsibility System intention System need contribute improvement System optionally required contact roles name primary contact person Experience often stakeholder roles involved obvious Especially people directly involved project- development work sometimes forgotten e g standard bodies external organizations competitors press media legal department employee organization Related Patterns Stakeholder Interview Stakeholder-Specific-Communication References arc42 example stakeholder table https github com arc42 arc42-template blob master src DE asciidoc plain src kap01 adoc 2 3 21 Stakeholder Interview Conduct personal interviews key persons System associated processes identify clarify discuss potential issues remedies Intent Learn people know care System everything around Description Conduct Stakeholder Analysis first find interview Apply breadth-first strategy speak people different departments roles management-levels Include least business-people IT- business manager end-user developer tester customer-service subject-matter-expert Plan interview dates least 5-10 days advance chose quiet location make sure nobody overhear interviews possible send stakeholder- role-specific Pre Interview Questionnaire days advance Ensure no-stress no-fear situation Never top-managers supervisors present interviews subordinates Explain positive intent role improvement project water cookies hand Make interview partners feel comfortable relaxed honest humble Never ever promise something cannot guarantee Ask open questions Tape protocoll questions answers typical questions e g role project great System business processes worries System currently 3 worst problems problems risks see business development operation usage show demonstrate problem reproduce problem occur consequences problem cares problem somebody overcome problem processes working differences theory practice time money qualified people top-3 measures propose anyone think need speak isn list would like involved rest project best way reach case people told severe problems try experience see problems end interview give short feedback summarize important results ensure understood interview partner correctly Experience Expect usual difficulties human communication people love dislike work interview intent endeavour people hold back information either accidently deliberately create big picture people tend focus specific issues Double-check critical statements people might exaggerate Related Patterns Stakeholder Analysis identify important authorative stakeholders Stakeholder-Specific-Communication Questionnaire especially Pre Interview Questionnaire References http boxesandarrows com a-stakeholder-interview-checklist nice checklists several kinds stakeholder interviews 2 3 22 Static Code Analysis Intent Static Analysis serve two purposes Analyse source code identify building blocks dependencies determine complexity coupling cohesion structural properties Detect certain types bugs dangerous coding patterns bad coding style Description Use source code analysis tools analyse static properties systems' source code e g following Coupling dependencies building-blocks e g classes packages modules subsystems system depend upon intra-system call- communication relationships Experiences Many projects commercial open-source apply automated static code analysis part build processes Applicability Apply static code analysis code base medium sized large appropriate tools available Many metrics tools tailored OO languages Dynamically typed languages often limited tool support Also Known Code quality analysis Software measurement metrics Related Patterns Software Archeology Structural-Analysis References SonarQube LGPL-licenced open-source platform analyze code JDepend open-source Java dependency checker Sonargraph static code analyzer focused software structure architecture 2 3 23 Take Mean Say Intent Find real meaning intention stakeholders Description Natural language risk semantics senders' side differs semantics receiver People simply misunderstand meaning words differs people Therefore people mean want need sometimes say due either semantic differences sender receive sides stressful inconvenient communication situations e g boss present communication pressure people distracted tired reasons NLP neurolingustic programming practitioners recommend mirror things hear communication partners words might facilitate understanding slightest impression indicator communication partner communicate real intention clarify giving explicit Fast Feedback Applicability Apply pattern whenever communicate verbally people aka stakeholders e g meetings conferences phone calls etc Especially verbal communication differs paralanguage gestures clarify communication partner really meant Consequences Improved understanding stakeholders Explicit Assumption instead implicit ones Related Patterns Fast Feedback give immediate feedback within ongoing communication every Stakeholder Interview apply pattern Stakeholder Analysis find important stakeholders apply pattern References Special thanx Phillip Ghadir humble claim discovery giving pattern name 2 3 24 User-Analysis Intent Get overview user-categories -groups goals requirements expectations Find issues users system Related Stakeholder Analysis Context-Analysis Requirements-Analysis contrast analysis practices user-analysis also include useability layout design considerations Description 2 3 25 View Based Understanding Intent Understand inner workings internal code structure systems Document communicate via architectural views especially building-block view Description Apply arc42 views Apply Static Code Analysis Interview technical stakeholders Start either business context mainly external business interfaces technical context involved hardware network structure known technology areas e products programming languages frameworks used Figure 11 Three main views building block runtime deployment view Applicability Use view-based-understanding System medium large codebase Structural understanding code limited stakeholders explain reason code structure Documentation code structure existing outdated wrong Long-term maintenance evolution system required Consequences Explicit overview system context external interfaces Overview larger units source-code subsystems high-level components relationships Also Known building block view formerly known logical view high-level overview Related Patterns Architecture-Documentation Context-Analysis 2 3 26 References arc42 Kruchten 3 Evaluate Figure 12 Evaluate-Phase 3 1 Goals Make issues problems risks found analysis comparable estimating measuring value call activity evaluate estimate value problems issues risks remedies prioritize issues remedies improvement measures Usually evaluation implies estimation cases measure observe evaluation subject produce hard facts 3 2 Estimation Figure 13 Evaluation Concepts Domain Model Table 3 Evaluation Domain Concepts Domain concept Explanation Example Estimation approximation subject issues problems remedies needed facts real observations available possible Subject recurring problem System associated processes Parameter important element foundation estimation number developers system Lines-of-Code LOC Assumption fixed setting parameter See Explicit Assumption Observation measure count calculate gather real data parameters every developer concerned problem count number Interval see Estimate Interval 15 25 3 3 Pattern Practices Evaluation 3 3 1 Estimate Feature Value Intent Estimate monetary value given feature compare features system Description Involve business management stakeholders often clear notion business value cannot determine real numbers available use explicit assumptions Instead numbers might use categories orders-of-magnitude like small medium large prefer numbers though 3 3 2 Estimate Interval Intent Estimation guess measurement Estimates uncertain otherwise would observations measurements Description Therefore estimate intervals giving lower upper bound estimate difference two shows confidence estimate difference relatively small shows high confidence aware anchoring effect http en wikipedia org wiki Anchoring Good estimates ensure estimated value contained interval high probability Estimates often rely assumptions - Explicit Assumption 3 3 3 Estimate Issue Cost Intent Find much given issue costs units money effort period time every occurence Description Finding cost issue usually requires estimation guessing uncertainty propability involved example server needs rebooted every 24hrs operator needs 30 minutes perform reboot corresponding activities - approximate cost problem let say month 5 workdays 4 weeks 30 min 10hrs operator-effort multiply approximate average wage get problem cost possible try measure observe instead guessing estimating cannot determine real numbers use Explicit Assumption need guess estimate approximate Related Practices Estimate Interval Explicit Assumption 3 3 4 Estimate Improvement Cost See Software Estimation Black Art Demystified Steve McConnell 4 Improve Figure 14 Improve-Phase 4 1 Goals Plan coordinate measures opportunities improvements eliminate problems issues found analysis whole category practices devoted step called Determine-Improvement-Approach Apply selected opportunities improvement Change code structures concepts processes achieve better software Reduce costs technical debt Eliminate issues found analysis phase Optimize quality attributes like performance maintainability security Optimize operation administration processes effort cost 4 2 Structure Improvement Practices Concepts Improvement Fundamentals principles consider whatever steps take road improvement Approaches Overall strategic long-term decisions tackle improvement Examples include Big-Bang Strangulate-Bad-Parts Change-Via-Split Practices fine-grained practices patterns structured several categories 4 2 1 Fundamentals improvement take number fundamental principles granted depicted figure Improvement Fundamentals Figure 15 Improvement Fundamentals fundamental principles surely belong software engineering good practices - consider indispendsable improvement projects Fast-Feedback Get feedback actions changes early possible adjust quickly adequate Improve Iteratively Improve potentially small iterations increments change disturb negatively affect system associated processes organisation Iterations prerequiste whole phased improvement Prototype-Improvement Verify viability effectiveness improvements usually smaller scales reasonable risks Verify-After-Every-Change Always make sure changes even minor ones leave system intact awesome Jerry Weinberg written several examples failures Reduce Complexity Simpler solutions often easier comprehend maintain operate Therefore always strive simplicity reduction accidental unneccessary complexity Explicit Assumption Compensate missing facts especially requirements goals estimates opinions explicit written assumptions facts See Explicit Assumption Group Improvement Actions Group related actions refer similar entities potential synergies utilized 4 2 2 Approaches central decision take improvement-approach overall long-range strategic decision want tackle improvement Figure 16 Improvement Approaches TODO Describe Approaches Change-Via-Copy Create two identical copies whole system Clean-up reduce gut copies individually evolve copies independently Change-Via-Split Split original system neccessarily distinct parts Clean-up parts individually evolve parts independently similar identical Change-Via-Copy Keep-Data-Toss-Code value sometimes resides data keep data intact replace functional service process part system Frontend-Switch Start creating new backend parts Frontend routes requests new backend parts others still existing ones Gradually enhancing new backend parts frontend routes requests new backend Big-Bang Keep existing system limited time apply critical bugfixes parallel build replacement system Replace old new predefined time Strangulate-Bad-Parts TBD Evolution approach extensively practiced Swiss Bank published book Underlying idea refactor parts system actually changed especially move interfaces new service standard replace legacy technologies couplings via DB etc time services emerge moved new platform altogether Mainframe Java 4 2 3 Categories divide improvement practices several categories shown figure Improvement Categories Figure 17 Improvement Categories 4 3 Practices Improvement Figure 18 Improvement Practices Part 1 Figure 19 Improvement Practices Part 2 Code Restructuring Practices 4 3 1 Practices Detail given alphabetical order Anticorruption Layer Assertions Automated-Tests Branch-For-Improvement Extract-Reusable-Component Front-End-Switch Group-Improvement-Actions Handle-If-Else-Chains Improve-Code-Layout Improve Logging Interface Segregation Principle Introduce Boy Scout Rule Introduce-Layering Isolate-Changes Keep-Data-Toss-Code Manage Complex Client Dependencies Facade Measure Never-Change-Running-System Never-Rewrite-Running-System Quality-Driven-Software-Architecture Refactoring Refactoring-Plan Remove-Nested-Control-Structures Sample-For-Improvement Schedule-Work Untangle-Code Use Invariants Kill Zombies 4 3 2 Anticorruption Layer Intent anticorruption layer logical layer provides stable interface potentially volatile software components long interface remains untouched developers implement changes even exchange third-party software without affecting clients interface Description Experiences real-life experiences Anticorruption layer search-index defer decision best performance achieved Elastic Search Solr self-developed Lucene index Applicability Apply pattern clients shall protected internal changes module subsystem Consequences Allows ex change software elements without affecting depending components Introduces one level indirection thus may increase complexity Also Known Related Patterns Isolate-Changes alternative complimenting approach References 4 3 3 Improve Logging Intent Employ sophisticated logging mechanisms modern logging frameworks distributed log collection visualization tools order gain detailed information system runtime minimal predictable performance impact Description time ago quite common output log statements standard people usually use logging frameworks nowadays give control logged log entries go However turns logging frameworks feature gems widely known used name Diagnostics Contexts also known Mapped Diagnostics Context MDC Nested Diagnostics Context NDC help store additional context information succeeding log statements Usage examples contexts login name current user correlation IDs order enable cross-application log tracing transaction IDs possibility filter log entries belong together Additional log levels markers help make easier filter log stream good advice think marker log design beginning project try agree common way phrase log statements Asynchronous appenders e log emitter allow high-throughput logging lower impact application performance Structured log formats produce machine-readable output Usually log files written using less standardized text output Log files XML JSON parsed digested easily allow better filtering since information like diagnostics contexts always available formats Filters enable context-based logging dispatch log entries different log appenders instance possible log warnings switch debug logging specific user environments turns problematic rely single logging API could case application runs within container container-like framework already employs configured logging framework order independent conrete logging frameworks logging facades like SLF4J preferred using framework API directly Despite focus software development logging also operations topic Often turns difficult get recent log files operations team Another pain point useful log information scattered across multiple log files stored different locations different systems Log aggregation tools Splunk Logstash Apache Flume fluentd consume unify log data different sources e g files syslog network trigger alerts index log stream order make searchable tools like Kibana log data system systems easily analyzed visualized Correlation IDs contained logs used trace certain business-related requests across multiple distributed systems easily Using features makes problem analysis easier data available standardized fashion Experiences projects write log files less sophisticated fashion many cases log messages phrased rather unstructured way turns well-designed logging concept helps make log stream easier understand concept provide guidelines regarding log level used situation wording log messages could unified additional log levels markers shall used purpose customer project used object-relational-mapping ORM tool database independent access layer data access inherently transactional created lot database traffic deadlock situations database expected properly handled delayed retry mechanism approach worked quite well got frequently complaints operations team reported number ERROR log messages along longish stacktraces set alarm bells log messages written ORM tool whenever DB deadlock experienced Since application could perfectly deal situation error anymore logged WARN INFO best problem third-party framework used wrong log level thus causing lot confusion Bear mind working framework-like codebase thinking log levels Risks excessive amount log statements likely negative impact application performance impact however manageable using guarded log statements constructed certain log level enabled asynchronous appenders like disruptor-based approach used Log4J 2 context-sensitive logging e g enable debug logs certain scenario user Collecting indexing huge amount log data requires additional storage approx factor 10 Think retention policies order make data stream manageable Applicability pattern always considered Consequences Improved understanding runtime behavior application system systems Log messages well-structured meaningful carry context information case MDCs used Also Known Related Patterns pattern important enabler successful Runtime-Artifact-Analysis Instrument System similar pattern however limited temporary instrumentation needed Analysis phase identify scope certain problem cannot isolated without modifying code References 4 3 4 Interface Segregation Principle Intent Reduce coupling clients service providers Description Service components may provide functionality required one client remove client dependency functionality required introduce interfaces tailored client needs Applicability Apply clients require restricted functionality complex service deal low cohesion components cannot change Consequences Reduces coupling client service providers Changing service provider interface affect fewer clients Introduces additional interfaces must maintained find good compromise good client fit number interfaces Also Known Related Practices Never-Change-Running-System must meaning service component API must changed consider using Manage Complex Client Dependencies Facade Front-End-Switch References 4 3 5 Introduce Boy Scout Rule Boy Scout Rule software development basically states Always check module cleaner checked Robert C Martin Uncle Bob Robert C Martin proposed adoption rule boy scout rulebook reads Try leave world little better found software development world article Kevlin Henney 97 Things Programmer Know Henney Intent Enable crosscutting architectural improvement even feasible change whole codebase Often introduction concepts like layering deemed impossible due huge codebase would affected cases Boy Scout Rule approach lightweight way enhance code quality one day time Description Drafting improvement-backlog define specific rule set improve contents specific file types Specify much effort allowed perform specific clean-up operation Specify proceed cleanup takes much time Revisit rule set regularly Install mechanism ensure things big cleaned visiting file end improvement-backlog Example Boy Scout Rule agreement concrete agreement specific project - look rather different Boy Scout Rule agreement project X 2014-02-19 onwards Apply defined source code formatting via IDE adhere coding style formatting introduces errors errors fixed within 10 Minutes revert changes add file redo formatting list e g add TODO REFORMAT comment comment already exist add exclamation mark time handle file Move SQL strings db-encapsulation layer replace former direct database calls appropriate calls correct architecture elements takes longer 20 minutes revert changes add file list difficulties database extraction e g add TODO DB-EXTRACT comment comment already exist add exclamation mark time handle file Remove magic numbers source code replace constants e g replace item id 99 item id Item COMPOUND_ITEMS_THRESHHOLD time allows replace former magic number conditionals function business logic level e g replace item id Item COMPOUND_ITEMS_THRESHHOLD item is_compound Experiences Introducing Boy Scout Rule heavily deteriorated code base induces heavy payback technical-debt often gets challenged team members senior management important point extended time spent fixing artifacts teams goes actually explicit payment technical-debt interest rate Risks Sometimes Boy Scout Rule taken means cases higher goals tend forgotten thus Applicability pattern Introduce Boy Scout Rule always applied effective uses unstructured code layers separation concerns etc systematic weaknesses insecure logging insecure handling database inserts etc Consequences introduction Boy Scout Rule often proved enable structural improvements prerequisite higher level architectural improvements Also heightens team awareness good practices code base introduction Boy Scout Rule leads dramatic shift distribution code quality parts system get changed also get care stable parts system approaches utilized Also Known Related Patterns Refactoring-Plan alternative complimenting approach Introduce-Layering performed using Boy Scout Rule Anticorruption Layer performed using Boy Scout Rule improvement-backlog basis tasks performed applying Boy Scout Rule References original description boy scout rule found online Boy-Scout-Rule-article 4 3 6 Manage Complex Client Dependencies Facade Intent Simplify interaction client set service components Description clients use set components repeating patterns interaction patterns implemented Facade component interface Facade provides client tailored client need Technical details specific service component implementations handled inside facade Experiences Consider Facade must use generic frameworks systems cannot modify e g legacy systems Applicability Apply pattern clients use set components stereotypcial fashion Things handled facade recurring control flows technical details configuration components resource lookup error handling Consequences Enhances Information Hiding Clients need information components' technical detail Supports DRY principle complex interactions implemented one place need reimplement different clients Also Known Related Patterns Interface Segregation Principle References 4 3 7 Measure Intent measure optimize Coda Hale Description TODO explain different kind metrics static-code runtime organisational Experiences Risks measure many different parameters attributes might drown numbers Applicability pattern always considered Consequences Also Known quantitative analysis quantitative runtime analysis profiling organisational metrics Related Patterns pattern important enabler successful Runtime-Artifact-Analysis Performance-Analysis Instrument System Profiling similar pattern however limited temporary instrumentation needed Analysis phase identify scope certain problem cannot isolated without modifying code References Coda Hale Talk Metrics-Everywhere 4 3 8 Use Invariants Kill Zombies Intent Provide safe approach situations seems dangerous delete code whole modules huge system Static Code Analysis recognize whether code still use Description Oftentimes old systems contain lots code probably longer use still tended code puts burden every cross-cutting change - year-2000 efforts late nineties upcoming end-of-unix-system date rewrites New processor architectures new versions operating systems different handling byte-order kinds external regulations examples things make necessary make changes existing code whether still use code deemed dead like proverbial zombie still goes around munches everybody brain time next system-wide change kind zombie killed safely employing invariants invariant described Bertrand Meyer Object-Oriented-Software-Construction logical expression always true given set circumstances proposes actually verify invariants code happens invariant hold true open discussion - circumstances best fail-fast improving legacy software hundreds thousand users often option want make sure delete code invariant simple Pseudo-Code assertTrue false __FILE__ __LINE__ implement assertTrue case hard though pointed simple let program die approach might appropriate logging fact might sufficient effect Sending e-mail requires least infrastructure infrastructure code Sending SMTP-Trap might feasible environment classical situation calls trade-off decisions since piece code never called anyway things like sending e-mail calling webservice far question huge number deployments possible without problems also feasible de-escalate slowly use intrusive ways handle failed invariant write log entry first two weeks send SNMP trap next four weeks send e-mail although doesn hurt keep logging turned Experiences several cases approach helped delete 50 code base Risks Sometimes Zombie buried early safe side presumably dead code live least season huge systems really means 366 days presumably dead code might called much often anticipated - cases highly invasive reaction like sending e-mail lead side-effects close denial-of-service attack Applicability pattern applied whenever code-base gotten big parts system perhaps unused e g dead still add weight system Consequences Dead code safely deleted Also Known Related Patterns Use Static Code Analysis find candidates entry points exit points Using invariants kill zombies special case Assertions context architecture improvement Introducing invariants verify code really dead specific way make Explicit Assumptions References Invariants Assertions made popular Bertrand Meyer seminal book Object-Oriented-Software-Construction Brian Foote references Zombie code Big-Ball-Of-Mud Dead code alternate name lava-flow anti pattern AntiPatterns 5 Cross-Cutting Practices Patterns 5 1 works Start collecting issues - mainly Analyze phase Based upon findings maintain Issue List Evaluate determine values preferably cost ensures later solve important relevant issues Collect Opportunities Improvement evaluate Align issues potential improvements Plan Improvements Continously strive increase Architectural-Understanding facilitates identification additional issues improvements Figure 20 Collect issues improvements 5 2 Crosscutting Practices given alphabetical order Architectural-Understanding Collect Opportunities Improvement Collect Issues Expect Denial Explicit Assumption work-in-progress move Fundamentals Fail Fast Fast Feedback Impact Analysis Improvement Backlog Issue List Plan Improvements Report-Structure Slide Write Traceability Widen Options 5 3 Architectural-Understanding Develop document understanding internal structures concepts architectural approaches important decisions System 5 3 1 Description Collect organize architectural information System Document structures concepts decisions interfaces etc System locate issues risks opportunities improvement Business technical system context external interfaces Learn Context-Analysis Infrastructure-Analysis Solution strategy often learnt Stakeholder-Interviews experienced developers system Building block structure static organization source code least elaborate highest level code blocks level 1 building blocks Runtime structures like important use-case scenarios Sometimes learned Runtime-Analysis Infrastructure deployment often derived Infrastructure-Analysis Crosscutting technical concepts like domain models persistence user-interface concepts Important architecture design decisions taken revoked development system 5 3 2 Experiences Architectural understanding gained small increments need reserve long times documentation Understanding come various sources - see Analyze practices 5 3 3 Related Practices arc42 provides free pragmatic template software architecture documentation available various formats e g Microsoft-Word tm AsciiDoc View Based Understanding 5 4 Collect Opportunities Improvement look improvement opportunities remedies measures tactics strategies aim42-phases Figure 21 Collect Remedies Phases 5 5 Collect Issues constantly watch issues problems risks especially analysis activities like Stakeholder-Interviews others artifact physical collection Issue List Regularly match issues collection possible improvements 5 6 Expect Denial people oppose findings whitewash sugarcoat issues problems root causes Regardless careful prepared analysis try diminish attack dispute findings 5 6 1 Intent Prepare analyzer evaluator systems serious opposition resistance stakeholders Describe kind reaction might turned acceptance Describe might gained certain slightly negative reactions 5 6 2 Description Figure 22 Levels Reaction presented problems enthusiasm neutrality things easy gets interesting difficult however might call Enthusiasm people embrace findings - like always said Enthusiasts sometimes expect findings appropriate improvement approaches directly improve situation Agreement Others agree without ado Neutrality stakeholders won care probably unconcerned finding Amazement results amaze astonish people Although would never expected findings amazed stakeholders might convinced agreement neutrality using explanation proofs stakeholder-specific language communication hand amazed stakeholders pose serious risk becoming negative doubtful resisting fail convince - people opponents example manage bring dark side Always ask amazed stakeholders reasons amazement - help argumentation Doubt hear read impossible similar expressions people stakeholders explain reasons doubts might find ways improve explanation maybe issues simply ill-formulated look additional better ways explain Doubt lead errors ommissions argumentation conclusions doubtful stakeholders emotional - therefore open rational objective arguments serious difficult communication problem - beyond scope guide Minimization sometimes disavowal first level denial fact accepted consequences evaluations seriousness denied practice encountered phenomenon quite often Affected stakeholders repeat assessment problem acknowledged consequences minimal like mantra stakeholders especially doubtful amazed ones might start believe minimization tactic - especially truth implies inconvenient uncomfortable changes working environment Resistance Findings opposed either actively passively case encounter minimization resistance get support highest management level access consequence many minimizing resisting stakeholders turn side Hostility Shoot messenger Always remain calm polite - hard argumentation facts Hostile stakeholders rarely convinced something need handled diplomacy politics organizational skills none cover prepared hostile actions though case critical issues always keep details documentation origin prepared proof issues remove even minor omissions formal weaknesses argumentation issues Root Cause Analysis flawless backed meticulous research management support Ensure Traceability chain reasoning Keep written records Stakeholder-Interviews suspicious pieces source code documentation Let others review findings publication 5 6 3 Experiences one audit European Logistic Company 40 000 employees found serious issues within development processes addition issues source code process problems caused massive 3month delays delivery working software production whereas pure software bugs relatively minor consequences presented issues process-related issues minimized doubted senior management IT-department help CIO identified minimizers root-cause process-issues introduced inefficient formal bloated processes 5 6 4 Consequences Especially presenting results opposing management stakeholders able verify claims critical cases keep written protocols note who-said-what stakeholder interviews 5 6 5 Related Patterns Collect Issues Estimate Issue Cost Traceability 5 7 Explicit Assumption Compensate missing facts especially requirements goals estimates opinions explicit written assumptions facts 5 7 1 Description Making assumptions explicit fundamentally important Capture Quality Requirements development teams need rely implicit assumptions requirements evaluating problems risks remedies often need estimate assume stuff like duration cost workload others estimates assumptions need made explicit others reproduce understand evaluation case numerical estimation helps apply Estimate Interval Also known educated guess 5 8 Fail Fast later lack quality identified higher costs fix Continuously evaluate quality work artifacts immediately take countermeasures pull plug early possible Similar Fast Feedback Suitable methods identify situations Code reviews Architecture reviews Peer reviews Testing early stages 5 9 Fast Feedback TODO See also Fail Fast 5 10 Impact Analysis 5 10 1 Intent Determine impact code concepts data organization specific action issue e g refactoring recurring problem might Identify resultant effects system development operations 5 10 2 Related Practices Failure-Mode-and-Effect-Analysis FMEA method failure analysis widely used various industries 5 11 Improvement Backlog Keep public written backlog possible improvements remedies tactics strategies Revise backlog regular intervalls Define owner role backlog similar product owner Scrum Enhance backlog information evaluation phase like cost effort risk Figure 23 Improvement Backlog 5 11 1 Intent Collect known issues problems within system associated processes Make issues comparable evaluating one usually using economical units like money time Align carefully Issue List 5 11 2 Content Table 4 Improvement Backlog ID Improvement Description min Cost max Cost Related Issues identifier name short description improvement remedy minimal estimated cost effort maximal cost effort links related issues 5 11 3 Representation Tools Try use similar documentation approach like Issue List easy possible link issues improvements vice versa 5 12 Issue List collection issues problems risks found Collect Issues 5 12 1 Intent Collect known issues problems within system associated processes Make issues comparable evaluating one usually using economical units like money time 5 12 2 Content Table 5 Issue List ID Issue Description Frequency min Value max Value Improvements identifier name short description issue often issue occur daily weekly every new feature minimal value maximal value links improvements 5 12 3 Representation Tools difficult decide much formalism apply collecting issues problems Sometimes wiki-page might suffice systems full-blown issue-tracker useful always documentation valuable found easily makes electronic approaches viable every entry issue list need Estimate Issue Cost estimation cost issued business-related unit case already identified developed opportunities-for-improvement adressing issue links corresponding improvements remedies tactics strategies changes Improvement Backlog neccesssary 5 13 Plan Improvements Conduct long- short-term planning improvement activities Balance align issues improvements considering existing goals constraints Consists long-term decisions concerning Improvement-Approaches short-term planning 5 14 Report-Structure examine audit review systems proposed Analyze often need prepare report management charge practice proposes generic report structure might use preparing documents Table 6 Report Structure Chapter Description Formalities formal stuff like disclaimer references contractual documents table contents licence change history etc Management Summary 1 2 page summary Goals describe goals review audit Review Approach brief description review conducted outline activities actions performed Stakeholders outline stakeholders participated form time Findings order importance priority list explain findings Proposed Actions Conclusion Appendix Sources list sources references e g documents source-code interview protocols issue-trackers websites etc Appendix Team briefly introduce review team explain role review 5 14 1 Related Practices Slide Write decide wether really need prepare written report Traceability ensure proper sources important issues 5 15 Separate-Cause-From-Effect 5 15 1 Intent Explicitly differentiate symptom effect cause Identify root causes symptoms problems issues Trace problem origins 5 15 2 Description discussion 5 15 3 Related Practices Root Cause Analysis 5 16 Slide Write every review face question deliver present results customer write long formal report document set presentation slides adequate sufficient 5 16 1 Intent Consider format structure review report early Ensure share common vision customer preparation results Remind contractual agreements formal requirements especially someone might take offence report 5 16 2 Description two common ways deliver review results formal document Word PDF etc collection slides Powerpoint Keynote etc presentation general recommended write review results well structured document form suitable contain lot details background information easy e g trace back recommendation stakeholder interview written document contain information needed understand review starting position targets approach findings without spoken words additional explanations results shall supplementary presented audiences easy create purposeful slides document set Powerpoint slides result adequate customer closely involved review process mainly interested outcome definitely presentation given relevant stakeholders case creation slides important bullet points might quicker writing detailed well formulated text 5 16 3 Experiences review financial broker agreed initially deliver detailed document results later asked present outcomes two different audiences engineers management quite easy create specific slides 40 pages documentation another case planned present review finding one big meeting wrapped findings briefly concise slides Later executives missed meeting complained needed spoken explanations understand presentation document spent much time subsequently writing background information worked result document beginning 5 16 4 Related Patterns Report-Structure Traceability 5 17 Traceability Maintain references origin problems issues Remember told problem documents found issues version source identified risks faults 5 17 1 Intent discussing problems stakeholders question doubt findings see pattern Expect Denial Keeping thorough references orgins original sources major findings keeps eventual critics check 5 17 2 Description done 5 17 3 Experiences anti-experiences happened neglected traceability Stakeholder questioned findings - could immediately trace findings back original source e interview protocoll particular file version source code stakeholders immediately suspected findings one two question Please keep mind lack traceability especially disputed findings problems might lead serious loss credibility hand maintaining detailed references time-consuming task easily spend hours rather trivial bookkeeping activities instead identifying new exciting problems 5 17 4 Applicability Apply traceability whenever identify problems issues might discredit offend one important stakeholder seriously impact parts underlying organization company business unit carry huge financial technical organizational risks penalties Short rule expensive dangerous traceability need 5 17 5 Related Patterns Expect Denial 5 18 Widen Options taking decisions often good idea widen decision space look additional options Sometimes yes-or-no decisions spectrum additional options available - least allow brain deviate conventional path preliminary conclusions 6 Pattern index chapter contains alphabetic list patterns practices methods short description links explanation Anticorruption Layer Isolate clients internal changes suby-systems modules original definition Create isolating layer provide clients functionality terms domain model layer talks system existing interface requiring little modification system Internally layer translates directions necessary two models Domain Driven Design page 365 Eric Evans Category Improve Architectural-Understanding Document relevant structures concepts decisions interfaces etc System locate issues risks opportunities improvement See arc42 View Based Understanding Category Cross-Cutting Practices Patterns Architecture-Backlog Keep prioritized list improvement tasks remedies backlog parallel regular feature backlog Category Improve Assertions Use assertions verify preconditions make program fail early something goes fundamentally wrong Category Improve Atam Systematic approach find architectural risks tradeoffs compromises sensitivity points Category Analyze Automated Tests Introduce automated tests verify correctness runtime behavior Unit- integration- acceptance- load- database-tests well-known specialisations Category Improve Branch Improvement Introduce distinct branches version control system reflect improvements Category Improve Capture Quality Requirements Part Atam Capture document specific quality requirements Specialisation Requirements-Analysis Category Analyze Change Extension Enable efficient change creating new components instead modifying existing ones Category Improve Change Copy Isolate competing change necessity copying allowing copies evolve independently Also known Change-Via-Split Category Improve Change Via Split Isolate competing change necessity copying allowing copies evolve independently Also known Change-Via-Split Category Improve collect-opportunities-for-improvement Keep list possible potential measures remedies tactics strategies improvements Regularly match collection issues Category Cross-Cutting Practices Patterns Collect Issues Keep list problems issues risks Regularly match collection possible remedies Category Cross-Cutting Practices Patterns Context-Analysis Analyse external interfaces risk technology business value factors Category Analyze Data-Analysis Analyse inspect data created manipulated system content structure quantity size Category Analyze Debugging Identify source bug misbehavior observing detailed flow execution e g stepwise execution program statements Usually supported debugger Specialisation Root Cause Analysis Category Analyze Deprecate-Obsolete-Parts Category Improve Development-Process-Analysis Analyse inspect development process documented described stakeholders appropriateness problems problem-areas Category Analyze Documentation-Analysis Analyse existing documentation availability correctness actuality problems problem-areas Category Analyze Document Problems See Improvement Backlog Category Cross-Cutting Practices Patterns Estimate Feature Value Estimate monetary value given feature compare features system Category Evaluate Estimate Interval Estimation differs measurement inherent uncertainty Therefore estimate intervals giving lower upper bounds difference two shows confidence estimate Low relative difference means high confidence Category Evaluate Estimate Issue Cost Find much given issue costs units money effort period time every occurence Category Evaluate Estimate Improvement Cost Determine much specific improvement set actions taken eliminate reduce specific issue problem likely cost money effort Category Evaluate Expect Denial people oppose findings whitewash sugarcoat issues problems root causes Regardless careful prepared analysis try diminish attack findings Category Cross-Cutting Practices Patterns Explicit Assumption Compensate missing facts especially requirements goals estimates opinions explicit usually written assumptions facts Category Cross-Cutting Practices Patterns Extract Reusable Component Extract code existing system create reusable component See SERIOUS-Refactoring page 95 Category Improve Fail Fast Identify quality issues early possible aim fix Category Cross-Cutting Practices Patterns Fast Feedback Evaluate quality work artifacts processes early possible Enables teams apply corrective actions take countermeasures early possible Category Cross-Cutting Practices Patterns Front End Switch Route front-end requests either new old backend systems depending nature content-negotiation request criteria especially helpful support Never-Change-Running-System Category Improve Group Improvement Actions Collect several improvement actions shall applied implemented together Category Improve Handle Else Chains Refactor nested if-then-else structures improved understandability seen specialisation Remove-Nested-Control-Structures Category Improve Hierarchical-Quality-Model Decompose overall goal high quality detailed precise requirements finally resulting tree-like structure See Atam Quality-Requirements Category Analyze Impact Analysis Determine impact code concepts organization specific action e g refactoring might Category Cross-Cutting Practices Patterns Improve Code Layout Making code easier read results better understandability Category Improve Improve Logging Making runtime analysis easier meaningful logs includes decentralized log analysis well well-structured log levels markers log message phrasing Category Improve Improvement Backlog Keep backlog possible improvements remedies tactics strategies Category Cross-Cutting Practices Patterns Infrastructure-Analysis Analyze technical infrastructure System e g respect time resource consumption creation Part Runtime-Analysis Category Analyze Instrument System Instrument either executable source code make assumtions explicit expand Runtime-Analysis Runtime-Artifact-Analysis Category Analyze Interface Segregation Principle Reduce coupling clients service provider Category Improve Introduce Boy Scout Rule Establish policy perform certain structural improvements time artifact source code configuration documents etc changed Usable situations Refactoring-Plan feasible addition plan Category Improve Introduce Layering Introduce layers within source code improve separation concern common least business layer interface layer - latter user- programatic interfaces See Uncle Bob Clean Architecture short summary Category Improve Isolate Changes Introduce interfaces intra-system borders changes cannot propagate areas Category Improve Issue List Keep list collection issues problems risks - together appropriate amount description evaluation Category Cross-Cutting Practices Patterns Issue-Tracker-Analysis Analyse entries issue-tracker identify critical areas components stakeholders Category Analyze Keep Data Toss Code strategy improve systems keeping data created old systems foundation new one Also described Bridge-to-the-New-Town Wolfgang Keller opposite Never-Change-Running-System Category Improve Manage Complex Client Dependencies Facade Simplify interaction client set service components Category Improve Measure Gather various metrics visualize dashboards order make system behavior predictable assumed coincidences explainable Examples metrics thread pool saturation number failed logins requests per second also number successful orders today amount-of-time-spent-debugging-this-component code-metrics amount-of-effort-needed-for-feature Category Improve Migrate Data Transform existing data one structure representation another keeping original intent semantic intact Category Improve Mikado-Method Coordinated refactoring effort described Mikado-book Category Improve Natural Death Keep old system running retire objects contained reach end life according life cycle Category Improve Never Change Running System minimize risks try refrain changes existing working code - every change inevitably introduces new risks even bugs Category Improve Never Rewrite Running System Joel Spolsky arguments never rewrite system scratch likely make many new mistake won generate much added value Category Improve Organizational-Analysis Analyse inspect organization responsible system Category Analyze Outside-in Interfaces Modularize system aligned existing external interfaces Category Improve Pre Interview Questionnaire Prior interviewing stakeholders present written questionnaire reflect advance specialisation Questionnaire Category Analyze Qualitative Analysis Analyze quality goals System risk met current implementation Needs concrete Quality-Requirements See Atam Category Analyze Quality Driven Software Architecture QDSA Derive technical structural process-related decisions based upon detailed quality requirements QDSA requires explicit quality requirements Category Improve Quantitative-Analysis Measure artifacts processes within system e g source code example see Runtime-Analysis Static Code Analysis Category Analyze Questionnaire Written collection questions presented stakeholders addendum preparation replacement Stakeholder Interview Category Analyze Refactoring Source code transformation change functionality system See Fowler-Refactoring Category Improve Refactoring Plan route refactoring discussed within development team plan always visible every team member Category Improve Requirements-Analysis Analyze document current requirements required features required constraints Category Analyze Remove Nested Control Structures Re-structure code deeply nested complicated control structures replaced semantically identical versions Special case Refactoring similar Untangle-Code Often performed reducing complexity especially cyclomatic complexity reducing code complexity one needs make sure re exchanging inner method cyclomatic complexity outer design runtime complexity Category Improve Report-Structure generic structure written audit review reports usually following Analyze phase See Slide Write Category Cross-Cutting Practices Patterns Root Cause Analysis Find evil bottom Explicitely differentiate symptom cause Identify root causes symptoms problems issues Category Analyze Runtime-Analysis Analyze runtime behavior System e g respect time resource consumption creation See Profiling Performance-Analysis Runtime-Artifact-Analysis Category Analyze Sample Improvement Provide concrete code example typical improvement situations developers improve existing code easily Category Improve Schedule Work Schedule refactoring improvement work business technical stakeholders know Category Improve Separate-Cause-From-Effect See Root Cause Analysis Category Cross-Cutting Practices Patterns Software Archeology Understand software analysing source code usually absence documentation knowledge sources Category Analyze Stakeholder Analysis Find people roles organizational units organizations interests System Category Analyze Stakeholder Interview Conduct personal interviews key persons System associated processes identify clarify discuss potential issues remedies Category Analyze Stakeholder Specific Communication Communicate stakeholders actively applying specific favored terminology communication channels Category Cross-Cutting Practices Patterns Static Code Analysis Analyse source code identify building blocks dependencies determine complexity coupling cohesion structural properties Category Analyze Structural Analysis Analyze static structures e g building block structure System e g package module dependencies runtime- deployment dependencies See specific Static Code Analysis Context-Analysis Data-Analysis Category Analyze Systematically prepare take decisions finding appropriate options check assumptions overcome emotion prepare wrong See Decisive C D Heath Category Cross-Cutting Practices Patterns Take Mean Say Natural language risk semantics senders' side differs semantics receiver People simply misunderstand meaning words differ people Pattern provided Phillip Ghadir humble claim discovery Category Analyze Toggle Feature Simultaneously support evolved competing conflicting features runtime toggling feature flags Category Improve see also http en wikipedia org wiki Feature_toggle http www togglz org Traceability Maintain references origin problems issues Remember told problem documents found issues version source identified risks faults Category Cross-Cutting Practices Patterns Untangle Code Remove unneccessary complications code e g nested structures dependencies dead-code duplicate-code etc See Remove-Nested-Control-Structures Special case Refactoring Category Improve Use Case Cluster Understand system functionality grouping functionality clusters reduce complexity Category Analyze User-Analysis Get overview user-categories -groups goals requirements expectations Find issues users system Related Stakeholder Analysis Context-Analysis Requirements-Analysis Category Analyze Use Invariants Kill Zombies Use Invariants make sure kill Zombies safely code seems dead meaning supposedly isn called anymore one dares remove codebase introduction invariants provide reliable feedback whether safe remove code Category Improve View Based Understanding Create architectural views mainly building block view understand communicate code structure Category Analyze Appendix Domain Model Within systematic improvement consider manipulate several typical kinds information entities pragmatic description please see Common Terminology section Figure 24 aim42 domain terminology - detailed Cause Root cause Issue contrast symptom is-a inherits Issue real source one many Issues Configuration Constraints Technical organizational constraints restraining management design implementation operation System restrict System associated Processes Organization Documentation hopefully written information systems goals requirements architecture implementation operation management Goals Organization Stakeholder expect System System exist anyway Hardware Structure kind hardware required develop test operate System Improvement remedy opportunity tactic strategy improve System resolving one several Issues modifies creates Risk remedy System resolves partially complete one several Issues Issue problem error fault risk suboptimal situation causes within System Processes Organization related e g management operational development administrative organizational activities Frequency often Issue occur resolved one several Improvements Organization organization entity responsible owning System source Issues Process Processes conventions activities developing maintaining operating managing System source Issues Risk EarlyWarning Indicator Risk occuring turning problem inherits Issue occurred yet Software source code configuration make System improvement Hopefully stored version-control Issue occurred yet Stakeholder People roles interested participating System associated Processes belong Organization responsible owning System knows informs Issues Improvements Stakeholders often know existing problems opportunities improvements System system improvement consisting Software Hardware Documentation managed affected Processes remedy System aspects Improvements suffers Issue complies one several Goals consists Software Configuration Hardware Documentation Appendix B Bibliography William J Brown AntiPatterns Refactoring Software Architecture Projects Crisis John Wiley Sons 1998 tried true work things tend go wrong software development projects arc42 arc42 - Resources Software Architects Practical template liberal licence Available variety formats see German website English website Agans-Debugging David J Agans Debugging 9 Indispensable Rules Finding Even Mose Elusive Software Hardware Problems Amacom Press 2002 Although developers take debugging skills granted sometimes spend much time tracking little bugs Annett-Legacy Robert Annett Working Legacy Systems practical guide real systems inherit Leanpub Publishing SEI-ATAM Architecture Tradeoff Analysis Method Software Engineering Institute Carnegie Mellon University Berglung-AfferentCoupling Tim Berglund GitHub Complexity Theory Software Development Look slide 73ff afferent coupling - keep mind refactorings Bass09 Len Bass et al Software Architecture Practice Addison-Wesley 2 Edition 2009 Big-Ball-Of-Mud Brian Foote Joseph Yoder Big Ball Mud - influentual paper fourth conference Patterns languages Program Design PLoP97 Bommer-Wartung Christoph Bommer M Spindler V Barr Softwarewartung Grundlagen Management und Wartungstechniken German dpunkt Verlag 2008 Interesting treatment categories software systems respective need maintenance evolution Authors quote studies Lehman Belady 1970 Boy-Scout-Rule-article Boy Scout Rule see http programmer 97things oreilly com wiki index php The_Boy_Scout_Rule Brodie-Stonebraker Brodie M Stonebraker M Migrating Legacy Systems Gateway Interfaces Incremental Approach Morgan Kaufmann 1995 Clements-ATAM Paul Clements et al Evaluating Software Architecture - Methods Case Studies Addison-Wesley 2001 Detailed overview ATAM evaluation methods Campbell14 Ann Campbell et al SonarQube Action Manning Publications 2014 Great introduction flexible multi-language code-analysis toolkit Feathers Michael Feathers Working Effectively Legacy Code Prentice Hall 2005 author claims Code without tests bad code true Fowler-Refactoring Martin Fowler Refactoring Addision-Wesley Addision-Wesley 1999 See also refactoring com Freemann Steve Freeman Nat Pryce Growing Object Oriented Software Tests Addison-Wesley 2010 heath-decisive Chip Dan Heath Decisive make better choices life work Crown Publishing Random House Books 2013 practical pragmatic guide decision making preparing taking - specific software describe four pillars systematic decision making adopted crosscutting practice Systematic-Decisions Henney Kevlin Henney 97 Things Every Programmer Know O Reilly Media 2010 ISBN 0596809484 also available online Hunt-Archeology Andy Hunt Dave Thomas Software Archeology IEEE Software March April 2002 Impact-Mapping Gojko Adzic Impact Mapping Making Big Impact Software Products Projects ISO-9126 ISO 9126 Quality Model Hierarchical model software quality consisting six major quality topics functionality reliability usability efficiency maintainability portability ISO-14764 ISO IEC 14764 Standard Software Maintenance 2006 brief overview see Wikepedia-entry ISO-14764 ISO-25010 ISO IEC 25010 Systems software Quality Requirements Evaluation SQuaRE System software quality models ISO-Standard model software quality Superseeds ISO-9126 categorizes software quality 8 characteristics functional suitability reliability efficiency operability security compatibility maintainability transferability See ISO-25010 website Keller-Migration Wolfgang Keller Bridge New Town - Legacy System Migration Pattern EuroPLoP 2000 ISBN 3-87940-775-4 Lippert-Refactoring M Lippert Roock Refactoring Large Software Projects Performing Complex Restructurings Successfully Wiley 2006 Martin-CleanCode Robert Martin Clean Code - Handbook Agile Software Craftmanship Prentice Hall 2009 detailed writeup object-oriented code look like Lots things like Mikado Ola Elnestam Daniel Brolund Mikado Method Manning 2014 Describes method morphing software bad better state Quote book helps us visualize plan perform business-value-focused improvements several iterations increments work without ever broken codebase Moyer-Archeology Brian Moyer Software Archeology Object-Oriented-Software-Construction Bertrand Meyer Object-Oriented Software Construction Prentice Hall September 1994 ISBN-13 978-0136290490 One old books influenced many software actually known Ogawa-Evolution Michael Ogawa Software Evolution Storylines Available research paper open-source code online Visualizes interactions developers software systems OORP Serge Demeyer et al Object-Oriented Reengineering Patterns pattern-based approach re-engineer object-oriented legacy systems contains wealth improvement-patterns named slightly different aim42-brethren Quality-Requirements Free Examples Practical Software Quality Requirements SERIOUS Software Evolution Refactoring Improvement Operational Usable Systems ITEA EUREKA research project Completed 2008 holds fairly large number deliverables SERIOUS-Refactoring SERIOUS Refactoring Handbook SERIOUS-Methods SERIOUS project Overview evaluation design refactoring methods Software-Evolution Journal Software Evolution Process Academic journal software evolution maintenance SonarQube SonarQube free open platform measure manage code quality lots plugins variety programming languages plugins different metrics checks SonarQube track results time - showing history code quality software systems Spolsky-NeverRewrite Joel Spolsky Things Never Part-I Appendix C Glossary AIM42 Architecture Improvement Method ATAM Architecture Tradeoff Analysis Method Extensively described Clemens-2001 online SEI briefly described aim42 pattern Failure Loss functionality defined stated conditions Issue Remedy SEI Software Engineering Institute Carnegie Mellon University federally funded research development institute sponsored US Departement Defense System system improved - often single software system might complex combination hardware software organizational aspects Systems sense consists software usually corresponding data structures data required infrastructure software like operating system database UI-frameworks middleware etc required hardware infrastructure like processors storage facilities network routers etc associated development processes like requirements engineering architecture implementation version- configuration management build- deployment associated administration operation processes procedures associated organizational processes like budgeting HR controlling management etc associated external systems like data- event providers consumers maybe even - Value improvement remedy Approximately -1 times cost associated issue improvement solves part issue value estimation becomes much harder Appendix D Organizational Stuff Team Gernot Starke innoQ Fellow project founder setup patterns practices Alex Heusingfeld innoQ hero-of-the-build Travis-CI integration Peter Hruschka Atlantic Systems Guild reviews comments especially intricacies Domain Model Christine Koppelt innoQ improvement-patterns Michael Mahlberg Consulting Guild patterns practices Burkhard Neppert innoQ review method Roland Schimmack review practices patterns bugfixes Oliver Tigges innoQ patterns practices Stefan Tilkov innoQ maintenance evolution patterns Tammo van Lessen innoQ improvement patterns technical debt contribution waiting - join us Comments suggestions Markus Harrer Phillip Ghadir - numerous anonymous project-teams around IT-world License aim42 free use similar many open-source software systems practical reasons decided apply Creative Commons Attributions Sharealike 4 0 license Copyright 2012-2014 original author Gernot Starke authors contributors Licensed Creative Commons Attributions Sharealike License may use file except compliance License may obtain copy License http creativecommons org licenses by-sa 4 0 Unless required applicable law agreed writing software documentation distributed License distributed BASIS WITHOUT WARRANTIES CONDITIONS KIND either express implied See License specific language governing permissions limitations License Contribute aim42 org content open source source hosted aim42 organization GitHub want help improving upon fork project revise content send pull request Source aim42 currently provides method guide asciidoc sources hosted GitHub aim42 organization Issues Look open issues pick one fork repository resolve issue Send pull request Twitter arc_improve42 Mailing list even human-managed mailing list like participate send subscribe-request aim42-at-lists innoq com Suggestions case ideas critique proposals - let us know aim42-at-lists innoq com due increased spam remove convenient mailto links sorry Appendix E Asciidoc Help facilitate contributions summarize AsciiDoc respectively AsciiDoctor features used within guide found following information especially helpful learning asciidoc AsciiDoctor Writers Guide Chrome-Add-In Live-preview Headings Cross-References explanation creates link explanation some-anchor use cross-reference list labelled-list pattern name labelled-list cross-reference work cross-references need boldface-formatted manualy external Links https github com aim42 aim42 issues 20 external resource external resource Link files artifacts new browser window tab link docs readme-directory md readme readme Anchor explain 'some-anchor' topic some-anchor explanation creates link explanation some-anchor use cross-reference list labelled-list some-anchor pattern name labelled-list cross-reference work some-anchor cross-references need boldface-formatted manualy some-anchor explain 'some-anchor' topic Images Diagrams Including images quite easy caption-example image aim42-logo png alternate-text title caption-example Figure 25 caption-example even reference images like see figure caption-example see figure caption-example currently clue reference figure-numbers counter though Lists first entry one first entry one Admonitions Special annotations rendering nicely NOTE Admonition paragraphs call attention special words advice WARNING warning CAUTION careful IMPORTANT must really worth reading TIP maybe practice report Admonition paragraphs call attention special words advice warning careful must really worth reading maybe practice report TIP -- Multi-line admonitions blocks need special treatment need block-masquerading e g -- beginning end result rendered nicely -- renders follows Multi-line admonitions blocks need special treatment need block-masquerading e g -- beginning end result rendered nicely Files Directories Files included include directive include asciidoc-help adoc Attributes attributes useful e g 2015-05-28 insert last modification data 2015-05-28 Footnotes case need footnote - easy statement footnote text footnote usually rendered end document Typesetting Sometimes useful write smaller text useful write small smaller text Appendix F add new pattern practice Add pattern related section analyze adoc evaluate adoc improve adoc Use exact spelling e g including dashes intend use pattern description Add pattern pattern catalog pattern-index adoc Entries pattern-index currently detailed description file preceded anchor like the-exact-name describe pattern practice detail create new file appropriate name adoc extension pattern subdirectory beginning new file include anchor like the-exact-name See example the-exact-name Exact Name write pattern description Add include statement pattern overview analyze adoc evaluate adoc improve adoc include patterns the-exact-name adoc pattern index create reference like _ the-exact-name 1 original authors ATAM call evaluation method whereas aim42 classifies ATAM belong category analysis practices Last updated 2015-05-28 10 18 49 UTC"),
('PostgreSQL anti-patterns: Unnecessary json', "PostgreSQL expertise specialists source code level understanding RDBMS PostgreSQL Planets Craig PlanetPostgreSQL Gabriele PlanetPostgreSQL Gianni PlanetPostgreSQL Ian PlanetPostgreSQL Jaime PlanetPostgreSQL Petr PlanetPostgreSQL Simon PlanetPostgreSQL Tomas PlanetPostgreSQL Vik PlanetPostgreSQL International News USA News UK News PostgreSQL 9 5 IMPORT FOREIGN SCHEMA Automating Barman Puppet it2ndq barman part three PostgreSQL anti-patterns Unnecessary json hstore dynamic columns Posted 5 May 2015 - craig ringer - 11 Comments PostgreSQL json support shouldn use great majority re goes hstore new jsonb type types useful tools re needed first choice modelling data PostgreSQL ll make querying manipulating harder readers familiar anti -pattern EAV necessary evil database schemas long time something advise using look resort reality business requirements mean everything fit rigid fields properly modelled relations know schema design turn relational database poor-man key value store using table object_id entity key attribute value columns Querying usually involves lots lots self-joins json new EAV great tool need something use first choice also applies PostgreSQL arrays great tools building queries usually appropriate way store authorative data JSON blob tables Since release PostgreSQL 9 3 even since jsonb 9 4 m seeing Stack Overflow questions people ask joins json objects query nested key inside array element etc reasonable things asked schema example data ll often post something like CREATE TABLE people id serial primary key data jsonb null INSERT people data VALUES name Bob addresses street Centre streetnumber 24 town Thornlie state WesternAustralia country Australia street Example streetnumber 4 311-313 town Auckland country NewZealand phonenumbers type mobile number 12345678 INSERT people data VALUES name Fred phonenumbers type mobile number 12345678 INSERT people data VALUES name John Doe ask find people phone number Experienced relational database users already wincing remember everybody used inverting thinking follow foreign keys backwards child parent decomposing composite entities normal form think relational databases weird PostgreSQL power comes relational model though store data json blobs deny query planner ability make sensible decisions based table column statistics lose indexing features scan types generally restricted quite primitive operations anything interesting tends involve lots self-joins filters Baroque queries example request find people matching phone numbers could turned query like select p1 id person1 p2 id person2 p1 data - 'name' p1 name p2 data - 'name' p2 name pns1 - 'type' type pns1 - 'number' number people p1 inner join people p2 p1 id p2 id cross join lateral jsonb_array_elements p1 data - 'phonenumbers' pns1 inner join lateral jsonb_array_elements p2 data - 'phonenumbers' pns2 pns1 - 'type' pns2 - 'type' pns1 - 'number' pns2 - 'number' Isn thing readable beauty nothing particularly wrong json support functions operators awkward taking nested object-like data querying using relational joins predicates least PostgreSQL supports LATERAL without would nightmare query write happens equivalent query relational schema particular question isn much nicer SELECT p1 id person1 p2 id person2 p1 name p1 name p2 name p2 name pns1 phoneno p1 phone pns2 phoneno p2 phone person p1 INNER JOIN person p2 p1 id p2 id INNER JOIN phone pns1 p1 id pns1 person_id INNER JOIN phone pns2 p2 id pns2 person_id pns1 type pns2 type pns1 phoneno pns2 phoneno likely go lot faster index phone type phone phoneno json based query would read lot less data disk process fixed data typing json-based query given also buggy jsonb comparisons sensitive data type jsonb values 12345678 12345678 unequal regress SELECT '12345678' jsonb ' 12345678 ' jsonb '12345678' jsonb ' 12345678 ' jsonb isequal jsonb jsonb isequal ---------- ------------ --------- 12345678 12345678 f insert people data values ' phonenumbers type mobile number 12345678 ' won identified duplicate even though Note arguably PostgreSQL limitation since JavaScript intepreter loose typing means compare equal 12345678 12345678 true get numbers match using PostgreSQL query change query pns1 - 'type' pns2 - 'type' pns1 - 'number' pns2 - 'number' uses - json-value-as-text operator instead pns1 - 'type' pns2 - 'type' pns1 - 'number' pns2 - 'number' since text form numbers constraints course someone might insert insert people data values ' phonenumbers type Mobile number 1234 5678 ' won match capital M space number everything json blob easily add CHECK constraints value use ENUM types DOMAINs create trigger-maintained shadow normalized columns usual approaches used handle data normalisation like d necessary write json validator transform trigger procedural language like pl v8 application json used might thinking m using json types database case re often better EAV dynamic-column data won fit traditional relational model ve seen people try past co-ordinate external MongoDB json storage example sometimes application users want able add arbitrary attributes entity business requirement client like say database doesn notes application re muttering things application didn problems MongoDB might model typical stuff relationally albeit indiscriminate use surrogate keys add json field person extras app fetch displaying person decide use json Use json data won fit database using normal relational modelling re choosing using EAV serializing Java Ruby Python object bytea field storing key look external structured object somewhere else reaching json fields point probably worth replacing hstore use jsonb new applications Note plain json fields also useful re going indexing json querying within re usually compact faster send receive anti-pattern dynamic eav hstore JSON PostgreSQL Post 11 Comments Anders says May 5 2015 7 08 json-based query given also buggy jsonb comparisons sensitive data type jsonb values 12345678 12345678 unequal 123456789 number won identified duplicate even though shouldn Even though two values might look different way write different choosen write numbers hex two values would look similar Note arguably PostgreSQL limitation since JavaScript intepreter loose typing means compare equal 12345678 12345678 true Note JavaScript community considered bug use non-type-coercing equals-operator encouraged Reply craig ringer says May 6 2015 10 07 Anders interesting point re comparison m actually happier knowing frowned upon JS world ve never big fan Perl JavaScript habit implicitly converting strings numbers comparisons issue behaviour inconsistent Pg seems really need document jsonb implements equality tests match JavaScript non-coercing equals operator something along lines speaking narrowly use case example user would clearly want compare 13245678 12345678 equal general clearly best jsonb default comparisions try stick relational typed fields time Reply PostgreSQL Anti antipatern sloupce jsonb - Data datab zov teorie PostgreSQL says May 13 2015 1 08 pm Tento m j p sp vek je reakce na l nek craing ringer PostgreSQL anti-patterns Unnecessary json hstore dynamic column Reply wolever says May 13 2015 7 14 pm explain join condition p1 id phonenumbers first example query syntax ve seen people p1 inner join people p2 p1 id phonenumbers pns1 inner join lateral jsonb_array_elements p2 data - phonenumbers pns2 pns1 - type pns2 - type pns1 - number pns2 - number Reply craig ringer says May 15 2015 5 10 editing error Thanks pointing m sure crept Corrected query make sense Reply barrett clark says May 14 2015 2 09 pm Interesting read didn realize many people trying use JSON HSTORE datatype like advocate use hitting external API Pull stuff know need store table also store entire payload JSON field probably won scale throughout life app see harm re feeling things Reply mauritslamers says May 21 2015 5 40 pm reason would like use JSON way want able create files sense create folder certain person want gather different information person files one spot kind table setup id jsonb field becomes possible problem experience traditional relational approach every type information need create separate table cases join table order get information database Whenever need add new kind type change existing type need change API applications database well information spread many spots makes harder retrieve case problems lose coherence information one join table decides go corrupt happens lose coherence information one person loose every person database think approach anti-pattern would implement something like without using jsonb type way Reply craig ringer says May 22 2015 3 59 sounds like re fan relational approach doesn fit application describe object store document store model prefer model better fit application fine rather trying force PostgreSQL working way consider using dedicated document database like MongoDB said many apps changes structure relatively infrequent easily managed much data benefits flexible querying relational storage provides via aggregation windowing etc PostgreSQL json support really comes handy mostly relational data also need store dynamic attributes freeform data m bit concerned comment table deciding go corrupt using MyISAM recently PostgreSQL ve got corruption anywhere concerned reason assume one table damaged whatever happened PostgreSQL bug filesystem bug hardware fault etc likely experience tables recently written damaged way see e g multixact issues Isolating data little pieces protect corruption solution data corruption issues best incomplete clumsy workaround issue shouldn present first place Reply mauritslamers says May 22 2015 4 39 pm much fan relational model rather idea PostgreSQL heart relational DB supports json field type kind approaches using default anti-pattern relational model strengths weaknesses pointed remark table going corrupt didn necessarily mean cause corruption would postgres file system kind corruption including one introduced SQL injection improper use normalization process data different type essentially makes coherence types implicit generic whereas JSON allows coherence flexible explicit know described document store using years would like use document-like store SQL-like search capabilities jsonb type kind queries becomes possible well combining traditional relational approaches Reply Sakuraba says May 21 2015 5 46 pm funny people call anti-pattern absolutely necessary vital certain applications Best example ecommerce EAV cannot avoided want create reusable webshop dont know upfront products users store recommend put columns like t-shirt size height aquarium ingredients cosmetics relational model different user Ridiculous Stop calling anti-pattern valid design technique Reply craig ringer says May 22 2015 3 47 said unnecesssary OK Storing freeform object-specific attributes something like json Problematic Storing entire object definition including generic stuff like weight price seller name etc single giant json blob latter m referring issue Reply Leave Reply Click cancel reply Add Comment Recent CommentsStefan PostgreSQL 9 5 IMPORT FOREIGN SCHEMAmauritslamers PostgreSQL anti-patterns Unnecessary json hstore dynamic columnsLdS S21-2015 Anayrat info PostgreSQL 9 5 IMPORT FOREIGN SCHEMAcraig ringer PostgreSQL anti-patterns Unnecessary json hstore dynamic columnscraig ringer PostgreSQL anti-patterns Unnecessary json hstore dynamic columnsPostgreSQL Cloud9 4 automation backup Barman bdr Business Continuity CentOS community conference CTE database development devops disaster recovery etl greenplum Hot Standby install JSON Kettle Linux logical replication open source performance pgbarman pgday pgday pgday italia pitr postgres postgres 9 4 PostgreSQL postgresql 9 3 PostgreSQL 9 4 postgresql day postgresql repmgr puppet Recovery release replication retention policy Ubuntu vagrant virtualbox windows Recent CommentsStefan PostgreSQL 9 5 IMPORT FOREIGN SCHEMAmauritslamers PostgreSQL anti-patterns Unnecessary json hstore dynamic columnsLdS S21-2015 Anayrat info PostgreSQL 9 5 IMPORT FOREIGN SCHEMA Recent Posts WITHIN GROUP FILTER SQL clauses PostgreSQL 9 4 PostgreSQL 9 5 IMPORT FOREIGN SCHEMA PostgreSQL anti-patterns Unnecessary json hstore dynamic columns Automating Barman Puppet it2ndq barman part three Intranet Register Log Entries RSS Comments RSS WordPress org Copyright2015 design WPExplorer"),
('Boost your command-line productivity with MARKER', "View GitHub Marker Bookmark terminal commands Download project zip file Download project tar gz file marker heavily use Ctrl R search history search commands frequently use Marker lets easily bookmark commands quickly retrieve without going Shell Aliases Functions Multiple Ctrl-R offers following features UI selector lets easily select desired command one command matched Fuzzy matching rather Ctrl-R exact match Aliases listen port magically transformed sudo netstat -nlp grep Command templates Marker lets bookmark commands place-holders easily place cursor place-holders Usage Simplicity key Three keyboard shortcuts let take Marker Ctrl-k Mark current written string command line Ctrl-Space search commands match current written string Ctrl-t place cursor next placeholder identified ' ' word marker remove remove bookmark Requirements python 2 7 3 0 Bash Zshell didn't tested shells you're using Bash Readline Emacs mode default Linux OSX Installation cd usr local wherever want install Marker git clone git github com pindexis marker git cd marker install py Works Marker composed shell script python tool shell code acts wrapper around python tool it's responsible managing user input command-line adding removing text moving cursor around etc python utility hand called marker contains app logic manages bookmarked data matching present UI selector it's called interactive mode doesn't depend Shell script called separately command line utility marker --help communication shell script python commandline tool done via temporary file example here's things work Ctrl space pressed shell code executes calling 'marker' tool non-interactive mode without displaying UI selector passing argument written string commandline file path matched commands stored python tool determine commands match given string stores file passed argument shell script parse file one command replace current string written command-line command one command returned calls python tool Interactive mode UI selector shown allows user select desired command user selected command stored file passed argument displayed command-line reason approach avoid creating new command-line prompt one match rather work current prompt take look bin marker sh details magic happens Limitation Bash shells use Readline Bash uses external library Readline process user input command-line including keyboard bindings separation makes hard script extend command-line certain keys pressed example It's possible invoke shell functions intuitively user press keyboard shortcut manipulate command-line functions contrast zshell input processor zle integrated within shell couple hacks made make Marker work Bash notably triggering shell-expand-line evaluate shell function current written string argument shell function executes logic dynamically bind certain sequence characters temporary keyboard shortcut executed finally original shortcut ie ctrl-Space bin marker sh contains details Sadly hacks come cost It's possible use keyboard shortcuts Ctrl-k Ctrl-t commands contain single quotes ' single quotes used enclose user input probably use double quotes escaping instead see difference single double quotes License MIT Marker maintained pindexis Published GitHub Pages"),
('ASCII Fractal pattern - Flow Snakes', "current community chat blog Programming Puzzles Code Golf Programming Puzzles Code Golf Meta communities Sign log customize list stack exchange communities Stack Exchange sign log tour help Tour Start quick overview site Help Center Detailed answers questions might Meta Discuss workings policies site Programming Puzzles Code Golf beta Questions Tags Users Badges Unanswered Ask Question Take 2-minute tour Programming Puzzles Code Golf Stack Exchange question answer site programming puzzle enthusiasts code golfers It's 100 free registration required ASCII Art Day 2 - Flow Snakes vote 29 vote favorite 6 came across really nice snow-flake like ASCII fractal Michael Naylor citation needed found like fractal grows exponentially size order iteration details construction examples various orders Order 1 Flow Snake ____ __ __ Order 2 Flow Snake ____ ____ __ __ __ __ __ ____ __ __ __ __ ____ __ __ __ Order 3 Flow Snake ____ ____ __ __ __ __ __ ____ ____ __ __ __ __ ____ __ __ __ __ ____ __ ____ __ __ __ __ __ __ __ __ __ ____ __ ____ __ __ __ ____ __ __ __ __ __ __ __ __ ____ __ ____ ____ __ __ __ __ __ __ __ ____ __ __ __ __ __ __ ____ __ __ __ __ __ __ __ __ __ __ __ ____ __ __ __ ____ __ ____ __ __ __ __ __ __ __ __ ____ __ __ __ __ __ __ ____ __ __ __ Construction Consider order 1 Flow Snake built path containing 7 edges 8 vertices labelled Enlarged feasibility 4____5____6 3 ____2 7 0____1 next order simply replace edges rotated version original order 1 pattern Use following 3 rules replacing edges 1 horizontal edge replace original shape ________ ____ ____ 2 edge 12 construction replace following rotated version ____ ____ 3 edge 34and 67 replace following rotated version ____ example order 2 vertices order 1 labelled look like ________ ________ ____ 6 ____ 5___ ____ 4___ ________ 7 ____ ____ 2 3___ ____ ________ ____ 1___ 0___ higher order simply break current level edges lengths 1 1 2 _ repeat process note even replacing common vertices two consecutive edges still coinciding Challenge write function full program receives single integer N via STDIN ARGV function argument closest equivalent prints order N Flow Snake STDOUT input integer always greater 0 leading spaces part pattern either trailing spaces enough trailing spaces pad pattern fill minimum bounding rectangle completely Trailing newline optional Fun Facts Flow Snakes word play Snow Flakes pattern resembles order 2 Flow Snakes actually play part pattern pattern made single path flowing throughout notice carefully order 2 higher well pattern comprises rotations order 1 pattern pivoted common vertex current previous edge Non ASCII variant Flow Snakes found several locations code-golf shortest code bytes win Leaderboard first post series generates leaderboard make sure answers show please start every answer headline using following Markdown template Language Name N bytes N size submission improve score keep old scores headline striking instance Ruby 104 101 96 bytes code-golf ascii-art fractal share improve question edited May 25 8 36 asked May 20 17 15 Optimizer 18 2k533109 understand correctly shapes 1 2 3 enlarged 2x bottom row 2 made 4 undescores 3 edc65 May 20 19 06 edc65 shapes examples perfectly sized talking Construction part yes enlarged 3 underscores edge number takes 4th's place Optimizer May 20 19 09 edge numbers shape 2 construction part yes bottom shape 2 equal bottom shape 1 edc65 May 20 19 14 edc65 Oh Fixed Optimizer May 20 19 21 3 read title Snow Flakes didn't even notice real title called attention difference mbomb007 May 20 19 25 show 4 comments 8 Answers 8 active oldest votes vote 5 vote accepted Haskell 265 bytes div mod b 3 b 2 b-a _ 0 0 0 0 _ 3 n p 352 6497 2466 -1 n-1 3 7 -p 4 p 0 7 4 0 _ 0 n p n-1 p maximum abs sum p p n b n 1 -b f n putStr unlines __ 2 n 2 -b 2 - b-n 2 1 b n 2 0 n 3 b - -n 0 n 0 Note GHC 7 10 need add import Control Applicative replace abs map abs Run online Ideone com f n Int - IO draws level n flowsnake drawing computed bitmap order rather along curve allows algorithm run O n space logarithmic drawing size Nearly half bytes spent computing rectangle draw share improve answer edited yesterday answered May 23 1 44 Anders Kaseorg 2563 logged works Nice Optimizer yesterday turns previously didn run Ideone com assuming 64-bit Int Fixed sacrificing 2 bytes Anders Kaseorg yesterday okay login thing needed email id confirmation Optimizer yesterday add comment vote 16 vote Python 2 428 411 388 bytes one pretty tricky patterns don't retain ratios step meaning difficult procedurally produce image predecessor code though pretty unreadable intense math golfing actually draw line start finish using recursively defined D function size also issue ended starting middle 5 3 n sided square cropping things afterward though think better way calculate size might change n input 5 3 n r 0 def D n x y 0 n 1 x- 2 1 y 3 1 r y x '_ ' 2 2 r y x 2 t-1 '_' return -1 2 0 1 0 1 x y- 2 5 c int 2for 424050035512124224003 2 3 1 -t x y D n-1 x y c return x y D n 2 2 '' join c rstrip c r l c min c find ' ' c c c print l share improve answer edited May 21 19 46 answered May 20 21 17 KSab 2 326517 Wow awesome Wanna give shot AAoD 1 Optimizer May 21 8 25 r range - r shave bytes sirpercival May 21 16 01 1 sirpercival unfortunately won't work repeats mutable objects grc May 21 16 05 oh right forgot sirpercival May 21 16 06 save bytes inlining l switching print' n' join printing inside loop using return x removing parentheses 2 Also could use min c find ' ' c change name list doesn't overwrite initial value grc May 21 16 38 show 2 comments vote 11 vote JavaScript ES6 356 362 370 That's difficult one shape stored path 6 basic building blocks 3 3 backward 0 diagonal left bottom right 4 backward 1 diagonal bottom left right 5 backward 2 horizontal left right 6 backward one replacing step applied increasing order 0 -- 0645001 backward 4 -- 5441024 1 -- 2116501 backward 5 -- 5412556 2 -- 2160224 backward 6 -- 0664256 values prefilled theh array even elements 4 6 obtained 0 2 using h n reverse map x x 4 join '' obtain shape given order path built p variable applying substitutions repeatedly main loop iterates p variable draw shape inside g array element row Starting position 0 0 index become negative y index high orders avoid negative y indexes shifting g array whenever find negative y value don't care x index becomes negative JS negative indexes allowed little difficult manage last step scan main array using map row need use explicit loop using b variable holds least x index reached 0 console log version handy leading newline easily made trailing newline swapping 2 rows snippet version f o g x y b 0 h '064500192116501921602249954410249541255690664256' split 9 p h 2 --o p p replace g c h c p z ' _' 3 d s- 1 3 x- d y 2 y 0 y g g r g y g y 1 r x r x 1 z r x z r x-1 z 3 x d y- 2 x b b x 0 g map r o ' n' x b x r length o r x ' ' o '' console log o Handy snippet test Firefox f o g x y b 0 h '064500192116501921602249954410249541255690664256' split 9 p h 2 --o p p replace g c h c p z ' _' 3 d s- 1 3 x- d y 2 y 0 y g g r g y g y 1 r x r x 1 z r x z r x-1 z 3 x d y- 2 x b b x 0 g map r x b x r length o r x ' ' o ' n' o '' return o TEST fs 9 O style fontSize fs 'px' function zoom d d fs d 1 d 40 fs d O style fontSize d 'px' O font-size 9px line-height 1em input id value 3 button onclick 'O innerHTML f value ' - button button onclick zoom 2 Zoom button button onclick zoom -2 Zoom - button br pre id O pre share improve answer edited May 21 20 12 answered May 21 10 44 edc65 10 3k11139 add comment vote 5 vote Perl 334 316 309 _ 2 eval's map _ 1 x7 reverse 2003140 2034225 4351440 ge 'x 2 3 g x y 3 s-1 ' r ' qw y-- x y -- x y x y -- x y-- -- x y x 1 eeg y 1-6 __ x print grep x ' map x join'' map r ' _ f f 0 3 2 Parameter taken standard input Test share improve answer edited 2 days ago Optimizer 18 2k533109 answered May 22 11 26 nutki 3 01112 add comment vote 5 vote Haskell 469 419 390 385 365 bytes function f Int- IO takes integer input print flow snake e 0 0 0 e 5 5 5 e x x f n putStr e g n 0 k map 53- fromEnum g 0 id g n g n-1 k words 5402553 5440124 1334253 2031224 1345110 2003510 x k 444666555666 y k 564645554545 r l minimum l maximum l _ w x y w x 6 map w x w y w unlines _ _ last 6 z c d z -zip3 x w y w w c d j -r x w j -r y w share improve answer edited yesterday answered May 22 17 37 Damien 713 produces 2 enlarged figures think question asking smaller figures top used 2 enlarged figures explain flowsnake constructed Anders Kaseorg May 23 3 05 right corrected Damien May 23 6 09 could use definition k replace get rid parentheses seem know lots tricks Nice proud haskeller May 23 13 38 Thanks thats 5 bytes less Damien May 23 13 49 add comment vote 4 vote C 479 474 468 427 bytes There's beating Perl Haskell guys guess since there's C submission yet define C char C q 053400121154012150223433102343124450553245 X Y K L M N c x y o F C p int l C d d l 7 C l 0 l q p 7 8 7 7 return F l d-1 x 0 y 0 o 32 l-- c p 8 c 3 1 i-- K x K x K L y L y L M x M x M N y N y N y c c 3 x- c 5 1 x X y Y o _ c 3 y- c 3 x c 5 2 return X M o 10 main l F q 7 l Y L Y N Y X K X M X putchar F q 7 l save space atoi call number arguments passed program used level program runs O n 3 worse first path calculated find min max coordinates x y pair calculated find character specific location Terribly slow saves memory administration Example run http codepad org ZGc648Xi share improve answer edited 2 days ago Optimizer 18 2k533109 answered May 23 6 21 Zevv 412 Use X Y K L M N j c instead int X Y K L M N j c main l instead void main int l Cool Guy May 23 12 06 Yeah thanks already shaved bit I'll put new version Zevv May 23 14 48 output latest version seems trimmed bit ends Optimizer May 23 15 00 uploaded wrong blob one fine Zevv May 23 15 13 add comment vote 4 vote Python 2 523 502 475 473 467 450 437 bytes l 0 _ l input l sum map int '004545112323312312531204045045050445212331' 6 l p x y q w Q W 0 l 4 5 c 2 4 C 3 q min q x Q max Q x C w min w y W max W y C 2-1 2- 3 0 b 1-T c -1 1-c x 0 C y 0 b c p x y x 0 C y b 0 c ' ' Q-q _ 0 W-w 1 x y zip l p x- q y-w x x 1 3 1 '_ _' 3 3 print'' join Pffft costed like 3 hours fun idea split task multiple steps Calculate edges encoded 0-5 order appearence beginning snake end Calculate position edges save min max values x y Build strings consists use min values offset don't get negative indices Print strings code ungolfed form input n int input idea Use series types _ positions x y Forwards 0 __ 1 2 Backwards 3 __ 4 5 parts pieces 0135002 0113451 4221502 5332043 4210443 5324551 final types list types 0 _ range n old types types old types extend map int pieces Calculate list positions store mins max' pos top False x 0 y 0 minX 0 minY 0 maxX 0 maxY 0 types Calculate dx dx 1 3 else -1 3 0 dx 2 it's underscore double horizontal size Calculate dy top 1 5 dy 0 top 0 3 1 5 dy -1 top 2 4 dy 1 backwards add dx adding position list 2 x dx top bottom add dy adding position list 2 4 y dy Add current position list pos x y normal cases going forward modify x y changing position 3 x dx 2 4 y dy Store max min vars minX min minX x maxX max maxX x 3 forward chars add one length never end __'s minY min minY y maxY max maxY y Create string grid charachters ' ' maxX - minX _ range maxY - minY 1 k x y enumerate pos x - minX y - minY types k char ' ' 3 0 char '__' 3 2 char ' ' y x x len char char Print string printString print join printString Edit changed language python 2 compatible answer 3 also saves 6 bytes share improve answer edited yesterday answered May 21 0 28 Matty 1715 Nice job one simple improvement could make would changing l extend x l x Also probably use codegolf stackexchange com questions 54 instead split use something similar answer KSab May 21 0 50 KSab Thanks feel really stupid using extend Matty May 21 1 29 add comment vote 0 vote Pari GP 395 Looping x y character positions calculating char print Moderate attempts minimizing scored whitespace comments stripped k 3 quadgen -12 sqrt -3 w 1 2 sixth root unity b 2 w base base b low digit position 2 Re 4 Im mod 7 index P 0 w 2 1 w w 4 w 3 w 5 rotation state table 7 0 0 1 0 0 1 2 1 2 1 0 1 1 2 2 2 2 0 0 1 2 C _ _ extents X 2 sum 0 k-1 vecmax real b P Y 2 sum 0 k-1 vecmax imag b P y -Y Y x -X k X k 3 adjusted endpoint X limit z x- o x y 2 - y 2 v vector k z z - P d 2 real z 4 imag z 7 1 b d print1 C z 3 r 0 forstep v 1 -1 r r v r 5 o 1 r 0 7 14 mod 5 0 2 4 print char first second hexagon cell cell location complex number z split base b 2 w digits 0 1 w 2 w 5 w e 2pi 6 sixth root unity digits kept distinguishing 1 7 taken high low state table net rotation style flowsnake code Ed Shouten xytoi net rotation making digits N index along path extents relative origin 0 centre shape long limit endpoint middle 2-character hexagon 1 chars needed snake start end X limit 2 chars needed k 0 start k 3 end Pari quads like sqrt -3 builtin done real imaginary parts separately share improve answer edited 2 days ago answered May 23 2 36 Kevin Ryde 12 1 quite satisfy rules regarding leading trailing whitespace Anders Kaseorg May 23 3 00 Thanks amended haskell beat hour x y loop Should've posted waiting see inspiration would come - Kevin Ryde May 24 9 06 end snake cut k 0 1 2 math irritating way deal Anders Kaseorg May 24 10 58 Ah dear endpoint x maximum Hmm Kevin Ryde May 25 9 59 add comment Answer draft saved draft discarded Sign log Sign using Google Sign using Facebook Sign using Stack Exchange Post guest Name Email Post guest Name Email discard posting answer agree privacy policy terms service answer you're looking Browse questions tagged code-golf ascii-art fractal ask question asked 8 days ago viewed 2734 times active yesterday Blog Stack Overflow Andela partner provide education beyond borders Get weekly newsletter Top questions answers Important announcements Unanswered questions see example newsletter subscribing agree privacy policy terms service Linked 91 Tips golfing Python 34 ASCII Art Day 1 - Double Knot 15 ASCII Art Day 3 - Chinese Shrines Related 26 Drawing cube ASCII art 15 ASCII Waterworks 27 Draw Hilbert curve using slashes 12 Draw Random Walk Slashes 12 ASCII L-system renderer 29 Draw Random ASCII Art Quilt 13 ASCII Art Generation 8 ASCII art square affine fractals 34 ASCII Art Day 1 - Double Knot 15 ASCII Art Day 3 - Chinese Shrines Hot Network Questions Rock Paper Scissors - Alter Egos Tetris puzzle solvable sound like pedant seemingly simple complicated questions John Nash's Mathematical Legacy Brit working America get American colleagues stop mocking accent spelling 13-year-old son made foolish wasteful donation teach wrong Create base class object derived class remove ants laptop keyboard CSS underline moving click good testers competing see opens bugs Conjugation Fourier Transform morally obligated use time fix bugs software projects Alynn Scientific Mage Career Choice Expand encoded string old edition Cinder Wall able attack Post titles letting use 2 consecutive dashes permalink Ubuntu provide Multiverse repository don't know whether staff member PhD address Dr emails make simple volumetric light Cycles Strategic Voting Game mechanic tell sugar added fuel tank Write Program Outputs Mirror Level Request delete LinkedIn account termination employment Deleting files maintenance plan hot questions question feed tour help blog chat data legal privacy policy work advertising info mobile contact us feedback Technology Life Arts Culture Recreation Science Stack Overflow Server Fault Super User Web Applications Ask Ubuntu Webmasters Game Development TeX - LaTeX Programmers Unix Linux Ask Different Apple WordPress Development Geographic Information Systems Electrical Engineering Android Enthusiasts Information Security Database Administrators Drupal Answers SharePoint User Experience Mathematica Salesforce 14 Photography Science Fiction Fantasy Graphic Design Seasoned Advice cooking Home Improvement Personal Finance Money Academia 10 English Language Usage Skeptics Mi Yodeya Judaism Travel Christianity Arqade gaming Bicycles Role-playing Games 21 Mathematics Cross Validated stats Theoretical Computer Science Physics MathOverflow 7 Stack Apps Meta Stack Exchange Area 51 Stack Overflow Careers site design logo 2015 stack exchange inc user contributions licensed cc by-sa 3 0 attribution required rev 2015 5 28 2614 Programming Puzzles Code Golf Stack Exchange works best JavaScript enabled"),
('Generating random numbers for use in GPUs', "GPU Gems 3 GPU Gems 3 available free online Please visit Recent Documents page see latest whitepapers conference presentations help projects also subscribe Developer News Feed get notifications new material site Chapter 37 Efficient Random Number Generation Application Using CUDA Lee Howes Imperial College London David Thomas Imperial College London Monte Carlo methods provide approximate numerical solutions problems would difficult impossible solve exactly defining characteristic Monte Carlo simulations use multiple independent trials driven stochastic random process results independent trials combined extract average answer relying Law Large Numbers states trials combined average answer converge true answer independent trials inherently parallelizable typically consist dense numeric operations GPUs provide almost ideal platform Monte Carlo simulations However key component within Monte Carlo simulations random number generators RNGs provide independent stochastic input trial generators must meet conflicting goals extremely fast also providing random number streams indistinguishable true random number source extensive body literature devoted random number generation CPUs efficient make fundamental assumptions processor architecture performance often appropriate use GPUs Previous work Sussman et al 2006 investigated random number generation older generations GPUs latest generation completely programmable GPUs different characteristics requiring new approach chapter discuss methods generating random numbers using CUDA particular regard generation Gaussian random numbers key component many financial simulations describe two methods generating Gaussian random numbers one works transforming uniformly distributed numbers using Box-Muller method another generates Gaussian distributed random numbers directly using Wallace method demonstrate random number generators used real simulations using two examples valuing exotic options using CUDA Overall find single GeForce 8 GPU generates Gaussian random numbers 26 times faster Quad Opteron 2 2 GHz CPU find corresponding speedups 59x 23x two financial examples 37 1 Monte Carlo Simulations Monte Carlo approaches introduced Ulam von Neumann 1940s aim simulating nuclear reactions Metropolis 1987 simple example Monte Carlo solution problem calculating p Take square inscribe within circle touches edge square know radius circle r area circle pr 2 area square 4r 2 calculate ratio p circle area square area calculate p calculate ratio p using Monte Carlo methods generatingn independent random points uniformly distributed within square fraction k points lie within circle thus p k n leading p 4k n Figure 37-1 shows random points placed within circle n 20 200 2 000 shown blue circles red crosses green points respectively providing estimates p 3 4 3 18 3 158 number points increases accuracy improves giving estimates 3 1492 n 2 x 104 3 1435 n 2 x 105 Figure 37-1 Random Points Within Square Calculate Pi Clearly inefficient way calculate p rate increase accuracy low accuracy usually proportional square root number trials much less efficient standard iterative methods However demonstrate three reasons Monte Carlo methods popular easy understand method works often case algorithm corresponding exact solution assuming one exists easy implement main hurdle generation random numbers Monte Carlo methods inherently parallelizable last point major advantage allowing Monte Carlo solutions easily scale multiple nodes networked cluster multiple processors within CPU GPU realistic example Monte Carlo methods finance approach capture subset market variables example price 0 equity time 0 choose artificial stochastic model appears model previous equity paths reasonably well commonly used model geometric Brownian motion final price stock time modeled St 0 e sN N random sample Gaussian distribution Wilmott 2006 programmatic estimator average stock price would shown Listing 37-1 goal random runs produce approximation behavior historical market use results judge probability making profit similar p computation example system tends toward probability point within circle probability directly related ratio areas method allows us find solutions wide class financial models analytical solutions Example 37-1 Estimating Average Stock Price float sum 0 unsigned 0 N sum S0 exp mu sigma RandN return sum N Monte Carlo approach trivially parallelizable across multiple processors often called embarrassingly parallel five major steps Assign processing element random sequence processing element must use different random number sequence uncorrelated sequences used processors Propagate simulation parameters example 0 processing elements tell many simulation runs execute Generate random number streams use processing element Execute simulation kernel processing elements parallel Gather simulation outputs processing element combine produce approximate results many traditional architectures difficult part step 4 writing efficient implementation simulation kernel faster kernel allows simulated trials executed within given time provide accurate answer However GPU mathematically heavy simulation kernel often relatively easy implement real challenge manage assignment different random number streams processors generate random number streams efficiently Figure 37-2 shows division processing among processors high level Figure 37-2 Dividing Simulation Space Among Multiple Executions Simulation Kernel 37 2 Random Number Generators 37 2 1 Introduction Random number generators classified three groups according source randomness True random number generators TRNGs type uses physical source randomness provide truly unpredictable numbers TRNGs mainly used cryptography slow simulation purposes Quasirandom number generators QRNGs generators attempt evenly fill n-dimensional space points without clustering grouping points Although QRNGs used Monte Carlo simulations consider chapter Pseudorandom number generators PRNGs common type random number generator PRNGs designed look random TRNG implemented deterministic software state transition function predicted completely chapter consider type generator orthogonal classification random number generators organized according distribution numbers produced Commonly encountered library functions C's rand sample uniform distribution meaning within range numbers value equally likely occur However many Monte Carlo simulations actually need different distributions common examples normal log-normal exponential distributions main method used producing samples nonuniform distributions first generate uniform random numbers apply transform convert uniform numbers samples desired nonuniform distribution give example standard exponential variate E cumulative distribution function CDF FE x P x E 1 - e -x CDF maps sample x exponential distribution back probability value less x occurring probability value 0 1 Thus E exponentially distributed P x E uniformly distributed leads inversion method know FE x converts exponential distribution uniform distribution logically convert uniform distribution exponential distribution Thus random variate U uniformly distributed exponentially distributed Although inverting CDF conceptually simple method often computationally expensive use preceding exponential example call log required every random number may acceptable many cases inverse may much complicated cases may even closed-form solution case Gaussian distribution one important distributions significant effort devoted investigating alternative methods transforming uniform distribution Rather use direct inverse CDF transform methods use mathematical identities statistical tricks convert uniform distribution example using pairs uniform random numbers see two main general requirements wish PRNGs satisfy long period Every deterministic generator must eventually loop goal make loop period long possible strong argument n random samples used across nodes simulation period generator least n 2 Good statistical quality output generator practically indistinguishable TRNG required distribution exhibit correlations patterns Poor generator quality ruin results Monte Carlo applications critical generators able pass set theoretical empirical tests quality available Numerous statistical tests available verify requirement Knuth 1969 Marsaglia 1995 L'Ecuyer 2006 chapter consider two methods generating Gaussian random numbers particularly well suited new class GPUs first uses traditional technique generating uniform random numbers applying transform produce Gaussian distribution second uses newer technique generate random numbers directly without needing uniform random source look use generators within two Monte Carlo simulations exotic option valuation 37 2 2 Uniform-to-Gaussian Conversion Generator traditional method producing Gaussian random numbers requires two components uniform PRNG transform Gaussian distribution many choices components briefly discuss requirements provide brief analysis main choices select two components based unique requirements GPU architectures Besides meeting general requirements uniform PRNGs discussed Section 37 2 1 parallel nature GPUs imposes two additional requirements ability generate different substreams parallel nodes node must given different portion random stream overlap correlations substreams different nodes substreams must appear completely independent streams random numbers Available Uniform PRNGs Linear Congruential Generator classic generator linear congruential generator LCG Knuth 1969 uses transition function form xn 1 axn c mod m maximum period generator m assuming triple c m certain properties means 32-bit integer period 232 far low LCGs also known statistical flaws making unsuitable modern simulations Multiple Recursive Generator derivative LCG multiple recursive generator MRG additively combines two generators n generators periods m 1 m 2 mn combined resulting period LCM m 1 m 2 mn thus period m 1 x m 2 x mnx generators provide good statistical quality long periods relatively prime moduli require complex algorithms using 32-bit multiplications divisions suitable current GPUs NVIDIA 2007 Section 6 1 1 1 Lagged Fibonacci Generator generator commonly used distributed Monte Carlo simulations lagged Fibonacci generator Knuth 1969 generator similar LCG introduces delayed feedback using transition function xn 1 xn xn - k modm typically addition multiplication However achieve good quality constant k must large Consequentially k words memory must used hold state Typically k must greater 1000 thread require state must stored global memory thus reject lagged Fibonacci method note may useful GPU-based applications simplicity small number registers required Mersenne Twister One widely respected methods random number generation software Mersenne twister Matsumoto Nishimura 1998 period 219 937 extremely good statistical quality However presents problems similar lagged Fibonacci large state must updated serially Thus thread must individual state global RAM make multiple accesses per generator combination relatively large amount computation per generated number requirement makes generator slow except cases ultimate quality needed Combined Tausworthe Generator Internally Mersenne twister utilizes binary matrix transform one vector bits new vector bits using extremely large sparse matrix large vectors However number related generators use much smaller vectors order two four words correspondingly denser matrix example kind generator combined Tausworthe generator uses exclusive-or combine results two independent binary matrix derived streams providing stream longer period much better quality independent stream generated using TausStep shown Listing 37-2 six bitwise instructions example four-component LFSR113 generator L'Ecuyer 1999 requires 6 x 4 3 27 instructions producing stream period approximately 2113 Example 37-2 Single Step Combined Tausworthe Generator S1 S2 S3 M constants z part private per-thread generator state unsigned TausStep unsigned z int S1 int S2 int S3 unsigned M unsigned b z S1 z S2 return z z M S3 b However statistical tests show even four-component LFSR113 produces significant correlations across 5-tuples 6-tuples even relatively small sample sizes Hybrid Generator approach propose combine simple combined Tausworthe another kind generator periods components co-prime resulting generator period product component periods statistical defects one generator hide already mentioned LCG-based generators dismissed prime moduli needed create MRGs However use single generator modulus 232 gain two important properties 1 modulus applied free LCGStep shown Listing 37-3 due truncation 32-bit arithmetic 2 resulting period 232 relatively prime component periods combined Tausworthe thus two combined create much longer period generator Example 37-3 Simple Linear Congruential Generator C constants unsigned LCGStep unsigned z unsigned unsigned C return z z C specific combination chose three-component combined Tausworthe taus88 L'Ecuyer 1996 32-bit Quick Dirty LCG Press et al 1992 shown Listing 37-4 provide relatively good statistical quality within family generators combination remove statistical defects observed separate generator generator state comprises four 32-bit values provides overall period around 2121 restrictions initial state three Tausworthe state components greater 128 four state components initialized random values thread receive different set four state values uncorrelated convenience supplied using CPU-side random number generator cases significant fraction entire random stream used example 264 possible use stream skipping advance four state components ensuring independent random streams however case scope chapter Example 37-4 Combining LCG Tausworthe Improved Generator unsigned z1 z2 z3 z4 float HybridTaus Combined period lcm p1 p2 p3 p4 2 121 return 2 3283064365387e-10 Periods TausStep z1 13 19 12 4294967294UL p1 2 31-1 TausStep z2 2 25 4 4294967288UL p2 2 30-1 TausStep z3 3 11 17 4294967280UL p3 2 28-1 LCGStep z4 1664525 1013904223UL p4 2 32 KISS Another well-respected hybrid generator KISS family L'Ecuyer 2006 Marsaglia combine three separate types generator LCG shift-based generator similar Tausworthe pair multiply-with-carry generators Although generator also gives good statistical quality requires numerous 32-bit multiplications harm performance NVIDIA 2007 Section 6 1 1 1 current-generation hardware offering 80 percent Tausworthe's performance 37 2 3 Types Gaussian Transforms turn transformation uniform Gaussian distribution many techniques choose Gaussian distribution important Ziggurat Method fastest method software ziggurat method Marsaglia 2000 procedure uses complicated method split Gaussian probability density function axisaligned rectangles designed minimize average cost generating sample However means 2 percent generated numbers complicated route using uniform samples function calls must made software acceptable GPU performance slow route apply threads warp even one thread uses route warp size 32 probability taking slow route 2 percent probability warp taking slow route 1 - 0 02 32 47 percent thread batching assumptions designed ziggurat violated performance advantage destroyed Polar Method Many methods also rely looping behavior similar Ziggurat also usable hardware polar method Press et al 1992 simple relatively efficient probability looping per thread 14 percent leads expected 1 6 iterations per generated sample turning expected 3 1 iterations warp effects taken account Box-Muller Transform GPUs sensitive looping branching turns best choice Gaussian transform actually venerable Box-Muller transform code seen Listing 37-5 takes two uniform samples u0 u1 transforms two Gaussian distributed samples n0 n1 using relations Example 37-5 Box-Muller Transform float2 BoxMuller float u0 HybridTaus u1 HybridTaus float r sqrt -2 log u0 float theta 2 PI u1 return make_float2 r sin theta r cos theta Box-Muller approach largely discarded software particular requires evaluation sine cosine every sample produced However offers number important advantages GPU implementation batched threads obvious branching looping single code path also require table lookups large numbers constants found methods still fairly high computational load fortunately GPUs good straight-line code loaded math addition results suggest high-speed sine cosine functions present GPU offer satisfactory results largely negating performance downsides Box-Muller approach 37 2 4 Wallace Gaussian Generator Wallace Gaussian generator Wallace 1996 Brent 2003 novel method able generate Gaussian samples directly without using uniform generator first central idea take pool k random numbers already Gaussian distributed apply transform pool another pool produced also Gaussian transform pool output supply random numbers key requirement make output transform uncorrelated input possible still preserving distribution properties Ideally new pool would produced applying different orthogonal kxk matrix previous pool orthogonal matrix one preserves sum squares pool put another way input pool taken k-dimensional vector orthogonal matrix would preserve Euclidean length vector Common examples orthogonal matrices include identity matrix size-preserving affine transforms reflection rotation However computational problem generating random kxk orthogonal matrix expensive orders magnitude expensive generating k Gaussian-distributed numbers using traditional techniques Instead approach used construct orthogonal transform using lots much smaller orthogonal transforms example using 2x2 orthogonal matrices 2D rotations Applying k 2 2D rotations preserve length overall k vector much cheaper implement drawback degree mixing passes much lower using full kxk matrix value new pool influenced every value old pool 2x2 matrices used value new pool depends two values old pool Two techniques mitigate lack mixing first applies random permutation pool applying blocked transform sufficient number passes element new pool dependent elements previous pool second simply transforms pool multiple times using pool output numbers methods drawbacks full random permutation expensive set performing multiple passes obviously takes time practice combination often used performing small number passes using somewhat random permutation pool pass Figure 37-3 Single Step Wallace Transform Permuting Pool Mapping Wallace algorithm GPU presents number challenges important requirement random permutation must sufficiently random tests found quality permutation key factor producing goodquality random numbers using simple nonrandom permutations produced random numbers failed statistical tests light tests determined producing random permutation much important reducing bank conflicts ignore conflicts designing algorithm critical requirement permutation must exactly permutation pool value read twice pass logically pool value ignored reading stage thread must read d samples pool k samples thus define problem creating random mapping 1 k 1 dx 1 k d Earlier mentioned LCG provides method specifying maximum period generator range 0 m choose m k d use basis high-quality random permutation already unique per-thread value thread id value 0 m take thread id feed mod-m LCG thread still unique identifier ordering changed pseudorandomly Note LCG provides low statistical quality however found context low quality problem Applying LCG would result new mapping thread would still unique identifier range 0 m combination address permutation blockwise orthogonal transformation forms basis transformation process combine individual Wallace transform step loop perform repeated internal transformations part overall visible transformation obtain code Listing 37-6 TransformBlock performs matrix operation data case using Walsh-Hadamard matrix Wallace 1996 Example 37-6 Transforming Wallace Pool Using Defined Number Passes Walsh-Hadamard Matrix Set Values uses defined number passes Walsh-Hadamard matrix set values size block execute matrix varied optimality use registers hence manually unrolled computation void Transform K M binary powers const unsigned K Size pool const unsigned M K D Number threads LCG modulus float block_0 block_1 block_2 block_3 int pass 0 pass POOL_PASSES pass Read pool using pseudorandom permutation unsigned tid M binary power don't need recomputed LCG B M-1 block_0 pool 3 0 B M-1 block_1 pool 3 1 B M-1 block_2 pool 3 2 B M-1 block_3 pool 3 3 pool values must read written __syncthreads Perform in-place 4x4 orthogonal transform block TransformBlock block Output blocks linear order tid pool block_0 NT pool block_1 NT pool block_2 NT pool block_3 NT __device__ void TransformBlock float b float b 0 b 1 b 2 b 3 2 b 0 b 0 -t b 1 b 1 -t b 2 t-b 2 b 3 t-b 3 Initializing Pool Initialization random number pool necessarily separate process Wallace generator hence requires separate random number generator initialization performed CPU example using ziggurat method concert Mersenne twister Although generator fast GPU-based Wallace generator needs provide seed values Wallace pools threads start executing require seed values fact software take advantage generating next set seed values GPU threads work previous set seed values Wallace approach random number generation conveys two main advantages approaches Direct generation normally distributed values state pool operated fully parallel allowing high utilization processor-local shared memory resources 37 2 5 Integrating Wallace Gaussian Generator Simulation Listing 37-7 demonstrates Wallace transform combined code perform repeated passes output multiple random numbers per execution global memory course problem replace global memory output use values within simulation generated multiple random numbers thread entire matrix size minimum use repeatedly within transform taking appropriate pool value shared memory needed Example 37-7 Using Wallace Generator Output Memory Note array chi2 correction values required maintain statistical properties output data small performance improvement obtained moving data constant memory around 5 percent case thanks caching Constant memory limited size hence care must taken adjustment __device__ void generateRandomNumbers_wallace unsigned seed Initialization seed float chi2Corrections Set correction values float globalPool Input random number pool float output Output random numbers unsigned tid threadIdx x Load global pool shared memory unsigned offset __mul24 POOL_SIZE blockIdx x int 0 4 pool tid THREADS globalPool offset TOTAL_THREADS tid __syncthreads const unsigned lcg_a 241 const unsigned lcg_c 59 const unsigned lcg_m 256 const unsigned mod_mask lcg_m-1 seed seed tid mod_mask Loop generating outputs repeatedly int loop 0 loop OUTPUTS_PER_RUN loop Transform unsigned intermediate_address i_a __mul24 loop 8 TOTAL_THREADS 8 THREADS blockIdx x threadIdx x float chi2CorrAndScale chi2Corrections blockIdx x OUTPUTS_PER_RUN loop 0 4 output i_a THREADS chi2CorrAndScale pool tid THREADS integrating Wallace simulation begin see limitations simulation requires large amount shared memory Wallace method might inappropriate integration also shared memory requirement course still output global memory simulation read data discussed earlier performance likely lower also see limits number registers use larger computation complexity combining Wallace transform simulation loops increases register requirement Reducing number threads operating one solution problem computation arithmetic heavy integrated Wallace generator lower number threads need severe performance limitation benefits integration outweighing problems low thread count 37 3 Example Applications evaluate ideas previous section look two different Monte Carlo simulation kernels used valuing options different computational particular storage characteristics goal algorithms attempt place price option simply contract one party may choose exercise example contract may say two months' time party option buy 1 share stock 50 00 party B would call 50 00 strike price option stock underlying thing option based contract obviously nonnegative monetary value party two months' time stock trading 50 00 exercise option buying stock B cheaper price immediately selling open market trading less 50 00 chooses exercise option makes profit loss problem party B place price contract B sells option party taking account possible outcomes contract common model stocks log-normal random walk assumes percentage change stock's price follows Gaussian distribution preserves two important characteristics stocks prices never negative magnitude stock price fluctuations proportional magnitude stock price model party B estimate probability distribution price stock try estimate B's expected loss option expected loss dictates price B sell option simple options priced number ways closed-form Black-Scholes pricing formula finite-difference methods binomial trees Monte Carlo simulation Monte Carlo pricing simulation expected loss estimated generating thousands different potential prices two months' time using random samples log-normal distribution average loss potential stock prices used price option See Wilmott 2006 technical details underlying theory GPU-based implementation option pricing see Colb Pharr 2005 However also exist much complex options simple calls options buy puts options sell often called exotic options may specify complex payoff function multiple underlyings constructed party hedge specific set market circumstances party B sell one-off contract often impossible find kind closed-form solution option price multiasset nature contract makes tree finite-difference methods impractical leaves Monte Carlo simulation viable choice pricing many exotic options 37 3 1 Asian Option first application Asian option Wilmott 2006 maximum basket two underlyings Asian option uses average price underlying determine final strike price price depends underlying price ends path took get case considering option maximum two underlyings following log-normal random walk known correlation structure Note ignore details discounting concentrate computation initial state basket 0 0 b 0 assets basket known correlation structure 2x2 matrix covariances describes tendency movements one asset reflected movements another asset example stock price XXX highly correlated YYY one increases value also likely vice versa correlation structure reduced three constants sa sb b sa b addition two constants ma mb allow trend growth evolution assets proceeds follows option payoff P defined following equation Figure 37-4 displays example behavior correlated assets Listing 37-8 provides code single path Asian basket simulation Figure 37-4 Example One Run Asian Basket Simulation Example 37-8 Code Single Path Asian Basket Simulation __device__ float AsianBasket unsigned float A_0 float B_0 float MU_A float SIG_AA float MU_B float SIG_AB float SIG_BB float A_0 b B_0 0 sum 0 unsigned 0 float ra RNORM float rb RNORM exp MU_A ra SIG_AA b exp MU_B ra SIG_AB rb SIG_BB max b sum return max sum T-s 0 37 3 2 Variant Lookback Option second application variant lookback option Wilmott 2006 special features Specifically payoff determined sum positive differences asset price time step final asset price thought drawing horizontal line across asset path terminal price using area line path payoff Thus 0 sT path asset payoff P following option requires entire evolution path stored payoff determined final price known also use complex type asset price model option called GARCH model model incorporates idea time-varying volatility basically idea size asset movement depends part size recent movement often seen large change stock price followed another large change stable periods size change lower asset path modeled follows Figure 37-5 demonstrates movement relevant asset values Listing 37-9 provides code single path lookback option simulation used practice single-path functions shown Listings 37-8 37-9 called repeatedly results set different simulation paths combined mean variance results shown Listing 37-10 Figure 37-5 Movement Asset Example 37-9 Code Single Path Lookback Option Simulation MAX_T WARP_SIZE 0 const unsigned MAX_T __device__ float LookbackDiff unsigned float VOL_0 float EPS_0 float A_0 float A_1 float A_2 float MU __shared__ float path NUM_THREADS MAX_T float vol VOL_0 eps EPS_0 float S0 int base __mul24 tid MAX_T -NUM_THREADS Choose random asset path unsigned 0 Store current asset price base base NUM_THREADS path base Calculate next asset price vol sqrt A_0 A_1 vol vol A_2 eps eps eps RNORM vol exp MU eps Look back path find payoff float sum 0 unsigned 0 base base-NUM_THREADS sum max path base -s 0 return sum Example 37-10 Making Use Individual Simulation Kernels Results kernel runs combined mean variance results returned left parameters SimKernel vague generalize two kernels described Listings 37-8 37-9 Extract thread-specific seed array seeds __device__ void InitRNORM seeds Produce random number thread's stream based whichever generator using __device__ float RNORM Execute simulation kernel using calls RNORM __device__ float SimKernel parameters __global__ float2 MonteCarloThread seed parameters InitRNORM seeds float mean 0 varAcc 0 float 1 PATHS_PER_SIM Simulate one path float res SimKernel parameters update mean variance numerically stable way float delta res-mean mean delta varAcc delta res-mean float variance PATHS_PER_SIM-1 return make_float2 mean variance 37 3 3 Results implemented hybrid Tausworthe RNG Box-Muller Wallace Gaussian RNG CUDA show raw RNG performance results first column labeled Raw RNG Table 37-1 results measured millions Gaussian samples produced across entire GPU every second MSamples Wallace generator provides 5 billion samples per second achieving rate 1 2 times hybrid Tausworthe generator However Wallace transform also uses large amount shared memory store pool case 2 048 words leaves 2 048 words available used within simulation code cases simulations require shared memory slower Tausworthe generator must used Table 37-1 Performance Results Discussed Random Number Generators Simulations Constant RNG row represents case real random numbers produced values taken directly variables simulation code optimized away Raw RNG column denotes random number executing isolation directly memory simulation driven Raw RNG MSamples Asian MSteps Lookback MSteps GPU Tausworthe plus Box-Muller 4 327 1 769 1 147 Wallace 5 274 1 877 Constant RNG 5 177 2 908 Quad Opteron Ziggurat plus Mersenne Twister 206 32 50 Constant RNG 44 64 Speedup 26 59 23 Also included table performance results four processors 2 2 GHz Quad Opteron using combination Mersenne twister uniform generator Ziggurat transform GPU-based Wallace generator provides speedup 26 times quad-CPU machine measures raw RNG speed also important able something random numbers Columns two three Table 37-1 show performance simulations two exotic options presented previous section well two GPU one GPU based mentioned earlier two rows included labeled Constant RNG cases random number generator removed taking care ensure rest simulation code optimized thus giving idea ratio time spent generating random numbers time spent using performance figures reported MSteps measure number simulation time steps processed per second example Asian option step corresponds one iteration inner loop Listing 37-8 measuring performance Asian option simulation executed 256 time steps 256 threads per block completing one block per second would provide 65 KSteps lookback case number time steps limited amount shared memory dedicated thread used 512 threads per block thus lookback option limited 8 time steps per simulation Asian case see Wallace generator provides modest improvement 1 06 times compared Tausworthe Box-Muller generators relative slowdown appears due interactions Wallace code simulation kernel code possibly due register allocation conflicts Even performance 59 times software implementation lookback case Wallace cannot used shared memory needed simulation kernel performance much lower Asian option Interestingly software implementation exhibits opposite performance lookback significantly faster Asian However 23 times improvement speed seen using GPU rather CPU-based solution 37 4 Conclusion Modern GPU hardware highly capable use financial simulation chapter discussed approaches generating random numbers kinds simulation Wallace's method provides good performance maintaining high quality random numbers shown statistical analysis Due resource limitations tradeoffs necessary Wallace approach appropriate method use situations trade offs manageable situations use CUDA GPU hardware financial simulation viable option future 37 5 References Brent Richard P 2003 Comments C Wallace's Random Number Generators Computer Journal Colb C M Pharr 2005 Options Pricing GPU GPU Gems 2 edited Matt Pharr pp 719 731 Addison-Wesley Knuth D 1969 Art Computer Programming Volume 2 Seminumerical Algorithms Addison-Wesley L'Ecuyer P 1996 Maximally Equidistributed Combined Tausworthe Generators Mathematics Computation L'Ecuyer P 1999 Tables Maximally Equidistributed Combined LFSR Generators Mathematics Computation L'Ecuyer P 2006 TestU01 C Library Empirical Testing Random Number Generators ACM Transactions Mathematical Software Marsaglia George 1995 Diehard Battery Tests Randomness http www stat fsu edu pub diehard Marsaglia George 2000 Ziggurat Method Generating Random Variables Journal Statistical Software Matsumoto M Nishimura 1998 Mersenne Twister 623-Dimensionally Equidistributed Uniform Pseudorandom Number Generator ACM Transactions Modeling Computer Simulation Metropolis N 1987 Beginning Monte Carlo Method Los Alamos Science NVIDIA Corporation 2007 NVIDIA CUDA Compute Unified Device Architecture Programming Guide Version 0 8 1 Press W H Teukolsky W Vetterling B P Flannery 1992 Numerical Recipes C Second edition Cambridge University Press Sussman M W Crutchfield M Papakipos 2006 Pseudorandom Number Generation GPU Graphics Hardware Wallace C 1996 Fast Pseudorandom Generators Normal Exponential Variates ACM Transactions Mathematical Software Wilmott P 2006 Paul Wilmott Quantitative Finance Wiley Developer Site Homepage Developer News Homepage Developer Login Become aRegistered Developer Developer Tools Documentation DirectX OpenGL GPU Computing Handheld Events Calendar Newsletter Sign-Up Drivers Jobs 1 Contact Legal Information Site Feedback Foreword Preface Contributors Copyright Part Geometry Chapter 1 Generating Complex Procedural Terrains Using GPU Chapter 2 Animated Crowd Rendering Chapter 3 DirectX 10 Blend Shapes Breaking Limits Chapter 4 Next-Generation SpeedTree Rendering Chapter 5 Generic Adaptive Mesh Refinement Chapter 6 GPU-Generated Procedural Wind Animations Trees Chapter 7 Point-Based Visualization Metaballs GPU Part II Light Shadows Chapter 8 Summed-Area Variance Shadow Maps Chapter 9 Interactive Cinematic Relighting Global Illumination Chapter 10 Parallel-Split Shadow Maps Programmable GPUs Chapter 11 Efficient Robust Shadow Volumes Using Hierarchical Occlusion Culling Geometry Shaders Chapter 12 High-Quality Ambient Occlusion Chapter 13 Volumetric Light Scattering Post-Process Part III Rendering Chapter 14 Advanced Techniques Realistic Real-Time Skin Rendering Chapter 15 Playable Universal Capture Chapter 16 Vegetation Procedural Animation Shading Crysis Chapter 17 Robust Multiple Specular Reflections Refractions Chapter 18 Relaxed Cone Stepping Relief Mapping Chapter 19 Deferred Shading Tabula Rasa Chapter 20 GPU-Based Importance Sampling Part IV Image Effects Chapter 21 True Impostors Chapter 22 Baking Normal Maps GPU Chapter 23 High-Speed Off-Screen Particles Chapter 24 Importance Linear Chapter 25 Rendering Vector Art GPU Chapter 26 Object Detection Color Using GPU Real-Time Video Image Processing Chapter 27 Motion Blur Post-Processing Effect Chapter 28 Practical Post-Process Depth Field Part V Physics Simulation Chapter 29 Real-Time Rigid Body Simulation GPUs Chapter 30 Real-Time Simulation Rendering 3D Fluids Chapter 31 Fast N-Body Simulation CUDA Chapter 32 Broad-Phase Collision Detection CUDA Chapter 33 LCP Algorithms Collision Detection Using CUDA Chapter 34 Signed Distance Fields Using Single-Pass GPU Scan Conversion Tetrahedra Chapter 35 Fast Virus Signature Matching GPU Part VI GPU Computing Chapter 36 AES Encryption Decryption GPU Chapter 37 Efficient Random Number Generation Application Using CUDA Chapter 38 Imaging Earth's Subsurface Using CUDA Chapter 39 Parallel Prefix Sum Scan CUDA Chapter 40 Incremental Computation Gaussian Chapter 41 Using Geometry Shader Compact Variable-Length GPU Feedback"),
('Clipboard Hijacking with HTML5', "Wednesday May 20 2015 Clipboard Hijacking HTML5 Today learned Guillermo Rauch Google Chrome 43 shipping desktop mobile ability modify system clipboard awesome evidenced 200 retweets gained developers excited able finally drop dependence Flash feature read HTML5Rocks wish could join celebration since implemented actively prevent clipboard hijacking I'm disappointed instead Clipboard hijacking intentional modification system clipboard content user expected you've ever copied text news article pasted friend find intrusive ad baked you've experienced first hand example five year old Daring Fireball post shown last months ve noticed annoying trend various web sites generally major newspaper magazine sites also certain weblogs Read http daringfireball net 2010 05 tynt_copy_paste_jerks ixzz0oyLiD4Qh flip side another post happened five years ago illustrates developers perceiving clipboard hijacking positive trend One trend I've seen recently use copies content given post copy function Zero Clipboard example appends page title link special message telling recipient view post Here's larger problem autoplaying video sound popups annoying never destructive New amazing features added web platform webcam microphone access location access etc available web site require user permission used Q Chrome screw prompt clipboard access demo created done minutes hidden textarea trick mouseup event incredibly common demo fails work that's good news won't affected tested demo Chromium 42 Google Chrome 43 Mobile Chrome 42 cases browser would allow select copied bogus nonsense clipboard Even worse desktop version Chrome use textarea select actually deselects text making impossible real operating system level copy command even elaborate demo check fork Patrick Kettner example text remains selected meaning user would even less idea clipboard affected I've voiced findings Mozilla Dev Platform Google Group discussing intent implement ship feature hope sway right thing users still need figure let Google Chrome devs know opinion hopefully post reach somehow Please enable JavaScript view comments powered Disqus blog comments powered Disqus"),
('Python on AWS Lambda', "currently viewing post Python AWS Lambda Blog HomeRSS FeedSiteContactPython AWS LambdaSunday March 29 2015AWS LambdaPythonWant use Python AWS Lambda Lambda currently supports JavaScript via Node shouldn stop trying ve experience AWS infrastructure might occur Lambda runtime environment come Python built-in Try anything though ll quickly run headfirst Lambda sandbox example python --version returns empty string get around limitation crafty Python-ness var exec require 'child_process' exec exports handler function event context exec 'python -c import sys print sys version_info ' function error stdout context done error stdout Run command via console ll get Message ------- 2 6 9 'final' 0 Okay looks like Lambda comes Python 2 6 9 up-to-date version world unless enjoy running circles around sandbox limitations writing valid code quickly become drag virtualenv Rescue Thankfully Python got us covered scenario via virtualenv tool creates isolated Python environments easily grab virtualenv pip portable Python seconds pip install virtualenv mkdir lambda-python cd lambda-python virtualenv env create directory called lambda-python env completely bootstrapped Python environment inside run env bin python ll see familiar REPL ve come know love point could write old python hello world code dump file exec Node done kind boring d like extract hello world HTML file -- Save file called index html -- html head head body span id python Hello world Python span body html accomplish ll need help non-standard Python library namely Beautiful Soup Go ahead install env bin pip install beautifulsoup4 notice re using env version pip meaning get installed local environment Nifty write Python extract contents HTML element Save file called test py bs4 import BeautifulSoup def main open 'index html' 'r' f soup BeautifulSoup f read print soup find id 'python' text __name__ '__main__' main Alright call Python code Node Save file called index js var exec require 'child_process' exec exports handler function event context child exec 'env bin python test py' function error context done error child stdout 'data' function data console log data child stderr 'data' function data console error data principle previous example re bit heavy lifting handle asynchronous output child process streams Otherwise d get output process terminated isn ideal experience Note setup provides message upon successful completion instead redirects Python output console log redirected CloudWatch may wish consider alternative approach writing output Kinesis stream handled number AWS services point could zip lambda-python directory deploy make things tad bit easier Shameless Plug Make one final file called lambda yml following contents config FunctionName lambda-python Handler index handler Mode event Runtime nodejs Description Python hello world Lambda assuming AWS credentials Lambda execution role configured correctly aws directory use lfm deploy brand-spanking-new Lambda function measly 10 characters lfm deploy might take re essentially deploying entire programming language machine 17 MB total function deployed hop console invoke Logs ---- START RequestId f2fe1573-d66b-11e4-b299-e33b360b7f5a 2015-03-29T23 33 08 910Z f2fe1573-d66b-11e4-b299-e33b360b7f5a Hello world Python END RequestId f2fe1573-d66b-11e4-b299-e33b360b7f5a REPORT RequestId f2fe1573-d66b-11e4-b299-e33b360b7f5a Duration 1779 45 ms Billed Duration 1800 ms Memory Size 128 MB Max Memory Used 15 MB Message ------- undefined Sweeeeet quick recap case ve forgotten parsed HTML document Python executed Node invoked AWS Lambda efficient cloud solutions say Hopefully ve seen Node thing supported Lambda right really need get crazy cloud provided think outside box another example using languages within Lambda see blog post embedding Go runtime Lambda function written days Lambda launched Bonus Round Okay re able run Python code cloud something still bothering Suppose moment friend named Bob actually friend named Bob digress writing awesome new Python cloud function print hello world via unnecessary number abstractions want share awesomeness tell Hey Bob yeah follow steps blog post deploy function re good go Nope Bob busy man got job junk Okay round two Hey Bob m emailing zip cloud function Deploy ve got time Uh huh 90 called want deployment process back Nope ve got make Bob goes zero hero minimal effort re going need write Makefile VERSION 12 0 5 VIRTUALENV env PYTHON python wget https pypi python org packages source v virtualenv virtualenv- VERSION tar gz tar xzf virtualenv- VERSION tar gz PYTHON virtualenv- VERSION virtualenv py VIRTUALENV rm -rf virtualenv- VERSION rm virtualenv- VERSION tar gz VIRTUALENV bin pip install beautifulsoup4 vomit make-y goodness bootstraps virtualenv locally without using sudo requirement user Python installed pretty reasonable assumption make Finally tweak lambda yml file add single line install make config FunctionName lambda-python Handler index handler Mode event Runtime nodejs Description Python hello world Lambda install make ve uploaded entire contents lambda-python Gist perusal Incidentally means also give Bob solution looking Yeah Bob go ahead lfm deploy gist willyg302 c09048aeff3ae48ddcf2 feel like enjoy TweetCommentsPlease enable JavaScript view comments powered Disqus comments powered Disqus"),
('Google systems guru explains why containers are the future of computing', 'Sign Sign upDerrick Harris May 1514 minNext storyNext storyThe author chose make story unlisted means people link see sure want share Yes show sharing optionsGoogle systems guru explains containers future computing Share Twitter Share FacebookGoogle Vice President Infrastructure Eric Brewer Source University California BerkeleyGoogle systems guru explains containers future computingAs professor University California Berkeley Eric Brewer devised CAP theorem governing concept design distributed systems co-founded web-search pioneer Inktomi interview Brewer vice president infrastructure Google explains work application containers could least big cloud computing CAP theorem holding nearly two decades inception Google currently driving open source project called Kubernetes simplifies process building applications atop clusters containers including using popular Docker format containers SCALE role Google speculation lot real public discussion Eric Brewer working stuff related Kubernetes containers project care lot certainly pushing Google direction actually exciting relationship containers prior Google original work clusters led Inktomi predates virtual machines least modern reincarnation virtual machines consequence true Google started 1998 roughly age modern version virtual machines notion virtual machines building services built raw hardware Inktomi also early Google ended using essentially Unix process model everything terms processes running many processes piece hardware fact Google didn use virtual machines really started corporate stuff wanted run third-party things internal stuff never used VMs number people contributing commenting Kubernetes actually frankly little much manage parallel course whole IaaS revolution happened built virtual machines sense open source world build virtual machines basis lot tooling management based around operate manage virtual machines sense container work Kubernetes return back original way higher level abstraction fact happened within Google people using Linux containers try get performance isolation different jobs running machine kind containers fundamental way Google operates really squint real reason Inktomi Google predated widespread use virtual machines wasn even tool toolbox kind sounds like talk around utility computing early 2000s revisited idea getting rid server unit measurement certainly view starting around 97 talked general topic still believe re kind getting sense Kubernetes architecture Source GoogleSo surprised popular Kubernetes become already ll admit thought would successful planned around successful time number people contributing commenting frankly little much manage much excitement hardly handle pull requests think re committing based GitHub log something like 40 per day right demand higher takes reviews course wide variety quality easy review quite hard review success problem re happy scale team try improve velocity also improve ability interact open source world legitimately wants contribute lot contribute m excited velocity moving fast hard even know things change day day relationship Kubernetes Borg Omega two internal resource-orchestration systems Google built would say kind definition shared code shared people think Kubernetes especially elements around pods labels lessons learned Borg Omega frankly significantly better Kubernetes things going end Borg like way use IP addresses similar things like labels actually much better internally would say lesson learned hard way main goal get developers thinking applications collection services really think resources quite directly developers datacentersFrom developer perspective advantage deploying applications types systems lot advantages role Kubernetes really plays little bit longer-term view application initial value containers really run laptop deploy thing cloud great thing Docker particularly great job Kubernetes answers question run fleet containers controlled way upgrade controlled way send traffic scale service terms number containers included running increase capacity load goes kind operational things really think important contribution Kubernetes m curious see evolution distributed systems past couple decades given ve seen hugely popular technologies Hadoop NoSQL emerge re also getting back idea shared resource management think people virtual machines baseline resource worked around constraint terrible constraint especially small service although small constraint services terrible limitation interfere things like utilization way capacity planning think bigger issue developer really want think details OS security patching right instance size things really ought able handle Spend time focusing actual meat application would say actual revolution re middle sounds like see development revolution infrastructure revolution go hand hand main goal actually get developers thinking applications collection services really think resources quite directly certainly manage directly deal installs patches things like feel like going end least big change ability use server cloud timing result much cloud computing empowered developers expect better experiences tools companies began small cloud-based startups like Pinterest Airbnb running scale problems companies like Google years ago think things going Like look Snapchat actually run Google App Engine problems actually solved entire existence App Engine worry OS patches machine boundaries fact Snapchat says doesn actually operations people use Google operations remarkable statement given size kind d like developers App Engine isn flexible enough things people want Whereas container model essentially gives flexibility virtual machines lot usability something like App Engine much automate approach great developers limited flexibility reason App Engine early PaaS offerings didn take like people expected would think took niches well suited App Engine took websites Heroku took things Salesforce Engine Yard quite good want Ruby Rails none fully general tried make App Engine general time managed VMs really feel like correct generalization App Engine fact containers issue whether add goodness App Engine container world time think trivial general things need go end result mass adoption containers consumer perspective services like Google Facebook handle huge numbers users without going think end result essentially higher velocity entire industry consumers means choice services interesting things arriving every day Many NoSQL projects used CAP theorem justify make decisions make sometimes correctly sometimes incorrectly CAP theorem almost two decades laterAside work Kubernetes re actually probably best known formulating CAP theorem explain briefly CAP theorem says three properties want get two surprising negative result three properties people would like system consistent meaning servers participating system agree values data Like bank account every server agree bank account value second property availability system available take interactions users third value property tolerance partitions network going servers re partitioned two groups turns risk extremely possible internet consistency availability choose said 2000 really meant roughly databases choosing consistency valued bank account agreed upon internet services choosing availability Inktomi included making choices forfeited consistency occasion order system could time bothered little eventually realized fundamental tradeoff anyone wants highly available distributed system make compromises consistency first well received implies people build databases promise time even though make promise means want actually work pretty hard even get good compromises cake lie Source Flickr John AslundThat thinking 2000 views changed since people board need couple things happened One entire NoSQL movement degree exploring availability side space Many NoSQL projects used CAP theorem justify make decisions make sometimes correctly sometimes incorrectly think vast exploration occurred last decade kinds different data-management systems actually healthy Everything Bigtable Cassandra Dynamo lots projects exploring manage data really good Lots things learned process re stage people agree whole space valuable re looking fine-tuning tradeoffs want make different situations think healthy sounds like general improvement 2 5 3 example try really hard still two-of-three tradeoff need make tradeoff re actually partitioned isn often time need figure want partition occurs want recover easy complicated think exactly kind thing architects thinking example ATM sometimes disconnected bank question give money gives money available may inconsistent case meaning actually money bank account giving money anyway actual answer real life turns ATMs choose available corresponds revenue give money even re disconnected limit say 200 first withdrawal could second one would decline kind risk management hiding inconsistency pretty good choice actually allow things inconsistent find ways compensate mistakes versus trying prevent mistakes altogether matter outside certain industries data isn always consistent seems like consumer websites example people wouldn notice think people actually practice ll let inconsistent things happen ll make sure detect fact auditing example common error order something might get ordered twice might forget canceled send something accidentally pretty easy compensate take back general answer allow things inconsistent find ways compensate mistakes versus trying prevent mistakes altogether fact financial system actually based consistency based auditing compensation didn know anything CAP theorem decision made figuring wanted actually think right decision implications re building new applications lose lot sleep re trying build next Facebook next Twitter lose sleep good know consequences re partitioned common one maybe messages unavailable maybe partial unavailability Occasionally ll send messages twice inconsistent status different people know consequences usually re short-term re bad bad lot systems lose data partitions haven thought issues think way build applications going really change actually quite easy 10 micro-services application could use theory even 10 different languages golden era developersIf m developer first startup everything developer-friendly abstractions tools really need solid understanding computer science build viable product way think people need lot computer science first version pick something simple might sometimes probably OK eventually write second time re scaling worry lot user traffic need think things actually affect performance affect revenue affecting availability Let take Kubernetes example much something like affect decisions processes scale becomes issue would say doesn solve fundamental problems think leverage beneficial work others Like Kubernetes re using etcd manage certain amount data needs consistent etcd done work manage tradeoffs pretty well get partition within Kubernetes yes weird situations kind unlikely Kubernetes typically running nodes datacenter matters want application spanning datacenters re likely get disconnected think things bit often postpone issue later evolution company product think end result essentially higher velocity entire industry consumers means choice services interesting things arriving every day generally Google companies built open sourced lot technologies years point seems avoid lot engineering using systems Bigtable good example Bigtable built Google long time ago decade point built Google needed systems could manage kind data actually interesting tradeoffs consistency availability re right people needed Bigtable paper published whole bunch open source versions got built around help community recently use Bigtable actual Bigtable actually underpins Google Cloud Bigtable service look decade happening today play terms applications systems built think way build applications going really change reason say get view application composed micro-services people building software start building micro-services rather building libraries Right take open source project actually quite bit work get work systems integrate technologies abstract away actual machine detail focus APIs code one big advantages way APIs work use different languages different services actually quite easy 10 micro-services application could use theory even 10 different languages big benefit trying glue together lots existing pieces holistic system kind system going become common lot easier move toward service-centric view software another evolution transition mainframe client-server cloud something bigger different hard know early feel like going end least big change ability use server cloud RecommendRecommendedBookmarkBookmarkedShareMoreFollowFollowing C L EBehind every great technology great technologyBlockedUnblockFollowFollowingDerrick HarrisSenior research analyst Mesosphere one-time senior writer Gigaom J D thai boxerPublished May 15 rights reserved author'),
('Lessons learned while fixing memory leaks in our first Unity title', "Rich Geldreich's Tech Blog Game open source developer graphics programmer lossless data texture compression specialist recovering OpenGL addict Worked previously Valve Microsoft Digital Illusions Thursday May 21 2015 Lessons learned fixing memory leaks first Unity title several man months tool making instrumenting compiling custom Mono DLL crawling 5k-30k node heap allocation graphs gephi first Unity title Dungeon Boss iOS Android longer leaking significant amounts Mono heap memory Last year uptime 512MB iOS devices 15-20 minutes it's hours easy construct complex systems C degenerate continually increasing memory behavior time even though everything else seems fine label systems leaking although don't actually leak memory C C sense takes single accidental strong reference somewhere mistakenly leak huge amounts objects time daunting task even original authors discover fix large system written garbage collected language doesn't leak Here's brain dump learned painful process figuring - Monitor Unity app's memory usage early possible development Mobile devices pretty harsh memory restrictions see get idea iOS sure test real devices early often prepared serious pain develop test Unity editor months end - iOS app receive low memory warnings system comes memory pressure Note iOS chatty issuing warnings helpful log warnings game's server along amount used client memory help post-mortem analysis app randomly dying field - unofficial low end iOS devices iPhone 4 4s iPad Mini 1st gen 512MB devices total allocated memory according XCode's Memory Monitor exceeds approx 200MB sustained periods time it'll eventually ruthlessly terminated kernel Ideally don't use 150-170MB devices - Unity Mono C heap managed Boehm garbage collector basically C C -style heap garbage collector bolted top Allocating memory cheap system version Mono Unity uses pretty dated you've using Microsoft NET runtime C development consider horribly spoiled Treat C heap like precious resource study C C programmers avoid constantly allocating freeing blocks using custom object pools Avoid using heap preferring C struct's vs classes avoid boxing use StringBuilder messing strings etc - complex systems written C careful use weak references containers weak references extremely useful avoid creating endless chains strong object references switch several systems strong weak references key places make stable discovering systems change tricky - Determine front exact lifetime objects exactly objects longer referenced system Don't assume garbage collector automagically take care things - Boehm collector's OS memory footprint stabilizes increases time far tell means careful allocating large temporary buffers objects Mono heap could unnecessarily bump Mono's memory footprint decrease amount memory headroom app iOS Basically Mono grabs OS memory greedily holds onto end time memory can't used things textures Unity C C heap etc - careful using Unity's WWW class download large archives bundles class may store downloaded data mono heap actually serious problem us download compressed Unity asset bundles user's first game session class causing app's mono memory footprint increased 30-40MB seriously reduced app's memory headroom user's first session free play game pretty critical get right - Boehm collector grows OS memory allocation enough internal heap headroom avoid collecting frequently must factor headroom account budgeting C memory e budget calls 25MB C memory actual amount memory consumed OS level significantly larger approximately 40-50MB experience - It's possible force Boehm collector used Unity never allocate set amount OS memory see calling GC_set_max_heap_size early app initialization Note C heap leaks app eventually abort heap full may possible call API time carefully bump app's Mono heap size needed haven't tried yet - app leaks can't figure fix leaks alternative solution may temporarily acceptable relentlessly free much memory possible optimizing assets switching PVRTC 4bpp 2bbp lowering sound music bitrates etc give app memory headroom needs run reasonable period time OS kills user play 20 levels per hour leak 1MB per level you'll need find 20MB memory somewhere run one hour etc far simpler optimize textures track memory leaks large C codebases - Design code avoid creating tons temporary objects trigger frequent collections One menu dialogs accidently triggering collection every 2-4 frames iOS crushing performance - used Daikon Forge UI library library several serious memory leaks We'll try submit fixes back author think product less dead email would like fixes - Add debug statistics game along usual FPS display make sure stuff works target devices Current total OS memory allocated see iOS Total Mono heap used reserved retrieve Unity's Profiler class Note class returns 0's non-dev builds Total number GC's far number frames since last GC average frames seconds GC's infer GC occurs monitoring Mono heap's used size every Update - decreases since last Update assume GC occured sometime recently - developer's perspective iOS memory API tool situation ridiculous mess http gamesfromwithin com i-want-my-memory-apple http liam flookes com wp 2012 05 03 finding-ios-memory monitoring app's memory consumption iOS observe make sense statistics XCode's Memory Monitor Instruments Mach kernel API's Unity difficult make sense crap end day trusted Unity's statistics understood exactly statistics computed - Instrument game's key classes track live objects present system one time display information somewhere easily visible developers running device Increment global static counter object's constructor decrement C destructor method automatically called object's memory actually reclaimed GC - iOS don't shy using PVRTC 2bpp textures look surprisingly good vs 4bpp format save large amount memory wound using 2bpp textures except effects UI sprites - built-in Unity memory profiler works pretty well iOS USB It's useful tracking narly C scripting leaks invaluable tracking asset problems - Here's app's current memory usage iOS late last week data Unity's built-in iOS memory profiler - Remember leaks C code propagate downstream cause apparent leaks Unity C C heap asset leaks - helpful mentally model mono heap complex directed graph nodes individual allocations edges strong references Anything directly indirectly referenced static root either global stack etc won't collected large system many leaks try waste time fixing references leaf nodes graph Attack problem high near roots possibly hand large amount time pressure get fix right easier fix worst leaks terms bytes leaked per level whatever selectively null'ing key references leafier parts graph know shouldn't growing levels wrote custom tools help us determine worst offenders spend time sorted function allocation occurred Fixing leaks buy enough time properly fix problem Posted Rich Geldreich 9 58 PM Email ThisBlogThis Share TwitterShare FacebookShare Pinterest 2 comments SamMay 22 2015 12 48 AMGreat info It's interesting went far building instrumented mono drop Unity use iOS device find Unity profiler generally pretty good sometimes it's obvious memory going it's used greediness comment kind helps explain bit ReplyDeleteRepliesRich GeldreichMay 22 2015 7 12 PMWhen started heap analysis iOS pain various mostly logistical reasons copying huge transaction logs phones development PC's slowing us switched using Unity Windows standalone build game speed things actually added support Windows standalone builds specifically speed memory analysis Another developer Sean Cooper worked building customizing open source version Mono ships Unity think started switched Windows analysis purposes I'm sure iOS offhand I'll ask DeleteReplyAdd commentLoad Older Post Home Subscribe Post Comments Atom Blog Archive 2015 33 May 6 Lessons learned fixing memory leaks f great github migration LZHAM decompressor optimization ideas Dungeon Boss's current memory footprint iOS Industrial strength Mono memory analysis tools Garbage collected systems must good tools April 1 March 1 February 5 January 20 2014 34 November 1 October 2 June 6 May 3 April 2 March 11 February 5 January 4 2013 6 November 1 October 4 August 1 2012 4 November 1 August 1 July 2 Rich Geldreich Dallas TX United States Back day worked several years Digital Illusions things like first shipping deferred shaded game Shrek - 2001 software renderers game AI working Microsoft Ensemble Studios 5 years engine lead Halo Wars took year create crunch advanced DXTc texture compression library worked 5 years Valve contributed Portal 2 Dota 2 CS GO Linux versions Valve's Source1 games one original developers Steam Linux team worked somewhat enigmatic multi-billionare proving OpenGL could still hold vs Direct3D also started vogl Valve's OpenGL debugger project scratch worked year spare time work various open source lossless texture compression projects crunch LZHAM miniz jpeg-compressor picojpeg View complete profile Simple template Powered Blogger"),
('Cracking the Vigenere Cipher', "Skip content Netmasked Security Privacy open primary menu Mask online life continual removal online privacy makes furious aren't sure stop feeling Intelligence agencies ad networks companies tracking overwhelming Start retake privacy Learn tools need protect family improve internet Name Email Places seeHome Contact Search Search Recent Posts Cracking Vigenere Cipher Complete Guide Anonymous Surfing Privacy Progress Nothing Hide Innocents harmed Government surveillance Cracking Vigenere Cipher Published Netmask May 21 2015 long time wanted improve cryptography skill set decided work Matasano Crypto challenge challenge broken seven sets first one culminating cracking vigenere cipher breaking sample message Since publishing answers felt would alright discuss code developed solve using Python 3 set structured nicely challenge helps build functions come handy even quite know write One things liked implementing things knew theoretically like using character frequency analysis crack cipher using python often felt frustrated handles bits hex bytes ended writing helper functions top standard python libraries handle format differences make easier move data around left lot helper code brevity stuck core cracking components post re interested seeing full code contact would glad share Guessing Vigenere Key Sizes reading common Vigenere cracking techniques settled problem recommended method using Hamming Distances calculate probable key sizes hamming distance two strings equal number differing bits def hamming_distance s1 s2 calculates hamming distance two strings hamming distance defined number differing bits len s1 len s2 raise ValueError Error hamming distance undefined strings unequal length diff xor toBinary s1 toBinary s2 hamming_distance 0 c diff hamming_distance int c return hamming_distance wasn common way finding key lengths described elsewhere spent time researching history behind based explanations Friedman method also known index coincidence Essentially assume underlying data statistically different information won random like English character frequencies Since vigenere cipher uses repeating key size n know every n bytes encrypted key byte guess bunch key sizes compare block 0 n n 1 2n look one statistically similar key sizes example encrypt something like Welcome Netmasked key ABCDE key length n 5 look first block message Welco second character e encoded key B second block starts character position 6 m character giving block second character block also e resulting cipher byte Thus hamming distance two encoded bytes using key length 5 0 key lengths positive hamming distances byte practice compared multiple blocks default returned likely key sizes def generate_vigenere_key_sizes cyphertext min_size 2 max_size 80 compare_blocks 4 nresults 4 Generate nresults worth likely key sizes based hamming differences key_scores keysize range min_size max_size hdist 0 blocks vigenere_blocks cyphertext keysize compare_blocks b1 b2 itertools combinations blocks 2 hdist crypt_utils hamming_distance b1 b2 key_scores keysize hdist keysize return sorted key_scores key key_scores __getitem__ nresults key sizes go work trying decrypt message Cracking code likely key sizes need couple functions One break ciphertext keysize blocks def vigenere_blocks cyphertext keysize max_blocks None break cypher n keysize blocks max_blocks set returns first max_blocks max_blocks None max_blocks len cyphertext else max_blocks max_blocks keysize return cyphertext l l keysize l range 0 max_blocks keysize one transposes blocks item data encoded key byte def vigenere_transpose blocks returns list blocks encoded key trans list map list itertools zip_longest blocks fillvalue '' return list map '' join trans Finally ready write code put together crack encryption First use functions already written get data setup blocks encrypted key byte def crack_vigenere cyphertext crypt_utils is_hex cyphertext cyphertext crypt_utils toHex cyphertext keysizes generate_vigenere_key_sizes cyphertext options keysize keysizes blocks vigenere_blocks cyphertext keysize try Chunk hex strings 8 bit lengths 2 Hex digits Otherwise transpose would split bytes incorrectly blocks 1 range 0 len 2 blocks except IndexError blocks contain invalid Hex assume solution continue blocks vigenere_transpose blocks single block encrypted single byte key brute force decrypt searching possible single byte keys one best character frequency analysis score selected likely key saved key byte decrypted_message key '' block blocks key_byte message_part search_single_byte_xor_key block decrypted_message append message_part key key_byte message key candidate key length tested code used default 4 possible key lengths look message see one closely matches expected character frequencies decrypted_message vigenere_transpose decrypted_message decrypted_message '' join decrypted_message score score_char_freq decrypted_message try key binascii unhexlify key decode 'ascii' except key cannot converted ascii leave pass options score key decrypted_message Finally return key message closely matched expected character frequencies return options min options completes exercise Notably missing code included frequency analysis code single byte xor cracking code relatively simple write simply checking closely characters string match known character frequencies ll say Matasano team likes cheesy 90 hip hop Improvements code could use improvements didn implement read code may noticed decode things ASCII making work UTF8 would one obvious improvement also catch invalid Hex anything wrote key search function possible find key good hamming distance results invalid byte combinations Modifying use bytes instead hex string length would fix issue isn shown testing character frequencies discard solutions readable characters works challenges set text files encoded decoded would good strategy general Published inEncryption Previous Post Complete Guide Anonymous Surfing Newer Posts Return Blog First Comment Leave Reply Cancel reply email address published Name optional Email optional Website Comment Protect privacy love"),
("'Programming ain't easy'", 'Menu Search Follow Us Facebook Instagram Twitter Youtube Flipboard LinkedIn Google RSS Youtube Flipboard LinkedIn Google RSS Got tip Let us know News Channels Startups Mobile Gadgets Enterprise Social Europe Asia Topics Galleries Video Shows TCTV News Crunch Report CrunchWeek Disrupt NY 2015 Gadgets Fly Die Inside Jobs TC Cribs Shows Videos Events TechCrunch Events Disrupt Startup Battlefield Crunchies Meetups International City Events Hackathon Include News Google O 2014 CES SXSW WWDC 2014 Events Crunchbase Trending Apple Google Pebble News Startups Mobile Gadgets Enterprise Social Europe Search TechCrunch Search TechCrunch Search Search Developer Google Cloud Messaging Adds Support Topics iOS Push Notifications Google Play Store Lets Developers B Test App Listing Pages Customize Catalog Page Android M Able Give Contextual Info Happening Android Apps Browse coding Tynker Startup Teaches Kids Code Works Robots Drones Fuse Raises 2 8M Design-Centric App Development Platform Ozobot Tiny Robots Use Squiggly Lines Google Blockly Teach Kids Code Browse Crunch Network Believe Anyone Tells Learning Code Easy Posted May 24 2014 Kate Ray kraykray 0 SHARES Next Story Hands Microsoft Surface Pro 3 Editor note Kate Ray technical cofounder scroll kit visual webpage creation tool recently acquired WordPress com One dangerous things ve seen happen people starting code told easy brain Drawing better coding drawing programming doesn require special brain frustrating messier anyone lets thousands enthusiastic blog posts classes apps aim entice promise slick unequivocal procedure learning code rarely mention tedium getting environment set trust even nicest programmer friends want help stuff mad frustrating nobody remembers tell lot programming skill developing knack asking right questions Google knowing code best copy-paste let big secret mastery final level anxiety feeling lost stupid something learn conquer something learn live winter decided learn iOS d taught code summer college pretty cocky ability pick new language forgot hard getting resentment Xcode Storyboard thing looks like babies isn real programming launched series projects advanced iOS turns different web development everything expected hard easy everything easy hard impatient annoyed forgot common state programmer sense inadequacy programmer limitless amount stuff learn become specialist one language framework job build things efficiently constantly need learning new tools constantly feel depth helps mentally prepared feeling stupid psychologist Mihaly Csikszentmihalyi came insightful way visualizing learning process discipline Adapted image Flow Psychology Optimal Experience ve found experience follow line closely came Recursive Recipe Learning Program Follow tutorial step-by-step even always understand re like think Hunter Thompson copying books Great Masters typewriter re getting feel things done new language framework part easy boring re re told Incline Optimism Rebuild thing made slight variation Try use tutorial much Realize little understood Fear tugs slowing ascent Try build something simple actually want make Discover absolutely idea re Sea Despair Find new tutorial related new project Hopefully tutorials providing increasing background language Follow steps Slight sense understanding rise self-worth Rebuild thing Fear Start new project Despair Repeat steps 1 6 m big fan tutorials process made app collecting best tutorials recommended programmers ve used Hopefully shorten stumbling-around period get groove learning help find good stuff faster long learn grind frustration ll come hillsides get good view progress okay understanding everything trust getting better even see progress rush Good luck Huge thanks Shuttleworth Foundation whose amazing Flash Grant prompted go path learning new things gave time work Teach Code Cody Brown help post 0 SHARES 0 Share 0 Tweet 0 Share 0 0 0 0 Advertisement Advertisement Newsletters TechCrunch Daily Top headlines delivered daily TC Week-in-Review popular stories delivered Sundays CrunchBase Daily Latest startup fundings delivered daily Enter Address Subscribe Latest Crunch Report Snapchat Making Apple Watch App Crunch Report Watch Episodes coding Developer Popular Posts Next Hands Microsoft Surface Pro 3 Posted May 24 2014 CrunchBoard Job Listings BD manager pay per call Avazu Inc Mobile DSP sales director Avazu Inc Android Engineer Mobee Head Advertisers Relations Avazu Inc Executive Director Avazu Inc CrunchBoard Advertisement TechCrunch News TCTV Events CrunchBase Staff Contact Us Advertise Us Send Us Tip International China Europe Japan Follow TechCrunch Facebook Twitter Google LinkedIn Youtube Pinterest Tumblr Instagram StumbleUpon Feed TechCrunch Apps iOS Android Windows 8 Subscribe TechCrunch Daily Latest headlines delivered daily Subscribe span class no-mobile Subscribe span TechCrunch Daily Enter Email Address Subscribe 2013-2015 AOL Inc rights reserved Aol Tech Privacy Policy Ads Anti Harassment Policy Terms Service Powered WordPress com VIP Fonts'),
('Done Did - Hosted Changelogs for projects and teams.', "Done Features Pricing Contact Sign Tell world you're shipping Sign Team editable Changelogs keeping users know awesome work you've See Ships Get work front users team Make Easy Stop making Changelog hand cobbling together custom code show Let 'Em Know Bring work right users Email Twitter RSS options fingertips drop OilCan reduce friction OilCan 2015 Features Integrations Pricing Work Changelog Stuff Privacy Terms Talk Us Contact Twitter"),
('Effective developer interviews', 'Wilfred Hughes Blog programming language design human factors Effective Developer Interviews 21 May 2015 interview developers effectively get know assess skill level make positive experience ve interviewed 50 people different developer roles ve learnt Side candidate candidate agreed meet unfamiliar people unfamiliar place answer questions want best put ease jump straight questions introduce interviewers chat little Set expectations happen interview especially important phone interviews right thing relaxed candidates smarter fun spend time shouldn two interviewers candidate one point interview two-way process candidates also considering whether want work best candidates often multiple job offers important like role team Avoid Big Bang Questions common interview antipattern look single great interview question all-or-nothing approach leads questions big candidates likely get stuck stress Instead break questions smaller parts Candidates enter interview idea expect Warmup questions set expectations let discuss broader ranger technologies example suppose re interviewing candidates frontend web developer role could start CSS questions Consider following HTML div id article p Lorem ipsum href dolor dolor sit amet p img src cat jpg p Ut enim ad minim veniam p href lorem-ipsum Read div 1 CSS selector article match 2 difference article article 3 Write CSS selector matches first paragraph element div article ID questions incremental also opportunities experienced candidates show-off also add open-ended questions like good HTML see candidates think Topics might discuss include using alt attribute img tags using classes versus IDs HTML 5 article tag re done CSS questions move topics questions gives much flexibility want distinguish strong developers weak one area weak developers Use Standard Questions set interview questions evolve slowly easy conclude questions easy really great candidates vice versa standard set questions standard benchmark measure candidates abilities Seeing multiple candidates answer question also highlight poorly worded questions several occasions ve changed examples questions prevent common misunderstandings aware asking questions repeatedly make seem easy Make sure however humour candidates propose weird novel approaches still see new ways answering old questions easy follow along re familiar problem candidate give bizarre answer take time explore reasoning Stepping code together often worthwhile especially suggest input exposes bug implementation Write Actual Code crucial ask developer candidates actually write code won IDE interview may remember exact arguments obscure standard library functions able write working code Continuing frontend developer example ll want ask JavaScript questions function throttle func waitMs Implement throttle returns function calls original func every waitMs milliseconds even called frequently question also scope broader discussions write variadic functions JS libraries include throttle functionality would test code like shouldn trying catch candidate goal understand deep knowledge different areas Write Feedback Promptly interview important written records went Write notes soon interview specific Good feedback says came conclusion candidate especially helpful interviewers disagree suitability candidate John Doe comfortably managed CSS questions demonstrating knowledge specificity box model pseudo-elements However JS much weaker needed significant help solve first JS question created variable called default syntax error didn know variable hoisting d work well alongside designers think d good fit developer team Final Impressions Finally welcoming supportive make meeting new people Everyone involved leave interview learnt something Adding New Language Emacs Recent Effective Developer Interviews Adding New Language Emacs First LLVM Compiler Taming Wild Elasticsearch Cluster Hubot Smartphone Messaging Meta Posts Feed RSS'),
]